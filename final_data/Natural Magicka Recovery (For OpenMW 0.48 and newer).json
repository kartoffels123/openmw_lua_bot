{
  "folder_name": "Natural Magicka Recovery (For OpenMW 0.48 and newer)",
  "lua_files": {
    "Natural Magicka Recovery-53862-1-0-0-1704697715\\Scripts\\nmr_artifacts.lua": "local self = require('openmw.self')\nlocal types = require('openmw.types')\nlocal storage = require('openmw.storage')\nlocal I = require('openmw.interfaces')\nlocal core = require('openmw.core')\nlocal ui = require('openmw.ui')\nlocal util = require('openmw.util')\nlocal mwui = require('openmw.interfaces').MWUI\nlocal input = require('openmw.input')\nlocal NPC = require('openmw.types').NPC\nlocal async = require('openmw.async')\n\n--Settings\nlocal settings = {\n    base = storage.playerSection('NMRSettingsA'),\n    addons = storage.playerSection('NMRSettingsB'),\n}\n\nlocal artifactMultiplier = 0\nlocal artifactRegenPercent = 0\nlocal artifactFatigue = 0\nlocal artifactAbilTime = 0\nlocal artifactAbilPower = 0\nlocal artifactLowMultiplier = 0\nlocal artifactLowMultiplierThreshold = 0\nlocal artifactInitializerDelay = 0\nlocal checkCounter = 0\n\n--Timers to check equipped artifacts once per x frames\nlocal artifactsCheckTime = 30\nlocal artifactsCheckTimer = 0\n\n--Timers to check artifacts to show notifications\nlocal artifactsPopupTime = 60\nlocal artifactsPopupTimer = 0\n\n-- Artifacts that can speed up magicka regeneration\nlocal artifactMultipliers = {\n    {id = 'staff_magnus_unique', name = 'Staff of Magnus', multiplier = 0.15, maxRegen = 0.10, equipped = false, equippedThisFrame = false},\n    {id = 'steelstaffancestors_ttsa', name = 'Ancestral Wisdom Staff', fatigueMult = 0.15, equipped = false, equippedThisFrame = false},\n    {id = 'ebony_staff_trebonius', name = \"Trebonius' Staff\", lowMultiplier = 0.3, lowMultiplierThreshold = 0.20, maxRegen = -0.10, equipped = false, equippedThisFrame = false},\n    {id = \"ebony wizard's staff\", name = \"Wizard's Staff\", multiplier = 0.10, maxRegen = 0.05, equipped = false, equippedThisFrame = false},\n    {id = 'ebony_staff_tges', name = \"Maryon's Staff\", lowMultiplier = 0.4, lowMultiplierThreshold = 0.10, maxRegen = 0.15, equipped = false, equippedThisFrame = false},\n    {id = 'ring_mentor_unique', name = 'Ring of Mentor', maxRegen = 0.05, equipped = false, equippedThisFrame = false},\n    {id = 'ring_warlock_unique', name = 'Ring of Warlock', multiplier = 0.06, equipped = false, equippedThisFrame = false},\n    {id = 'akatosh ring', name = \"Akatosh's Ring\", fatigueMult = 0.10, equipped = false, equippedThisFrame = false},\n    {id = 'septim ring', name = \"Septim Ring\", fatigueMult = 0.05, equipped = false, equippedThisFrame = false},\n    {id = 'ring_equity_uniq', name = \"Ring of Equity\", maxRegen = 0.05, equipped = false, equippedThisFrame = false},\n    {id = 'necromancers_amulet_uniq', name = 'Amulet of the Necromancer', multiplier = 0.10, equipped = false, equippedThisFrame = false},\n    {id = 'hortatorbelt', name = 'Belt of the Hortator', multiplier = 0.03, equipped = false, equippedThisFrame = false},\n    {id = 'amulet_unity_uniq', name = 'Amulet of Unity', multiplier = 0.08, equipped = false, equippedThisFrame = false},\n    {id = \"exquisite_robe_drake's pride\", name = \"Robe of the Drake's Pride\", equipped = false, multiplier = 0.10, equippedThisFrame = false},\n    {id = \"artifact_amulet of heartthrum\", name = \"Amulet of Heartthrum\", equipped = false, multiplier = 0.08, equippedThisFrame = false},\n}\n\n-- Looking for equipped items\nlocal function hasRecordIdEquipped(actor, recordId)\n    local equipment = types.Actor.equipment(actor)\n    for _, item in pairs(equipment) do\n        if item.recordId == recordId then\n            return true\n        end\n    end\n    return false\nend\n\nlocal function equippedBonusMessage(name, bonuses)\n    local message = name .. ':\\n\\n'\n\n    local bonusCount = 0\n    for bonusType, value in pairs(bonuses) do\n        if bonusType ~= 'lowMultiplierThreshold' and value ~= 0 then\n            local bonusString = ''\n            bonusCount = bonusCount + 1\n            if bonusType == 'multiplier' then\n                bonusString = 'Your Magicka regenerates ' .. value * 100 .. '% faster.'\n            elseif bonusType == 'regenPercent' then\n                bonusString = (value >= 0 and '+' or '') .. value * 100 .. '% to your total regenerable Magicka.'\n            elseif bonusType == 'fatigueMult' then\n                bonusString = 'Your Fatigue penalty to Magicka Regeneration reduced by ' .. value * 100 .. '%.'\n            elseif bonusType == 'abilityTime' then\n                bonusString = 'Divine Resilience ability recovers ' .. value .. ' seconds faster.'\n            elseif bonusType == 'abilityPower' then\n                bonusString = 'Divine Resilience ability multiplier is ' .. value * 100 .. '% higher.'\n            elseif bonusType == 'lowMultiplier' then\n                bonusString = 'Magicka regeneration speed with low Magicka (less than ' .. bonuses.lowMultiplierThreshold * 100 .. '%) is ' .. value * 100 .. '% faster.'\n            -- Add more bonuses as needed\n            end\n\n            if bonusCount > 1 then\n                bonusString = '\\n\\n' .. bonusString\n            end\n            message = message .. bonusString\n        end\n    end\n    ui.showMessage(message)\nend\n\nlocal function artifactsInitializer()\n    for _, artifact in ipairs(artifactMultipliers) do\n        if hasRecordIdEquipped(self, artifact.id) then\n            artifact.equipped = true\n        end\n    end\nend\n\nlocal function getArtifactBonuses()\n    return {\n        multiplier = artifactMultiplier,\n        lowMultiplier = artifactLowMultiplier,\n        regenPercent = artifactRegenPercent,\n        fatigue = artifactFatigue,\n        abilTime = artifactAbilTime,\n        abilPower = artifactAbilPower,\n        lowMultThresh = artifactLowMultiplierThreshold,\n        -- Add more bonuses as needed\n    }\nend\n\nlocal function getArtifactMultiplier()\n    return artifactMultiplier\nend\n\nlocal function calculateArtifactBonuses()\n    artifactMultiplier = 0\n    artifactLowMultiplier = 0\n    artifactRegenPercent = 0\n    artifactFatigue = 0\n    artifactAbilTime = 0\n    artifactAbilPower = 0\n    artifactLowMultiplierThreshold = 0\n    for _, artifact in ipairs(artifactMultipliers) do\n        if hasRecordIdEquipped(self, artifact.id) then\n            artifactMultiplier = artifactMultiplier + (artifact.multiplier or 0)\n            artifactRegenPercent = artifactRegenPercent + (artifact.maxRegen or 0)\n            artifactFatigue = artifactFatigue + (artifact.fatigueMult or 0)\n            artifactAbilTime = artifactAbilTime + (artifact.abilityTime or 0)\n            artifactAbilPower = artifactAbilPower + (artifact.abilityPower or 0)\n            artifactLowMultiplier = artifactLowMultiplier + (artifact.lowMultiplier or 0)\n            artifactLowMultiplierThreshold = artifactLowMultiplierThreshold + (artifact.lowMultiplierThreshold or 0)\n            --print('В функции с артефактами:' .. artifactMultiplier)                  \n        end\n    end\n    return artifactMultiplier, artifactRegenPercent, artifactFatigue, artifactAbilTime, artifactAbilPower, artifactLowMultiplier, artifactLowMultiplierThreshold\n\nend\n\nlocal function onUpdate(dt)\n    --artifactMultiplier = 1\n    if settings.base:get('NMRisActive') then\n        artifactsCheckTimer = artifactsCheckTimer + 1\n            if artifactsCheckTimer > artifactsCheckTime then\n                --print(I.IMRGUILDS.magesGuildBonus())\n                --print(artifactMultiplier)\n                if settings.addons:get('NMRArtMultiplier') then\n                    artifactMultiplier, artifactRegenPercent, artifactFatigue, artifactAbilTime, artifactAbilPower, artifactLowMultiplier, artifactLowMultiplierThreshold = calculateArtifactBonuses()\n                    --print(\"Artifact Multiplier:\", artifactMultiplier)\n                    --print(\"Artifact Regen Percent:\", artifactRegenPercent)\n                    --print(\"Artifact Fatigue:\", artifactFatigue)\n                    --print(\"Artifact Ability Time:\", artifactAbilTime)\n                    --print(\"Artifact Ability Power:\", artifactAbilPower)\n                    --print(\"Artifact Low Multiplier:\", artifactLowMultiplier)\n                    --print(\"Artifact Low Threshold:\", artifactLowMultiplierThreshold)\n                end\n                \n            artifactsCheckTimer = 0\n        end\n    end\nend\n\nlocal function onFrame(dt)\n    if settings.base:get('NMRisActive') then\n    --Initialize equipped artifacts once\n        if artifactInitializerDelay < 1 then\n            artifactsInitializer()\n            artifactInitializerDelay = artifactInitializerDelay + 1\n            return\n        end\n\n        artifactsPopupTimer = artifactsPopupTimer + 1\n        \n        --If an artifact was equipped this check, show message\n        if settings.addons:get('NMRArtMultiplier') and artifactsPopupTimer > artifactsPopupTime then\n            for _, artifact in ipairs(artifactMultipliers) do\n                if not hasRecordIdEquipped(self, artifact.id) then\n                    checkCounter = checkCounter + 1\n                    if checkCounter > 0 and not artifact.equipped then\n                        checkCounter = 0\n                    end\n                    artifact.equipped = false\n                elseif hasRecordIdEquipped(self, artifact.id) then\n                    checkCounter = checkCounter + 1\n                    if checkCounter > 0 and not artifact.equipped then\n                        checkCounter = 0\n                        local bonuses = {\n                            multiplier = (artifact.multiplier or 0),\n                            lowMultiplier = (artifact.lowMultiplier or 0),\n                            lowMultiplierThreshold = (artifact.lowMultiplierThreshold or 0),\n                            regenPercent = (artifact.maxRegen or 0),\n                            fatigueMult = (artifact.fatigueMult or 0),\n                            abilityTime = (artifact.abilityTime or 0),\n                            abilityPower = (artifact.abilityPower or 0),\n                            -- Add more bonuses as needed\n                        }\n                        equippedBonusMessage(artifact.name, bonuses)\n                    end\n                    artifact.equipped = true\n                end\n            end\n            artifactsPopupTimer = 0\n        end\n    end\nend\n\nreturn {\n    engineHandlers = {\n        dt = dt,\n        onUpdate = onUpdate,\n        onFrame = onFrame,\n    },\n    interfaceName = \"NMR_ART\",\n    interface = {\n        getArtifactBonuses = getArtifactBonuses,\n        getArtifactMultiplier = getArtifactMultiplier,\n    },\n    \n}",
    "Natural Magicka Recovery-53862-1-0-0-1704697715\\Scripts\\nmr_main.lua": "local self = require('openmw.self')\nlocal types = require('openmw.types')\nlocal storage = require('openmw.storage')\nlocal I = require('openmw.interfaces')\nlocal core = require('openmw.core')\nlocal ui = require('openmw.ui')\nlocal util = require('openmw.util')\nlocal mwui = require('openmw.interfaces').MWUI\nlocal input = require('openmw.input')\n\n\n\nlocal settings = {\n    base = storage.playerSection('NMRSettingsA'),\n    addons = storage.playerSection('NMRSettingsB'),\n}\n\nlocal tick_time = 0.1\nlocal tick_timer = 0\nlocal statsTime = 2\nlocal statsTimer = 0\n\nlocal current = types.Actor.stats.dynamic.magicka(self).current\nlocal maxMagickaToRegenerate = 0\nlocal regenAmount = 0\n\n\nlocal positiveModifier = 0\nlocal negativeModifier = 1\n\nlocal SECOND = 1\n\n\nreturn {\n    engineHandlers = {\n        -- Calls after the game is loaded\n\n\n        -- Calls every frame except for when world is paused.\n        onUpdate = function(dt)\n\n            --print(types.NPC.record(self).race)\n            if settings.base:get('NMRisActive') then\n                statsTimer = statsTimer + dt\n                tick_timer = tick_timer + dt\n\n                if tick_timer >= tick_time then\n                    tick_timer = 0\n                    current = types.Actor.stats.dynamic.magicka(self).current\n                    maxMagickaToRegenerate = I.NMR_CALC.calculateMax()\n                    regenAmount = I.NMR_CALC.calculateBase(tick_time)\n\n\n                    positiveModifier = I.NMR_CALC.calculatePositives()\n                    negativeModifier = I.NMR_CALC.calculateNegatives()\n\n                    regenAmount = (regenAmount + positiveModifier) * negativeModifier\n                    -- Calculating fatigue modifier\n                    \n\n                    if current < maxMagickaToRegenerate then\n                    local newValue = math.min(current + regenAmount, maxMagickaToRegenerate)\n                    types.Actor.stats.dynamic.magicka(self).current = newValue\n                    end\n                end\n\n                if statsTimer >= statsTime then\n                    statsTimer = 0\n                    print('Regen amount: ' .. regenAmount.. '. Max Magicka to regenerate: ' .. maxMagickaToRegenerate .. '. Positive Modifier: ' ..positiveModifier.. '. Negative Modifier: ' ..negativeModifier.. '.')\n                end\n            end\n        end\n\n}}\n",
    "Natural Magicka Recovery-53862-1-0-0-1704697715\\Scripts\\nmr_mcm.lua": "local storage = require('openmw.storage')\nlocal I = require('openmw.interfaces')\nlocal async = require('openmw.async')\nlocal core = require('openmw.core')\n\nI.Settings.registerPage {\n    key = \"NMRSettingsMain\",\n    l10n = \"NMRSettingsMain\",\n    name = \"Natural Magicka Recovery\",\n    description = \"These settings allow you to modify the behavior of Natural Magicka Recovery.\"\n}\n\nI.Settings.registerGroup({\n    key = 'NMRSettingsA', \n    page = 'NMRSettingsMain',\n    l10n = 'NMRSettingsMain',\n    name = 'Base Settings',\n    permanentStorage = true,\n    settings = {\n        {\n            key = \"NMRisActive\",\n            renderer = \"checkbox\",\n            name = \"Recovery is enabled\",\n            description =\n            \"Uncheck to disable Natural Magicka Recovery and its features.\",\n            default = true\n        },\n        {\n            key = 'NMRbaseRegenTime',\n            name = 'Base Regen Time',\n            description = 'Specifies how fast Magicka regenerates (in seconds) to 100% when Intelligence is 1.',\n            default = 200,\n            renderer = 'number',\n            argument = {\n                min = 1,\n                max = 1000,\n                integer = true,\n            },\n        },\n        {\n            key = 'NMRfastRegenTime',\n            name = 'Min Regen Time',\n            description = 'Specifies how fast Magicka regenerates (in seconds) to 100% when Intelligence is 100. (100 Intelligence is the hard cap for this mod)',\n            default = 120,\n            renderer = 'number',\n            argument = {\n                min = 1,\n                max = 1000,\n                integer = true,\n            },\n        },\n        {\n            key = 'NMRMaxRegenPercentage',\n            name = 'Max Regen Percentage',\n            description = 'Sets the maximum percentage of Magicka regeneration allowed (0-100).',\n            default = 100,\n            renderer = 'number',\n            argument = {\n                min = 0,\n                max = 100,\n                integer = true,\n            },\n        },\n    },\n})\n\nI.Settings.registerGroup({\n    key = 'NMRSettingsB', \n    page = 'NMRSettingsMain',\n    l10n = 'NMRSettingsMain',\n    name = 'Additions',\n    permanentStorage = true,\n    settings = {\n        {\n            key = \"NMRIntRegen\",\n            renderer = \"checkbox\",\n            name = \"Intelligence-powered\",\n            description =\n            \"If checked, Intelligence will control Magicka regeneration. If unchecked, it will be controlled by Willpower.\",\n            default = true\n        },\n        {\n            key = \"NMRFatigueMult\",\n            renderer = \"checkbox\",\n            name = \"Fatigue multiplier\",\n            description =\n            \"If checked, Fatigue will influence Magicka regeneration, up to a modifier of 0.5 at zero Fatigue. Effectively limits your ability to spam spells while running or in combat.\",\n            default = true\n        },\n        {\n            key = \"NMRArtMultiplier\",\n            renderer = \"checkbox\",\n            name = \"Artifacts bonuses\",\n            description =\n            \"If enabled, specific artifacts and unique items will provide additional bonuses to Magicka regeneration.\",\n            default = true\n        },\n    },\n})\n\n\n\nlocal settings = {\n    base = storage.playerSection('NMRSettingsA'),\n    addons = storage.playerSection('NMRSettingsB'),\n}\n\n--variables\nlocal atronachMultiplier = 1\nlocal mcmInitializerDelay = 0\nlocal timeToUpdateSettings = 40\nlocal timeToUpdateTimer = 0\n\nlocal function disableModification()\n    local disabled = not settings.base:get('NMRisActive')\n    I.Settings.updateRendererArgument('NMRSettingsA', 'NMRbaseRegenTime', {disabled = disabled})\n    I.Settings.updateRendererArgument('NMRSettingsA', 'NMRfastRegenTime', {disabled = disabled})\n    I.Settings.updateRendererArgument('NMRSettingsA', 'NMRMaxRegenPercentage', {disabled = disabled})\n\n    I.Settings.updateRendererArgument('NMRSettingsB', 'NMRIntRegen', {disabled = disabled})\n    I.Settings.updateRendererArgument('NMRSettingsB', 'NMRFatigueMult', {disabled = disabled})\n    I.Settings.updateRendererArgument('NMRSettingsB', 'NMRArtMultiplier', {disabled = disabled})\n    \nend\n\ndisableModification()\n\nsettings.base:subscribe(async:callback(disableModification))\n\nlocal function onFrame(dt)\n\n    -- Equipped artifacts initialization on the first frame of onFrame\n    if mcmInitializerDelay < 1 then\n\n        mxRegenTimeLastCheck = settings.base:get('NMRbaseRegenTime')\n        mnRegenTimeLastCheck = settings.base:get('NMRfastRegenTime')        \n        mcmInitializerDelay = mcmInitializerDelay + 1\n        return\n    end\n    if core.isWorldPaused() then\n        timeToUpdateTimer = timeToUpdateTimer + 1\n    end\n\n    if timeToUpdateTimer > timeToUpdateSettings and core.isWorldPaused() then\n        mxRegenTime = settings.base:get('NMRbaseRegenTime')\n        mnRegenTime = settings.base:get('NMRfastRegenTime')\n        if mxRegenTime ~= nil and mnRegenTime ~= nil then\n        if mnRegenTime > mxRegenTime and mxRegenTimeLastCheck ~= mxRegenTime then\n            settings.base:set('NMRbaseRegenTime', mnRegenTime)\n            elseif mnRegenTime > mxRegenTime and mnRegenTimeLastCheck ~= mnRegenTime then\n            settings.base:set('NMRfastRegenTime', mxRegenTime)\n        end\n        mxRegenTimeLastCheck = mxRegenTime\n        mnRegenTimeLastCheck = mnRegenTime\n        timeToUpdateSettings = 0\n        end\n    end\n\nend\n\nreturn {\n    engineHandlers = {\n        dt = dt,\n        onUpdate = onUpdate,\n        onFrame = onFrame,\n        onLoad = onLoad,\n    },\n}",
    "Natural Magicka Recovery-53862-1-0-0-1704697715\\Scripts\\nmr_util.lua": "local self = require('openmw.self')\nlocal types = require('openmw.types')\nlocal storage = require('openmw.storage')\nlocal I = require('openmw.interfaces')\nlocal core = require('openmw.core')\nlocal ui = require('openmw.ui')\nlocal util = require('openmw.util')\nlocal mwui = require('openmw.interfaces').MWUI\nlocal input = require('openmw.input')\n\nlocal regenAmount = 0\nlocal maxRegenerableMagicka = 0\nlocal positiveModifier = 0\nlocal negativeModifier = 1\n\n\nlocal settings = {\n    base = storage.playerSection('NMRSettingsA'),\n    addons = storage.playerSection('NMRSettingsB'),\n}\n\nlocal fatiguePenalties = {\n    { threshold = 20, multiplier = 0.5},\n    { threshold = 40, multiplier = 0.7},\n    { threshold = 60, multiplier = 0.8},\n    { threshold = 80, multiplier = 0.9},\n}\n\nlocal tick_time = 0.1\nlocal tick_timer = 0\n\nlocal SECOND = 1\n\nlocal function calcPositives()\n    return positiveModifier\nend\n\nlocal function calcNegatives()\n    return negativeModifier\nend\n\nlocal function calculateMax()\n    local current = types.Actor.stats.dynamic.magicka(self).current\n    local max = types.Actor.stats.dynamic.magicka(self).base\n\n    local maxRegenPercent = settings.base:get('NMRMaxRegenPercentage')\n    maxRegenPercent = math.min(maxRegenPercent + (I.NMR_ART.getArtifactBonuses().regenPercent * 100), 100)\n    print(maxRegenPercent)\n    local maxRegenAmount = maxRegenPercent / 100\n    maxRegenerableMagicka = max * maxRegenAmount\n    return maxRegenerableMagicka\n\nend\n\nlocal function calculateBase(tick_time)\n    local current = types.Actor.stats.dynamic.magicka(self).current\n    local max = types.Actor.stats.dynamic.magicka(self).base\n    local isIntelligence = settings.addons:get('NMRIntRegen')\n    local regenStat\n\n    -- checking if we should calculate regeneration speed on Intelligence or Willpower based on user setting\n    if settings.addons:get('NMRIntRegen') then\n        regenStat = types.Actor.stats.attributes.intelligence(self).modified\n    else\n        regenStat = types.Actor.stats.attributes.willpower(self).modified\n    end\n\n    if regenStat <= 0 or current >= max or settings.base:get('NMRisActive') == false then\n        --print('Что-то происходит')\n        return\n    end\n\n    local BASE_REGEN_TIME = settings.base:get('NMRbaseRegenTime')\n    --print(BASE_REGEN_TIME)\n    local FAST_REGEN_TIME = settings.base:get('NMRfastRegenTime')\n    --print(FAST_REGEN_TIME)\n\n    local regenTime = ((BASE_REGEN_TIME - FAST_REGEN_TIME) / 99) * (100 - regenStat) + FAST_REGEN_TIME\n\n    if regenTime < FAST_REGEN_TIME then\n        regenTime = FAST_REGEN_TIME\n    end\n\n    if regenTime > BASE_REGEN_TIME then\n        regenTime = BASE_REGEN_TIME\n    end\n    --print(regenTime)\n    local regenPercent = (tick_time / SECOND) / regenTime\n    regenAmount = max * regenPercent\n    return regenAmount\nend\n\nlocal function calculatePositives()\n    positiveModifier = 0\n    local current = types.Actor.stats.dynamic.magicka(self).current\n    local max = types.Actor.stats.dynamic.magicka(self).base\n\n    local artifactThreshold = I.NMR_ART.getArtifactBonuses().lowMultThresh\n    if I.NMR_ART.getArtifactBonuses().lowMultThresh ~= 0 then\n        if current < max * artifactThreshold then\n            local lowMagickaArtMult = I.NMR_ART.getArtifactBonuses().lowMultiplier\n            --print('Получили бонусы для низкой магии: ' ..lowMagickaArtMult)\n            positiveModifier = positiveModifier + lowMagickaArtMult\n        end\n    end\n\n    local artifactMult = I.NMR_ART.getArtifactBonuses().multiplier\n    positiveModifier = positiveModifier + artifactMult\n    --print('Позитивный множитель: ' .. negativeModifier)\n    return positiveModifier\nend\n\nlocal function calculateNegatives()\n    local fatigueMultiplier = 1\n    negativeModifier = 1\n    if settings.addons:get('NMRFatigueMult') then\n        local fatiguePercent = (types.Actor.stats.dynamic.fatigue(self).current / types.Actor.stats.dynamic.fatigue(self).base) * 100\n\n        for _, penalty in ipairs(fatiguePenalties) do\n            if fatiguePercent < penalty.threshold then\n                fatigueMultiplier = penalty.multiplier\n                local artFatigueBonus = I.NMR_ART.getArtifactBonuses().fatigue\n                fatigueMultiplier = fatigueMultiplier + artFatigueBonus\n                break\n            end\n        end\n        \n        fatigueMultiplier = math.min(fatigueMultiplier, 1)\n        --print('Fatigue modifier with arts: ' .. fatigueMultiplier)\n    end\n\n    negativeModifier = negativeModifier * fatigueMultiplier\n    --print('Негативный множитель: ' .. negativeModifier)\n    return negativeModifier\n\nend\n\nreturn {\n    engineHandlers = {\n        onUpdate = onUpdate,\n    },\n    interfaceName = \"NMR_CALC\",\n    interface = {\n        calculatePositives = calculatePositives,\n        calculateNegatives = calculateNegatives,\n        calculateBase = calculateBase,\n        calculateMax = calculateMax,\n    },\n}"
  }
}