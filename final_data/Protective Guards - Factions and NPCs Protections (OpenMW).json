{
  "folder_name": "Protective Guards - Factions and NPCs Protections (OpenMW)",
  "lua_files": {
    "Protective Guards - Factions and NPCs Protections-54858-1-1-1-1718874993\\scripts\\protective_guards_for_omw\\aggressor.lua": "local self = require(\"openmw.self\")\nlocal ai = require(\"openmw.interfaces\").AI\nlocal types = require(\"openmw.types\")\nlocal async = require(\"openmw.async\")\nlocal immuneToGuards = false\n\nlocal core = require(\"openmw.core\")\nlocal nearby = require(\"openmw.nearby\")\n\n\n--local util = require(\"openmw.util\")\n--local nearby = require(\"openmw.nearby\")\n--local aux_util = require(\"openmw_aux.util\")\n\n-- todo: guards protect against criminal players\n-- note: engine already automatically protect against hostile creatures\n\n--local function nearbyGuards()\n--    local classes = section:get(\"Search Guard of Class\"):lower()\n--    return aux_util.mapFilter(nearby.actors, function(actor)\n--        local actorClass = actor.type.record(actor).class\n--        return actorClass and classes:find(actorClass:lower())\n--    end)\n--end\n\nlocal function cTScan()\n    if types.Actor.stats.dynamic.health(self).current < 1 then\n        return\n    end\n--for _, actor in pairs(nearbyGuards()) do\n--                if (actor.position - self.position):length() > (self.cell.isExterior and extDist or intDist) then\n--                    return\n--                end\n--end\n    async:newUnsavableSimulationTimer(math.random() + math.random() * 2, cTScan)\n\n    local cT = ai.getActiveTarget(\"Combat\")\n\n    if cT and (cT.type == types.Player or cT.type == types.NPC) then -- ll: i add the NPC part\n\t\tfor _, player in pairs(nearby.players) do\n\t\t\tplayer:sendEvent(\"ProtectiveGuards_thisActorIsAttackedBy_eqnx\", {\n\t\t\t\tactor = self, -- the \"aggressor\"\n\t\t\t\tvict = cT, -- ll: i add this \"defensor\" variable\n\t\t\t\tisImmune = immuneToGuards\n\t\t\t})\n\t\tend\n    end\nend\n\nasync:newUnsavableSimulationTimer(math.random(), cTScan)\n\nreturn {\n    interfaceName = \"PROTECTIVE_GUARDS_AGGRESSOR\",\n    interface = {\n        version = require(\"scripts.protective_guards_for_omw.modInfo\").MOD_VERSION,\n        immuneToGuards = function(isImmune)\n            if isImmune == nil then\n                return immuneToGuards\n            end\n            immuneToGuards = isImmune\n            return immuneToGuards\n        end\n    }\n}\n",
    "Protective Guards - Factions and NPCs Protections-54858-1-1-1-1718874993\\scripts\\protective_guards_for_omw\\player.lua": "local I = require(\"openmw.interfaces\")\nlocal types = require(\"openmw.types\")\nlocal Actor = types.Actor\nlocal NPC = types.NPC\n\nlocal ui = require(\"openmw.ui\")\nlocal util = require(\"openmw.util\")\nlocal nearby = require(\"openmw.nearby\")\nlocal aux_util = require(\"openmw_aux.util\")\nlocal core = require(\"openmw.core\")\nlocal storage = require(\"openmw.storage\")\nlocal self = require(\"openmw.self\")\nlocal blAreas = require(\"scripts/protective_guards_for_omw/blacklistedAreas\")\nlocal section = storage.playerSection(\"Settings_PGFOMW_Options_Key_KINDI\")\nlocal modInfo = require(\"scripts.protective_guards_for_omw.modInfo\")\nlocal pursuit_for_omw = false\n\n\n-- you can edit factions families as you want. Just write the same string (example: \"IMPfamily\") for a given family. Factions are IDs in lowercase.\n-- if you don't want families, just leave the array empty:  local factionsFamilies = {}\nlocal factionsFamilies = {\n\t[\"imperial legion\"] = \"IMPfamily\", \n\t[\"census and excise\"] = \"IMPfamily\", \n\t[\"imperial knights\"] = \"IMPfamily\", \n\t[\"royal guard\"] = \"IMPfamily\", \n\t[\"east empire company\"] = \"IMPfamily\",\n\t[\"temple\"] = \"TEMfamily\",\n\t[\"redoran\"] = \"TEMfamily\",\n\t}\n\nlocal factions_targets = {} -- Array to memorize the target for each faction\nlocal factions_witnes = {} -- Array to memorize a witness guard for each faction (useful to give context informations)\n\nlocal function onSave()\n    return {\n        FT = factions_targets,\n        FW = factions_witnes\n    }\nend\n\nlocal function onLoad(data)\n\tif data then\n\t\tfactions_targets = data.FT\n\t\tfactions_witnes = data.FW\n\tend\nend\n\nlocal function searchGuardsAdjacentCells(attacker)\n    for _, door in pairs(nearby.doors) do\n        if door.type.isTeleport(door) and (door.position - e.actor.position):length() < 2000 then\n            core.sendGlobalEvent(\"ProtectiveGuards_searchGuards_eqnx\", {\n                door,\n                attacker,\n                section:get(\"Search Guard of Class\"):lower()\n            })\n        end\n    end\nend\n\nlocal function nearbyGuards()\n    local classes = section:get(\"Search Guard of Class\"):lower()\n    return aux_util.mapFilter(nearby.actors, function(actor)\n        local actorClass = actor.type.record(actor).class\n        return actorClass and types.Actor.isDead(actor) == false and actor.enabled and classes:find(actorClass:lower())\n    end)\nend\n\nlocal function debug(actor, e)\n    local guard = actor.type.record(actor)\n    local agg = e.actor.type.record(e.actor)\n    if storage.playerSection(\"Settings_PGFOMW_ZDebug_Key_KINDI\"):get(\"Debug\") then\n        ui.showMessage(string.format(\"%s of %s class from %s attacks %s\", guard.name, guard.class, actor.cell.name, agg.name))\n    end\nend\n\n\nreturn {\n    engineHandlers = {\n\t\tonLoad = onLoad,\n\t\tonSave = onSave,\n        onActive = function()\n            assert(core.API_REVISION >= modInfo.MIN_API, \"[Protective Guards] mod requires OpenMW version 0.48 or newer!\")\n        end\n    },\n    eventHandlers = {\n        ProtectiveGuards_thisActorIsAttackedBy_eqnx = function(e)\n            if not section:get(\"Mod Status\") then\n                return\n            end\n            if blAreas[e.actor.cell.name] then\n                return\n            end\n\n            local intDist = section:get(\"Search Guard Distance Interiors\")\n            local extDist = section:get(\"Search Guard Distance Exteriors\")\n\n\t\t\t-- we memorize if the attacker/defensor are guards\n\t\t\tlocal guardList = nearbyGuards()\n\t\t\tlocal aggIsGuard = false\n\t\t    local victIsGuard = false\n\t\t    for _, guard_ in pairs(guardList) do\n\t\t\t\tif guard_.id == e.actor.id then aggIsGuard = true end\n\t\t\t\tif guard_.id == e.vict.id then victIsGuard = true end\n\t\t\t\tif aggIsGuard == true and victIsGuard == true then break end\n\t\t\tend\n\t\t\t\n\t\t\t-- we memorize if the defensor is the player or no\n\t\t\tlocal playerVictim = false\n\t\t\tif e.vict.type == types.Player then \n\t\t\t\tplayerVictim = true\n\t\t\tend\n\t\t\t\t\t\t\n            for _, actorG in pairs(guardList) do\n\t\t\t\t\n\t\t\t\tif actorG ~= e.actor and actorG ~= e.vict and Actor.getStance(actorG) == 0 and ((actorG.position - e.actor.position):length() < (e.actor.cell.isExterior and extDist or intDist)) then\n\t\n\t\t\t\t\tlocal target = e.actor -- default value\n\t\t\t\t    local guardFaction = NPC.getFactions(actorG)[1]\n\t\t\t\t    \t\t\t\t\t\n\t\t\t\t\tlocal factionMem = nil\n\t\t\t\t\t\n\t\t\t\t\t-- if guard has a faction we are going to determine his \"faction family\"\n\t\t\t\t    if guardFaction ~= nil then\n\t\t\t\t    \n\t\t\t\t\t\tlocal guardFactionFamily = factionsFamilies[guardFaction]\n\t\t\t\t\t\tif guardFactionFamily == nil then\n\t\t\t\t\t\t\tguardFactionFamily = guardFaction\n\t\t\t\t\t\tend\n\t\t\t\t\t\t\n\t\t\t\t\t\tlocal factionTarget = factions_targets[guardFactionFamily]\n\t\t\t\t\t\tlocal factionWitnes = factions_witnes[guardFactionFamily]\n\t\t\t\t\t\t\n\t\t\t\t\t\t-- if faction target memorization is not valid, or if we are in a not-valid/unclear context, then we (re-)determine faction target memorization...\n\t\t\t\t\t\tif factionTarget == nil\n\t\t\t\t\t\t or Actor.isDead(factionTarget)\n\t\t\t\t\t\t  or not factionTarget.enabled\n\t\t\t\t\t\t   or not Actor.isInActorsProcessingRange(factionTarget)\n\t\t\t\t\t\t    or Actor.getStance(factionTarget) == 0\n\t\t\t\t\t\t     or ( factionTarget ~= e.vict and factionTarget ~= e.actor )\n\t\t\t\t\t\t      or Actor.isDead(factionWitnes)\n\t\t\t\t\t\t       or not factionWitnes.enabled\n\t\t\t\t\t\t        or not Actor.isInActorsProcessingRange(factionWitnes)\n\t\t\t\t\t\t         or Actor.getStance(factionWitnes) == 0 then\n\t\t\t\t\n\t\t\t\t\t\t\tfactions_targets[guardFactionFamily] = e.actor -- default value\n\t\t\t\t\t\t\tfactions_witnes[guardFactionFamily] = actorG\n\t\t\t\t\t\t\tfactionMem = true -- so we know we have passed through the \"rememorization\" process\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlocal aggressorFaction = NPC.getFactions(e.actor)[1]\n\t\t\t\t\t\t\tlocal aggFactionFamily = factionsFamilies[aggressorFaction]\n\t\t\t\t\t\t\tif aggFactionFamily == nil then\n\t\t\t\t\t\t\t\taggFactionFamily = aggressorFaction\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tlocal victimFaction\n\t\t\t\t\t\t\tlocal victFactionFamily = nil\n\t\t\t\t\t\t\tif playerVictim == false then\n\t\t\t\t\t\t\t\tvictimFaction = NPC.getFactions(e.vict)[1]\n\t\t\t\t\t\t\t\tvictFactionFamily = factionsFamilies[victimFaction]\n\t\t\t\t\t\t\t\tif victFactionFamily == nil then\n\t\t\t\t\t\t\t\t\tvictFactionFamily = victimFaction\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t-- if guard Faction Family = the attacker faction family\n\t\t\t\t\t\t\tif guardFactionFamily == aggFactionFamily then\n\t\t\t\t\t\t\t\tlocal victimRank = 0\n\t\t\t\t\t\t\t\t-- if the defensor is the player then we are going to determine his factions&ranks in relation to the attacker\n\t\t\t\t\t\t\t\tif playerVictim == true then\n\t\t\t\t\t\t\t\t\tlocal rank\n\t\t\t\t\t\t\t\t\tfor _, faction_ in pairs(NPC.getFactions(e.vict)) do\n\t\t\t\t\t\t\t\t\t\tif aggressorFaction == faction_ or aggFactionFamily == factionsFamilies[faction_] then\n\t\t\t\t\t\t\t\t\t\t\tvictFactionFamily = aggFactionFamily\n\t\t\t\t\t\t\t\t\t\t\trank = NPC.getFactionRank(e.vict, faction_)\n\t\t\t\t\t\t\t\t\t\t\tif faction_ == \"royal guard\" then -- i count a \"royal guard\" rank as 2 ranks\n\t\t\t\t\t\t\t\t\t\t\t\trank = rank * 2\t\t\t\t\t-- because they have only 2 ranks\n\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\t\t\tif rank > victimRank then\n\t\t\t\t\t\t\t\t\t\t\t\tvictimRank = rank\n\t\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t-- if guard Faction Family = the attacker faction family = the defensor faction family\n\t\t\t\t\t\t\t\t-- then we are going to determine who is the best \"ranked\" between attacker and defensor\n\t\t\t\t\t\t\t\tif victFactionFamily == aggFactionFamily then\n\t\t\t\t\t\t\t\t\tif playerVictim == false then\n\t\t\t\t\t\t\t\t\t\tvictimRank = NPC.getFactionRank(e.vict, NPC.getFactions(e.vict)[1])\n\t\t\t\t\t\t\t\t\t\tif victimFaction == \"royal guard\" then\n\t\t\t\t\t\t\t\t\t\t\tvictimRank = victimRank * 2\n\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\tlocal aggressorRank = NPC.getFactionRank(e.actor, aggressorFaction)\n\t\t\t\t\t\t\t\t\tif aggressorFaction == \"royal guard\" then\n\t\t\t\t\t\t\t\t\t\taggressorRank = aggressorRank * 2\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\n\t\t\t\t\t\t\t\t\tif aggressorRank > victimRank or (aggressorRank == victimRank and aggIsGuard and not victIsGuard) then -- ...or (equals ranks, and attacker is a guard and defensor isn't a guard) then...\n\t\t\t\t\t\t\t\t\t\ttarget = e.vict -- guard is going to attack the defensor\n\t\t\t\t\t\t\t\t\t\tfactions_targets[guardFactionFamily] = e.vict -- memorization of the target for that faction\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\t-- if ranks are equal and they are both guards, then guard isn't going to intervene...\n\t\t\t\t\t\t\t\t\telseif aggressorRank == victimRank and aggIsGuard and victIsGuard then\n\t\t\t\t\t\t\t\t\t\ttarget = nil\n\t\t\t\t\t\t\t\t\t\tfactions_targets[guardFactionFamily] = factionTarget -- backup\n\t\t\t\t\t\t\t\t\t\tfactions_witnes[guardFactionFamily] = factionWitnes -- backup\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\telse -- (guard Faction Family = the attacker faction family) <> the defensor faction family\n\t\t\t\t\t\t\t\t\ttarget = e.vict\n\t\t\t\t\t\t\t\t\tfactions_targets[guardFactionFamily] = e.vict\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t-- (guard Faction Family <> the attacker faction family)\n\t\t\t\t\t\t\telseif aggIsGuard and not victIsGuard then -- if attacker is a guard and defensor isn't a guard...\n\t\t\t\t\n\t\t\t\t\t\t\t\t-- then we have to determine the defensor faction family related to guard if defensor=player\n\t\t\t\t\t\t\t\tif playerVictim == true then\n\t\t\t\t\t\t\t\t\tfor _, faction_ in pairs(NPC.getFactions(e.vict)) do\n\t\t\t\t\t\t\t\t\t\tif faction_ == guardFaction or factionsFamilies[faction_] == guardFactionFamily then\n\t\t\t\t\t\t\t\t\t\t\tvictFactionFamily = guardFactionFamily\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t-- ...and if defensor faction family is also <> guard Faction Family, then ...\n\t\t\t\t\t\t\t\tif victFactionFamily ~= guardFactionFamily then\n\t\t\t\t\t\t\t\t\ttarget = e.vict\n\t\t\t\t\t\t\t\t\tfactions_targets[guardFactionFamily] = e.vict\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t-- (guard Faction Family <> the attacker faction family)\n\t\t\t\t\t\t\telseif aggIsGuard and victIsGuard then -- if attacker&defensor are guards...\n\t\t\t\t\t\t\t\tif playerVictim == true then\n\t\t\t\t\t\t\t\t\tfor _, faction_ in pairs(NPC.getFactions(e.vict)) do\n\t\t\t\t\t\t\t\t\t\tif faction_ == guardFaction or factionsFamilies[faction_] == guardFactionFamily then\n\t\t\t\t\t\t\t\t\t\t\tvictFactionFamily = guardFactionFamily\n\t\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t-- ...and if defensor faction family is also <> guard Faction Family, then guard isn't going to intervene...\n\t\t\t\t\t\t\t\tif victFactionFamily ~= guardFactionFamily then\n\t\t\t\t\t\t\t\t\ttarget = nil\n\t\t\t\t\t\t\t\t\tfactions_targets[guardFactionFamily] = factionTarget -- backup\n\t\t\t\t\t\t\t\t\tfactions_witnes[guardFactionFamily] = factionWitnes -- backup\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\n\t\t\t\t\t\telse -- factionTarget is valid\n\t\t\t\t\t\t\ttarget = factionTarget\n\t\t\t\t\t\tend\n\t\t\t\t    \n\t\t\t\t    -- (guard has no faction), and if attacker is a guard and defensor isn't a guard then...\n\t\t\t\t\telseif aggIsGuard and not victIsGuard then\n\t\t\t\t\t\ttarget = e.vict \n\t\t\t\t\t\t\n\t\t\t\t    -- (guard has no faction), and if attacker&defensor are guards then...\n\t\t\t\t\telseif aggIsGuard and victIsGuard then\n\t\t\t\t\t\ttarget = nil\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\t-- test for player crime \n\t\t\t\t\tif e.vict.id == self.id and target == e.actor then\n\t\t\t\t\t\tif types.Player.getCrimeLevel then\n\t\t\t\t\t\t\tcore.sendGlobalEvent(\"ProtectiveGuards_oldVersionCleanup_eqnx\", {\n\t\t\t\t\t\t\tactor = self\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tif types.Player.getCrimeLevel(self) > 10 then\n\t\t\t\t\t\t\t\ttarget = nil\n\t\t\t\t\t\t\t\tif factionMem then\n\t\t\t\t\t\t\t\t\tfactions_targets[guardFactionFamily] = factionTarget -- backup\n\t\t\t\t\t\t\t\t\tfactions_witnes[guardFactionFamily] = factionWitnes -- backup\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\telseif types.Actor.inventory(self):countOf(\"PG_TrigCrime\") > 10 then\n\t\t\t\t\t\t-- not used in v0.49. Kept for backwards compatiblity\n\t\t\t\t\t\t\ttarget = nil\n\t\t\t\t\t\t\tif factionMem then\n\t\t\t\t\t\t\t\tfactions_targets[guardFactionFamily] = factionTarget -- backup\n\t\t\t\t\t\t\t\tfactions_witnes[guardFactionFamily] = factionWitnes -- backup\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\n\t\t\t\t\t-- guards dislike werewolf in morrowind (only for v0.49 and newer)\n\t\t\t\t\tif (NPC.isWerewolf and NPC.isWerewolf(e.vict) and target == e.actor)\n\t\t\t\t\t or (NPC.isWerewolf and NPC.isWerewolf(e.actor) and target == e.vict) then\n\t\t\t\t\t\ttarget = nil\n\t\t\t\t\t\tif factionMem then\n\t\t\t\t\t\t\tfactions_targets[guardFactionFamily] = factionTarget -- backup\n\t\t\t\t\t\t\tfactions_witnes[guardFactionFamily] = factionWitnes -- backup\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\tif target ~= nil then\n\t\t\t\t\t\tactorG:sendEvent(\"ProtectiveGuards_alertGuard_eqnx\", {\n\t\t\t\t\t\t\t\tattacker = target,\n\t\t\t\t\t\t\t\tisImmune = e.isImmune\n\t\t\t\t\t\t\t})\n\t\t\t\t\tend\n\t\t\t\t\t\n\t\t\t\t\tdebug(actorG, e)\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\t-- future\n            -- check if current cell has peaceful npc, playsound for help, goes to a nearby adjacent cell, and alert guards\n            if not e.isImmune and section:get(\"Search Guard In Nearby Adjacent Cells\") and pursuit_for_omw then\n                searchGuardsAdjacentCells(e.actor)\n            end\n        end,\n        \n        Pursuit_IsInstalled_eqnx = function(e)\n            pursuit_for_omw = e.isInstalled\n            if pursuit_for_omw then\n                print(\"Pursuit and Protective Guards interaction established\")\n                -- ui.showMessage(\"Pursuit and Protective Guards interaction established\")\n            end\n        end\n\t}\n}\n"
  }
}