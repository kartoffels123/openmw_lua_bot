{
  "folder_name": "Better Merchants Skills for OpenMW",
  "lua_files": {
    "bmso-lua.zip-54337-1-4-1721029242\\00 Core\\scripts\\BMSO\\common.lua": "local S = require('scripts.BMSO.settings')\n\n-- If some NPCs have too high or too low trading skills, you can override their level here, like the commented line for Arrille\nlocal npcLevelOverrides = {\n    --[\"arrille\"] = 5,\n}\n\nlocal function getDescriptionIfOpenMWTooOld(key)\n    if not S.isLuaApiRecentEnough then\n        if S.isOpenMW049 then\n            return \"requiresNewerOpenmw49\"\n        else\n            return \"requiresOpenmw49\"\n        end\n    end\n    return key\nend\n\nlocal function debugPrint(str, ...)\n    if S.globalStorage:get(\"debugMode\") then\n        local arg = {...}\n        if arg ~= nil then\n            print(string.format(\"DEBUG: \" .. str, unpack(arg)))\n        else\n            print(\"DEBUG: \" .. str)\n        end\n    end\nend\n\nreturn {\n    npcLevelOverrides = npcLevelOverrides,\n    getDescriptionIfOpenMWTooOld = getDescriptionIfOpenMWTooOld,\n    debugPrint = debugPrint,\n}\n\n",
    "bmso-lua.zip-54337-1-4-1721029242\\00 Core\\scripts\\BMSO\\global.lua": "local S = require('scripts.BMSO.settings')\n-- Init settings first to init storage which is used everywhere\nS.initSettings()\n",
    "bmso-lua.zip-54337-1-4-1721029242\\00 Core\\scripts\\BMSO\\npc.lua": "local core = require('openmw.core')\nlocal self = require('openmw.self')\nlocal T = require('openmw.types')\n\nlocal S = require('scripts.BMSO.settings')\nlocal C = require(\"scripts.BMSO.common\")\n\nlocal npc = T.NPC.record(self)\nlocal merchantStats = { skills = {}, attributes = {} }\n\nlocal function computeStats(player)\n    local npcLevel = C.npcLevelOverrides[npc.id]\n    if npcLevel == nil then\n        npcLevel = T.NPC.stats.level(self).current\n    else\n        C.debugPrint(\"'%s' level override to %s\", npc.name, npcLevel)\n    end\n    local npcMercantile = T.NPC.stats.skills.mercantile(self).base\n    local npcSpeechcraft = T.NPC.stats.skills.speechcraft(self).base\n\n    local usePlayerLevel = S.globalStorage:get(\"playerLevelBasedSkillsBoost\")\n    if usePlayerLevel ~= \"no\" then\n        local playerLevel = T.Player.stats.level(player).current\n        if playerLevel > npcLevel then\n            local factor = S.getPlayerLevelBasedSkillsBoost(usePlayerLevel)\n            npcLevel = playerLevel * factor + npcLevel * (1 - factor)\n            C.debugPrint(\"Base used level changed to %s, player level %s, factor %s\",\n                    npcLevel, playerLevel, factor)\n        end\n    end\n\n    local maxSkill = math.max(math.min(npcLevel * 4 + 20, 100), 30)\n    local newMercantile = math.max(npcMercantile, maxSkill)\n    local newSpeechcraft = math.max(npcSpeechcraft, maxSkill)\n\n    newMercantile = math.min(newMercantile, T.Player.stats.skills.mercantile(player).base + S.globalStorage:get(\"maxMercantileDifference\"))\n\n    merchantStats = { skills = {}, attributes = {} }\n    if (newMercantile ~= npcMercantile) then\n        merchantStats.skills.mercantile = { old = npcMercantile, new = newMercantile }\n    end\n    if (newSpeechcraft ~= npcSpeechcraft) then\n        local personalityBoost = (newSpeechcraft - npcSpeechcraft) * core.getGMST(\"fPersonalityMod\")\n        merchantStats.attributes.personality = { old = T.NPC.stats.attributes.personality(self).base, new = T.NPC.stats.attributes.personality(self).base + personalityBoost }\n    end\n\n    C.debugPrint(\"'%s', level %s, max skill boost %s, mercantile %s->%s, speechcraft %s->%s\",\n            npc.name, npcLevel, maxSkill, npcMercantile, newMercantile, npcSpeechcraft, newSpeechcraft)\nend\n\nlocal function handleStats(data)\n    for _, op in ipairs(data) do\n        if op.type == \"computeStats\" then\n            computeStats(op.player)\n        else\n            local values = merchantStats[op.kind][op.statId]\n            if op.type == \"boost\" then\n                if values == nil then\n                    C.debugPrint(\"NPC '%s': No %s (%s) boost required\", npc.name, op.statId, op.kind)\n                else\n                    C.debugPrint(\"NPC '%s': Increase %s (%s) from %s to %s\", npc.name, op.statId, op.kind, values.old, values.new)\n                    T.NPC.stats[op.kind][op.statId](self).base = values.new\n                end\n            elseif op.type == \"restore\" then\n                if values == nil then\n                    C.debugPrint(\"NPC '%s': No %s (%s) restore required\", npc.name, op.statId, op.kind)\n                else\n                    C.debugPrint(\"NPC '%s': Restore %s (%s) from %s to %s\", npc.name, op.statId, op.kind, values.new, values.old)\n                    T.NPC.stats[op.kind][op.statId](self).base = values.old\n                end\n            else\n                print(\"Error: Invalid operation type \", op.type)\n            end\n        end\n    end\nend\n\nreturn {\n    eventHandlers = {\n        handleStats = handleStats,\n    },\n}",
    "bmso-lua.zip-54337-1-4-1721029242\\00 Core\\scripts\\BMSO\\player.lua": "local core = require('openmw.core')\nlocal ui = require('openmw.ui')\nlocal self = require('openmw.self')\nlocal async = require('openmw.async')\nlocal I = require(\"openmw.interfaces\")\nlocal T = require('openmw.types')\n\nlocal S = require('scripts.BMSO.settings')\nlocal C = require(\"scripts.BMSO.common\")\n\nI.Settings.registerPage {\n    key = S.MOD_NAME,\n    l10n = S.MOD_NAME,\n    name = \"name\",\n    description = C.getDescriptionIfOpenMWTooOld(\"description\")\n}\n\nlocal currentNpc\n\nlocal function onActive()\n    if not S.isLuaApiRecentEnough then\n        async:newSimulationTimer(\n                4,\n                async:registerTimerCallback(\n                        \"oldOpenMwWarning\",\n                        function()\n                            local msg = core.l10n(S.MOD_NAME, 'en')\n                            if S.isOpenMW049 then\n                                ui.showMessage(msg(\"requiresNewerOpenmw49\"))\n                            else\n                                ui.showMessage(msg(\"requiresOpenmw49\"))\n                            end\n                        end\n                )\n        )\n    end\nend\n\nlocal function uiModeChanged(data)\n    --C.debugPrint('UI mode changed from %s to %s (%s)', data.oldMode, data.newMode, tostring(data.arg))\n    if data.arg ~= nil and data.arg.type == T.NPC and data.oldMode == nil and data.newMode == \"Dialogue\" then\n        local npc = T.NPC.record(data.arg)\n        if npc.servicesOffered[\"Barter\"] then\n            currentNpc = data.arg\n            C.debugPrint(\"Detected merchant '%s' (%s)\", npc.name, npc.id)\n            currentNpc:sendEvent('handleStats', {\n                { type = \"computeStats\", player = self },\n                { type = \"boost\", kind = \"attributes\", statId = \"personality\" },\n            })\n        end\n    elseif data.newMode == \"Barter\" then\n        if currentNpc == nil then\n            print(\"Error: Barter without current NPC\")\n            return\n        end\n        currentNpc:sendEvent('handleStats', {\n            { type = \"restore\", kind = \"attributes\", statId = \"personality\" },\n            { type = \"boost\", kind = \"skills\", statId = \"mercantile\" },\n        })\n    elseif data.oldMode == \"Barter\" then\n        if currentNpc == nil then\n            print(\"Error: Return to dialogue without current NPC\")\n            return\n        end\n        currentNpc:sendEvent('handleStats', {\n            { type = \"restore\", kind = \"skills\", statId = \"mercantile\" },\n            { type = \"boost\", kind = \"attributes\", statId = \"personality\" },\n        })\n    elseif currentNpc ~= nil and data.oldMode == \"Dialogue\" and data.newMode == nil then\n        currentNpc:sendEvent('handleStats', {\n            { type = \"restore\", kind = \"attributes\", statId = \"personality\" },\n        })\n        currentNpc = nil\n    end\nend\n\nreturn {\n    engineHandlers = {\n        onActive = onActive,\n    },\n    eventHandlers = {\n        UiModeChanged = uiModeChanged,\n    }\n}\n",
    "bmso-lua.zip-54337-1-4-1721029242\\00 Core\\scripts\\BMSO\\settings.lua": "local core = require('openmw.core')\nlocal I = require(\"openmw.interfaces\")\nlocal storage = require('openmw.storage')\n\nlocal MOD_NAME = \"BMSO\"\n\n-- 44 for UiModeChanged\nlocal isLuaApiRecentEnough = core.API_REVISION >= 44\nlocal isOpenMW049 = core.API_REVISION > 29\n\nlocal function initSettings()\n    I.Settings.registerGroup {\n        key = \"SettingsGlobal\" .. MOD_NAME,\n        l10n = MOD_NAME,\n        name = \"settingsTitle_name\",\n        page = MOD_NAME,\n        permanentStorage = true,\n        settings = {\n            {\n                key = \"maxMercantileDifference\",\n                name = \"maxMercantileDifference_name\",\n                description = \"maxMercantileDifference_description\",\n                default = 60,\n                renderer = \"number\",\n                argument = {\n                    integer = true,\n                    min = 0,\n                    max = 100,\n                    disabled = not isLuaApiRecentEnough,\n                },\n            },\n            {\n                key = \"playerLevelBasedSkillsBoost\",\n                name = \"playerLevelBasedSkillsBoost_name\",\n                description = \"playerLevelBasedSkillsBoost_description\",\n                default = \"1/2\",\n                renderer = \"select\",\n                argument = {\n                    l10n = MOD_NAME,\n                    items = { \"no\", \"1/4\", \"1/2\", \"3/4\" },\n                    disabled = not isLuaApiRecentEnough,\n                },\n            },\n            {\n                key = \"debugMode\",\n                name = \"debugMode_name\",\n                default = false,\n                renderer = \"checkbox\",\n            },\n        }\n    }\nend\n\nlocal playerLevelBasedSkillsBoosts = {\n    [\"1/4\"] = 1 / 4,\n    [\"1/2\"] = 1 / 2,\n    [\"3/4\"] = 3 / 4,\n}\nlocal function getPlayerLevelBasedSkillsBoost(key)\n    return playerLevelBasedSkillsBoosts[key]\nend\n\nreturn {\n    MOD_NAME = MOD_NAME,\n    isLuaApiRecentEnough = isLuaApiRecentEnough,\n    isOpenMW049 = isOpenMW049,\n    initSettings = initSettings,\n    getPlayerLevelBasedSkillsBoost = getPlayerLevelBasedSkillsBoost,\n    globalStorage = storage.globalSection(\"SettingsGlobal\" .. MOD_NAME)\n}"
  }
}