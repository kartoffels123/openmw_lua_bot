{
  "title": "Package openmw.types\uf0c1",
  "content": [
    {
      "paragraph": "openmw.typesdefines functions for specific types of game objects."
    },
    {
      "code": "openmw.types"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local types = require('openmw.types')"
    },
    {
      "code": "local types = require('openmw.types')"
    },
    {
      "header": "Typetypes",
      "content": []
    },
    {
      "code": "types"
    },
    {
      "paragraph": "#Activatorfunctions Common#Actorfunctions for Creature, NPC, and Player. #Apparatusfunctions #Armorfunctions #Bookfunctions #Clothingfunctions #Containerfunctions #Creaturefunctions #Doorfunctions Functions for#ESM4Activatorobjects Functions for#ESM4Ammunitionobjects Functions for#ESM4Armorobjects Functions for#ESM4Bookobjects Functions for#ESM4Clothingobjects Functions for#ESM4Doorobjects Functions for#ESM4Floraobjects Functions for#ESM4Ingredientobjects Functions for#ESM4ItemModobjects Functions for#ESM4Lightobjects Functions for#ESM4Miscellaneousobjects Functions for#ESM4MovableStaticobjects Functions for#ESM4Potionobjects Functions for#ESM4Staticobjects Functions for#ESM4StaticCollectionobjects Functions for#ESM4Terminalobjects Functions for#ESM4Weaponobjects #Ingredientfunctions #Itemfunctions (all items that can be placed to an inventory or container) #CreatureLevelledListfunctions #Lightfunctions #Lockablefunctions #Lockpickfunctions Functions for#Miscellaneousobjects #NPCfunctions #Playerfunctions #Potionfunctions #Probefunctions #Repairfunctions Functions for#Staticobjects #Weaponfunctions"
    },
    {
      "header": "TypeAIStat",
      "content": []
    },
    {
      "code": "AIStat"
    },
    {
      "paragraph": "The stat's base value. The actor's current ai value (read-only.) The stat's modifier."
    },
    {
      "header": "TypeAIStats",
      "content": []
    },
    {
      "code": "AIStats"
    },
    {
      "paragraph": "Alarm (returns#AIStat) Fight (returns#AIStat) Flee (returns#AIStat) Hello (returns#AIStat)"
    },
    {
      "header": "TypeActivator",
      "content": []
    },
    {
      "code": "Activator"
    },
    {
      "paragraph": "Creates a#ActivatorRecordwithout adding it to the world database. Whether the object is an Activator. Returns the read-only#ActivatorRecordof an activator A read-only list of all#ActivatorRecords in the world database."
    },
    {
      "header": "TypeActivatorRecord",
      "content": []
    },
    {
      "code": "ActivatorRecord"
    },
    {
      "paragraph": "Record id VFS path to the model MWScript on this activator (can be nil) Human-readable name"
    },
    {
      "header": "TypeActor",
      "content": []
    },
    {
      "code": "Actor"
    },
    {
      "paragraph": "Available#EQUIPMENT_SLOTvalues. #STANCE Return the active magic effects (#ActorActiveEffects) currently affecting the given actor. Return the active spells (#ActorActiveSpells) currently affecting the given actor. Returns true if the object is an actor and is able to move. Clears the actor's selected castable(spell or enchanted item) Current speed. Get the total weight of everything the actor is carrying, plus modifications from magic effects. Get equipment. Agent bounds to be used for pathfinding functions. Speed of running. Get currently selected enchanted item Get currently selected spell Returns the current stance (whether a weapon/spell is readied), see the list of#STANCEvalues. Speed of walking. Returnstrueif the item is equipped on the actor."
    },
    {
      "code": "true"
    },
    {
      "paragraph": "Actor inventory. Check if the given actor is dead (health reached 0, so death process started). Check if the given actor's death process is finished. Check if given actor is in the actors processing range. Is the actor standing on ground. Is the actor in water. Whether the object is an actor. Set equipment. Set currently selected enchanted item, equipping it if applicable Set selected spell Sets the current stance (whether a weapon/spell is readied), see the list of#STANCEvalues. Return the spells (#ActorSpells) of the given actor. The actor's stats."
    },
    {
      "header": "TypeActorActiveEffects",
      "content": []
    },
    {
      "code": "ActorActiveEffects"
    },
    {
      "paragraph": "Get a specific active effect on the actor. Permanently modifies the magnitude of an active effect by modifying it by the provided value. Completely removes the active effect from the actor. (Note that using this function will override and conflict with all other sources of this effect, you probably want to useActorActiveEffects.modifyinstead, this function is provided for mwscript parity only)\nPermanently modifies the magnitude of an active effect to be exactly equal to the provided value."
    },
    {
      "header": "TypeActorActiveSpells",
      "content": []
    },
    {
      "code": "ActorActiveSpells"
    },
    {
      "paragraph": "Adds a new spell to the list of active spells (only in global scripts or on self). If true, the actor has not used this power in the last 24h. Get whether any instance of the specific spell is active on the actor. Remove an active spell based on active spell ID (seeopenmw_core#ActiveSpell.activeSpellId)."
    },
    {
      "header": "TypeActorSpells",
      "content": []
    },
    {
      "code": "ActorSpells"
    },
    {
      "paragraph": "Add spell (only in global scripts or on self). Remove all spells (only in global scripts or on self). Remove spell (only in global scripts or on self)."
    },
    {
      "header": "TypeActorStats",
      "content": []
    },
    {
      "code": "ActorStats"
    },
    {
      "paragraph": "Level (returns#LevelStat)"
    },
    {
      "header": "TypeApparatus",
      "content": []
    },
    {
      "code": "Apparatus"
    },
    {
      "paragraph": "#ApparatusTYPE #Item Whether the object is an Apparatus. Returns the read-only#ApparatusRecordof an apparatus A read-only list of all#ApparatusRecords in the world database."
    },
    {
      "header": "TypeApparatusRecord",
      "content": []
    },
    {
      "code": "ApparatusRecord"
    },
    {
      "paragraph": "VFS path to the icon The record ID of the apparatus VFS path to the model MWScript on this apparatus (can be nil) The name of the apparatus The quality of the apparatus The type of apparatus. SeeApparatus.TYPE"
    },
    {
      "header": "TypeApparatusTYPE",
      "content": []
    },
    {
      "code": "ApparatusTYPE"
    },
    {
      "header": "TypeArmor",
      "content": []
    },
    {
      "code": "Armor"
    },
    {
      "paragraph": "#ArmorTYPE #Item Creates a#ArmorRecordwithout adding it to the world database, for the armor to appear correctly on the body, make sure to use a template as described below. Whether the object is an Armor. Returns the read-only#ArmorRecordof an Armor A read-only list of all#ArmorRecords in the world database."
    },
    {
      "header": "TypeArmorRecord",
      "content": []
    },
    {
      "code": "ArmorRecord"
    },
    {
      "paragraph": "The base armor rating of this armor The enchantment ID of this armor (can be nil) VFS path to the icon Record id VFS path to the model MWScript on this armor (can be nil) Human-readable name SeeArmor.TYPE"
    },
    {
      "header": "TypeArmorTYPE",
      "content": []
    },
    {
      "code": "ArmorTYPE"
    },
    {
      "header": "TypeAttributeStat",
      "content": []
    },
    {
      "code": "AttributeStat"
    },
    {
      "paragraph": "The actor's base attribute value. The amount the attribute has been damaged. The actor's current attribute value (read-only.) The attribute's modifier."
    },
    {
      "header": "TypeAttributeStats",
      "content": []
    },
    {
      "code": "AttributeStats"
    },
    {
      "paragraph": "Agility (returns#AttributeStat) Endurance (returns#AttributeStat) Intelligence (returns#AttributeStat) Luck (returns#AttributeStat) Personality (returns#AttributeStat) Speed (returns#AttributeStat) Strength (returns#AttributeStat) Willpower (returns#AttributeStat)"
    },
    {
      "header": "TypeBirthSignRecord",
      "content": []
    },
    {
      "code": "BirthSignRecord"
    },
    {
      "paragraph": "Birth sign description Birth sign id Birth sign name A read-only list containing the ids of all spells gained from this sign. Birth sign texture"
    },
    {
      "header": "TypeBirthSigns",
      "content": []
    },
    {
      "code": "BirthSigns"
    },
    {
      "paragraph": "Returns a read-only#BirthSignRecord A read-only list of all#BirthSignRecords in the world database."
    },
    {
      "header": "TypeBook",
      "content": []
    },
    {
      "code": "Book"
    },
    {
      "paragraph": "DEPRECATED, useopenmw.core#Skill #Item Creates a#BookRecordwithout adding it to the world database. Whether the object is a Book. Returns the read-only#BookRecordof a book A read-only list of all#BookRecords in the world database."
    },
    {
      "header": "TypeBookRecord",
      "content": []
    },
    {
      "code": "BookRecord"
    },
    {
      "paragraph": "The enchantment ID of this book (can be nil) VFS path to the icon The record ID of the book VFS path to the model MWScript on this book (can be nil) Name of the book The skill that this book teaches. Seeopenmw.core#SKILL The text content of the book"
    },
    {
      "header": "TypeBookSKILL",
      "content": []
    },
    {
      "code": "BookSKILL"
    },
    {
      "paragraph": "\"acrobatics\" \"alchemy\" \"alteration\" \"armorer\" \"athletics\" \"axe\" \"block\" \"bluntweapon\" \"conjuration\" \"destruction\" \"enchant\" \"handtohand\" \"heavyarmor\" \"illusion\" \"lightarmor\" \"longblade\" \"marksman\" \"mediumarmor\" \"mercantile\" \"mysticism\" \"restoration\" \"security\" \"shortblade\" \"sneak\" \"spear\" \"speechcraft\" \"unarmored\""
    },
    {
      "header": "TypeCONTROL_SWITCH",
      "content": []
    },
    {
      "code": "CONTROL_SWITCH"
    },
    {
      "paragraph": "Ability to move Ability to attack Ability to jump Ability to change view direction Ability to use magic Vanity view if player doesn't touch controls for a long time Ability to toggle 1st/3rd person view"
    },
    {
      "header": "TypeClassRecord",
      "content": []
    },
    {
      "code": "ClassRecord"
    },
    {
      "paragraph": "A read-only list containing the specialized attributes of the class. Class description Class id True if the player can play as this class A read-only list containing the major skills of the class. A read-only list containing the minor skills of the class. Class name Class specialization. Either combat, magic, or stealth."
    },
    {
      "header": "TypeClasses",
      "content": []
    },
    {
      "code": "Classes"
    },
    {
      "paragraph": "Returns a read-only#ClassRecord A read-only list of all#ClassRecords in the world database, may be indexed by recordId."
    },
    {
      "header": "TypeClothing",
      "content": []
    },
    {
      "code": "Clothing"
    },
    {
      "paragraph": "#ClothingTYPE #Item Creates a#ClothingRecordwithout adding it to the world database, for the clothing to appear correctly on the body, make sure to use a template as described below. Whether the object is a Clothing. Returns the read-only#ClothingRecordof a Clothing A read-only list of all#ClothingRecords in the world database."
    },
    {
      "header": "TypeClothingRecord",
      "content": []
    },
    {
      "code": "ClothingRecord"
    },
    {
      "paragraph": "The enchantment ID of this clothing (can be nil) VFS path to the icon Record id VFS path to the model MWScript on this clothing (can be nil) Name of the clothing SeeClothing.TYPE"
    },
    {
      "header": "TypeClothingTYPE",
      "content": []
    },
    {
      "code": "ClothingTYPE"
    },
    {
      "header": "TypeContainer",
      "content": []
    },
    {
      "code": "Container"
    },
    {
      "paragraph": "#Lockable Container content. Returns the capacity of a container Returns the total weight of everything in a container Container content (same asContainer.content, added for consistency withActor.inventory)."
    },
    {
      "code": "Container.content"
    },
    {
      "code": "Actor.inventory"
    },
    {
      "paragraph": "Whether the object is a Container. Returns the read-only#ContainerRecordof a container A read-only list of all#ContainerRecords in the world database."
    },
    {
      "header": "TypeContainerRecord",
      "content": []
    },
    {
      "code": "ContainerRecord"
    },
    {
      "paragraph": "Record id Whether items can be placed in the container Whether the container respawns its contents VFS path to the model MWScript on this container (can be nil) Human-readable name capacity of this container"
    },
    {
      "header": "TypeCreature",
      "content": []
    },
    {
      "code": "Creature"
    },
    {
      "paragraph": "#CreatureTYPE #Actor Whether the object is a creature. Returns the read-only#CreatureRecordof a creature A read-only list of all#CreatureRecords in the world database, may be indexed by recordId."
    },
    {
      "header": "TypeCreatureAttack",
      "content": []
    },
    {
      "code": "CreatureAttack"
    },
    {
      "paragraph": "Maximum attack damage. Minimum attack damage."
    },
    {
      "header": "TypeCreatureLevelledList",
      "content": []
    },
    {
      "code": "CreatureLevelledList"
    },
    {
      "paragraph": "Whether the object is a CreatureLevelledList. Returns the read-only#CreatureLevelledListRecordof a levelled creature A read-only list of all#CreatureLevelledListRecords in the world database."
    },
    {
      "header": "TypeCreatureLevelledListRecord",
      "content": []
    },
    {
      "code": "CreatureLevelledListRecord"
    },
    {
      "paragraph": "Calculate from all levels <= player level, not just the closest below player Chance this list won't spawn anything [0-1] Picks a random id from the levelled list. Record id"
    },
    {
      "header": "TypeCreatureRecord",
      "content": []
    },
    {
      "code": "CreatureRecord"
    },
    {
      "paragraph": "A table of the 3 randomly selected attacks used by creatures that do not carry weapons. The table consists of 6 numbers split into groups of 2 values corresponding to minimum and maximum damage in that order. Record id of a base creature, which was modified to create this one The base barter gold of the creature whether the creature can fly whether the creature can swim whether the creature can use weapons and shields whether the creature can walk The base combat skill of the creature. This is the skill value used for all skills with a 'combat' specialization The record ID of the creature whether the creature is a biped whether the creature is essential whether the creature respawns after death The base magic skill of the creature. This is the skill value used for all skills with a 'magic' specialization VFS path to the creature's model MWScript on this creature (can be nil) The services of the creature, in a table. Value is if the service is provided or not, and they are indexed by: Spells, Spellmaking, Enchanting, Training, Repair, Barter, Weapon, Armor, Clothing, Books, Ingredients, Picks, Probes, Lights, Apparatus, RepairItems, Misc, Potions, MagicItems, Travel. The soul value of the creature record The base stealth skill of the creature. This is the skill value used for all skills with a 'stealth' specialization A list of#TravelDestinations for this creature. TheCreature.TYPEof the creature"
    },
    {
      "header": "TypeCreatureTYPE",
      "content": []
    },
    {
      "code": "CreatureTYPE"
    },
    {
      "header": "TypeDoor",
      "content": []
    },
    {
      "code": "Door"
    },
    {
      "paragraph": "#DoorSTATE Opens/Closes the door. #Lockable Destination cell (only if a teleport door). Destination (only if a teleport door). Destination rotation (only if a teleport door). Gets the state of the door. Checks if the door is fully closed. Checks if the door is fully open. Whether the door is a teleport. Whether the object is a Door. Returns the read-only#DoorRecordof a door A read-only list of all#DoorRecords in the world database."
    },
    {
      "header": "TypeDoorRecord",
      "content": []
    },
    {
      "code": "DoorRecord"
    },
    {
      "paragraph": "The sound id for door closing Record id VFS path to the model MWScript on this door (can be nil) Human-readable name The sound id for door opening"
    },
    {
      "header": "TypeDoorSTATE",
      "content": []
    },
    {
      "code": "DoorSTATE"
    },
    {
      "paragraph": "The door is in the process of closing. The door is either closed or open (usually closed). The door is in the process of opening."
    },
    {
      "header": "TypeDynamicStat",
      "content": []
    },
    {
      "code": "DynamicStat"
    },
    {
      "header": "TypeDynamicStats",
      "content": []
    },
    {
      "code": "DynamicStats"
    },
    {
      "paragraph": "Fatigue (returns#DynamicStat) Health (returns#DynamicStat) Magicka (returns#DynamicStat)"
    },
    {
      "header": "TypeEQUIPMENT_SLOT",
      "content": []
    },
    {
      "code": "EQUIPMENT_SLOT"
    },
    {
      "header": "TypeESM4Door",
      "content": []
    },
    {
      "code": "ESM4Door"
    },
    {
      "paragraph": "#Lockable Destination cell (only if a teleport door). Destination (only if a teleport door). Destination rotation (only if a teleport door). Whether the door is a teleport. Whether the object is a ESM4Door. Returns the read-only#ESM4DoorRecordof a door A read-only list of all#ESM4DoorRecords in the world database."
    },
    {
      "header": "TypeESM4DoorRecord",
      "content": []
    },
    {
      "code": "ESM4DoorRecord"
    },
    {
      "paragraph": "Record id VFS path to the model Human-readable name"
    },
    {
      "header": "TypeESM4Terminal",
      "content": []
    },
    {
      "code": "ESM4Terminal"
    },
    {
      "paragraph": "Whether the object is a ESM4Terminal. Returns the read-only#ESM4TerminalRecordof a terminal A read-only list of all#ESM4TerminalRecords in the world database."
    },
    {
      "header": "TypeESM4TerminalRecord",
      "content": []
    },
    {
      "code": "ESM4TerminalRecord"
    },
    {
      "paragraph": "Human-readable ID Record id (Form ID) VFS path to the model Human-readable name Result text of the terminal record Text body of the terminal record"
    },
    {
      "header": "TypeGenderedNumber",
      "content": []
    },
    {
      "code": "GenderedNumber"
    },
    {
      "paragraph": "Female value Male value"
    },
    {
      "header": "TypeIngredient",
      "content": []
    },
    {
      "code": "Ingredient"
    },
    {
      "paragraph": "#Item Whether the object is an Ingredient. Returns the read-only#IngredientRecordof a Ingredient A read-only list of all#IngredientRecords in the world database."
    },
    {
      "header": "TypeIngredientRecord",
      "content": []
    },
    {
      "code": "IngredientRecord"
    },
    {
      "paragraph": "The effects (openmw.core#MagicEffectWithParams) of the ingredient VFS path to the icon Record id VFS path to the model MWScript on this potion (can be nil) Human-readable name"
    },
    {
      "header": "TypeItem",
      "content": []
    },
    {
      "code": "Item"
    },
    {
      "paragraph": "(DEPRECATED, use itemData(item).enchantmentCharge) Get this item's current enchantment charge. Whether the object is supposed to be carriable. Checks if the item restocks. Set of properties that differentiates one item from another of the same record type; can be used by any script, but only global and self scripts can change values. Whether the object is an item. (DEPRECATED, use itemData(item).enchantmentCharge) Set this item's enchantment charge."
    },
    {
      "header": "TypeItemData",
      "content": []
    },
    {
      "code": "ItemData"
    },
    {
      "paragraph": "The item's current condition. Time remaining for lights. Uses left for repairs, lockpicks and probes. Current health for weapons and armor. The item's current enchantment charge. Unenchanted items will always return a value ofnil. Setting this tonilwill reset the charge of the item."
    },
    {
      "code": "nil"
    },
    {
      "code": "nil"
    },
    {
      "paragraph": "The recordId of the item's current soul. Items without soul will always return a value ofnil. Setting this tonilwill remove the soul from the item."
    },
    {
      "code": "nil"
    },
    {
      "code": "nil"
    },
    {
      "header": "TypeLevelStat",
      "content": []
    },
    {
      "code": "LevelStat"
    },
    {
      "paragraph": "The actor's current level. The NPC's level progress. The NPC's attribute contributions towards the next level up. Values affect how much each attribute can be increased at level up. The NPC's attribute contributions towards the next level up. Values affect the graphic used on the level up screen."
    },
    {
      "header": "TypeLevelledListItem",
      "content": []
    },
    {
      "code": "LevelledListItem"
    },
    {
      "paragraph": "Item id The minimum player level at which this item can occur"
    },
    {
      "header": "TypeLight",
      "content": []
    },
    {
      "code": "Light"
    },
    {
      "paragraph": "#Item Creates a#LightRecordwithout adding it to the world database. Whether the object is a Light. Returns the read-only#LightRecordof a Light A read-only list of all#LightRecords in the world database."
    },
    {
      "header": "TypeLightRecord",
      "content": []
    },
    {
      "code": "LightRecord"
    },
    {
      "paragraph": "VFS path to the icon Record id True if the light can be carried by actors and appears up in their inventory. If true, the light will apply to actors and other moving objects True if the light acts like a fire. If true, the light will reduce light instead of increasing it. If true, the light will not emit any light or sound while placed in the world. It will still work in the inventory. VFS path to the model MWScript on this light (can be nil) Human-readable name VFS path to the sound"
    },
    {
      "header": "TypeLockable",
      "content": []
    },
    {
      "code": "Lockable"
    },
    {
      "paragraph": "Returns the key record of a lockable object(door, container) Returns the lock level of a lockable object(door, container). Returns the trap spell of a lockable object(door, container) Returns true if the lockable object is locked, and false if it is not. Sets the lock level level of a lockable object(door, container);Locks if not already locked; Must be used in a global script. Whether the object is a Lockable. Sets the key of a lockable object(door, container); removes it if empty string is provided. Sets the trap spell of a lockable object(door, container); removes it if empty string is provided. Unlocks the lockable object."
    },
    {
      "header": "TypeLockpick",
      "content": []
    },
    {
      "code": "Lockpick"
    },
    {
      "paragraph": "#Item Whether the object is a Lockpick. Returns the read-only#LockpickRecordof a lockpick A read-only list of all#LockpickRecords in the world database."
    },
    {
      "header": "TypeLockpickRecord",
      "content": []
    },
    {
      "code": "LockpickRecord"
    },
    {
      "paragraph": "VFS path to the icon The record ID of the lockpick The maximum number of uses of this lockpick VFS path to the model MWScript on this lockpick (can be nil) The name of the lockpick The quality of the lockpick"
    },
    {
      "header": "TypeMiscellaneous",
      "content": []
    },
    {
      "code": "Miscellaneous"
    },
    {
      "paragraph": "#Item Creates a#MiscellaneousRecordwithout adding it to the world database. (DEPRECATED, use itemData(item).soul) Returns the read-only soul of a miscellaneous item Whether the object is a Miscellaneous. Returns the read-only#MiscellaneousRecordof a miscellaneous item A read-only list of all#MiscellaneousRecords in the world database. (DEPRECATED, use itemData(item).soul) Sets the soul of a miscellaneous item, intended for soul gem objects; Must be used in a global script."
    },
    {
      "header": "TypeMiscellaneousRecord",
      "content": []
    },
    {
      "code": "MiscellaneousRecord"
    },
    {
      "paragraph": "VFS path to the icon The record ID of the miscellaneous item VFS path to the model MWScript on this miscellaneous item (can be nil) The name of the miscellaneous item"
    },
    {
      "header": "TypeNPC",
      "content": []
    },
    {
      "code": "NPC"
    },
    {
      "paragraph": "#Actor #Classes: Class Data Clear expelling of NPC from given faction. Expel NPC from given faction. Returns the current base disposition of the provided NPC. Get the total weight that the actor can carry. Returns the current disposition of the provided NPC. Get rank of given NPC in given faction. Get reputation of given actor in given faction. Get all factions in which NPC has a membership. Check if NPC is expelled from given faction. Whether the NPC or player is in the werewolf form at the moment. Add given actor to given faction. Remove given actor from given faction. Modify the base disposition of the provided NPC by a certain amount (only in global scripts or on self). Adjust rank of given NPC in given faction. Adjust reputation of given actor in given faction. Whether the object is an NPC or a Player. #Races: Race data Returns the read-only#NpcRecordof an NPC Set the base disposition of the provided NPC (only in global scripts or on self). Set rank of given NPC in given faction. Set reputation of given actor in given faction."
    },
    {
      "header": "TypeNpcRecord",
      "content": []
    },
    {
      "code": "NpcRecord"
    },
    {
      "paragraph": "NPC's starting disposition The base barter gold of the NPC Name of the NPC's class (e. g. Acrobat) Path to the hair body part model Path to the head body part model The record ID of the NPC whether the NPC is essential The gender setting of the NPC whether the NPC respawns after death Path to the model associated with this NPC, used for animations. MWScript on this NPC (can be nil) The services of the NPC, in a table. Value is if the service is provided or not, and they are indexed by: Spells, Spellmaking, Enchanting, Training, Repair, Barter, Weapon, Armor, Clothing, Books, Ingredients, Picks, Probes, Lights, Apparatus, RepairItems, Misc, Potions, MagicItems, Travel. A list of#TravelDestinations for this NPC."
    },
    {
      "header": "TypeNpcStats",
      "content": []
    },
    {
      "code": "NpcStats"
    },
    {
      "header": "TypePlayer",
      "content": []
    },
    {
      "code": "Player"
    },
    {
      "paragraph": "Values that can be used with getControlSwitch/setControlSwitch. #NPC #BirthSigns: Birth Sign Data Get state of a control switch. Returns the bounty or crime level of the player Whether the character generation for this player is finished. Whether teleportation for this player is enabled. Whether the object is a player. Returns a list containing quests#PlayerQuestfor the specified player, indexed by quest ID. Send an event to menu scripts. Can be used only in global scripts. Set state of a control switch. Sets the bounty or crime level of the player, may only be used in global scripts Enables or disables teleportation for this player."
    },
    {
      "header": "TypePlayerQuest",
      "content": []
    },
    {
      "code": "PlayerQuest"
    },
    {
      "paragraph": "Sets the quest stage for the given quest, on the given player, and adds the entry to the journal, if there is an entry at the specified stage. Whether the quest is finished (global and player scripts can change it). The quest id. The quest stage (global and player scripts can change it). Changing the stage starts the quest if it wasn't started. Whether the quest is started."
    },
    {
      "header": "TypePotion",
      "content": []
    },
    {
      "code": "Potion"
    },
    {
      "paragraph": "#Item Creates a#PotionRecordwithout adding it to the world database. Whether the object is a Potion. Returns the read-only#PotionRecordof a potion A read-only list of all#PotionRecords in the world database."
    },
    {
      "header": "TypePotionRecord",
      "content": []
    },
    {
      "code": "PotionRecord"
    },
    {
      "paragraph": "The effects (openmw.core#MagicEffectWithParams) of the potion VFS path to the icon Record id VFS path to the model MWScript on this potion (can be nil) Human-readable name"
    },
    {
      "header": "TypeProbe",
      "content": []
    },
    {
      "code": "Probe"
    },
    {
      "paragraph": "#Item Whether the object is a Probe. Returns the read-only#ProbeRecordof a probe A read-only list of all#ProbeRecords in the world database."
    },
    {
      "header": "TypeProbeRecord",
      "content": []
    },
    {
      "code": "ProbeRecord"
    },
    {
      "paragraph": "VFS path to the icon The record ID of the probe The maximum number of uses of this probe VFS path to the model MWScript on this probe (can be nil) The name of the probe The quality of the probe"
    },
    {
      "header": "TypeRaceRecord",
      "content": []
    },
    {
      "code": "RaceRecord"
    },
    {
      "paragraph": "A read-only table of attribute ID to base value Race description Height values Race id True if this race is a beast race True if the player can pick this race in character generation Race name A map of bonus skill points by skill ID A read-only list containing the ids of all spells inherent to the race Weight values"
    },
    {
      "header": "TypeRaces",
      "content": []
    },
    {
      "code": "Races"
    },
    {
      "paragraph": "Returns a read-only#RaceRecord A read-only list of all#RaceRecords in the world database."
    },
    {
      "header": "TypeRepair",
      "content": []
    },
    {
      "code": "Repair"
    },
    {
      "paragraph": "#Item Whether the object is a Repair. Returns the read-only#RepairRecordof a repair tool A read-only list of all#RepairRecords in the world database."
    },
    {
      "header": "TypeRepairRecord",
      "content": []
    },
    {
      "code": "RepairRecord"
    },
    {
      "paragraph": "VFS path to the icon The record ID of the repair tool The maximum number of uses of this repair tool VFS path to the model MWScript on this repair tool (can be nil) The name of the repair tool The quality of the repair tool"
    },
    {
      "header": "TypeSTANCE",
      "content": []
    },
    {
      "code": "STANCE"
    },
    {
      "paragraph": "Default stance Magic stance Weapon stance"
    },
    {
      "header": "TypeSkillIncreasesForAttributeStats",
      "content": []
    },
    {
      "code": "SkillIncreasesForAttributeStats"
    },
    {
      "paragraph": "Number of contributions to agility for the next level up. Number of contributions to endurance for the next level up. Number of contributions to intelligence for the next level up. Number of contributions to luck for the next level up. Number of contributions to personality for the next level up. Number of contributions to speed for the next level up. Number of contributions to strength for the next level up. Number of contributions to willpower for the next level up."
    },
    {
      "header": "TypeSkillIncreasesForSpecializationStats",
      "content": []
    },
    {
      "code": "SkillIncreasesForSpecializationStats"
    },
    {
      "paragraph": "Number of contributions to combat specialization for the next level up. Number of contributions to magic specialization for the next level up. Number of contributions to stealth specialization for the next level up."
    },
    {
      "header": "TypeSkillStat",
      "content": []
    },
    {
      "code": "SkillStat"
    },
    {
      "paragraph": "The NPC's base skill value. The amount the skill has been damaged. The NPC's current skill value (read-only.) The skill's modifier. [0-1] The NPC's skill progress."
    },
    {
      "header": "TypeSkillStats",
      "content": []
    },
    {
      "code": "SkillStats"
    },
    {
      "paragraph": "Acrobatics (returns#SkillStat) Alchemy (returns#SkillStat) Alteration (returns#SkillStat) Armorer (returns#SkillStat) Athletics (returns#SkillStat) Axe (returns#SkillStat) Block (returns#SkillStat) Blunt Weapon (returns#SkillStat) Conjuration (returns#SkillStat) Destruction (returns#SkillStat) Enchant (returns#SkillStat) Hand To Hand (returns#SkillStat) Heavy Armor (returns#SkillStat) Illusion (returns#SkillStat) Light Armor (returns#SkillStat) Long Blade (returns#SkillStat) Marksman (returns#SkillStat) Medium Armor (returns#SkillStat) Mercantile (returns#SkillStat) Mysticism (returns#SkillStat) Restoration (returns#SkillStat) Security (returns#SkillStat) Short Blade (returns#SkillStat) Sneak (returns#SkillStat) Spear (returns#SkillStat) Speechcraft (returns#SkillStat) Unarmored (returns#SkillStat)"
    },
    {
      "header": "TypeStatic",
      "content": []
    },
    {
      "code": "Static"
    },
    {
      "paragraph": "Whether the object is a Static. Returns the read-only#StaticRecordof a Static A read-only list of all#StaticRecords in the world database."
    },
    {
      "header": "TypeStaticRecord",
      "content": []
    },
    {
      "code": "StaticRecord"
    },
    {
      "paragraph": "Record id VFS path to the model"
    },
    {
      "header": "TypeTravelDestination",
      "content": []
    },
    {
      "code": "TravelDestination"
    },
    {
      "paragraph": "ID of the Destination cell for this TravelDestination, Can be used withopenmw_world#world.getCellById. Destination position for this TravelDestination. Destination rotation for this TravelDestination."
    },
    {
      "header": "TypeWeapon",
      "content": []
    },
    {
      "code": "Weapon"
    },
    {
      "paragraph": "#WeaponTYPE #Item Creates a#WeaponRecordwithout adding it to the world database. Whether the object is a Weapon. Returns the read-only#WeaponRecordof a weapon A read-only list of all#WeaponRecords in the world database."
    },
    {
      "header": "TypeWeaponRecord",
      "content": []
    },
    {
      "code": "WeaponRecord"
    },
    {
      "paragraph": "The enchantment ID of this weapon (can be nil) VFS path to the icon Record id VFS path to the model MWScript on this weapon (can be nil) Human-readable name SeeWeapon.TYPE"
    },
    {
      "header": "TypeWeaponTYPE",
      "content": []
    },
    {
      "code": "WeaponTYPE"
    },
    {
      "header": "Typetypes",
      "content": []
    },
    {
      "code": "types"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#Activatorfunctions Common#Actorfunctions for Creature, NPC, and Player. #Apparatusfunctions #Armorfunctions #Bookfunctions #Clothingfunctions #Containerfunctions #Creaturefunctions #Doorfunctions Functions for#ESM4Activatorobjects Functions for#ESM4Ammunitionobjects Functions for#ESM4Armorobjects Functions for#ESM4Bookobjects Functions for#ESM4Clothingobjects Functions for#ESM4Doorobjects Functions for#ESM4Floraobjects Functions for#ESM4Ingredientobjects Functions for#ESM4ItemModobjects Functions for#ESM4Lightobjects Functions for#ESM4Miscellaneousobjects Functions for#ESM4MovableStaticobjects Functions for#ESM4Potionobjects Functions for#ESM4Staticobjects Functions for#ESM4StaticCollectionobjects Functions for#ESM4Terminalobjects Functions for#ESM4Weaponobjects #Ingredientfunctions #Itemfunctions (all items that can be placed to an inventory or container) #CreatureLevelledListfunctions #Lightfunctions #Lockablefunctions #Lockpickfunctions Functions for#Miscellaneousobjects #NPCfunctions #Playerfunctions #Potionfunctions #Probefunctions #Repairfunctions Functions for#Staticobjects #Weaponfunctions"
    },
    {
      "header": "TypeAIStat",
      "content": []
    },
    {
      "code": "AIStat"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "The stat's base value. The actor's current ai value (read-only.) The stat's modifier."
    },
    {
      "header": "TypeAIStats",
      "content": []
    },
    {
      "code": "AIStats"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Alarm (returns#AIStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#AIStat: Fight (returns#AIStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#AIStat: Flee (returns#AIStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#AIStat: Hello (returns#AIStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#AIStat:"
    },
    {
      "header": "TypeActivator",
      "content": []
    },
    {
      "code": "Activator"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Creates a#ActivatorRecordwithout adding it to the world database. Useopenmw_world#world.createRecordto add the record to the world."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#ActivatorRecordactivator: \nA Lua table with the fields of a ActivatorRecord, with an optional fieldtemplatethat accepts a#ActivatorRecordas a base."
    },
    {
      "code": "#ActivatorRecord\nactivator"
    },
    {
      "code": "template"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#ActivatorRecord:A strongly typed Activator record. Whether the object is an Activator."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#ActivatorRecordof an activator"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#ActivatorRecord: A read-only list of all#ActivatorRecords in the world database. Implementsiterables#Listof #ActivatorRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.Activator.records['example_recordid']"
    },
    {
      "code": "local record = types.Activator.records['example_recordid']"
    },
    {
      "code": "local record = types.Activator.records[1]"
    },
    {
      "code": "local record = types.Activator.records[1]"
    },
    {
      "header": "TypeActivatorRecord",
      "content": []
    },
    {
      "code": "ActivatorRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Record id VFS path to the model MWScript on this activator (can be nil) Human-readable name"
    },
    {
      "header": "TypeActor",
      "content": []
    },
    {
      "code": "Actor"
    },
    {
      "paragraph": "Common functions for Creature, NPC, and Player."
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Available#EQUIPMENT_SLOTvalues. Used inActor.getEquipment(obj)andActor.setEquipment(obj, eqp)."
    },
    {
      "code": "Actor.getEquipment(obj)"
    },
    {
      "code": "Actor.setEquipment(obj, eqp)"
    },
    {
      "paragraph": "#STANCE Return the active magic effects (#ActorActiveEffects) currently affecting the given actor."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#ActorActiveEffects: Return the active spells (#ActorActiveSpells) currently affecting the given actor."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#ActorActiveSpells: Returns true if the object is an actor and is able to move. For dead, paralyzed,\nor knocked down actors it returns false."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Clears the actor's selected castable(spell or enchanted item)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "Current speed."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Get the total weight of everything the actor is carrying, plus modifications from magic effects."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Get equipment. Has two overloads:"
    },
    {
      "code": "slot"
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "#number slot: \nOptional number of the equipment slot"
    },
    {
      "code": "#number slot"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#EquipmentTable,openmw.core#GameObject: Agent bounds to be used for pathfinding functions."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#table:withshapeTypeandhalfExtents"
    },
    {
      "code": "shapeType"
    },
    {
      "code": "halfExtents"
    },
    {
      "paragraph": "Speed of running. For dead actors it still returns a positive value."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Get currently selected enchanted item"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObject, nil enchanted item or nil Get currently selected spell"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "openmw.core#Spell, nil Returns the current stance (whether a weapon/spell is readied), see the list of#STANCEvalues."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Speed of walking. For dead actors it still returns a positive value."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Returnstrueif the item is equipped on the actor."
    },
    {
      "code": "true"
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "openmw.core#GameObjectitem:"
    },
    {
      "code": "openmw.core#GameObject\nitem"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Actor inventory."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "openmw.core#Inventory: Check if the given actor is dead (health reached 0, so death process started)."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Check if the given actor's death process is finished."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Check if given actor is in the actors processing range."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Is the actor standing on ground. Can be called only from a local script."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Is the actor in water. Can be called only from a local script."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Whether the object is an actor."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Set equipment. Keys in the table are equipment slots (see#EQUIPMENT_SLOT). Each\nvalue can be either aGameObjector recordId. Raises an error if\nthe actor doesn't have equipment slots and table is not empty. Can be\nused only in local scripts and only on self."
    },
    {
      "code": "GameObject"
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "#EquipmentTableequipment:"
    },
    {
      "code": "#EquipmentTable\nequipment"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local self = require('openmw.self')\nlocal Actor = require('openmw.types').Actor\nActor.setEquipment(self, {}) -- unequip all"
    },
    {
      "code": "local self = require('openmw.self')\nlocal Actor = require('openmw.types').Actor\nActor.setEquipment(self, {}) -- unequip all"
    },
    {
      "paragraph": "Set currently selected enchanted item, equipping it if applicable"
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "openmw.core#GameObjectitem: \nenchanted item"
    },
    {
      "code": "openmw.core#GameObject\nitem"
    },
    {
      "paragraph": "Set selected spell"
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "openmw.core#Spellspell: \nSpell (can be nil)"
    },
    {
      "code": "openmw.core#Spell\nspell"
    },
    {
      "paragraph": "Sets the current stance (whether a weapon/spell is readied), see the list of#STANCEvalues. Can be used only in local scripts on self."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "#number stance:"
    },
    {
      "code": "#number stance"
    },
    {
      "paragraph": "Return the spells (#ActorSpells) of the given actor."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#ActorSpells: The actor's stats."
    },
    {
      "header": "TypeActorActiveEffects",
      "content": []
    },
    {
      "code": "ActorActiveEffects"
    },
    {
      "paragraph": "Read-only list of effects currently affecting the actor."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "-- print active effects\nfor _, effect in pairs(Actor.activeEffects(self)) do\n    print('Active Effect: '..effect.id..', attribute='..tostring(effect.affectedAttribute)..', skill='..tostring(effect.affectedSkill)..', magnitude='..tostring(effect.magnitude))\nend"
    },
    {
      "code": "-- print active effects\nfor _, effect in pairs(Actor.activeEffects(self)) do\n    print('Active Effect: '..effect.id..', attribute='..tostring(effect.affectedAttribute)..', skill='..tostring(effect.affectedSkill)..', magnitude='..tostring(effect.magnitude))\nend"
    },
    {
      "code": "-- Check for a specific effect\nlocal effect = Actor.activeEffects(self):getEffect(core.magic.EFFECT_TYPE.Telekinesis)\nif effect.magnitude ~= 0 then\n    print(effect.id..', attribute='..tostring(effect.affectedAttribute)..', skill='..tostring(effect.affectedSkill)..', magnitude='..tostring(effect.magnitude))\nelse\n    print('No Telekinesis effect')\nend"
    },
    {
      "code": "-- Check for a specific effect\nlocal effect = Actor.activeEffects(self):getEffect(core.magic.EFFECT_TYPE.Telekinesis)\nif effect.magnitude ~= 0 then\n    print(effect.id..', attribute='..tostring(effect.affectedAttribute)..', skill='..tostring(effect.affectedSkill)..', magnitude='..tostring(effect.magnitude))\nelse\n    print('No Telekinesis effect')\nend"
    },
    {
      "code": "-- Check for a specific effect targeting a specific attribute.\nlocal effect = Actor.activeEffects(self):getEffect(core.magic.EFFECT_TYPE.FortifyAttribute, 'luck')\nif effect.magnitude ~= 0 then\n    print(effect.id..', attribute='..tostring(effect.affectedAttribute)..', skill='..tostring(effect.affectedSkill)..', magnitude='..tostring(effect.magnitude))\nelse\n    print('No Fortify Luck effect')\nend"
    },
    {
      "code": "-- Check for a specific effect targeting a specific attribute.\nlocal effect = Actor.activeEffects(self):getEffect(core.magic.EFFECT_TYPE.FortifyAttribute, 'luck')\nif effect.magnitude ~= 0 then\n    print(effect.id..', attribute='..tostring(effect.affectedAttribute)..', skill='..tostring(effect.affectedSkill)..', magnitude='..tostring(effect.magnitude))\nelse\n    print('No Fortify Luck effect')\nend"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Get a specific active effect on the actor."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#string effectId: \neffect ID"
    },
    {
      "code": "#string effectId"
    },
    {
      "paragraph": "#string extraParam: \nOptional skill or attribute ID"
    },
    {
      "code": "#string extraParam"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "openmw.core#ActiveEffect: Permanently modifies the magnitude of an active effect by modifying it by the provided value. Note that some active effect values, such as fortify attribute effects, have no practical effect of their own, and must be paired with explicitly modifying the target stat to have any effect."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#number value:"
    },
    {
      "code": "#number value"
    },
    {
      "paragraph": "#string effectId: \neffect ID"
    },
    {
      "code": "#string effectId"
    },
    {
      "paragraph": "#string extraParam: \nOptional skill or attribute ID"
    },
    {
      "code": "#string extraParam"
    },
    {
      "paragraph": "Completely removes the active effect from the actor."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#string effectId: \neffect ID"
    },
    {
      "code": "#string effectId"
    },
    {
      "paragraph": "#string extraParam: \nOptional skill or attribute ID"
    },
    {
      "code": "#string extraParam"
    },
    {
      "paragraph": "(Note that using this function will override and conflict with all other sources of this effect, you probably want to useActorActiveEffects.modifyinstead, this function is provided for mwscript parity only)\nPermanently modifies the magnitude of an active effect to be exactly equal to the provided value. Note that although the modification is permanent, the magnitude will not stay equal to the value if any active spells with this effects are added/removed.\nAlso see the notes onActorActiveEffects.modify"
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#number value:"
    },
    {
      "code": "#number value"
    },
    {
      "paragraph": "#string effectId: \neffect ID"
    },
    {
      "code": "#string effectId"
    },
    {
      "paragraph": "#string extraParam: \nOptional skill or attribute ID"
    },
    {
      "code": "#string extraParam"
    },
    {
      "header": "TypeActorActiveSpells",
      "content": []
    },
    {
      "code": "ActorActiveSpells"
    },
    {
      "paragraph": "Read-only list of spells currently affecting the actor. Can be iterated over for a list ofopenmw.core#ActiveSpell"
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "-- print active spells\nfor _, spell in pairs(Actor.activeSpells(self)) do\n    print('Active Spell: '..tostring(spell))\nend"
    },
    {
      "code": "-- print active spells\nfor _, spell in pairs(Actor.activeSpells(self)) do\n    print('Active Spell: '..tostring(spell))\nend"
    },
    {
      "code": "-- Check for a specific spell\nif Actor.activeSpells(self):isSpellActive('bound longbow') then\n    print('Player has bound longbow')\nelse\n    print('Player does not have bound longbow')\nend"
    },
    {
      "code": "-- Check for a specific spell\nif Actor.activeSpells(self):isSpellActive('bound longbow') then\n    print('Player has bound longbow')\nelse\n    print('Player does not have bound longbow')\nend"
    },
    {
      "code": "-- Print all information about active spells\nfor id, params in pairs(Actor.activeSpells(self)) do\n    print('active spell '..tostring(id)..':')\n    print('  name: '..tostring(params.name))\n    print('  id: '..tostring(params.id))\n    print('  item: '..tostring(params.item))\n    print('  caster: '..tostring(params.caster))\n    print('  effects: '..tostring(params.effects))\n    for _, effect in pairs(params.effects) do\n        print('  -> effects['..tostring(effect)..']:')\n        print('       id: '..tostring(effect.id))\n        print('       name: '..tostring(effect.name))\n        print('       affectedSkill: '..tostring(effect.affectedSkill))\n        print('       affectedAttribute: '..tostring(effect.affectedAttribute))\n        print('       magnitudeThisFrame: '..tostring(effect.magnitudeThisFrame))\n        print('       minMagnitude: '..tostring(effect.minMagnitude))\n        print('       maxMagnitude: '..tostring(effect.maxMagnitude))\n        print('       duration: '..tostring(effect.duration))\n        print('       durationLeft: '..tostring(effect.durationLeft))\n    end\nend"
    },
    {
      "code": "-- Print all information about active spells\nfor id, params in pairs(Actor.activeSpells(self)) do\n    print('active spell '..tostring(id)..':')\n    print('  name: '..tostring(params.name))\n    print('  id: '..tostring(params.id))\n    print('  item: '..tostring(params.item))\n    print('  caster: '..tostring(params.caster))\n    print('  effects: '..tostring(params.effects))\n    for _, effect in pairs(params.effects) do\n        print('  -> effects['..tostring(effect)..']:')\n        print('       id: '..tostring(effect.id))\n        print('       name: '..tostring(effect.name))\n        print('       affectedSkill: '..tostring(effect.affectedSkill))\n        print('       affectedAttribute: '..tostring(effect.affectedAttribute))\n        print('       magnitudeThisFrame: '..tostring(effect.magnitudeThisFrame))\n        print('       minMagnitude: '..tostring(effect.minMagnitude))\n        print('       maxMagnitude: '..tostring(effect.maxMagnitude))\n        print('       duration: '..tostring(effect.duration))\n        print('       durationLeft: '..tostring(effect.durationLeft))\n    end\nend"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Adds a new spell to the list of active spells (only in global scripts or on self). Note that this does not play any related VFX or sounds."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#table options: \nA table of parameters. Must contain the following required parameters:"
    },
    {
      "code": "#table options"
    },
    {
      "code": "id"
    },
    {
      "code": "effects"
    },
    {
      "paragraph": "And may contain the following optional parameters:"
    },
    {
      "code": "name"
    },
    {
      "code": "ignoreResistances"
    },
    {
      "code": "ignoreSpellAbsorption"
    },
    {
      "code": "ignoreReflect"
    },
    {
      "code": "caster"
    },
    {
      "code": "item"
    },
    {
      "code": "stackable"
    },
    {
      "code": "quiet"
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "-- Adds the effect of the chameleon spell to the character\nActor.activeSpells(self):add({id = 'chameleon', effects = { 0 }})"
    },
    {
      "code": "-- Adds the effect of the chameleon spell to the character\nActor.activeSpells(self):add({id = 'chameleon', effects = { 0 }})"
    },
    {
      "code": "-- Adds the effect of a standard potion of intelligence, without consuming any potions from the character's inventory.\n-- Note that stackable = true to let the effect stack like a potion should.\nActor.activeSpells(self):add({id = 'p_fortify_intelligence_s', effects = { 0 }, stackable = true})"
    },
    {
      "code": "-- Adds the effect of a standard potion of intelligence, without consuming any potions from the character's inventory.\n-- Note that stackable = true to let the effect stack like a potion should.\nActor.activeSpells(self):add({id = 'p_fortify_intelligence_s', effects = { 0 }, stackable = true})"
    },
    {
      "code": "-- Adds the negative effect of Greef twice over, and renames it to Good Greef.\nActor.activeSpells(self):add({id = 'potion_comberry_brandy_01', effects = { 1, 1 }, stackable = true, name = 'Good Greef'})"
    },
    {
      "code": "-- Adds the negative effect of Greef twice over, and renames it to Good Greef.\nActor.activeSpells(self):add({id = 'potion_comberry_brandy_01', effects = { 1, 1 }, stackable = true, name = 'Good Greef'})"
    },
    {
      "code": "-- Has the same effect as if the actor ate a chokeweed. With the same variable effect based on skill / random chance.\nActor.activeSpells(self):add({id = 'ingred_chokeweed_01', effects = { 0 }, stackable = true, name = 'Chokeweed'})\n-- Same as above, but uses a different index. Note that if multiple indexes are used, the randomicity is applied separately for each effect.\nActor.activeSpells(self):add({id = 'ingred_chokeweed_01', effects = { 1 }, stackable = true, name = 'Chokeweed'})"
    },
    {
      "code": "-- Has the same effect as if the actor ate a chokeweed. With the same variable effect based on skill / random chance.\nActor.activeSpells(self):add({id = 'ingred_chokeweed_01', effects = { 0 }, stackable = true, name = 'Chokeweed'})\n-- Same as above, but uses a different index. Note that if multiple indexes are used, the randomicity is applied separately for each effect.\nActor.activeSpells(self):add({id = 'ingred_chokeweed_01', effects = { 1 }, stackable = true, name = 'Chokeweed'})"
    },
    {
      "paragraph": "If true, the actor has not used this power in the last 24h. Will return true for powers the actor does not have."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any spellOrId: \nAopenmw.core#Spellor string record id."
    },
    {
      "code": "#any spellOrId"
    },
    {
      "paragraph": "Get whether any instance of the specific spell is active on the actor."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any recordOrId: \nA record or string record ID. Valid records areopenmw.core#Spell, enchanted#Item,#IngredientRecord, or#PotionRecord."
    },
    {
      "code": "#any recordOrId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "true if spell is active, false otherwise Remove an active spell based on active spell ID (seeopenmw_core#ActiveSpell.activeSpellId). Can only be used in global scripts or on self. Can only be used to remove spells with the temporary flag set (seeopenmw_core#ActiveSpell.temporary)."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any id: \nActive spell ID."
    },
    {
      "code": "#any id"
    },
    {
      "header": "TypeActorSpells",
      "content": []
    },
    {
      "code": "ActorSpells"
    },
    {
      "paragraph": "List of spells with additional functions add/remove/clear (modification are allowed only in global scripts or on self)."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "-- print available spells\nlocal mySpells = types.Actor.spells(self)\nfor _, spell in pairs(mySpells) do print(spell.id) end"
    },
    {
      "code": "-- print available spells\nlocal mySpells = types.Actor.spells(self)\nfor _, spell in pairs(mySpells) do print(spell.id) end"
    },
    {
      "code": "-- print available spells (equivalent)\nlocal mySpells = types.Actor.spells(self)\nfor i = 1, #mySpells do print(mySpells[i].id) end"
    },
    {
      "code": "-- print available spells (equivalent)\nlocal mySpells = types.Actor.spells(self)\nfor i = 1, #mySpells do print(mySpells[i].id) end"
    },
    {
      "code": "-- add ALL spells that exist in the world\nlocal mySpells = types.Actor.spells(self)\nfor _, spell in pairs(core.magic.spells.records) do\n    if spell.type == core.magic.SPELL_TYPE.Spell then\n        mySpells:add(spell)\n    end\nend"
    },
    {
      "code": "-- add ALL spells that exist in the world\nlocal mySpells = types.Actor.spells(self)\nfor _, spell in pairs(core.magic.spells.records) do\n    if spell.type == core.magic.SPELL_TYPE.Spell then\n        mySpells:add(spell)\n    end\nend"
    },
    {
      "code": "-- add specific spell\ntypes.Actor.spells(self):add('thunder fist')"
    },
    {
      "code": "-- add specific spell\ntypes.Actor.spells(self):add('thunder fist')"
    },
    {
      "code": "-- check specific spell\nlocal mySpells = types.Actor.spells(self)\nif mySpells['thunder fist'] then print('I have thunder fist') end"
    },
    {
      "code": "-- check specific spell\nlocal mySpells = types.Actor.spells(self)\nif mySpells['thunder fist'] then print('I have thunder fist') end"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Add spell (only in global scripts or on self)."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any spellOrId:openmw.core#Spellor string spell id"
    },
    {
      "code": "#any spellOrId"
    },
    {
      "paragraph": "Remove all spells (only in global scripts or on self). Remove spell (only in global scripts or on self)."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any spellOrId:openmw.core#Spellor string spell id"
    },
    {
      "code": "#any spellOrId"
    },
    {
      "header": "TypeActorStats",
      "content": []
    },
    {
      "code": "ActorStats"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Level (returns#LevelStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#LevelStat:"
    },
    {
      "header": "TypeApparatus",
      "content": []
    },
    {
      "code": "Apparatus"
    },
    {
      "header": "Extends#Item",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#ApparatusTYPE #Item Whether the object is an Apparatus."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#ApparatusRecordof an apparatus"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#ApparatusRecord: A read-only list of all#ApparatusRecords in the world database. Implementsiterables#Listof #ApparatusRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.Apparatus.records['example_recordid']"
    },
    {
      "code": "local record = types.Apparatus.records['example_recordid']"
    },
    {
      "code": "local record = types.Apparatus.records[1]"
    },
    {
      "code": "local record = types.Apparatus.records[1]"
    },
    {
      "header": "TypeApparatusRecord",
      "content": []
    },
    {
      "code": "ApparatusRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "VFS path to the icon The record ID of the apparatus VFS path to the model MWScript on this apparatus (can be nil) The name of the apparatus The quality of the apparatus The type of apparatus. SeeApparatus.TYPE"
    },
    {
      "header": "TypeApparatusTYPE",
      "content": []
    },
    {
      "code": "ApparatusTYPE"
    },
    {
      "paragraph": "Apparatus.TYPE"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "header": "TypeArmor",
      "content": []
    },
    {
      "code": "Armor"
    },
    {
      "header": "Extends#Item",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#ArmorTYPE #Item Creates a#ArmorRecordwithout adding it to the world database, for the armor to appear correctly on the body, make sure to use a template as described below. Useopenmw_world#world.createRecordto add the record to the world."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#ArmorRecordarmor: \nA Lua table with the fields of a ArmorRecord, with an additional fieldtemplatethat accepts a#ArmorRecordas a base."
    },
    {
      "code": "#ArmorRecord\narmor"
    },
    {
      "code": "template"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#ArmorRecord:A strongly typed Armor record."
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local armorTemplate = types.Armor.record('orcish_cuirass')\nlocal armorTable = {name = \"Better Orcish Cuirass\",template = armorTemplate,baseArmor = armorTemplate.baseArmor + 10}\n --This is the new record we want to create, with a record provided as a template.\nlocal recordDraft = types.Armor.createRecordDraft(armorTable)--Need to convert the table into the record draft\nlocal newRecord = world.createRecord(recordDraft)--This creates the actual record\nworld.createObject(newRecord.id):moveInto(playerActor)--Create an instance of this object, and move it into the player's inventory"
    },
    {
      "code": "local armorTemplate = types.Armor.record('orcish_cuirass')\nlocal armorTable = {name = \"Better Orcish Cuirass\",template = armorTemplate,baseArmor = armorTemplate.baseArmor + 10}\n --This is the new record we want to create, with a record provided as a template.\nlocal recordDraft = types.Armor.createRecordDraft(armorTable)--Need to convert the table into the record draft\nlocal newRecord = world.createRecord(recordDraft)--This creates the actual record\nworld.createObject(newRecord.id):moveInto(playerActor)--Create an instance of this object, and move it into the player's inventory"
    },
    {
      "paragraph": "Whether the object is an Armor."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#ArmorRecordof an Armor"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#ArmorRecord: A read-only list of all#ArmorRecords in the world database. Implementsiterables#Listof #ArmorRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.Armor.records['example_recordid']"
    },
    {
      "code": "local record = types.Armor.records['example_recordid']"
    },
    {
      "code": "local record = types.Armor.records[1]"
    },
    {
      "code": "local record = types.Armor.records[1]"
    },
    {
      "header": "TypeArmorRecord",
      "content": []
    },
    {
      "code": "ArmorRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "The base armor rating of this armor The enchantment ID of this armor (can be nil) VFS path to the icon Record id VFS path to the model MWScript on this armor (can be nil) Human-readable name SeeArmor.TYPE"
    },
    {
      "header": "TypeArmorTYPE",
      "content": []
    },
    {
      "code": "ArmorTYPE"
    },
    {
      "paragraph": "Armor.TYPE"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "header": "TypeAttributeStat",
      "content": []
    },
    {
      "code": "AttributeStat"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "The actor's base attribute value. The amount the attribute has been damaged. The actor's current attribute value (read-only.) The attribute's modifier."
    },
    {
      "header": "TypeAttributeStats",
      "content": []
    },
    {
      "code": "AttributeStats"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Agility (returns#AttributeStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#AttributeStat: Endurance (returns#AttributeStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#AttributeStat: Intelligence (returns#AttributeStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#AttributeStat: Luck (returns#AttributeStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#AttributeStat: Personality (returns#AttributeStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#AttributeStat: Speed (returns#AttributeStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#AttributeStat: Strength (returns#AttributeStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#AttributeStat: Willpower (returns#AttributeStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#AttributeStat:"
    },
    {
      "header": "TypeBirthSignRecord",
      "content": []
    },
    {
      "code": "BirthSignRecord"
    },
    {
      "paragraph": "Birth sign data record"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Birth sign description Birth sign id Birth sign name A read-only list containing the ids of all spells gained from this sign. Birth sign texture"
    },
    {
      "header": "TypeBirthSigns",
      "content": []
    },
    {
      "code": "BirthSigns"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Returns a read-only#BirthSignRecord"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#string recordId:"
    },
    {
      "code": "#string recordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#BirthSignRecord: A read-only list of all#BirthSignRecords in the world database. Implementsiterables#Listof #BirthSignRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.NPC.classes['example_recordid']"
    },
    {
      "code": "local record = types.NPC.classes['example_recordid']"
    },
    {
      "code": "local record = types.NPC.classes[1]"
    },
    {
      "code": "local record = types.NPC.classes[1]"
    },
    {
      "header": "TypeBook",
      "content": []
    },
    {
      "code": "Book"
    },
    {
      "header": "Extends#Item",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "DEPRECATED, useopenmw.core#Skill #Item Creates a#BookRecordwithout adding it to the world database. Useopenmw_world#world.createRecordto add the record to the world."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#BookRecordbook: \nA Lua table with the fields of a BookRecord, with an optional fieldtemplatethat accepts a#BookRecordas a base."
    },
    {
      "code": "#BookRecord\nbook"
    },
    {
      "code": "template"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#BookRecord:A strongly typed Book record. Whether the object is a Book."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#BookRecordof a book"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#BookRecord: A read-only list of all#BookRecords in the world database. Implementsiterables#Listof #BookRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.Book.records['example_recordid']"
    },
    {
      "code": "local record = types.Book.records['example_recordid']"
    },
    {
      "code": "local record = types.Book.records[1]"
    },
    {
      "code": "local record = types.Book.records[1]"
    },
    {
      "header": "TypeBookRecord",
      "content": []
    },
    {
      "code": "BookRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "The enchantment ID of this book (can be nil) VFS path to the icon The record ID of the book VFS path to the model MWScript on this book (can be nil) Name of the book The skill that this book teaches. Seeopenmw.core#SKILL The text content of the book"
    },
    {
      "header": "TypeBookSKILL",
      "content": []
    },
    {
      "code": "BookSKILL"
    },
    {
      "paragraph": "Book.SKILL"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "\"acrobatics\" \"alchemy\" \"alteration\" \"armorer\" \"athletics\" \"axe\" \"block\" \"bluntweapon\" \"conjuration\" \"destruction\" \"enchant\" \"handtohand\" \"heavyarmor\" \"illusion\" \"lightarmor\" \"longblade\" \"marksman\" \"mediumarmor\" \"mercantile\" \"mysticism\" \"restoration\" \"security\" \"shortblade\" \"sneak\" \"spear\" \"speechcraft\" \"unarmored\""
    },
    {
      "header": "TypeCONTROL_SWITCH",
      "content": []
    },
    {
      "code": "CONTROL_SWITCH"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Ability to move Ability to attack Ability to jump Ability to change view direction Ability to use magic Vanity view if player doesn't touch controls for a long time Ability to toggle 1st/3rd person view"
    },
    {
      "header": "TypeClassRecord",
      "content": []
    },
    {
      "code": "ClassRecord"
    },
    {
      "paragraph": "Class data record"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "A read-only list containing the specialized attributes of the class. Class description Class id True if the player can play as this class A read-only list containing the major skills of the class. A read-only list containing the minor skills of the class. Class name Class specialization. Either combat, magic, or stealth."
    },
    {
      "header": "TypeClasses",
      "content": []
    },
    {
      "code": "Classes"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Returns a read-only#ClassRecord"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#string recordId:"
    },
    {
      "code": "#string recordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#ClassRecord: A read-only list of all#ClassRecords in the world database, may be indexed by recordId. Implementsiterables#Listof #ClassRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.NPC.classes['example_recordid']"
    },
    {
      "code": "local record = types.NPC.classes['example_recordid']"
    },
    {
      "code": "local record = types.NPC.classes[1]"
    },
    {
      "code": "local record = types.NPC.classes[1]"
    },
    {
      "header": "TypeClothing",
      "content": []
    },
    {
      "code": "Clothing"
    },
    {
      "header": "Extends#Item",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#ClothingTYPE #Item Creates a#ClothingRecordwithout adding it to the world database, for the clothing to appear correctly on the body, make sure to use a template as described below. Useopenmw_world#world.createRecordto add the record to the world."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#ClothingRecordclothing: \nA Lua table with the fields of a ClothingRecord, with an additional fieldtemplatethat accepts a#ClothingRecordas a base."
    },
    {
      "code": "#ClothingRecord\nclothing"
    },
    {
      "code": "template"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#ClothingRecord:A strongly typed clothing record."
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local clothingTemplate = types.Clothing.record('exquisite_robe_01')\nlocal clothingTable = {name = \"Better Exquisite Robe\",template = clothingTemplate,enchantCapacity = clothingTemplate.enchantCapacity + 10}\n --This is the new record we want to create, with a record provided as a template.\nlocal recordDraft = types.Clothing.createRecordDraft(clothingTable)--Need to convert the table into the record draft\nlocal newRecord = world.createRecord(recordDraft)--This creates the actual record\nworld.createObject(newRecord.id):moveInto(playerActor)--Create an instance of this object, and move it into the player's inventory"
    },
    {
      "code": "local clothingTemplate = types.Clothing.record('exquisite_robe_01')\nlocal clothingTable = {name = \"Better Exquisite Robe\",template = clothingTemplate,enchantCapacity = clothingTemplate.enchantCapacity + 10}\n --This is the new record we want to create, with a record provided as a template.\nlocal recordDraft = types.Clothing.createRecordDraft(clothingTable)--Need to convert the table into the record draft\nlocal newRecord = world.createRecord(recordDraft)--This creates the actual record\nworld.createObject(newRecord.id):moveInto(playerActor)--Create an instance of this object, and move it into the player's inventory"
    },
    {
      "paragraph": "Whether the object is a Clothing."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#ClothingRecordof a Clothing"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#ClothingRecord: A read-only list of all#ClothingRecords in the world database. Implementsiterables#Listof #ClothingRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.Clothing.records['example_recordid']"
    },
    {
      "code": "local record = types.Clothing.records['example_recordid']"
    },
    {
      "code": "local record = types.Clothing.records[1]"
    },
    {
      "code": "local record = types.Clothing.records[1]"
    },
    {
      "header": "TypeClothingRecord",
      "content": []
    },
    {
      "code": "ClothingRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "The enchantment ID of this clothing (can be nil) VFS path to the icon Record id VFS path to the model MWScript on this clothing (can be nil) Name of the clothing SeeClothing.TYPE"
    },
    {
      "header": "TypeClothingTYPE",
      "content": []
    },
    {
      "code": "ClothingTYPE"
    },
    {
      "paragraph": "Clothing.TYPE"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "header": "TypeContainer",
      "content": []
    },
    {
      "code": "Container"
    },
    {
      "header": "Extends#Lockable",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#Lockable Container content."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "openmw.core#Inventory: Returns the capacity of a container"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Returns the total weight of everything in a container"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Container content (same asContainer.content, added for consistency withActor.inventory)."
    },
    {
      "code": "Container.content"
    },
    {
      "code": "Actor.inventory"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "openmw.core#Inventory: Whether the object is a Container."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#ContainerRecordof a container"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#ContainerRecord: A read-only list of all#ContainerRecords in the world database. Implementsiterables#Listof #ContainerRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.Container.records['example_recordid']"
    },
    {
      "code": "local record = types.Container.records['example_recordid']"
    },
    {
      "code": "local record = types.Container.records[1]"
    },
    {
      "code": "local record = types.Container.records[1]"
    },
    {
      "header": "TypeContainerRecord",
      "content": []
    },
    {
      "code": "ContainerRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Record id Whether items can be placed in the container Whether the container respawns its contents VFS path to the model MWScript on this container (can be nil) Human-readable name capacity of this container"
    },
    {
      "header": "TypeControlSwitch",
      "content": []
    },
    {
      "code": "ControlSwitch"
    },
    {
      "paragraph": "String id of a#CONTROL_SWITCH"
    },
    {
      "header": "TypeCreature",
      "content": []
    },
    {
      "code": "Creature"
    },
    {
      "header": "Extends#Actor",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#CreatureTYPE #Actor Whether the object is a creature."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#CreatureRecordof a creature"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#CreatureRecord: A read-only list of all#CreatureRecords in the world database, may be indexed by recordId. Implementsiterables#Listof #CreatureRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.NPC.classes['example_recordid']"
    },
    {
      "code": "local record = types.NPC.classes['example_recordid']"
    },
    {
      "code": "local record = types.NPC.classes[1]"
    },
    {
      "code": "local record = types.NPC.classes[1]"
    },
    {
      "header": "TypeCreatureAttack",
      "content": []
    },
    {
      "code": "CreatureAttack"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Maximum attack damage. Minimum attack damage."
    },
    {
      "header": "TypeCreatureLevelledList",
      "content": []
    },
    {
      "code": "CreatureLevelledList"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Whether the object is a CreatureLevelledList."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#CreatureLevelledListRecordof a levelled creature"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#CreatureLevelledListRecord: A read-only list of all#CreatureLevelledListRecords in the world database. Implementsiterables#Listof #CreatureLevelledListRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.CreatureLevelledList.records['example_recordid']"
    },
    {
      "code": "local record = types.CreatureLevelledList.records['example_recordid']"
    },
    {
      "code": "local record = types.CreatureLevelledList.records[1]"
    },
    {
      "code": "local record = types.CreatureLevelledList.records[1]"
    },
    {
      "header": "TypeCreatureLevelledListRecord",
      "content": []
    },
    {
      "code": "CreatureLevelledListRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Calculate from all levels <= player level, not just the closest below player Chance this list won't spawn anything [0-1] Picks a random id from the levelled list."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#CreatureLevelledListRecordlistRecord: \nThe list"
    },
    {
      "code": "openmw.core#CreatureLevelledListRecord\nlistRecord"
    },
    {
      "paragraph": "#number MaxLvl: \nThe maximum level to select entries for"
    },
    {
      "code": "#number MaxLvl"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#string:An id Record id"
    },
    {
      "header": "TypeCreatureRecord",
      "content": []
    },
    {
      "code": "CreatureRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "A table of the 3 randomly selected attacks used by creatures that do not carry weapons. The table consists of 6 numbers split into groups of 2 values corresponding to minimum and maximum damage in that order. Record id of a base creature, which was modified to create this one The base barter gold of the creature whether the creature can fly whether the creature can swim whether the creature can use weapons and shields whether the creature can walk The base combat skill of the creature. This is the skill value used for all skills with a 'combat' specialization The record ID of the creature whether the creature is a biped whether the creature is essential whether the creature respawns after death The base magic skill of the creature. This is the skill value used for all skills with a 'magic' specialization VFS path to the creature's model MWScript on this creature (can be nil) The services of the creature, in a table. Value is if the service is provided or not, and they are indexed by: Spells, Spellmaking, Enchanting, Training, Repair, Barter, Weapon, Armor, Clothing, Books, Ingredients, Picks, Probes, Lights, Apparatus, RepairItems, Misc, Potions, MagicItems, Travel. The soul value of the creature record The base stealth skill of the creature. This is the skill value used for all skills with a 'stealth' specialization A list of#TravelDestinations for this creature. TheCreature.TYPEof the creature"
    },
    {
      "header": "TypeCreatureTYPE",
      "content": []
    },
    {
      "code": "CreatureTYPE"
    },
    {
      "paragraph": "Creature.TYPE"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "header": "TypeDoor",
      "content": []
    },
    {
      "code": "Door"
    },
    {
      "header": "Extends#Lockable",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#DoorSTATE"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local state = types.Door.STATE[\"Idle\"]"
    },
    {
      "code": "local state = types.Door.STATE[\"Idle\"]"
    },
    {
      "paragraph": "Opens/Closes the door. Can only be used in global scripts or on self."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "paragraph": "#boolean openState: \nOptional whether the door should be opened or closed. If not provided, the door will switch to the opposite state."
    },
    {
      "code": "#boolean openState"
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "types.Door.activateDoor(doorObject)"
    },
    {
      "code": "types.Door.activateDoor(doorObject)"
    },
    {
      "code": "types.Door.activateDoor(doorObject, true)"
    },
    {
      "code": "types.Door.activateDoor(doorObject, true)"
    },
    {
      "code": "types.Door.activateDoor(doorObject, false)"
    },
    {
      "code": "types.Door.activateDoor(doorObject, false)"
    },
    {
      "paragraph": "#Lockable Destination cell (only if a teleport door)."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "openmw.core#Cell: Destination (only if a teleport door)."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "openmw.util#Vector3: Destination rotation (only if a teleport door)."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "openmw.util#Transform: Gets the state of the door."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#DoorSTATE: Checks if the door is fully closed. Returns false if the door is currently opening or closing."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Checks if the door is fully open. Returns false if the door is currently opening or closing."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Whether the door is a teleport."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Whether the object is a Door."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#DoorRecordof a door"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#DoorRecord: A read-only list of all#DoorRecords in the world database. Implementsiterables#Listof #DoorRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.Door.records['example_recordid']"
    },
    {
      "code": "local record = types.Door.records['example_recordid']"
    },
    {
      "code": "local record = types.Door.records[1]"
    },
    {
      "code": "local record = types.Door.records[1]"
    },
    {
      "header": "TypeDoorRecord",
      "content": []
    },
    {
      "code": "DoorRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "The sound id for door closing Record id VFS path to the model MWScript on this door (can be nil) Human-readable name The sound id for door opening"
    },
    {
      "header": "TypeDoorSTATE",
      "content": []
    },
    {
      "code": "DoorSTATE"
    },
    {
      "paragraph": "Door.STATE"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "The door is in the process of closing. The door is either closed or open (usually closed). The door is in the process of opening."
    },
    {
      "header": "TypeDynamicStat",
      "content": []
    },
    {
      "code": "DynamicStat"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "header": "TypeDynamicStats",
      "content": []
    },
    {
      "code": "DynamicStats"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Fatigue (returns#DynamicStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#DynamicStat: Health (returns#DynamicStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#DynamicStat: Magicka (returns#DynamicStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#DynamicStat:"
    },
    {
      "header": "TypeEQUIPMENT_SLOT",
      "content": []
    },
    {
      "code": "EQUIPMENT_SLOT"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "header": "TypeESM4Activator",
      "content": []
    },
    {
      "code": "ESM4Activator"
    },
    {
      "header": "TypeESM4Ammunition",
      "content": []
    },
    {
      "code": "ESM4Ammunition"
    },
    {
      "header": "TypeESM4Armor",
      "content": []
    },
    {
      "code": "ESM4Armor"
    },
    {
      "header": "TypeESM4Book",
      "content": []
    },
    {
      "code": "ESM4Book"
    },
    {
      "header": "TypeESM4Clothing",
      "content": []
    },
    {
      "code": "ESM4Clothing"
    },
    {
      "header": "TypeESM4Door",
      "content": []
    },
    {
      "code": "ESM4Door"
    },
    {
      "header": "Extends#Lockable",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#Lockable Destination cell (only if a teleport door)."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "openmw.core#Cell: Destination (only if a teleport door)."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "openmw.util#Vector3: Destination rotation (only if a teleport door)."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "openmw.util#Transform: Whether the door is a teleport."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Whether the object is a ESM4Door."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#ESM4DoorRecordof a door"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#ESM4DoorRecord: A read-only list of all#ESM4DoorRecords in the world database. Implementsiterables#Listof #ESM4DoorRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.ESM4Door.records['example_recordid']"
    },
    {
      "code": "local record = types.ESM4Door.records['example_recordid']"
    },
    {
      "code": "local record = types.ESM4Door.records[1]"
    },
    {
      "code": "local record = types.ESM4Door.records[1]"
    },
    {
      "header": "TypeESM4DoorRecord",
      "content": []
    },
    {
      "code": "ESM4DoorRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Record id VFS path to the model Human-readable name"
    },
    {
      "header": "TypeESM4Flora",
      "content": []
    },
    {
      "code": "ESM4Flora"
    },
    {
      "header": "TypeESM4Ingredient",
      "content": []
    },
    {
      "code": "ESM4Ingredient"
    },
    {
      "header": "TypeESM4ItemMod",
      "content": []
    },
    {
      "code": "ESM4ItemMod"
    },
    {
      "header": "TypeESM4Light",
      "content": []
    },
    {
      "code": "ESM4Light"
    },
    {
      "header": "TypeESM4Miscellaneous",
      "content": []
    },
    {
      "code": "ESM4Miscellaneous"
    },
    {
      "header": "TypeESM4MovableStatic",
      "content": []
    },
    {
      "code": "ESM4MovableStatic"
    },
    {
      "header": "TypeESM4Potion",
      "content": []
    },
    {
      "code": "ESM4Potion"
    },
    {
      "header": "TypeESM4Static",
      "content": []
    },
    {
      "code": "ESM4Static"
    },
    {
      "header": "TypeESM4StaticCollection",
      "content": []
    },
    {
      "code": "ESM4StaticCollection"
    },
    {
      "header": "TypeESM4Terminal",
      "content": []
    },
    {
      "code": "ESM4Terminal"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Whether the object is a ESM4Terminal."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#ESM4TerminalRecordof a terminal"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#ESM4TerminalRecord: A read-only list of all#ESM4TerminalRecords in the world database. Implementsiterables#Listof #ESM4TerminalRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.ESM4Terminal.records['example_recordid']"
    },
    {
      "code": "local record = types.ESM4Terminal.records['example_recordid']"
    },
    {
      "code": "local record = types.ESM4Terminal.records[1]"
    },
    {
      "code": "local record = types.ESM4Terminal.records[1]"
    },
    {
      "header": "TypeESM4TerminalRecord",
      "content": []
    },
    {
      "code": "ESM4TerminalRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Human-readable ID Record id (Form ID) VFS path to the model Human-readable name Result text of the terminal record Text body of the terminal record"
    },
    {
      "header": "TypeESM4Weapon",
      "content": []
    },
    {
      "code": "ESM4Weapon"
    },
    {
      "header": "TypeEquipmentTable",
      "content": []
    },
    {
      "code": "EquipmentTable"
    },
    {
      "paragraph": "Map from values of#EQUIPMENT_SLOTto itemsopenmw.core#GameObjects EquipmentTableis a map of#numbertoopenmw.core#GameObject."
    },
    {
      "code": "EquipmentTable"
    },
    {
      "code": "#number"
    },
    {
      "code": "openmw.core#GameObject"
    },
    {
      "header": "TypeGenderedNumber",
      "content": []
    },
    {
      "code": "GenderedNumber"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Female value Male value"
    },
    {
      "header": "TypeIngredient",
      "content": []
    },
    {
      "code": "Ingredient"
    },
    {
      "header": "Extends#Item",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#Item Whether the object is an Ingredient."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#IngredientRecordof a Ingredient"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#IngredientRecord: A read-only list of all#IngredientRecords in the world database. Implementsiterables#Listof #IngredientRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.Ingredient.records['example_recordid']"
    },
    {
      "code": "local record = types.Ingredient.records['example_recordid']"
    },
    {
      "code": "local record = types.Ingredient.records[1]"
    },
    {
      "code": "local record = types.Ingredient.records[1]"
    },
    {
      "header": "TypeIngredientRecord",
      "content": []
    },
    {
      "code": "IngredientRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "The effects (openmw.core#MagicEffectWithParams) of the ingredient VFS path to the icon Record id VFS path to the model MWScript on this potion (can be nil) Human-readable name"
    },
    {
      "header": "TypeItem",
      "content": []
    },
    {
      "code": "Item"
    },
    {
      "paragraph": "Functions for items that can be placed to an inventory or container"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "(DEPRECATED, use itemData(item).enchantmentCharge) Get this item's current enchantment charge."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectitem:"
    },
    {
      "code": "openmw.core#GameObject\nitem"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number:The charge remaining.nilif the enchantment has never been used, implying the charge is full. Unenchanted items will always return a value ofnil."
    },
    {
      "code": "nil"
    },
    {
      "code": "nil"
    },
    {
      "paragraph": "Whether the object is supposed to be carriable. It is true for all items except\nlights without the Carry flag. Non-carriable lights can still be put into\nan inventory with an explicitobject:moveIntocall."
    },
    {
      "code": "object:moveInto"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Checks if the item restocks. Returns true if the object restocks, and false otherwise."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectitem:"
    },
    {
      "code": "openmw.core#GameObject\nitem"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Set of properties that differentiates one item from another of the same record type; can be used by any script, but only global and self scripts can change values."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectitem:"
    },
    {
      "code": "openmw.core#GameObject\nitem"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#ItemData: Whether the object is an item."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: (DEPRECATED, use itemData(item).enchantmentCharge) Set this item's enchantment charge."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectitem:"
    },
    {
      "code": "openmw.core#GameObject\nitem"
    },
    {
      "paragraph": "#number charge: \nCan benilto reset the unused state / full"
    },
    {
      "code": "#number charge"
    },
    {
      "code": "nil"
    },
    {
      "header": "TypeItemData",
      "content": []
    },
    {
      "code": "ItemData"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "The item's current condition. Time remaining for lights. Uses left for repairs, lockpicks and probes. Current health for weapons and armor. The item's current enchantment charge. Unenchanted items will always return a value ofnil. Setting this tonilwill reset the charge of the item."
    },
    {
      "code": "nil"
    },
    {
      "code": "nil"
    },
    {
      "paragraph": "The recordId of the item's current soul. Items without soul will always return a value ofnil. Setting this tonilwill remove the soul from the item."
    },
    {
      "code": "nil"
    },
    {
      "code": "nil"
    },
    {
      "header": "TypeLevelStat",
      "content": []
    },
    {
      "code": "LevelStat"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "The actor's current level. The NPC's level progress. The NPC's attribute contributions towards the next level up. Values affect how much each attribute can be increased at level up. The NPC's attribute contributions towards the next level up. Values affect the graphic used on the level up screen."
    },
    {
      "header": "TypeLevelledListItem",
      "content": []
    },
    {
      "code": "LevelledListItem"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Item id The minimum player level at which this item can occur"
    },
    {
      "header": "TypeLight",
      "content": []
    },
    {
      "code": "Light"
    },
    {
      "header": "Extends#Item",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#Item Creates a#LightRecordwithout adding it to the world database. Useopenmw_world#world.createRecordto add the record to the world."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#LightRecordlight: \nA Lua table with the fields of a LightRecord, with an optional fieldtemplatethat accepts a#LightRecordas a base."
    },
    {
      "code": "#LightRecord\nlight"
    },
    {
      "code": "template"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#LightRecord:A strongly typed Light record. Whether the object is a Light."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#LightRecordof a Light"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#LightRecord: A read-only list of all#LightRecords in the world database. Implementsiterables#Listof #LightRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.Light.records['example_recordid']"
    },
    {
      "code": "local record = types.Light.records['example_recordid']"
    },
    {
      "code": "local record = types.Light.records[1]"
    },
    {
      "code": "local record = types.Light.records[1]"
    },
    {
      "header": "TypeLightRecord",
      "content": []
    },
    {
      "code": "LightRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "VFS path to the icon Record id True if the light can be carried by actors and appears up in their inventory. If true, the light will apply to actors and other moving objects True if the light acts like a fire. If true, the light will reduce light instead of increasing it. If true, the light will not emit any light or sound while placed in the world. It will still work in the inventory. VFS path to the model MWScript on this light (can be nil) Human-readable name VFS path to the sound"
    },
    {
      "header": "TypeLockable",
      "content": []
    },
    {
      "code": "Lockable"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Returns the key record of a lockable object(door, container)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#MiscellaneousRecord: Returns the lock level of a lockable object(door, container). Does not determine if an object is locked or not, if an object is locked while this is set above 0, this value will be used if no other value is specified."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Returns the trap spell of a lockable object(door, container)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "openmw.core#Spell: Returns true if the lockable object is locked, and false if it is not."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Sets the lock level level of a lockable object(door, container);Locks if not already locked; Must be used in a global script."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "paragraph": "#number lockLevel: \nLevel to lock the object at. Optional, if not specified, then 1 will be used, or the previous level if it was locked before."
    },
    {
      "code": "#number lockLevel"
    },
    {
      "paragraph": "Whether the object is a Lockable."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Sets the key of a lockable object(door, container); removes it if empty string is provided. Must be used in a global script."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "paragraph": "#any miscOrId:#MiscellaneousRecordor string misc item id Record ID of the key to use."
    },
    {
      "code": "#any miscOrId"
    },
    {
      "paragraph": "Sets the trap spell of a lockable object(door, container); removes it if empty string is provided. Must be used in a global script."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "paragraph": "#any spellOrId:openmw.core#Spellor string spell id Record ID for the trap to use"
    },
    {
      "code": "#any spellOrId"
    },
    {
      "paragraph": "Unlocks the lockable object. Does not change the lock level, it can be kept for future use."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "TypeLockpick",
      "content": []
    },
    {
      "code": "Lockpick"
    },
    {
      "header": "Extends#Item",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#Item Whether the object is a Lockpick."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#LockpickRecordof a lockpick"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#LockpickRecord: A read-only list of all#LockpickRecords in the world database. Implementsiterables#Listof #LockpickRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.Lockpick.records['example_recordid']"
    },
    {
      "code": "local record = types.Lockpick.records['example_recordid']"
    },
    {
      "code": "local record = types.Lockpick.records[1]"
    },
    {
      "code": "local record = types.Lockpick.records[1]"
    },
    {
      "header": "TypeLockpickRecord",
      "content": []
    },
    {
      "code": "LockpickRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "VFS path to the icon The record ID of the lockpick The maximum number of uses of this lockpick VFS path to the model MWScript on this lockpick (can be nil) The name of the lockpick The quality of the lockpick"
    },
    {
      "header": "TypeMiscellaneous",
      "content": []
    },
    {
      "code": "Miscellaneous"
    },
    {
      "header": "Extends#Item",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#Item Creates a#MiscellaneousRecordwithout adding it to the world database. Useopenmw_world#world.createRecordto add the record to the world."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#MiscellaneousRecordmiscellaneous: \nA Lua table with the fields of a MiscellaneousRecord, with an optional fieldtemplatethat accepts a#MiscellaneousRecordas a base."
    },
    {
      "code": "#MiscellaneousRecord\nmiscellaneous"
    },
    {
      "code": "template"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#MiscellaneousRecord:A strongly typed Miscellaneous record. (DEPRECATED, use itemData(item).soul) Returns the read-only soul of a miscellaneous item"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#string: Whether the object is a Miscellaneous."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#MiscellaneousRecordof a miscellaneous item"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#MiscellaneousRecord: A read-only list of all#MiscellaneousRecords in the world database. Implementsiterables#Listof #MiscellaneousRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.Miscellaneous.records['example_recordid']"
    },
    {
      "code": "local record = types.Miscellaneous.records['example_recordid']"
    },
    {
      "code": "local record = types.Miscellaneous.records[1]"
    },
    {
      "code": "local record = types.Miscellaneous.records[1]"
    },
    {
      "paragraph": "(DEPRECATED, use itemData(item).soul) Sets the soul of a miscellaneous item, intended for soul gem objects; Must be used in a global script."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "paragraph": "#string soulId: \nRecord ID for the soul of the creature to use"
    },
    {
      "code": "#string soulId"
    },
    {
      "header": "TypeMiscellaneousRecord",
      "content": []
    },
    {
      "code": "MiscellaneousRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "VFS path to the icon The record ID of the miscellaneous item VFS path to the model MWScript on this miscellaneous item (can be nil) The name of the miscellaneous item"
    },
    {
      "header": "TypeNPC",
      "content": []
    },
    {
      "code": "NPC"
    },
    {
      "header": "Extends#Actor",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#Actor #Classes: Class Data Clear expelling of NPC from given faction. Throws an exception if there is no such faction."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor: \nNPC object"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "#string faction: \nFaction ID"
    },
    {
      "code": "#string faction"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nNPC.clearExpell(player, \"mages guild\");"
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nNPC.clearExpell(player, \"mages guild\");"
    },
    {
      "paragraph": "Expel NPC from given faction. Throws an exception if there is no such faction.\nNote: expelled NPC still keeps his rank and reputation in faction, he just get an additonal flag for given faction."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor: \nNPC object"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "#string faction: \nFaction ID"
    },
    {
      "code": "#string faction"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nNPC.expel(player, \"mages guild\");"
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nNPC.expel(player, \"mages guild\");"
    },
    {
      "paragraph": "Returns the current base disposition of the provided NPC. This is their base disposition, before modifiers such as personality and faction relations are taken into account."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "paragraph": "openmw.core#GameObjectplayer: \nThe player that you want to check the disposition for."
    },
    {
      "code": "openmw.core#GameObject\nplayer"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Get the total weight that the actor can carry."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Returns the current disposition of the provided NPC. This is their derived disposition, after modifiers such as personality and faction relations are taken into account."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "paragraph": "openmw.core#GameObjectplayer: \nThe player that you want to check the disposition for."
    },
    {
      "code": "openmw.core#GameObject\nplayer"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Get rank of given NPC in given faction. Throws an exception if there is no such faction.\nNote: this function does not take in account an expelling state."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor: \nNPC object"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "#string faction: \nFaction ID"
    },
    {
      "code": "#string faction"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number:rank Rank index (from 1), 0 if NPC is not in faction."
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nprint(NPC.getFactionRank(player, \"mages guild\");"
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nprint(NPC.getFactionRank(player, \"mages guild\");"
    },
    {
      "paragraph": "Get reputation of given actor in given faction. Throws an exception if there is no such faction."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor: \nNPC object"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "#string faction: \nFaction ID"
    },
    {
      "code": "#string faction"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number:reputation Reputation level, 0 if NPC is not in faction."
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nprint(NPC.getFactionReputation(player, \"mages guild\"));"
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nprint(NPC.getFactionReputation(player, \"mages guild\"));"
    },
    {
      "paragraph": "Get all factions in which NPC has a membership. Note: this function does not take in account an expelling state."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor: \nNPC object"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#list<#string>:factionIds List of faction IDs."
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nfor _, factionId in pairs(types.NPC.getFactions(actor)) do\n    print(factionId);\nend"
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nfor _, factionId in pairs(types.NPC.getFactions(actor)) do\n    print(factionId);\nend"
    },
    {
      "paragraph": "Check if NPC is expelled from given faction. Throws an exception if there is no such faction."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor: \nNPC object"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "#string faction: \nFaction ID"
    },
    {
      "code": "#string faction"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean:isExpelled True if NPC is expelled from the faction."
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nlocal result = NPC.isExpelled(player, \"mages guild\");"
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nlocal result = NPC.isExpelled(player, \"mages guild\");"
    },
    {
      "paragraph": "Whether the NPC or player is in the werewolf form at the moment."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Add given actor to given faction. Throws an exception if there is no such faction or target actor is not player.\nFunction does nothing if valid target actor is already a member of target faction."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor: \nNPC object"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "#string faction: \nFaction ID"
    },
    {
      "code": "#string faction"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nNPC.joinFaction(player, \"mages guild\");"
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nNPC.joinFaction(player, \"mages guild\");"
    },
    {
      "paragraph": "Remove given actor from given faction. Function removes rank data and expelling state, but keeps a reputation in target faction.\nThrows an exception if there is no such faction or target actor is not player.\nFunction does nothing if valid target actor is already not member of target faction."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor: \nNPC object"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "#string faction: \nFaction ID"
    },
    {
      "code": "#string faction"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nNPC.leaveFaction(player, \"mages guild\");"
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nNPC.leaveFaction(player, \"mages guild\");"
    },
    {
      "paragraph": "Modify the base disposition of the provided NPC by a certain amount (only in global scripts or on self)."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "paragraph": "openmw.core#GameObjectplayer: \nThe player that you want to modify the disposition for."
    },
    {
      "code": "openmw.core#GameObject\nplayer"
    },
    {
      "paragraph": "#number value: \nBase disposition modification value"
    },
    {
      "code": "#number value"
    },
    {
      "paragraph": "Adjust rank of given NPC in given faction. Throws an exception if there is no such faction or actor is not a member of given faction.\nFor NPCs faction also should be an NPC's primary faction.\nNotes:"
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor: \nNPC object"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "#string faction: \nFaction ID"
    },
    {
      "code": "#string faction"
    },
    {
      "paragraph": "#number value: \nRank index (from 1) modifier. If rank reaches 0 for player character, he leaves the faction."
    },
    {
      "code": "#number value"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nNPC.modifyFactionRank(player, \"mages guild\", 1);"
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nNPC.modifyFactionRank(player, \"mages guild\", 1);"
    },
    {
      "paragraph": "Adjust reputation of given actor in given faction. Throws an exception if there is no such faction."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor: \nNPC object"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "#string faction: \nFaction ID"
    },
    {
      "code": "#string faction"
    },
    {
      "paragraph": "#number value: \nReputation modifier value"
    },
    {
      "code": "#number value"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nNPC.modifyFactionReputation(player, \"mages guild\", 5);"
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nNPC.modifyFactionReputation(player, \"mages guild\", 5);"
    },
    {
      "paragraph": "Whether the object is an NPC or a Player."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: #Races: Race data Returns the read-only#NpcRecordof an NPC"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#NpcRecord: Set the base disposition of the provided NPC (only in global scripts or on self)."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "paragraph": "openmw.core#GameObjectplayer: \nThe player that you want to set the disposition for."
    },
    {
      "code": "openmw.core#GameObject\nplayer"
    },
    {
      "paragraph": "#number value: \nBase disposition is set to this value"
    },
    {
      "code": "#number value"
    },
    {
      "paragraph": "Set rank of given NPC in given faction. Throws an exception if there is no such faction, target rank does not exist or actor is not a member of given faction.\nFor NPCs faction also should be an NPC's primary faction."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor: \nNPC object"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "#string faction: \nFaction ID"
    },
    {
      "code": "#string faction"
    },
    {
      "paragraph": "#number value: \nRank index (from 1)."
    },
    {
      "code": "#number value"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nNPC.setFactionRank(player, \"mages guild\", 6);"
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nNPC.setFactionRank(player, \"mages guild\", 6);"
    },
    {
      "paragraph": "Set reputation of given actor in given faction. Throws an exception if there is no such faction."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor: \nNPC object"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "paragraph": "#string faction: \nFaction ID"
    },
    {
      "code": "#string faction"
    },
    {
      "paragraph": "#number value: \nReputation value"
    },
    {
      "code": "#number value"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nNPC.setFactionReputation(player, \"mages guild\", 100);"
    },
    {
      "code": "local NPC = require('openmw.types').NPC;\nNPC.setFactionReputation(player, \"mages guild\", 100);"
    },
    {
      "header": "TypeNpcRecord",
      "content": []
    },
    {
      "code": "NpcRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "NPC's starting disposition The base barter gold of the NPC Name of the NPC's class (e. g. Acrobat) Path to the hair body part model Path to the head body part model The record ID of the NPC whether the NPC is essential The gender setting of the NPC whether the NPC respawns after death Path to the model associated with this NPC, used for animations. MWScript on this NPC (can be nil) The services of the NPC, in a table. Value is if the service is provided or not, and they are indexed by: Spells, Spellmaking, Enchanting, Training, Repair, Barter, Weapon, Armor, Clothing, Books, Ingredients, Picks, Probes, Lights, Apparatus, RepairItems, Misc, Potions, MagicItems, Travel. A list of#TravelDestinations for this NPC."
    },
    {
      "header": "TypeNpcStats",
      "content": []
    },
    {
      "code": "NpcStats"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "header": "TypePlayer",
      "content": []
    },
    {
      "code": "Player"
    },
    {
      "header": "Extends#NPC",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Values that can be used with getControlSwitch/setControlSwitch. #NPC #BirthSigns: Birth Sign Data"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectplayer:"
    },
    {
      "code": "openmw.core#GameObject\nplayer"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#string:The player's birth sign Get state of a control switch. I.e. is the player able to move/fight/jump/etc."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectplayer:"
    },
    {
      "code": "openmw.core#GameObject\nplayer"
    },
    {
      "paragraph": "#ControlSwitchkey: \nControl type (seeopenmw.types#CONTROL_SWITCH)"
    },
    {
      "code": "#ControlSwitch\nkey"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the bounty or crime level of the player"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectplayer:"
    },
    {
      "code": "openmw.core#GameObject\nplayer"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Whether the character generation for this player is finished."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectplayer:"
    },
    {
      "code": "openmw.core#GameObject\nplayer"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Whether teleportation for this player is enabled."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectplayer:"
    },
    {
      "code": "openmw.core#GameObject\nplayer"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Whether the object is a player."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns a list containing quests#PlayerQuestfor the specified player, indexed by quest ID."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectplayer:"
    },
    {
      "code": "openmw.core#GameObject\nplayer"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#list<#PlayerQuest>:"
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "-- Get stage of a specific quest\nstage = types.Player.quests(player)[\"ms_fargothring\"].stage"
    },
    {
      "code": "-- Get stage of a specific quest\nstage = types.Player.quests(player)[\"ms_fargothring\"].stage"
    },
    {
      "code": "-- Start a new quest, add it to the player's quest list but don't add any journal entries\ntypes.Player.quests(player)[\"ms_fargothring\"].stage = 0"
    },
    {
      "code": "-- Start a new quest, add it to the player's quest list but don't add any journal entries\ntypes.Player.quests(player)[\"ms_fargothring\"].stage = 0"
    },
    {
      "paragraph": "Send an event to menu scripts."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectplayer:"
    },
    {
      "code": "openmw.core#GameObject\nplayer"
    },
    {
      "paragraph": "#string eventName:"
    },
    {
      "code": "#string eventName"
    },
    {
      "paragraph": "eventData:"
    },
    {
      "code": "eventData"
    },
    {
      "paragraph": "Can be used only in global scripts. Note that this does not update the player's spells."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectplayer:"
    },
    {
      "code": "openmw.core#GameObject\nplayer"
    },
    {
      "paragraph": "#any recordOrId: \nRecord or string ID of the birth sign to assign"
    },
    {
      "code": "#any recordOrId"
    },
    {
      "paragraph": "Set state of a control switch. I.e. forbid or allow the player to move/fight/jump/etc.\nCan be used only in global or player scripts."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectplayer:"
    },
    {
      "code": "openmw.core#GameObject\nplayer"
    },
    {
      "paragraph": "#ControlSwitchkey: \nControl type (seeopenmw.types#CONTROL_SWITCH)"
    },
    {
      "code": "#ControlSwitch\nkey"
    },
    {
      "paragraph": "#boolean value:"
    },
    {
      "code": "#boolean value"
    },
    {
      "paragraph": "Sets the bounty or crime level of the player, may only be used in global scripts"
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectplayer:"
    },
    {
      "code": "openmw.core#GameObject\nplayer"
    },
    {
      "paragraph": "#number crimeLevel: \nThe requested crime level"
    },
    {
      "code": "#number crimeLevel"
    },
    {
      "paragraph": "Enables or disables teleportation for this player."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectplayer:"
    },
    {
      "code": "openmw.core#GameObject\nplayer"
    },
    {
      "paragraph": "#boolean state: \nTrue to enable teleporting, false to disable."
    },
    {
      "code": "#boolean state"
    },
    {
      "header": "TypePlayerQuest",
      "content": []
    },
    {
      "code": "PlayerQuest"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Sets the quest stage for the given quest, on the given player, and adds the entry to the journal, if there is an entry at the specified stage. Can only be used in global or player scripts."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#number stage: \nQuest stage"
    },
    {
      "code": "#number stage"
    },
    {
      "paragraph": "openmw.core#GameObjectactor: \n(optional) The actor who is the source of the journal entry, it may be used in journal entries with variables such as%name(The speaker's name)or%race(The speaker's race)."
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "code": "%name(The speaker's name)"
    },
    {
      "code": "%race(The speaker's race)"
    },
    {
      "paragraph": "Whether the quest is finished (global and player scripts can change it). The quest id. The quest stage (global and player scripts can change it). Changing the stage starts the quest if it wasn't started. Whether the quest is started."
    },
    {
      "header": "TypePotion",
      "content": []
    },
    {
      "code": "Potion"
    },
    {
      "header": "Extends#Item",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#Item Creates a#PotionRecordwithout adding it to the world database. Useopenmw_world#world.createRecordto add the record to the world."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#PotionRecordpotion: \nA Lua table with the fields of a PotionRecord, with an optional fieldtemplatethat accepts a#PotionRecordas a base."
    },
    {
      "code": "#PotionRecord\npotion"
    },
    {
      "code": "template"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#PotionRecord:A strongly typed Potion record. Whether the object is a Potion."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#PotionRecordof a potion"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#PotionRecord: A read-only list of all#PotionRecords in the world database. Implementsiterables#Listof #PotionRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.Potion.records['example_recordid']"
    },
    {
      "code": "local record = types.Potion.records['example_recordid']"
    },
    {
      "code": "local record = types.Potion.records[1]"
    },
    {
      "code": "local record = types.Potion.records[1]"
    },
    {
      "header": "TypePotionRecord",
      "content": []
    },
    {
      "code": "PotionRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "The effects (openmw.core#MagicEffectWithParams) of the potion VFS path to the icon Record id VFS path to the model MWScript on this potion (can be nil) Human-readable name"
    },
    {
      "header": "TypeProbe",
      "content": []
    },
    {
      "code": "Probe"
    },
    {
      "header": "Extends#Item",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#Item Whether the object is a Probe."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#ProbeRecordof a probe"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#ProbeRecord: A read-only list of all#ProbeRecords in the world database. Implementsiterables#Listof #ProbeRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.Probe.records['example_recordid']"
    },
    {
      "code": "local record = types.Probe.records['example_recordid']"
    },
    {
      "code": "local record = types.Probe.records[1]"
    },
    {
      "code": "local record = types.Probe.records[1]"
    },
    {
      "header": "TypeProbeRecord",
      "content": []
    },
    {
      "code": "ProbeRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "VFS path to the icon The record ID of the probe The maximum number of uses of this probe VFS path to the model MWScript on this probe (can be nil) The name of the probe The quality of the probe"
    },
    {
      "header": "TypeRaceRecord",
      "content": []
    },
    {
      "code": "RaceRecord"
    },
    {
      "paragraph": "Race data record"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "-- Get base strength for men\nstrength = types.NPC.races.records[1].attributes.strength.male"
    },
    {
      "code": "-- Get base strength for men\nstrength = types.NPC.races.records[1].attributes.strength.male"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "A read-only table of attribute ID to base value Race description Height values Race id True if this race is a beast race True if the player can pick this race in character generation Race name A map of bonus skill points by skill ID A read-only list containing the ids of all spells inherent to the race Weight values"
    },
    {
      "header": "TypeRaces",
      "content": []
    },
    {
      "code": "Races"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Returns a read-only#RaceRecord"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#string recordId:"
    },
    {
      "code": "#string recordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#RaceRecord: A read-only list of all#RaceRecords in the world database. Implementsiterables#Listof #RaceRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.NPC.classes['example_recordid']"
    },
    {
      "code": "local record = types.NPC.classes['example_recordid']"
    },
    {
      "code": "local record = types.NPC.classes[1]"
    },
    {
      "code": "local record = types.NPC.classes[1]"
    },
    {
      "header": "TypeRepair",
      "content": []
    },
    {
      "code": "Repair"
    },
    {
      "header": "Extends#Item",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#Item Whether the object is a Repair."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#RepairRecordof a repair tool"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#RepairRecord: A read-only list of all#RepairRecords in the world database. Implementsiterables#Listof #RepairRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.Repair.records['example_recordid']"
    },
    {
      "code": "local record = types.Repair.records['example_recordid']"
    },
    {
      "code": "local record = types.Repair.records[1]"
    },
    {
      "code": "local record = types.Repair.records[1]"
    },
    {
      "header": "TypeRepairRecord",
      "content": []
    },
    {
      "code": "RepairRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "VFS path to the icon The record ID of the repair tool The maximum number of uses of this repair tool VFS path to the model MWScript on this repair tool (can be nil) The name of the repair tool The quality of the repair tool"
    },
    {
      "header": "TypeSTANCE",
      "content": []
    },
    {
      "code": "STANCE"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Default stance Magic stance Weapon stance"
    },
    {
      "header": "TypeSkillIncreasesForAttributeStats",
      "content": []
    },
    {
      "code": "SkillIncreasesForAttributeStats"
    },
    {
      "paragraph": "Values affect how much each attribute can be increased at level up, and are all reset to 0 upon level up."
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Number of contributions to agility for the next level up. Number of contributions to endurance for the next level up. Number of contributions to intelligence for the next level up. Number of contributions to luck for the next level up. Number of contributions to personality for the next level up. Number of contributions to speed for the next level up. Number of contributions to strength for the next level up. Number of contributions to willpower for the next level up."
    },
    {
      "header": "TypeSkillIncreasesForSpecializationStats",
      "content": []
    },
    {
      "code": "SkillIncreasesForSpecializationStats"
    },
    {
      "paragraph": "Values affect the graphic used on the level up screen, and are all reset to 0 upon level up."
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Number of contributions to combat specialization for the next level up. Number of contributions to magic specialization for the next level up. Number of contributions to stealth specialization for the next level up."
    },
    {
      "header": "TypeSkillStat",
      "content": []
    },
    {
      "code": "SkillStat"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "The NPC's base skill value. The amount the skill has been damaged. The NPC's current skill value (read-only.) The skill's modifier. [0-1] The NPC's skill progress."
    },
    {
      "header": "TypeSkillStats",
      "content": []
    },
    {
      "code": "SkillStats"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Acrobatics (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Alchemy (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Alteration (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Armorer (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Athletics (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Axe (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Block (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Blunt Weapon (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Conjuration (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Destruction (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Enchant (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Hand To Hand (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Heavy Armor (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Illusion (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Light Armor (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Long Blade (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Marksman (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Medium Armor (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Mercantile (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Mysticism (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Restoration (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Security (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Short Blade (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Sneak (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Spear (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Speechcraft (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat: Unarmored (returns#SkillStat)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectactor:"
    },
    {
      "code": "openmw.core#GameObject\nactor"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#SkillStat:"
    },
    {
      "header": "TypeStatic",
      "content": []
    },
    {
      "code": "Static"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Whether the object is a Static."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#StaticRecordof a Static"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#StaticRecord: A read-only list of all#StaticRecords in the world database. Implementsiterables#Listof #StaticRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.Static.records['example_recordid']"
    },
    {
      "code": "local record = types.Static.records['example_recordid']"
    },
    {
      "code": "local record = types.Static.records[1]"
    },
    {
      "code": "local record = types.Static.records[1]"
    },
    {
      "header": "TypeStaticRecord",
      "content": []
    },
    {
      "code": "StaticRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Record id VFS path to the model"
    },
    {
      "header": "TypeTravelDestination",
      "content": []
    },
    {
      "code": "TravelDestination"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "ID of the Destination cell for this TravelDestination, Can be used withopenmw_world#world.getCellById. Destination position for this TravelDestination. Destination rotation for this TravelDestination."
    },
    {
      "header": "TypeWeapon",
      "content": []
    },
    {
      "code": "Weapon"
    },
    {
      "header": "Extends#Item",
      "content": []
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "#WeaponTYPE #Item Creates a#WeaponRecordwithout adding it to the world database. Useopenmw_world#world.createRecordto add the record to the world."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#WeaponRecordweapon: \nA Lua table with the fields of a WeaponRecord, with an optional fieldtemplatethat accepts a#WeaponRecordas a base."
    },
    {
      "code": "#WeaponRecord\nweapon"
    },
    {
      "code": "template"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#WeaponRecord:A strongly typed Weapon record. Whether the object is a Weapon."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "openmw.core#GameObjectobject:"
    },
    {
      "code": "openmw.core#GameObject\nobject"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#boolean: Returns the read-only#WeaponRecordof a weapon"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#any objectOrRecordId:"
    },
    {
      "code": "#any objectOrRecordId"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#WeaponRecord: A read-only list of all#WeaponRecords in the world database. Implementsiterables#Listof #WeaponRecord."
    },
    {
      "header": "Usages:",
      "content": []
    },
    {
      "code": "local record = types.Weapon.records['example_recordid']"
    },
    {
      "code": "local record = types.Weapon.records['example_recordid']"
    },
    {
      "code": "local record = types.Weapon.records[1]"
    },
    {
      "code": "local record = types.Weapon.records[1]"
    },
    {
      "header": "TypeWeaponRecord",
      "content": []
    },
    {
      "code": "WeaponRecord"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "The enchantment ID of this weapon (can be nil) VFS path to the icon Record id VFS path to the model MWScript on this weapon (can be nil) Human-readable name SeeWeapon.TYPE"
    },
    {
      "header": "TypeWeaponTYPE",
      "content": []
    },
    {
      "code": "WeaponTYPE"
    },
    {
      "paragraph": "Weapon.TYPE"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "\u00a9 Copyright 2024, OpenMW Team.Revision7d84b85d."
    }
  ]
}