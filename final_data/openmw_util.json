{
  "title": "Package openmw.util\uf0c1",
  "content": [
    {
      "paragraph": "openmw.utildefines utility functions and classes like 3D vectors, that don't depend on the game world."
    },
    {
      "code": "openmw.util"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local util = require('openmw.util')"
    },
    {
      "code": "local util = require('openmw.util')"
    },
    {
      "header": "Typeutil",
      "content": []
    },
    {
      "code": "util"
    },
    {
      "paragraph": "Bitwise And (supports any number of arguments). Bitwise inversion. Bitwise Or (supports any number of arguments). Bitwise Xor (supports any number of arguments). Creates a new Box from a given transformation. Limits given value to the interval [from,to]."
    },
    {
      "code": "from"
    },
    {
      "code": "to"
    },
    {
      "paragraph": "Methods for creating #Color values from different formats. Parses Lua code from string and returns as a function. Makes a table read only. Makes a table read only and overrides__indexwith the strict version that throws an error if the key is not found."
    },
    {
      "code": "__index"
    },
    {
      "paragraph": "Adds2pi*kand puts the angle in range[-pi, pi]."
    },
    {
      "code": "2pi*k"
    },
    {
      "code": "[-pi, pi]"
    },
    {
      "paragraph": "Remaps the value from one range to another. Rounds the given value to the nearest whole number. 3D transforms (scale/move/rotate) that can be applied to 3D vectors. Creates a new 2D vector. Creates a new 3D vector. Creates a new 4D vector."
    },
    {
      "header": "TypeBox",
      "content": []
    },
    {
      "code": "Box"
    },
    {
      "paragraph": "The center of the box The half sizes of the box along each axis A transformation which encapsulates the boxes center pointer (translation), half sizes (scale), and rotation. Table of the 8 vertices which comprise the box, taking rotation into account"
    },
    {
      "header": "TypeCOLOR",
      "content": []
    },
    {
      "code": "COLOR"
    },
    {
      "paragraph": "Parses a hex color string into a Color. Creates a Color from RGB format. Creates a Color from RGBA format"
    },
    {
      "header": "TypeColor",
      "content": []
    },
    {
      "code": "Color"
    },
    {
      "paragraph": "Alpha (transparency) component Converts the color into a HEX string. Returns a Vector3 with RGB components of the Color. Returns a Vector4 with RGBA components of the Color. Blue component Green component Red component"
    },
    {
      "header": "TypeTRANSFORM",
      "content": []
    },
    {
      "code": "TRANSFORM"
    },
    {
      "paragraph": "Empty transform. Movement by given vector. Rotation around a vector (counterclockwise if the vector points to us). X-axis rotation (equivalent torotate(angle, vector3(-1, 0, 0)))."
    },
    {
      "code": "rotate(angle, vector3(-1, 0, 0))"
    },
    {
      "paragraph": "Y-axis rotation (equivalent torotate(angle, vector3(0, -1, 0)))."
    },
    {
      "code": "rotate(angle, vector3(0, -1, 0))"
    },
    {
      "paragraph": "Z-axis rotation (equivalent torotate(angle, vector3(0, 0, -1)))."
    },
    {
      "code": "rotate(angle, vector3(0, 0, -1))"
    },
    {
      "paragraph": "Scale transform."
    },
    {
      "header": "TypeTransform",
      "content": []
    },
    {
      "code": "Transform"
    },
    {
      "paragraph": "Combine transforms (will apply in reverse order) Apply transform to a vector Get Euler angles for XZ rotation order (pitch and yaw; radians) Get Euler angles for ZYX rotation order (radians) Get pitch angle (radians) Get yaw angle (radians) Returns the inverse transform."
    },
    {
      "header": "TypeVector2",
      "content": []
    },
    {
      "code": "Vector2"
    },
    {
      "paragraph": "Dot product. Element-wise division Element-wise multiplication Length of the vector. Square of the length of the vector. Normalizes vector. Rotates 2D vector clockwise. swizzle support, any combination of fields can be used to construct a new vector including the 0/1 constants"
    },
    {
      "header": "TypeVector3",
      "content": []
    },
    {
      "code": "Vector3"
    },
    {
      "paragraph": "Cross product. Dot product. Element-wise division Element-wise multiplication Length of the vector Square of the length of the vector Normalizes vector. swizzle support, any combination of fields can be used to construct a new vector including the 0/1 constants"
    },
    {
      "header": "TypeVector4",
      "content": []
    },
    {
      "code": "Vector4"
    },
    {
      "paragraph": "Dot product. Element-wise division Element-wise multiplication Length of the vector Square of the length of the vector Normalizes vector. swizzle support, any combination of fields can be used to construct a new vector including the 0/1 constants"
    },
    {
      "header": "Typeutil",
      "content": []
    },
    {
      "code": "util"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Bitwise And (supports any number of arguments)."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#number A: \nFirst argument (integer)."
    },
    {
      "code": "#number A"
    },
    {
      "paragraph": "#number B: \nSecond argument (integer)."
    },
    {
      "code": "#number B"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number:Bitwise And of A and B. Bitwise inversion."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#number A: \nArgument (integer)."
    },
    {
      "code": "#number A"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number:Bitwise Not of A. Bitwise Or (supports any number of arguments)."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#number A: \nFirst argument (integer)."
    },
    {
      "code": "#number A"
    },
    {
      "paragraph": "#number B: \nSecond argument (integer)."
    },
    {
      "code": "#number B"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number:Bitwise Or of A and B. Bitwise Xor (supports any number of arguments)."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#number A: \nFirst argument (integer)."
    },
    {
      "code": "#number A"
    },
    {
      "paragraph": "#number B: \nSecond argument (integer)."
    },
    {
      "code": "#number B"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number:Bitwise Xor of A and B. Creates a new Box from a given transformation. Boxes are immutable and can not be changed after creation."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Transformtransform: \nA transformation which encapsulates the boxes center pointer (translation), half sizes (scale), and rotation."
    },
    {
      "code": "#Transform\ntransform"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Box:"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "-- Creates a 1x1x1 length box centered at the origin\nutil.box(util.transform.scale(util.vector3(0.5, 0.5, 0.5)))"
    },
    {
      "code": "-- Creates a 1x1x1 length box centered at the origin\nutil.box(util.transform.scale(util.vector3(0.5, 0.5, 0.5)))"
    },
    {
      "paragraph": "Limits given value to the interval [from,to]."
    },
    {
      "code": "from"
    },
    {
      "code": "to"
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#number value:"
    },
    {
      "code": "#number value"
    },
    {
      "paragraph": "#number from:"
    },
    {
      "code": "#number from"
    },
    {
      "paragraph": "#number to:"
    },
    {
      "code": "#number to"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number:min(max(value, from), to) Methods for creating #Color values from different formats. Parses Lua code from string and returns as a function."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#string code: \nLua code."
    },
    {
      "code": "#string code"
    },
    {
      "paragraph": "#table table: \nEnvironment to run the code in."
    },
    {
      "code": "#table table"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#function:The loaded code. Makes a table read only."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#table table: \nAny table."
    },
    {
      "code": "#table table"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#table:The same table wrapped with read only userdata. Makes a table read only and overrides__indexwith the strict version that throws an error if the key is not found."
    },
    {
      "code": "__index"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#table table: \nAny table."
    },
    {
      "code": "#table table"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#table:The same table wrapped with read only userdata. Adds2pi*kand puts the angle in range[-pi, pi]."
    },
    {
      "code": "2pi*k"
    },
    {
      "code": "[-pi, pi]"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#number angle: \nAngle in radians"
    },
    {
      "code": "#number angle"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number:Angle in range[-pi, pi]"
    },
    {
      "code": "[-pi, pi]"
    },
    {
      "paragraph": "Remaps the value from one range to another."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#number value:"
    },
    {
      "code": "#number value"
    },
    {
      "paragraph": "#number min:"
    },
    {
      "code": "#number min"
    },
    {
      "paragraph": "#number max:"
    },
    {
      "code": "#number max"
    },
    {
      "paragraph": "#number newMin:"
    },
    {
      "code": "#number newMin"
    },
    {
      "paragraph": "#number newMax:"
    },
    {
      "code": "#number newMax"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number:The remapped value."
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local util = require('openmw.util')\nlocal newValue = util.remap(3, 0, 10, 0, 100)\nprint(newValue) -- prints 30"
    },
    {
      "code": "local util = require('openmw.util')\nlocal newValue = util.remap(3, 0, 10, 0, 100)\nprint(newValue) -- prints 30"
    },
    {
      "paragraph": "Rounds the given value to the nearest whole number."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#number value:"
    },
    {
      "code": "#number value"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number:The rounded value."
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local util = require('openmw.util')\nlocal roundedValue = util.round(3.141592)\nprint(roundedValue) -- prints 3"
    },
    {
      "code": "local util = require('openmw.util')\nlocal roundedValue = util.round(3.141592)\nprint(roundedValue) -- prints 3"
    },
    {
      "paragraph": "3D transforms (scale/move/rotate) that can be applied to 3D vectors. Several transforms can be combined and applied to a vector using multiplication.\nCombined transforms apply in reverse order (from right to left)."
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "local util = require('openmw.util')\nlocal trans = util.transform\nlocal fromActorSpace = trans.move(actor.position) * trans.rotateZ(actor.rotation:getYaw())\n\n-- rotation is applied first, movement is second\nlocal posBehindActor = fromActorSpace * util.vector3(0, -100, 0)\n\n-- equivalent to trans.rotateZ(-actor.rotation:getYaw()) * trans.move(-actor.position)\nlocal toActorSpace = fromActorSpace:inverse()\nlocal relativeTargetPos = toActorSpace * target.position\nlocal deltaAngle = math.atan2(relativeTargetPos.y, relativeTargetPos.x)"
    },
    {
      "code": "local util = require('openmw.util')\nlocal trans = util.transform\nlocal fromActorSpace = trans.move(actor.position) * trans.rotateZ(actor.rotation:getYaw())\n\n-- rotation is applied first, movement is second\nlocal posBehindActor = fromActorSpace * util.vector3(0, -100, 0)\n\n-- equivalent to trans.rotateZ(-actor.rotation:getYaw()) * trans.move(-actor.position)\nlocal toActorSpace = fromActorSpace:inverse()\nlocal relativeTargetPos = toActorSpace * target.position\nlocal deltaAngle = math.atan2(relativeTargetPos.y, relativeTargetPos.x)"
    },
    {
      "paragraph": "Creates a new 2D vector. Vectors are immutable and can not be changed after creation."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#number x:"
    },
    {
      "code": "#number x"
    },
    {
      "paragraph": "#number y:"
    },
    {
      "code": "#number y"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector2: Creates a new 3D vector. Vectors are immutable and can not be changed after creation."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#number x:"
    },
    {
      "code": "#number x"
    },
    {
      "paragraph": "#number y:"
    },
    {
      "code": "#number y"
    },
    {
      "paragraph": "#number z:"
    },
    {
      "code": "#number z"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector3: Creates a new 4D vector. Vectors are immutable and can not be changed after creation."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#number x:"
    },
    {
      "code": "#number x"
    },
    {
      "paragraph": "#number y:"
    },
    {
      "code": "#number y"
    },
    {
      "paragraph": "#number z:"
    },
    {
      "code": "#number z"
    },
    {
      "paragraph": "#number w:"
    },
    {
      "code": "#number w"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector4:"
    },
    {
      "header": "TypeBox",
      "content": []
    },
    {
      "code": "Box"
    },
    {
      "paragraph": "Immutable box."
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "The center of the box The half sizes of the box along each axis A transformation which encapsulates the boxes center pointer (translation), half sizes (scale), and rotation. Table of the 8 vertices which comprise the box, taking rotation into account"
    },
    {
      "header": "TypeCOLOR",
      "content": []
    },
    {
      "code": "COLOR"
    },
    {
      "paragraph": "Methods for creating #Color values from different formats."
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Parses a hex color string into a Color."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#string hex: \nA hex color string in RRGGBB format (e. g. \"ff0000\")."
    },
    {
      "code": "#string hex"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Color: Creates a Color from RGB format. Equivalent to calling util.rgba with a = 1."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#number r:"
    },
    {
      "code": "#number r"
    },
    {
      "paragraph": "#number g:"
    },
    {
      "code": "#number g"
    },
    {
      "paragraph": "#number b:"
    },
    {
      "code": "#number b"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Color: Creates a Color from RGBA format"
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#number r:"
    },
    {
      "code": "#number r"
    },
    {
      "paragraph": "#number g:"
    },
    {
      "code": "#number g"
    },
    {
      "paragraph": "#number b:"
    },
    {
      "code": "#number b"
    },
    {
      "paragraph": "#number a:"
    },
    {
      "code": "#number a"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Color:"
    },
    {
      "header": "TypeColor",
      "content": []
    },
    {
      "code": "Color"
    },
    {
      "paragraph": "Color in RGBA format. All of the component values are in the range [0, 1]."
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Alpha (transparency) component Converts the color into a HEX string."
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#string: Returns a Vector3 with RGB components of the Color."
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector3: Returns a Vector4 with RGBA components of the Color."
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector4: Blue component Green component Red component"
    },
    {
      "header": "TypeTRANSFORM",
      "content": []
    },
    {
      "code": "TRANSFORM"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Empty transform. Movement by given vector."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector3offset:"
    },
    {
      "code": "#Vector3\noffset"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Transform:"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "-- Accepts either 3 numbers or a 3D vector\nutil.transform.move(x, y, z)\nutil.transform.move(util.vector3(x, y, z))"
    },
    {
      "code": "-- Accepts either 3 numbers or a 3D vector\nutil.transform.move(x, y, z)\nutil.transform.move(util.vector3(x, y, z))"
    },
    {
      "paragraph": "Rotation around a vector (counterclockwise if the vector points to us)."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#number angle:"
    },
    {
      "code": "#number angle"
    },
    {
      "paragraph": "#Vector3axis:"
    },
    {
      "code": "#Vector3\naxis"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Transform: X-axis rotation (equivalent torotate(angle, vector3(-1, 0, 0)))."
    },
    {
      "code": "rotate(angle, vector3(-1, 0, 0))"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#number angle:"
    },
    {
      "code": "#number angle"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Transform: Y-axis rotation (equivalent torotate(angle, vector3(0, -1, 0)))."
    },
    {
      "code": "rotate(angle, vector3(0, -1, 0))"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#number angle:"
    },
    {
      "code": "#number angle"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Transform: Z-axis rotation (equivalent torotate(angle, vector3(0, 0, -1)))."
    },
    {
      "code": "rotate(angle, vector3(0, 0, -1))"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#number angle:"
    },
    {
      "code": "#number angle"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Transform: Scale transform."
    },
    {
      "header": "Parameters",
      "content": []
    },
    {
      "paragraph": "#number scaleX:"
    },
    {
      "code": "#number scaleX"
    },
    {
      "paragraph": "#number scaleY:"
    },
    {
      "code": "#number scaleY"
    },
    {
      "paragraph": "#number scaleZ:"
    },
    {
      "code": "#number scaleZ"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Transform:"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "-- Accepts either 3 numbers or a 3D vector\nutil.transform.scale(x, y, z)\nutil.transform.scale(util.vector3(x, y, z))"
    },
    {
      "code": "-- Accepts either 3 numbers or a 3D vector\nutil.transform.scale(x, y, z)\nutil.transform.scale(util.vector3(x, y, z))"
    },
    {
      "header": "TypeTransform",
      "content": []
    },
    {
      "code": "Transform"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "paragraph": "Combine transforms (will apply in reverse order)"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Transformt:"
    },
    {
      "code": "#Transform\nt"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Transform: Apply transform to a vector"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector3v:"
    },
    {
      "code": "#Vector3\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector3: Get Euler angles for XZ rotation order (pitch and yaw; radians)"
    },
    {
      "header": "Return values",
      "content": []
    },
    {
      "paragraph": "#number:pitch (rotation around X axis) #number:yaw (rotation around Z axis) Get Euler angles for ZYX rotation order (radians)"
    },
    {
      "header": "Return values",
      "content": []
    },
    {
      "paragraph": "#number:rotation around Z axis (first rotation) #number:rotation around Y axis (second rotation) #number:rotation around X axis (third rotation) Get pitch angle (radians)"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Get yaw angle (radians)"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Returns the inverse transform."
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Transform:"
    },
    {
      "header": "TypeVector2",
      "content": []
    },
    {
      "code": "Vector2"
    },
    {
      "paragraph": "Immutable 2D vector"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "v = util.vector2(3, 4)\nv.x, v.y       -- 3.0, 4.0\nstr(v)         -- \"(3.0, 4.0)\"\nv:length()     -- 5.0    length\nv:length2()    -- 25.0   square of the length\nv:normalize()  -- vector2(3/5, 4/5)\nv:rotate(radians)    -- rotate counterclockwise (returns rotated vector)\nv1:dot(v2)     -- dot product (returns a number)\nv1 * v2        -- dot product\nv1 + v2        -- vector addition\nv1 - v2        -- vector subtraction\nv1 * x         -- multiplication by a number\nv1 / x         -- division by a number\nv1.xx, v1.xyx  -- swizzle with standard fields\nv1.y1y, v1.x00 -- swizzle with 0/1 constant\nv1['0xy']      -- swizzle with 0/1 constant starting with 0 or 1"
    },
    {
      "code": "v = util.vector2(3, 4)\nv.x, v.y       -- 3.0, 4.0\nstr(v)         -- \"(3.0, 4.0)\"\nv:length()     -- 5.0    length\nv:length2()    -- 25.0   square of the length\nv:normalize()  -- vector2(3/5, 4/5)\nv:rotate(radians)    -- rotate counterclockwise (returns rotated vector)\nv1:dot(v2)     -- dot product (returns a number)\nv1 * v2        -- dot product\nv1 + v2        -- vector addition\nv1 - v2        -- vector subtraction\nv1 * x         -- multiplication by a number\nv1 / x         -- division by a number\nv1.xx, v1.xyx  -- swizzle with standard fields\nv1.y1y, v1.x00 -- swizzle with 0/1 constant\nv1['0xy']      -- swizzle with 0/1 constant starting with 0 or 1"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector2v:"
    },
    {
      "code": "#Vector2\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector2:sum of the vectors"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#number k:"
    },
    {
      "code": "#number k"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector2:vector divided by a number"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#number k:"
    },
    {
      "code": "#number k"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector2:vector multiplied by a number"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector2v:"
    },
    {
      "code": "#Vector2\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector2:difference of the vectors Dot product."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector2v:"
    },
    {
      "code": "#Vector2\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Element-wise division"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector2v:"
    },
    {
      "code": "#Vector2\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector2: Element-wise multiplication"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector2v:"
    },
    {
      "code": "#Vector2\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector2: Length of the vector."
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Square of the length of the vector."
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Normalizes vector. It doesn't change the original vector."
    },
    {
      "header": "Return values",
      "content": []
    },
    {
      "paragraph": "#Vector2:normalized vector #number:the length of the original vector Rotates 2D vector clockwise."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#number angle: \nAngle in radians"
    },
    {
      "code": "#number angle"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector2:Rotated vector. swizzle support, any combination of fields can be used to construct a new vector including the 0/1 constants"
    },
    {
      "header": "TypeVector3",
      "content": []
    },
    {
      "code": "Vector3"
    },
    {
      "paragraph": "Immutable 3D vector"
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "v = util.vector3(3, 4, 5)\nv.x, v.y, v.z  -- 3.0, 4.0, 5.0\nstr(v)         -- \"(3.0, 4.0, 4.5)\"\nv:length()     -- length\nv:length2()    -- square of the length\nv:normalize()  -- normalized vector\nv1:dot(v2)     -- dot product (returns a number)\nv1 * v2        -- dot product (returns a number)\nv1:cross(v2)   -- cross product (returns a vector)\nv1 ^ v2        -- cross product (returns a vector)\nv1 + v2        -- vector addition\nv1 - v2        -- vector subtraction\nv1 * x         -- multiplication by a number\nv1 / x         -- division by a number\nv1.zyz, v1.yx  -- swizzle with standard fields\nv1.w1y, v1.z0z -- swizzle with 0/1 constant\nv1['0xy']      -- swizzle with 0/1 constant starting with 0 or 1"
    },
    {
      "code": "v = util.vector3(3, 4, 5)\nv.x, v.y, v.z  -- 3.0, 4.0, 5.0\nstr(v)         -- \"(3.0, 4.0, 4.5)\"\nv:length()     -- length\nv:length2()    -- square of the length\nv:normalize()  -- normalized vector\nv1:dot(v2)     -- dot product (returns a number)\nv1 * v2        -- dot product (returns a number)\nv1:cross(v2)   -- cross product (returns a vector)\nv1 ^ v2        -- cross product (returns a vector)\nv1 + v2        -- vector addition\nv1 - v2        -- vector subtraction\nv1 * x         -- multiplication by a number\nv1 / x         -- division by a number\nv1.zyz, v1.yx  -- swizzle with standard fields\nv1.w1y, v1.z0z -- swizzle with 0/1 constant\nv1['0xy']      -- swizzle with 0/1 constant starting with 0 or 1"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector3v:"
    },
    {
      "code": "#Vector3\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector3:sum of the vectors"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#number k:"
    },
    {
      "code": "#number k"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector3:vector divided by a number"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#number k:"
    },
    {
      "code": "#number k"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector3:vector multiplied by a number"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector3v:"
    },
    {
      "code": "#Vector3\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector3:difference of the vectors"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#string: Cross product."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector3v:"
    },
    {
      "code": "#Vector3\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector3: Dot product."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector3v:"
    },
    {
      "code": "#Vector3\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Element-wise division"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector3v:"
    },
    {
      "code": "#Vector3\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector3: Element-wise multiplication"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector3v:"
    },
    {
      "code": "#Vector3\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector3: Length of the vector"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Square of the length of the vector"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Normalizes vector. It doesn't change the original vector."
    },
    {
      "header": "Return values",
      "content": []
    },
    {
      "paragraph": "#Vector3:normalized vector #number:the length of the original vector swizzle support, any combination of fields can be used to construct a new vector including the 0/1 constants"
    },
    {
      "header": "TypeVector4",
      "content": []
    },
    {
      "code": "Vector4"
    },
    {
      "paragraph": "Immutable 4D vector."
    },
    {
      "header": "Usage:",
      "content": []
    },
    {
      "code": "v = util.vector4(3, 4, 5, 6)\nv.x, v.y, v.z, v.w  -- 3.0, 4.0, 5.0, 6.0\nstr(v)           -- \"(3.0, 4.0, 5.0, 6.0)\"\nv:length()       -- length\nv:length2()      -- square of the length\nv:normalize()    -- normalized vector\nv1:dot(v2)       -- dot product (returns a number)\nv1 * v2          -- dot product (returns a number)\nv1 + v2          -- vector addition\nv1 - v2          -- vector subtraction\nv1 * x           -- multiplication by a number\nv1 / x           -- division by a number\nv1.zyz, v1.wwwx  -- swizzle with standard fields\nv1.w1, v1.z000   -- swizzle with 0/1 constant\nv1['000w']       -- swizzle with 0/1 constant starting with 0 or 1"
    },
    {
      "code": "v = util.vector4(3, 4, 5, 6)\nv.x, v.y, v.z, v.w  -- 3.0, 4.0, 5.0, 6.0\nstr(v)           -- \"(3.0, 4.0, 5.0, 6.0)\"\nv:length()       -- length\nv:length2()      -- square of the length\nv:normalize()    -- normalized vector\nv1:dot(v2)       -- dot product (returns a number)\nv1 * v2          -- dot product (returns a number)\nv1 + v2          -- vector addition\nv1 - v2          -- vector subtraction\nv1 * x           -- multiplication by a number\nv1 / x           -- division by a number\nv1.zyz, v1.wwwx  -- swizzle with standard fields\nv1.w1, v1.z000   -- swizzle with 0/1 constant\nv1['000w']       -- swizzle with 0/1 constant starting with 0 or 1"
    },
    {
      "header": "Field(s)",
      "content": []
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector4v:"
    },
    {
      "code": "#Vector4\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector4:sum of the vectors"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#number k:"
    },
    {
      "code": "#number k"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector4:vector divided by a number"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#number k:"
    },
    {
      "code": "#number k"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector4:vector multiplied by a number"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector4v:"
    },
    {
      "code": "#Vector4\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector4:difference of the vectors"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#string: Dot product."
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector4v:"
    },
    {
      "code": "#Vector4\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Element-wise division"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector4v:"
    },
    {
      "code": "#Vector4\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector4: Element-wise multiplication"
    },
    {
      "header": "Parameter",
      "content": []
    },
    {
      "paragraph": "#Vector4v:"
    },
    {
      "code": "#Vector4\nv"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#Vector4: Length of the vector"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Square of the length of the vector"
    },
    {
      "header": "Return value",
      "content": []
    },
    {
      "paragraph": "#number: Normalizes vector. It doesn't change the original vector."
    },
    {
      "header": "Return values",
      "content": []
    },
    {
      "paragraph": "#Vector4:normalized vector #number:the length of the original vector swizzle support, any combination of fields can be used to construct a new vector including the 0/1 constants \u00a9 Copyright 2024, OpenMW Team.Revision7d84b85d."
    }
  ]
}