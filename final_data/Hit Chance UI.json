{
  "folder_name": "Hit Chance UI",
  "lua_files": {
    "sb_HitChance-53930-1-1-1704567820\\Data Files\\MWSE\\mods\\sb_HitChance\\main.lua": "---@type number\nlocal lastHitChance\n---@type number\nlocal currentHitChance\n---@type mwseTimer\nlocal uiUpdateTimer\n\nlocal function calcHitChance()\n\tlocal weaponSkill = tes3.mobilePlayer:getSkillValue(\n\t\ttes3.getEquippedItem({ actor = tes3.player, objectType = tes3.objectType.weapon })\n\t)\n\tlocal agility = tes3.mobilePlayer.agility.current\n\tlocal luck = tes3.mobilePlayer.luck.current\n\tlocal fatigueCurrent = tes3.mobilePlayer.fatigue.current\n\tlocal fatigueBase = tes3.mobilePlayer.fatigue.base\n\tlocal fortifyAttack = tes3.getEffectMagnitude({ reference = tes3.player, effect = tes3.effect.fortifyAttack })\n\tlocal blind = tes3.getEffectMagnitude({ reference = tes3.player, effect = tes3.effect.blind })\n\treturn (weaponSkill + (agility / 5) + (luck / 10)) * (0.75 + (0.5 * (fatigueCurrent / fatigueBase)))\n\t\t+ fortifyAttack\n\t\t+ blind\nend\n\n---@param mobile tes3mobileNPC|tes3mobileCreature\nlocal function calcEvasion(mobile)\n\tlocal agility = mobile.agility.current\n\tlocal luck = mobile.luck.current\n\tlocal fatigueCurrent = mobile.fatigue.current\n\tlocal fatigueBase = mobile.fatigue.base\n\tlocal sanctuary = tes3.getEffectMagnitude({ reference = mobile.reference, effect = tes3.effect.sanctuary })\n\treturn ((agility / 5) + (luck / 10)) * (0.75 + (0.5 * (fatigueCurrent / fatigueBase))) + sanctuary\nend\n\n--- @param e uiObjectTooltipEventData\nlocal function uiObjectTooltipCallback(e)\n\tif\n\t\t(e.object.objectType == tes3.objectType.npc or e.object.objectType == tes3.objectType.creature)\n\t\tand tes3.mobilePlayer.weaponDrawn\n\t\tand tes3.menuMode() == false\n\tthen\n\t\tlocal hitChance = math.max(\n\t\t\t0,\n\t\t\tevent.trigger(\n\t\t\t\t\"sb:CalcHitRate\",\n\t\t\t\t{ weapon = tes3.getEquippedItem({ actor = tes3.player, objectType = tes3.objectType.weapon }) }\n\t\t\t).hitChance or (calcHitChance() - calcEvasion(e.reference.mobile))\n\t\t)\n\t\tcurrentHitChance = hitChance\n\t\tlocal elementColour\n\t\tif hitChance <= 25 then\n\t\t\telementColour = { 193 / 255, 63 / 255, 55 / 255 }\n\t\telseif hitChance <= 50 then\n\t\t\telementColour = { 253 / 255, 241 / 255, 172 / 255 }\n\t\telseif hitChance <= 75 then\n\t\t\telementColour = { 1, 1, 1 }\n\t\telseif hitChance <= 100 then\n\t\t\telementColour = { 221 / 255, 255 / 255, 221 / 255 }\n\t\telse\n\t\t\telementColour = { 184 / 255, 102 / 255, 211 / 255 }\n\t\tend\n\t\tlocal hitChanceElement = e.tooltip.children[1]:createLabel({\n\t\t\tid = \"sb_HitChance\",\n\t\t\ttext = string.format(\"%0.2f%%\", math.round(hitChance, 2)),\n\t\t})\n\t\thitChanceElement.color = elementColour\n\telse\n\t\tcurrentHitChance = 0\n\tend\nend\nevent.register(tes3.event.uiObjectTooltip, uiObjectTooltipCallback)\n\n--- @param e loadEventData\nlocal function loadCallback(e)\n\tif uiUpdateTimer then\n\t\tuiUpdateTimer:cancel()\n\t\tuiUpdateTimer = nil\n\tend\nend\nevent.register(tes3.event.load, loadCallback)\n\n--- @param e loadedEventData\nlocal function loadedCallback(e)\n\tuiUpdateTimer = timer.start({\n\t\tduration = 1 / 8,\n\t\titerations = -1,\n\t\tcallback = function()\n\t\t\tif lastHitChance ~= currentHitChance then\n\t\t\t\tlastHitChance = currentHitChance\n\t\t\t\ttes3ui.refreshTooltip()\n\t\t\tend\n\t\tend,\n\t})\nend\nevent.register(tes3.event.loaded, loadedCallback)\n\n--- @param e weaponReadiedEventData|weaponUnreadiedEventData\nlocal function weaponReadiedUnreadiedCallback(e)\n\ttes3ui.refreshTooltip()\nend\nevent.register(tes3.event.weaponReadied, weaponReadiedUnreadiedCallback)\nevent.register(tes3.event.weaponUnreadied, weaponReadiedUnreadiedCallback)\n",
    "sb_HitChance_OpenMW-53930-1-1-1704981382\\scripts\\sb_HitChance\\main.lua": "local async = require(\"openmw.async\")\nlocal camera = require(\"openmw.camera\")\nlocal core = require(\"openmw.core\")\nlocal I = require(\"openmw.interfaces\")\nlocal nearby = require(\"openmw.nearby\")\nlocal self = require(\"openmw.self\")\nlocal types = require(\"openmw.types\")\nlocal ui = require(\"openmw.ui\")\nlocal util = require(\"openmw.util\")\n\nlocal weaponSkillMap = {\n\t[types.Weapon.TYPE.AxeOneHand] = \"axe\",\n\t[types.Weapon.TYPE.AxeTwoHand] = \"axe\",\n\t[types.Weapon.TYPE.BluntOneHand] = \"bluntweapon\",\n\t[types.Weapon.TYPE.BluntTwoClose] = \"bluntweapon\",\n\t[types.Weapon.TYPE.BluntTwoWide] = \"bluntweapon\",\n\t[types.Weapon.TYPE.LongBladeOneHand] = \"longblade\",\n\t[types.Weapon.TYPE.LongBladeTwoHand] = \"longblade\",\n\t[types.Weapon.TYPE.MarksmanBow] = \"marksman\",\n\t[types.Weapon.TYPE.MarksmanCrossbow] = \"marksman\",\n\t[types.Weapon.TYPE.MarksmanThrown] = \"marksman\",\n\t[types.Weapon.TYPE.ShortBladeOneHand] = \"shortBlade\",\n\t[types.Weapon.TYPE.SpearTwoWide] = \"spear\",\n}\n\nlocal function calcHitChance(weapon)\n\tlocal weaponSkill =\n\t\ttypes.NPC.stats.skills[weapon and weaponSkillMap[types.Weapon.record(weapon).type] or \"handtohand\"](self).modified\n\tlocal agility = types.Actor.stats.attributes.agility(self).modified\n\tlocal luck = types.Actor.stats.attributes.luck(self).modified\n\tlocal fatigueCurrent = types.Actor.stats.dynamic.fatigue(self).current\n\tlocal fatigueBase = types.Actor.stats.dynamic.fatigue(self).base\n\tlocal fortifyAttack = types.Actor.activeEffects(self):getEffect(core.magic.EFFECT_TYPE.FortifyAttack)\n\tlocal blind = types.Actor.activeEffects(self):getEffect(core.magic.EFFECT_TYPE.Blind)\n\treturn (weaponSkill + (agility / 5) + (luck / 10)) * (0.75 + (0.5 * (fatigueCurrent / fatigueBase)))\n\t\t+ (fortifyAttack and fortifyAttack.magnitude or 0)\n\t\t+ (blind and blind.magnitude or 0)\nend\n\nlocal function calcEvasion(target)\n\tlocal agility = types.Actor.stats.attributes.agility(target).modified\n\tlocal luck = types.Actor.stats.attributes.luck(target).modified\n\tlocal fatigueCurrent = types.Actor.stats.dynamic.fatigue(target).current\n\tlocal fatigueBase = types.Actor.stats.dynamic.fatigue(target).base\n\tlocal sanctuary = types.Actor.activeEffects(target):getEffect(core.magic.EFFECT_TYPE.Sanctuary)\n\treturn ((agility / 5) + (luck / 10)) * (0.75 + (0.5 * (fatigueCurrent / fatigueBase)))\n\t\t+ (sanctuary and sanctuary.magnitude or 0)\nend\n\nlocal hitChanceTextElement = {\n\ttype = ui.TYPE.Text,\n\tprops = {\n\t\ttext = \"%\",\n\t\ttextColor = util.color.rgba(1, 1, 1, 1),\n\t\ttextSize = 14,\n\t},\n}\n\nlocal hitChanceElement = ui.create({\n\tlayer = \"HUD\",\n\tprops = {\n\t\trelativePosition = util.vector2(0.5, 0),\n\t\tanchor = util.vector2(0.5, 0.5),\n\t\tvisible = false,\n\t},\n\tcontent = ui.content({\n\t\t{\n\t\t\ttemplate = I.MWUI.templates.padding,\n\t\t\tcontent = ui.content({ hitChanceTextElement }),\n\t\t},\n\t}),\n\t-- type = ui.TYPE.Flex,\n\ttemplate = I.MWUI.templates.boxSolid,\n})\n\nlocal tooltipTarget\n\nlocal function getTooltipTarget()\n\tlocal from = camera.getPosition()\n\tlocal to = from + camera.viewportToWorldVector(util.vector2(0.5, 0.5)) * core.getGMST(\"iMaxActivateDist\")\n\tnearby.asyncCastRenderingRay(\n\t\tasync:callback(function(result)\n\t\t\ttooltipTarget = result.hitObject\n\t\tend),\n\t\tfrom,\n\t\tto\n\t)\nend\n\nlocal function onUpdate(dt)\n\tif camera.getMode() == camera.MODE.FirstPerson then\n\t\tgetTooltipTarget()\n\telse\n\t\ttooltipTarget = nil\n\tend\n\tif\n\t\ttooltipTarget\n\t\tand (types.NPC.objectIsInstance(tooltipTarget) or types.Creature.objectIsInstance(tooltipTarget))\n\t\tand types.Actor.getStance(self) == types.Actor.STANCE.Weapon\n\tthen\n\t\t\tlocal carriedRight = types.Actor.getEquipment(self, types.Actor.EQUIPMENT_SLOT.CarriedRight)\n\t\t\tif carriedRight and types.Weapon.objectIsInstance(carriedRight) or carriedRight == nil then\n\t\t\t\tlocal hitChance = math.max(0, calcHitChance(carriedRight) - calcEvasion(tooltipTarget))\n\t\t\thitChanceTextElement.props.text = string.format(\"%0.2f%%\", util.round(hitChance * 100) / 100)\n\t\t\tlocal elementColour\n\t\t\tif hitChance <= 25 then\n\t\t\t\telementColour = { 193 / 255, 63 / 255, 55 / 255, 1 }\n\t\t\telseif hitChance <= 50 then\n\t\t\t\telementColour = { 253 / 255, 241 / 255, 172 / 255, 1 }\n\t\t\telseif hitChance <= 75 then\n\t\t\t\telementColour = { 1, 1, 1, 1 }\n\t\t\telseif hitChance <= 100 then\n\t\t\t\telementColour = { 221 / 255, 255 / 255, 221 / 255, 1 }\n\t\t\telse\n\t\t\t\telementColour = { 184 / 255, 102 / 255, 211 / 255, 1 }\n\t\t\tend\n\t\t\thitChanceTextElement.props.textColor = util.color.rgba(table.unpack(elementColour))\n\t\t\thitChanceElement.layout.props.visible = true\n\t\t\tlocal newPos = camera.worldToViewportVector(\n\t\t\t\tutil.vector3(\n\t\t\t\t\ttooltipTarget.position.x,\n\t\t\t\t\ttooltipTarget.position.y,\n\t\t\t\t\ttooltipTarget.position.z\n\t\t\t\t\t\t+ tooltipTarget:getBoundingBox().halfSize.z\n\t\t\t\t\t\t+ tooltipTarget:getBoundingBox().center.z\n\t\t\t\t\t\t+ 12\n\t\t\t\t)\n\t\t\t)\n\t\t\thitChanceElement.layout.props.position = util.vector2(0, newPos.y)\n\t\t\thitChanceElement:update()\n\t\tend\n\telse\n\t\thitChanceElement.layout.props.visible = false\n\t\thitChanceElement:update()\n\tend\nend\n\nreturn { engineHandlers = { onUpdate = onUpdate } }\n"
  }
}