{
  "folder_name": "Skoomaesthesia",
  "lua_files": {
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\common.lua": "local common = {}\nlocal config = require(\"mer.skoomaesthesia.config\")\n\ndo --Logging\n    ---@type table<string, mwseLogger>\n    common.loggers = {}\n    local MWSELogger = require(\"logging.logger\")\n    function common.createLogger(serviceName)\n        local logger = MWSELogger.new{\n            name = string.format(\"Skoomaesthesia - %s\", serviceName),\n            logLevel = config.mcm.logLevel\n        }\n        common.loggers[serviceName] = logger\n        return logger\n    end\nend\n\nfunction common.getVersion()\n    local versionFile = io.open(\"Data Files/MWSE/mods/mer/skoomaesthesia/version.txt\", \"r\")\n    if not versionFile then return end\n    local version = \"\"\n    for line in versionFile:lines() do -- Loops over all the lines in an open text file\n        version = line\n    end\n    return version\nend\n\n\nreturn common",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\config.lua": "local inMemConfig\n\nlocal Config = {}\n\n--Interops\nConfig.skooma = {}\nConfig.moonSugar = {}\nConfig.pipes = {}\n\n--Static Config (stored right here)\nConfig.static = {\n    modName = \"Skoomaesthesia\",\n    --Description for the MCM sidebar\n    modDescription =\n[[\nOverhauls Skooma mechanics. Incudes hallucinations, functional skooma pipes and skooma addiction.\n\n- Scripting by Merlord\n- Shader by XeroFoxx and Vtastek\n- Animations by Greatness7\n]],\n    --Shader Configs\n    shaderName = \"skoomaesthesia\",\n    musicPath = \"skoomaesthesia/trip.mp3\",\n    silencePath = \"skoomaesthesia/silence.mp3\",\n    timeShift = 1,\n    onSetTime = 6,\n    onsetIterations = 200,\n    maxIntensity = 0.3,\n    maxBlur = 1.0,\n    --Skooma Pipe Configs\n    skoomaIds = {\n        potion_skooma_01 = true\n    },\n    pipeIds = {\n        apparatus_a_spipe_01 = true,\n        apparatus_a_spipe_tsiya = true,\n        t_com_skoomapipe_01 = true,\n        llcs_apparatus_a_spipe_01 = true,\n    },\n    moonSugarIds = {\n        ingred_moon_sugar_01 = true\n    },\n\n    --Addiction Configs\n    baseAddictionChance = 1,\n    maxAddictionMulti = 5.0,--0 will\n    minAddictionMulti = 0.0,--100 will\n    hoursToWithdrawal = 2 * 24,\n    hoursToRecovery = 5 * 24,\n}\n\n--MCM Config (stored as JSON)\nConfig.configPath = \"skoomaesthesia\"\nConfig.mcmDefault = {\n    enableHallucinations = true,\n    enableSkoomaPipe = true,\n    enableAddiction = true,\n    logLevel = \"INFO\",\n    maxColor = 70,\n    maxBlur = 100,\n}\nConfig.save = function(newConfig)\n    inMemConfig = newConfig\n    mwse.saveConfig(Config.configPath, inMemConfig)\nend\n\nConfig.mcm = setmetatable({}, {\n    __index = function(_, key)\n        inMemConfig = inMemConfig or mwse.loadConfig(Config.configPath, Config.mcmDefault)\n        return inMemConfig and inMemConfig[key]\n    end,\n    __newindex = function(_, key, value)\n        inMemConfig = inMemConfig or mwse.loadConfig(Config.configPath, Config.mcmDefault)\n        inMemConfig[key] = value\n        mwse.saveConfig(Config.configPath, inMemConfig)\n    end\n})\n\n--Persistent (Stored on player)\nlocal persistentDefault = {\n    isAddicted = nil,\n    tripState = nil,\n    lastSmoked = nil,\n    previousMusicVolume = nil,\n}\n\nConfig.persistent = setmetatable({}, {\n    __index = function(_, key)\n        if not tes3.player then return end\n        tes3.player.data[Config.configPath] = tes3.player.data[Config.configPath] or persistentDefault\n        return tes3.player.data[Config.configPath][key]\n    end,\n    __newindex = function(_, key, value)\n        if not tes3.player then return end\n        tes3.player.data[Config.configPath] = tes3.player.data[Config.configPath] or persistentDefault\n        tes3.player.data.skoomaesthesia[key] = value\n    end\n})\n\nreturn Config",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\init.lua": "local config = require(\"mer.skoomaesthesia.config\")\nlocal Skoomaesthesia = {}\n\nfunction Skoomaesthesia.registerSkooma(data)\n    assert(type(data.id) == \"string\", \"id must be a string\")\n    config.skooma[data.id:lower()] = data\nend\n\nfunction Skoomaesthesia.registerMoonSugar(data)\n    assert(type(data.id) == \"string\", \"id must be a string\")\n    config.moonSugar[data.id:lower()] = data\nend\n\nfunction Skoomaesthesia.registerPipe(data)\n    assert(type(data.id) == \"string\", \"id must be a string\")\n    config.pipes[data.id:lower()] = data\nend\n\nreturn Skoomaesthesia",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\main.lua": "require('mer.skoomaesthesia.mcm')\nlocal common = require(\"mer.skoomaesthesia.common\")\nlocal logger = common.createLogger(\"Skoomaesthesia\")\nevent.register(\"initialized\", function()\n    require('mer.skoomaesthesia.controllers.TripController')\n    require('mer.skoomaesthesia.controllers.PipeController')\n    require('mer.skoomaesthesia.controllers.AddictionController')\n    logger:info(\"Initialized %s\", common.getVersion())\nend)\n--Hacky workaround\nevent.register(\"initialized\", function()\n    tes3.getObject(\"ken\").mesh = \"skoomaesthesia\\\\SkoomaEquip.nif\"\n    tes3.getObject(\"todd\").mesh = \"skoomaesthesia\\\\SkoomaWorld.nif\"\nend, {priority = 1000})\n\n--Register known items\nlocal Skoomaesthesia = require(\"mer.skoomaesthesia\")\nlocal moonSugars = {\n    { id = \"ingred_moon_sugar_01\" }\n}\nlocal skoomas = {\n    { id = \"ingred_skooma_01\" }\n}\nlocal pipes = {\n    { id = \"apparatus_a_spipe_01\" },\n    { id = \"apparatus_a_spipe_tsiya\" },\n    { id = \"t_com_skoomapipe_01\" },\n}\n\nfor _, moonSugar in pairs(moonSugars) do\n    Skoomaesthesia.registerMoonSugar(moonSugar)\nend\nfor _, skooma in pairs(skoomas) do\n    Skoomaesthesia.registerSkooma(skooma)\nend\nfor _, pipe in pairs(pipes) do\n    Skoomaesthesia.registerPipe(pipe)\nend\n",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\mcm.lua": "local common = require('mer.skoomaesthesia.common')\nlocal config = require('mer.skoomaesthesia.config')\nlocal modName = config.static.modName\nlocal modDescription = config.static.modDescription\nlocal mcmConfig = mwse.loadConfig(config.configPath, config.mcmDefault)\n--MCM MENU\nlocal function registerModConfig()\n    local template = mwse.mcm.createTemplate{ name = modName }\n    template.onClose = function()\n        config.save(mcmConfig)\n    end\n    template:register()\n\n    local settings = template:createSideBarPage(\"Settings\")\n    settings.description = modDescription\n\n    settings:createOnOffButton{\n        label = \"Enable Hallucinations\",\n        description = \"When enabled, smoking skooma will cause you to experience auditory and visual hallucinations.\",\n        variable = mwse.mcm.createTableVariable{id = \"enableHallucinations\", table = mcmConfig}\n    }\n\n    settings:createOnOffButton{\n        label = \"Skooma Pipe Mechanics.\",\n        description = \"When enabled, you can smoke moon sugar with a skooma pipe, which gives you the same effect as drinking skooma.\",\n        variable = mwse.mcm.createTableVariable{id = \"enableSkoomaPipe\", table = mcmConfig}\n    }\n\n    settings:createOnOffButton{\n        label = \"Skooma Addiction\",\n        description = \"When enabled, you have a chance to become addicted to Skooma, and suffer withdrawals when you haven't had skooma for two days. To overcome your addiction, survive five days of withdrawals without relapseing.\",\n        variable = mwse.mcm.createTableVariable{id = \"enableAddiction\", table = mcmConfig}\n    }\n\n    settings:createSlider{\n        label = \"Hallucination Color Intensity: %s%%\",\n        description = \"Determines the intensity of color change during a skooma trip.\",\n        min = 0,\n        max = 100,\n        step = 1,\n        jump = 10,\n        variable = mwse.mcm.createTableVariable{id = \"maxColor\", table = mcmConfig}\n    }\n\n    settings:createSlider{\n        label = \"Hallucination Blur Amount: %s%%\",\n        description = \"Determines the size of the edge blur during a skooma trip.\",\n        min = 0,\n        max = 100,\n        step = 1,\n        jump = 10,\n        variable = mwse.mcm.createTableVariable{id = \"maxBlur\", table = mcmConfig}\n    }\n\n    settings:createDropdown{\n        label = \"Logging Level\",\n        description = \"Set the log level.\",\n        options = {\n            { label = \"TRACE\", value = \"TRACE\"},\n            { label = \"DEBUG\", value = \"DEBUG\"},\n            { label = \"INFO\", value = \"INFO\"},\n            { label = \"ERROR\", value = \"ERROR\"},\n            { label = \"NONE\", value = \"NONE\"},\n        },\n        variable = mwse.mcm.createTableVariable{ id = \"logLevel\", table = mcmConfig },\n        callback = function(self)\n            for _, log in ipairs(common.loggers) do\n                log:setLogLevel(self.variable.value)\n            end\n        end\n    }\nend\nevent.register(\"modConfigReady\", registerModConfig)",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\withdrawalStates.lua": "local states = {\n    withdraw_mild = {\n        name = \"Skooma Withdrawal\",\n        min = 0,\n        max = 1,\n        spellEffects = {\n            {\n                id = tes3.effect.drainAttribute,\n                attribute = tes3.attribute.agility,\n                range = tes3.effectRange.self,\n                min = 20,\n                max = 20\n            },\n            {\n                id = tes3.effect.drainAttribute,\n                attribute = tes3.attribute.intelligence,\n                range = tes3.effectRange.self,\n                min = 20,\n                max = 20\n            },\n        },\n    }\n}\nfor id, tbl in pairs(states) do\n    tbl.id = id\nend\n\nreturn states",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\controllers\\AddictionController.lua": "\nlocal AddictionService = require('mer.skoomaesthesia.services.AddictionService')\nlocal common = require('mer.skoomaesthesia.common')\nlocal logger = common.createLogger(\"AddictionController\")\nlocal config = require('mer.skoomaesthesia.config')\n\nlocal function checkAddiction()\n    logger:trace(\"AddictionService: checkAddiction()\")\n    if not AddictionService.getIsAddicted() then return end\n    local lastSmoked = config.persistent.lastSmoked\n    if not lastSmoked then return end\n    local now = tes3.getSimulationTimestamp()\n    local timeAddicted = now - lastSmoked\n    logger:trace(\"Last Smoked: %s\", lastSmoked)\n    logger:trace(\"Now: %s\", now)\n    logger:trace(\"time Addicted: %s\", timeAddicted)\n    if timeAddicted < config.static.hoursToWithdrawal then\n        logger:trace(\"checkAddiction() removing withdrawals\")\n        --smoked recently\n        AddictionService.removeWithdrawals()\n    elseif timeAddicted < config.static.hoursToRecovery then\n        logger:trace(\"checkAddiction() add withdrawals if needed\")\n        AddictionService.addWithdrawals()\n    else\n        logger:trace(\"checkAddiction() recover\")\n        AddictionService.recover()\n    end\nend\n\nevent.register(\"loaded\", function()\n    timer.start{\n        type = timer.simulate,\n        duration = 1,\n        iterations = -1,\n        callback = checkAddiction\n    }\nend)",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\controllers\\PipeController.lua": "local common = require(\"mer.skoomaesthesia.common\")\nlocal logger = common.createLogger(\"PipeController\")\nlocal config = require('mer.skoomaesthesia.config')\nlocal PipeService = require('mer.skoomaesthesia.services.PipeService')\nlocal ItemService = require('mer.skoomaesthesia.services.ItemService')\n\nlocal function onEquip(e)\n    if not config.mcm.enableSkoomaPipe then return end\n    if e.reference ~= tes3.player then return end\n    if config.pipeAnimating then return end --in the middle of smoking already\n    if ItemService.isPipe(e.item) then\n        logger:debug(\"Equipped pipe: %s\", e.item.id)\n        if tes3ui.menuMode() then\n            logger:debug(\"Menu mode, show pipe menu\")\n            PipeService.showPipeMenu({ object = e.item })\n        else\n            logger:debug(\"Not menu mode, smoke skooma\")\n            PipeService.smokeSkooma({ object = e.item})\n        end\n        return false\n    end\nend\nevent.register(\"equip\", onEquip, { priority = 50 })\n\nlocal function onActivatePipe(e)\n    if not config.mcm.enableSkoomaPipe then return end\n    if tes3ui.menuMode() then return end\n    if e.activator ~= tes3.player then return end\n    if config.pipeAnimating then return end --in the middle of smoking already\n    if ItemService.isPipe(e.target.baseObject) then\n        logger:debug(\"Activated pipe: %s\", e.target.baseObject.id)\n        if PipeService.skipActivatePipe then\n            PipeService.skipActivatePipe = nil\n        else\n            logger:debug(\"Not skipping, show pipe menu\")\n            local pipeRef = e.target\n            PipeService.showPipeMenu({ reference = pipeRef })\n            return false\n        end\n    end\nend\nevent.register(\"activate\", onActivatePipe, { priority = 50 })",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\controllers\\TripController.lua": "local common = require('mer.skoomaesthesia.common')\nlocal logger = common.createLogger(\"TripController\")\nlocal config = require('mer.skoomaesthesia.config')\nlocal ShaderService = require('mer.skoomaesthesia.services.ShaderService')\nlocal MusicService = require('mer.skoomaesthesia.services.MusicService')\nlocal TripStateService = require('mer.skoomaesthesia.services.TripStateService')\nlocal AddictionService = require('mer.skoomaesthesia.services.AddictionService')\nlocal ItemService = require('mer.skoomaesthesia.services.ItemService')\n\nlocal function startTrip()\n    if not TripStateService.isState('beginning') then\n        TripStateService.updateState('beginning')\n        ShaderService.turnOnShaderEffects()\n        MusicService.playCreepySounds()\n        AddictionService.removeWithdrawals()\n    end\nend\n\nlocal function endTrip()\n    if not TripStateService.isState('ending') then\n        TripStateService.updateState('ending')\n        ShaderService.turnOffShaderEffects()\n        MusicService.stopCreepySounds()\n        timer.start{\n            type = timer.simulate,\n            duration = config.static.timeShift * config.static.onSetTime,\n            iterations = 1,\n            callback = function()\n                TripStateService.updateState(nil)\n            end,\n        }\n    end\nend\n\n---@param e spellTickEventData\nlocal function skoomaSpellTick(e)\n    if e.target ~= tes3.player then return end\n    if e.effectInstance.state == tes3.spellState.beginning then\n        if ItemService.isSkooma(e.source) then\n            if config.mcm.enableHallucinations then\n                if TripStateService.isState('ending') or TripStateService.getState() == nil then\n                    logger:debug(\"Drank Skooma, starting Trip\")\n                    startTrip()\n                    if config.mcm.enableAddiction then\n                        AddictionService.smoke()\n                    end\n                end\n            end\n        end\n    end\nend\nevent.register(\"spellTick\", skoomaSpellTick)\n\n\nlocal function checkSkoomaExpired()\n    if TripStateService.isState('ending') or not TripStateService.getState() then return end\n    local skoomaActive = false\n    ---@diagnostic disable-next-line: undefined-field\n    local activeEffect = tes3.mobilePlayer.activeMagicEffects\n    ---@diagnostic disable-next-line: undefined-field\n    for _ = 1, tes3.mobilePlayer.activeMagicEffectCount+1 do\n        local instance = activeEffect.instance\n        if instance and instance.item and instance.item.name then\n            if ItemService.isSkooma(instance.item) then\n                skoomaActive = true\n            end\n        end\n        activeEffect = activeEffect.next\n    end\n    if not skoomaActive then\n        logger:debug(\"Skooma ran out, ending Trip\")\n        endTrip()\n    end\nend\n\nlocal function handleTripOnLoad(e)\n    config.pipeAnimating = nil\n    ShaderService.resetShader()\n    timer.start{\n        type = timer.simulate,\n        duration = 1,\n        callback = function()\n            logger:debug(\"Checking trip on load\")\n            local tripState = TripStateService.getState()\n            logger:debug(\"Tripstate: %s\", tripState)\n            if tripState == \"ending\" then\n                logger:debug(\"ending\")\n                TripStateService.updateState(nil)\n            elseif tripState and config.mcm.enableHallucinations then\n                logger:debug(\"Has a trip state, turning on shader effects\")\n                MusicService.playCreepySounds()\n                ShaderService.turnOnShaderEffects()\n            end\n            timer.start{\n                type = timer.simulate,\n                duration = 0.1,\n                callback = checkSkoomaExpired,\n                iterations = -1\n            }\n        end\n    }\nend\nevent.register(\"loaded\", handleTripOnLoad)\n\n\n--Time Effects\nlocal function getColorCycle()\n    local moduloMinutes = (os.clock()*0.1)%2\n    moduloMinutes = (moduloMinutes < 1)\n        and moduloMinutes\n        or (1 - (moduloMinutes-1))\n    return moduloMinutes\nend\n\nlocal function slowTime(e)\n    if tes3ui.menuMode() or not tes3.player then return end\n    if TripStateService.getState() ~= nil then\n        tes3.worldController.deltaTime = tes3.worldController.deltaTime * config.static.timeShift\n    end\n    ShaderService.getShader().cycle = getColorCycle()\nend\nevent.register(\"enterFrame\", slowTime)\n\nlocal function slowDownSoundEffects(e)\n    if tes3ui.menuMode() or not tes3.player then return end\n    if TripStateService.getState() ~= nil then\n        e.pitch = e.pitch / 2\n        e.isVoiceover = false\n    end\nend\nevent.register(\"addSound\", slowDownSoundEffects)\n\nlocal function blockMusicChange(e)\n    if (TripStateService.getState() ~= nil) and not TripStateService.isState('ending') then\n        logger:debug(\"Changing music path to Skoomaesthesia\")\n        e.music = config.static.musicPath\n    end\nend\nevent.register(\"musicSelectTrack\", blockMusicChange)\n\nlocal function blockEquipWhileAnimating(e)\n    if config.pipeAnimating then\n        return false\n    end\nend\nevent.register(\"equip\", blockEquipWhileAnimating, { priority = 1234 })\n\n",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\services\\AddictionService.lua": "local common = require('mer.skoomaesthesia.common')\nlocal logger = common.createLogger(\"AddictionService\")\nlocal config = require('mer.skoomaesthesia.config')\nlocal SpellService = require('mer.skoomaesthesia.services.SpellService')\nlocal withdrawalStates = require('mer.skoomaesthesia.withdrawalStates')\n\nlocal AddictionService = {}\n\nlocal function becomeAddicted()\n    logger:trace(\"becomeAddicted()\")\n    config.persistent.isAddicted = true\n    tes3.messageBox{\n        message = \"You have become addicted to skooma.\",\n        buttons = {\n            tes3.findGMST(tes3.gmst.sOK).value  ---@diagnostic disable-line\n        }\n    }\nend\n\nlocal function tryGetAddicted()\n    if AddictionService.getIsAddicted() then return end\n    logger:debug(\"AddictionService: tryGetAddicted()\")\n    local baseChance = config.static.baseAddictionChance / 100\n    local willpower = tes3.mobilePlayer.willpower.current\n    local minMulti = config.static.minAddictionMulti\n    local maxMulti = config.static.maxAddictionMulti\n    local willpowerEffect = math.remap(willpower, 0, 100, maxMulti, minMulti)\n    willpowerEffect = math.clamp(willpowerEffect, minMulti, maxMulti)\n    local thisChance = baseChance * willpowerEffect\n    local diceroll = math.random()\n    logger:debug(\"diceroll: %.2f, needed: %.2f\", diceroll, thisChance)\n    if diceroll < thisChance then\n        logger:debug(\"Passed, getting addicted\")\n        becomeAddicted()\n    end\nend\n\n--public functions\nfunction AddictionService.smoke()\n    logger:trace(\"AddictionService: smoke()\")\n    AddictionService.resetSmokedTimer()\n    tryGetAddicted()\nend\n\nfunction AddictionService.resetSmokedTimer()\n    logger:trace(\"AddictionService: resetSmokedTimer()\")\n    config.persistent.lastSmoked = tes3.getSimulationTimestamp()\nend\n\nfunction AddictionService.hasWithdrawals()\n    local hasWithdrawals = false\n    for _, state in pairs(withdrawalStates) do\n        local spell = SpellService.getSpellForState(state)\n        if spell and tes3.player.object.spells:contains(spell) then\n            hasWithdrawals = true\n        end\n    end\n    return hasWithdrawals\nend\n\nfunction AddictionService.addWithdrawals()\n    if AddictionService.getIsAddicted() and not AddictionService.hasWithdrawals() then\n        logger:trace(\"adding Withdrawals\")\n        local spell = SpellService.getSpellForState(withdrawalStates.withdraw_mild)\n        if not spell then\n            logger:warn(\"Unable to get spell for state: %s\", withdrawalStates.withdraw_mild.id)\n            return\n        end\n        tes3.addSpell({ reference = tes3.player, spell = spell })\n        tes3.messageBox({\n            message = \"You are suffering from skooma withdrawals.\",\n        })\n    end\nend\n\nfunction AddictionService.removeWithdrawals()\n    if AddictionService.hasWithdrawals() then\n        logger:trace(\"removing Withdrawals\")\n        local spell = SpellService.getSpellForState(withdrawalStates.withdraw_mild)\n        if spell then\n            tes3.removeSpell({ reference = tes3.player, spell = spell })\n        end\n    end\nend\n\nfunction AddictionService.recover()\n    logger:trace(\"recover()\")\n    AddictionService.removeWithdrawals()\n    config.persistent.isAddicted = false\n    tes3.messageBox{\n        message = \"You are no longer addicted to skooma.\",\n    }\nend\n\nfunction AddictionService.getIsAddicted()\n    return config.persistent.isAddicted == true\nend\n\n\n\n\n\nreturn AddictionService",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\services\\AnimationService.lua": "local AnimationService = {}\nlocal common = require('mer.skoomaesthesia.common')\nlocal logger = common.createLogger(\"AnimationService\")\nlocal config = require('mer.skoomaesthesia.config')\nlocal TripStateService = require('mer.skoomaesthesia.services.TripStateService')\nlocal meshRoot = 'skoomaesthesia'\nlocal meshes = {\n    attach = 'AttachApparatus',\n    equip = 'SkoomaEquip',\n    world = 'SkoomaWorld'\n}\n\nlocal function getDuration(duration)\n    local tripping = TripStateService.getState()\n    local multi = tripping and config.static.timeShift or 1.0\n    return duration / multi\nend\n\nlocal function getMeshPath(meshType)\n    local animPath = string.format('%s\\\\%s.nif', meshRoot, meshes[meshType])\n    logger:debug(\"getMeshPath: %s\", animPath)\n    return animPath\nend\n\nlocal function getPipeMesh(pipeObject)\n    logger:debug(\"getPipeMesh\")\n    local skoomaMeshPath = pipeObject.mesh\n    logger:debug(\"skoomaMeshPath: %s\", skoomaMeshPath)\n    local skoomaMesh = tes3.loadMesh(skoomaMeshPath):clone()\n    return skoomaMesh\nend\n\nlocal function attachPipe(ref, pipeObject)\n    logger:debug(\"attachPipe\")\n    local skooma = getPipeMesh(pipeObject) ---@type any\n    local attachPath = getMeshPath('attach')\n    local node = tes3.loadMesh(attachPath):clone()\n    node:attachChild(skooma, true)\n    ref.sceneNode:getObjectByName(\"Bip01 R Hand\"):attachChild(node)\n    ref:updateSceneGraph()\n    ref.sceneNode:updateNodeEffects()\nend\n\nlocal function detachPipe(ref)\n    logger:debug(\"detachPipe\")\n    local node = ref.sceneNode:getObjectByName(\"Bip01 R Hand\")\n    local attach = node:getObjectByName(\"Attach Apparatus\")\n    node:detachChild(attach)\nend\n\nlocal function setPipeCullState(refHandle, state)\n    if refHandle and refHandle:valid() then\n        refHandle:getObject().sceneNode.appCulled = state\n    end\nend\n\n\nlocal function playSmokingAnimation(meshPath, pipeObject, pipeRef)\n    logger:debug(\"playSmokingAnimation\")\n    local ref = tes3.is3rdPerson() and tes3.player or tes3.player1stPerson\n    local pipeRefHandle = pipeRef and tes3.makeSafeObjectHandle(pipeRef)\n    --unequip any weapon\n    tes3.mobilePlayer:unequip{ type = tes3.objectType.weapon }\n\n    --Set data used for blocking equip\n    config.pipeAnimating = true\n    timer.start{\n        duration = getDuration(4.5),\n        callback = function()\n            config.pipeAnimating = nil\n        end\n    }\n\n    --play the animation\n    tes3.playAnimation({\n        reference= ref,\n        upper= tes3.animationGroup.idle9,\n        mesh= meshPath,\n        loopCount=0,\n        startFlag = 1,\n    })\n    event.trigger(\"Ashfall:triggerPackUpdate\")\n    --Transfer pipe to hands at appropriate times in animation\n    if pipeRef then -- take from world\n        timer.start{\n            duration = getDuration(1),\n            callback = function()\n                attachPipe(ref, pipeObject)\n                setPipeCullState(pipeRefHandle, true)\n            end\n        }\n    else -- pull from pocket\n        attachPipe(ref, pipeObject)\n        setPipeCullState(pipeRefHandle, true)\n    end\n    --Return the pipe\n    timer.start{\n        duration = getDuration(3.5),\n        callback = function()\n            detachPipe(ref)\n            setPipeCullState(pipeRefHandle, false)\n        end\n    }\nend\n\n\n\n\nfunction AnimationService.smokeSkooma(e)\n    local pipeRef = e.reference\n    local pipeObj = e.object or pipeRef and pipeRef.object\n\n    logger:debug(\"smokeSkooma\")\n    local animPath\n    if pipeRef then\n        animPath = getMeshPath('world')\n    else\n        animPath = getMeshPath('equip')\n    end\n    playSmokingAnimation(animPath, pipeObj, pipeRef)\nend\n\nreturn AnimationService\n\n",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\services\\ItemService.lua": "local ItemService = {}\nlocal common = require('mer.skoomaesthesia.common')\nlocal logger = common.createLogger('ItemService')\nlocal config = require('mer.skoomaesthesia.config')\n\n---@return boolean\nfunction ItemService.isSkooma(item)\n    local isPotion = item.objectType == tes3.objectType.alchemy\n    local skoomaInName = item.name ~= nil and item.name:lower():find('skooma') ~= nil\n    local inConfig = config.skooma[item.id:lower()] ~= nil\n    return (isPotion and skoomaInName) or inConfig\nend\n\n---@return boolean\nfunction ItemService.isMoonSugar(item)\n    local isIngredient = item.objectType == tes3.objectType.ingredient\n    local moonSugarInName = item.name ~= nil and item.name:lower() == 'moon sugar'\n    local inConfig = config.moonSugar[item.id:lower()] ~= nil\n    return (isIngredient and moonSugarInName) or inConfig\nend\n\n---@return boolean\nfunction ItemService.isPipe(item)\n    local isApparatus = item.objectType == tes3.objectType.apparatus\n    local pipeInName = item.name ~= nil and item.name:lower():find('skooma pipe') ~= nil\n    local inConfig = config.pipes[item.id:lower()] ~= nil\n    return (isApparatus and pipeInName) or inConfig\nend\n\n---@return boolean\nfunction ItemService.playerHasSkooma()\n    for _, itemStack in pairs(tes3.player.object.inventory) do\n        if ItemService.isSkooma(itemStack.object) then\n            return true\n        end\n    end\n    return false\nend\n\n---@return boolean\nfunction ItemService.playerHasMoonSugar()\n    for _, itemStack in pairs(tes3.player.object.inventory) do\n        if ItemService.isMoonSugar(itemStack.object) then\n            return true\n        end\n    end\n    return false\nend\n\n---@return boolean\nfunction ItemService.playerHasPipe()\n    for _, itemStack in pairs(tes3.player.object.inventory) do\n        if ItemService.isPipe(itemStack.object) then\n            return true\n        end\n    end\n    return false\nend\n\n---@return string|nil\nfunction ItemService.getMoonSugar()\n    for _, itemStack in pairs(tes3.player.object.inventory) do\n        if ItemService.isMoonSugar(itemStack.object) then\n            return itemStack.object.id\n        end\n    end\nend\n\nreturn ItemService",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\services\\MusicService.lua": "local MusicService = {}\nlocal common = require('mer.skoomaesthesia.common')\nlocal logger = common.createLogger('MusicService')\nlocal config = require('mer.skoomaesthesia.config')\nlocal TripStateService = require('mer.skoomaesthesia.services.TripStateService')\n\nfunction MusicService.playCreepySounds()\n    if TripStateService.isState('beginning') or TripStateService.isState('active') then\n        logger:debug('Playing creepy sounds')\n        tes3.streamMusic{ path = config.static.musicPath, crossfade = 1 }\n    end\nend\n\nfunction MusicService.stopCreepySounds()\n    logger:debug('Stopping creepy sounds')\n    tes3.streamMusic{ path = config.static.silencePath, crossfade = 5 }\nend\n\n\nreturn MusicService",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\services\\PipeService.lua": "\nlocal common = require('mer.skoomaesthesia.common')\nlocal logger = common.createLogger('PipeService')\nlocal config = require('mer.skoomaesthesia.config')\nlocal AnimationService = require('mer.skoomaesthesia.services.AnimationService')\nlocal TripStateService = require('mer.skoomaesthesia.services.TripStateService')\nlocal ItemService = require('mer.skoomaesthesia.services.ItemService')\n\nlocal PipeService = {\n    skipEquipSkooma = nil,\n    skipActivatePipe = nil\n}\n\nlocal function getDuration(duration)\n    local tripping = TripStateService.getState()\n    local multi = tripping and config.static.timeShift or 1.0\n    return duration / multi\nend\n\nfunction PipeService.smokeSkooma(e)\n    logger:debug(\"PipeService.smokeSkooma\")\n    if not ItemService.playerHasMoonSugar() then\n        tes3.messageBox(\"You are out of moon sugar.\")\n        return\n    end\n    local pipeRef = e.reference\n    local pipeObj = e.object or pipeRef and pipeRef.object\n    AnimationService.smokeSkooma({reference=pipeRef, object=pipeObj})\n    logger:debug(\"PipeService.smokeSkooma starting timer\")\n    timer.start{\n        type = timer.simulate,\n        iterations = 1,\n        duration = getDuration(2.5),\n        callback = function()\n            tes3.playSound{\n                reference = tes3.player,\n                soundPath = 'skoomaesthesia\\\\inhale.wav'\n            }\n            timer.start{\n                type = timer.simulate,\n                iterations = 1,\n                duration = getDuration(2),\n                callback = function()\n                    config.skipEquip = true\n                    tes3.addItem{\n                        reference = tes3.player,\n                        item = \"potion_skooma_01\",\n                        count = 1,\n                        playSound = false,\n                        updateGUI = false\n                    }\n\n                    mwscript.equip{ ---@diagnostic disable-line\n                        reference = tes3.player,\n                        item=\"potion_skooma_01\"\n                    }\n\n                    local moonSugar = ItemService.getMoonSugar()\n                    if moonSugar then\n                        tes3.removeItem{\n                            reference = tes3.player,\n                            item = moonSugar,\n                            playSound = false,\n                            count = 1\n                        }\n                    else\n                        logger:warn(\"No moon sugar found in player inventory\")\n                    end\n                    config.skipEquip = false\n                    logger:debug(\"PipeService.smokeSkooma done\")\n                end\n            }\n        end\n    }\nend\n\nfunction PipeService.showPipeMenu(e)\n    local pipeRef = e.reference\n    local pipeObj = pipeRef and pipeRef.object or e.object\n    local buttons = {\n        {\n            text = \"Smoke Moon Sugar\",\n            requirements = ItemService.playerHasMoonSugar,\n            tooltipDisabled = {\n                text = \"You do not have any moon sugar.\"\n            },\n            callback = function()\n                PipeService.smokeSkooma({reference=pipeRef, object=pipeObj})\n            end,\n        },\n        {\n            text = \"Pick Up\",\n            showRequirements = function() return pipeRef ~= nil end,\n            callback = function()\n                timer.delayOneFrame(function()\n                    PipeService.skipActivatePipe = true\n                    tes3.player:activate(pipeRef)\n                end)\n            end\n        }\n    }\n    tes3ui.showMessageMenu{\n        message = pipeObj.name,\n        buttons = buttons,\n        cancels = true\n    }\nend\n\nreturn PipeService",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\services\\ShaderService.lua": "\nlocal common = require('mer.skoomaesthesia.common')\nlocal logger = common.createLogger(\"ShaderService\")\nlocal config = require('mer.skoomaesthesia.config')\nlocal TripStateService = require('mer.skoomaesthesia.services.TripStateService')\nlocal ShaderService = {}\n\nlocal function getDuration(duration)\n    local tripping = TripStateService.getState()\n    local multi = tripping and config.static.timeShift or 1.0\n    return duration * multi\nend\n\nfunction ShaderService.getShader(shaderId)\n    shaderId = shaderId or config.static.shaderName\n    local shader = mge.shaders.find{ name = shaderId}\n    if not shader then\n        shader = mgeShadersConfig.load({ name = shaderId })\n    end\n    return shader\nend\n\nfunction ShaderService.turnOnShaderEffects()\n    local shader = ShaderService.getShader()\n    shader.enabled = true\n\n    local DURATION = config.static.onSetTime / config.static.onsetIterations\n    local ITERATIONS = config.static.onsetIterations\n    local MAX_INTENSITY = config.mcm.maxColor/100\n    local MAX_BLUR = math.clamp(config.mcm.maxBlur/100, 0.0, 1.0)\n    local INTENSITY_PER_TICK = (MAX_INTENSITY / config.static.onsetIterations)\n    local BLUR_PER_TICK = (MAX_BLUR / config.static.onsetIterations)\n\n    logger:debug(\"Turning Shader Effects On. Max Intensity: %s\", MAX_INTENSITY)\n    local intensity = 0\n    local blurRadius = 0\n    timer.start{\n        typer = timer.simulate,\n        duration = getDuration(DURATION),\n        iterations = ITERATIONS,\n        callback = function()\n            if TripStateService.isState('beginning') or TripStateService.isState('active') then\n                intensity = math.clamp((intensity + INTENSITY_PER_TICK), 0, MAX_INTENSITY)\n                shader.intensity = intensity\n                blurRadius = math.clamp((blurRadius + BLUR_PER_TICK), 0, MAX_BLUR)\n                shader.radius = blurRadius\n                logger:trace(\"ON: set intensity to %s\", intensity)\n            end\n        end\n    }\n    timer.start{\n        type = timer.simulate,\n        duration = getDuration(config.static.onSetTime),\n        iterations = 1,\n        callback = function()\n            if TripStateService.isState('beginning') then\n                TripStateService.updateState('active')\n            end\n        end\n    }\nend\n\n\nfunction ShaderService.turnOffShaderEffects()\n    local shader = ShaderService.getShader()\n\n    local DURATION = config.static.onSetTime / config.static.onsetIterations\n    local ITERATIONS = config.static.onsetIterations\n    local MAX_INTENSITY = config.mcm.maxColor/100\n    local MAX_BLUR = math.clamp(config.mcm.maxBlur/100, 0.0, 1.0)\n    local INTENSITY_PER_TICK = (MAX_INTENSITY / config.static.onsetIterations)\n    local BLUR_PER_TICK = (MAX_BLUR / config.static.onsetIterations)\n\n    logger:debug(\"Turning Shader Effects Off\")\n    local intensity = MAX_INTENSITY\n    local blurRadius = MAX_BLUR\n    timer.start{\n        type = timer.simulate,\n        duration = getDuration(DURATION),\n        iterations = ITERATIONS+1,--1 extra tick to avoid rounding errors\n        callback = function()\n            if TripStateService.isState('ending') then\n                intensity = math.clamp((intensity - INTENSITY_PER_TICK), 0, MAX_INTENSITY)\n                shader.intensity = intensity\n                blurRadius = math.clamp((blurRadius - BLUR_PER_TICK), 0, MAX_BLUR)\n                shader.radius = blurRadius\n                logger:trace(\"OFF: set intensity to %s\", intensity)\n            end\n        end\n    }\n    timer.start{\n        type = timer.simulate,\n        duration = getDuration(DURATION*(ITERATIONS+1)+1),\n        iterations = 1,\n        callback = function()\n            if TripStateService.isState('ending') then\n                shader.enabled = false\n            end\n        end\n    }\nend\n\nfunction ShaderService.resetShader()\n    logger:debug(\"reseting the shader\")\n    local shader = ShaderService.getShader()\n    shader.enabled = false\nend\n\n\n\nreturn ShaderService",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\services\\SpellService.lua": "local common = require(\"mer.skoomaesthesia.common\")\nlocal logger = common.createLogger(\"SpellService\")\nlocal SpellService = {}\nfunction SpellService.getSpellId(stateId)\n    return string.format(\"mer_sk_%s\", string.lower(stateId))\nend\n\nfunction SpellService.getSpellForState(state)\n    if state.spellEffects then\n        local spellId = SpellService.getSpellId(state.id)\n        local spell = tes3.getObject(spellId) ---@type any\n        ---@cast spell tes3spell\n        if not spell then\n            --spell = tes3spell.create(spellId, state.name)\n            spell = tes3.createObject{\n                id = spellId,\n                objectType = tes3.objectType.spell,\n                castType = tes3.spellType.ability,\n            }\n            ---@cast spell tes3spell\n            spell.name = state.name\n            spell.castType = tes3.spellType.ability\n            for i=1, #state.spellEffects do\n                local effect = spell.effects[i]\n                local newEffect = state.spellEffects[i]\n                effect.id = newEffect.id\n                effect.attribute = newEffect.attribute\n                effect.rangeType = tes3.effectRange.self\n                effect.min = newEffect.min or 0\n                effect.max = newEffect.max or 0\n            end\n        end\n        logger:debug(\"Returning Spell: %s\", spell.id)\n        return spell\n    else\n        logger:debug(\"Unable to get spell\")\n        return nil\n    end\nend\n\nreturn SpellService",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\MWSE\\mods\\mer\\skoomaesthesia\\services\\TripStateService.lua": "--[[\n    Keeps track of the state of the Skooma hallucination\n]]\n\nlocal common = require(\"mer.skoomaesthesia.common\")\nlocal logger = common.createLogger(\"TripStateService\")\nlocal config = require('mer.skoomaesthesia.config')\n\nlocal TripStateService = {}\nlocal STATES = {\n    beginning = \"beginning\",\n    active = \"active\",\n    ending = \"ending\"\n}\n\nfunction TripStateService.updateState(newState)\n    if not config.persistent then return end\n    if (newState ~= nil) and not STATES[newState] then\n        logger:error(\"Tried to update to an invalid trip state\")\n        return\n    end\n    local oldState = config.persistent.tripState\n    config.persistent.tripState = STATES[newState]\n    local eventData = {\n        oldState = oldState,\n        newState = config.persistent.tripState,\n    }\n    event.trigger(\"Skoomaesthesia:TripStateUpdated\", eventData)\nend\n\nfunction TripStateService.getState()\n    if config.persistent then\n        return config.persistent.tripState\n    end\nend\n\nfunction TripStateService.isState(state)\n    return config.persistent and (config.persistent.tripState == state)\nend\n\nreturn TripStateService",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\scripts\\Skoomaesthesia\\addiction.lua": "local core = require('openmw.core')\nlocal self = require('openmw.self')\nlocal types = require('openmw.types')\nlocal storage = require('openmw.storage')\nlocal ui = require('openmw.ui')\nlocal time = require('openmw_aux.time')\n\nlocal settings = storage.globalSection('SettingsSkoomaesthesia_Addiction')\n\nlocal attributes = types.Actor.stats.attributes\nlocal l10n = core.l10n('Skoomaesthesia')\n\nlocal function applyWithdrawalChange(active)\n    local withdrawalChange = settings:get('withdrawalIntensity')\n    local attributes = {\n        attributes.intelligence(self),\n        attributes.agility(self),\n    }\n    if not active then\n        withdrawalChange = -withdrawalChange\n    end\n    for _, attr in ipairs(attributes) do\n        attr.damage = math.max(0, attr.damage + withdrawalChange)\n    end\nend\n\nlocal function rescale(value, minIn, maxIn, minOut, maxOut)\n    local t = (value - minIn) / (maxIn - minIn)\n    t = math.min(1, math.max(0, t))\n    return minOut + t * (maxOut - minOut)\nend\n\nlocal function addictionTest()\n    local willpowerValue = attributes.willpower(self).modified\n    local resistChance = rescale(\n        willpowerValue,\n        0, 100,\n        settings:get('minResistance'), settings:get('maxResistance')\n    )\n    local addictionChance = settings:get('baseChance') / resistChance\n    return math.random() < addictionChance\nend\n\nlocal state = {\n    lastDoseTime = nil,\n    hasWithdrawal = false,\n    addicted = false,\n}\n\nlocal function dose()\n    state.lastDoseTime = core.getGameTime()\n    if not state.addicted and addictionTest() then\n        state.addicted = true\n        ui.showMessage(l10n('message_addicted'))\n    end\nend\n\nlocal function update()\n    if not state.lastDoseTime or not state.addicted then return end\n    local now = core.getGameTime()\n    local timeSinceDose = now - state.lastDoseTime\n    local hoursSinceDose = timeSinceDose / time.hour\n\n    local hoursToWithdrawal = settings:get('hoursToWithdrawal')\n    local hoursToRecovery = settings:get('hoursToRecovery')\n\n    local hasWithdrawal = hoursToWithdrawal < hoursSinceDose\n        and hoursSinceDose < hoursToRecovery\n\n    if state.hasWithdrawal ~= hasWithdrawal then\n        applyWithdrawalChange(hasWithdrawal)\n        state.hasWithdrawal = hasWithdrawal\n        if hasWithdrawal then\n            ui.showMessage(l10n('message_withdrawal'))\n        end\n    end\n\n    if hoursSinceDose > hoursToRecovery then\n        state.addicted = false\n        ui.showMessage(l10n('message_recovery'))\n    end\nend\n\nlocal function save()\n    return state\nend\n\nlocal function load(savedState)\n    if not savedState then return end\n    state.lastDoseTime = savedState.lastDoseTime\n    state.hasWithdrawal = savedState.hasWithdrawal\n    state.addicted = savedState.addicted\nend\n\nreturn {\n    dose = dose,\n    update = update,\n    save = save,\n    load = load\n}\n",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\scripts\\Skoomaesthesia\\global.lua": "local I = require('openmw.interfaces')\n\nI.Settings.registerGroup {\n    key = 'SettingsSkoomaesthesia_Addiction',\n    page = 'Skoomaesthesia',\n    l10n = 'Skoomaesthesia',\n    name = 'addictionGroupName',\n    permanentStorage = false,\n    settings = {\n        {\n            key = 'withdrawalIntensity',\n            name = 'withdrawalIntensity_name',\n            description = 'withdrawalIntensity_description',\n            renderer = 'number',\n            default = 20,\n            argument = {\n                min = 0,\n            },\n        },\n        {\n            key = 'hoursToWithdrawal',\n            name = 'hoursToWithdrawal_name',\n            description = 'hoursToWithdrawal_description',\n            renderer = 'number',\n            default = 2 * 24,\n            argument = {\n                min = 1,\n            },\n        },\n        {\n            key = 'hoursToRecovery',\n            name = 'hoursToRecovery_name',\n            description = 'hoursToRecovery_description',\n            renderer = 'number',\n            default = 5 * 24,\n            argument = {\n                min = 1,\n            },\n        },\n        {\n            key = 'baseChance',\n            name = 'baseChance_name',\n            description = 'baseChance_description',\n            renderer = 'number',\n            default = 1,\n            argument = {\n                min = 0,\n                max = 1,\n            },\n        },\n        {\n            key = 'minResistance',\n            name = 'minResistance_name',\n            description = 'minResistance_description',\n            renderer = 'number',\n            default = 1,\n            argument = {\n                min = 1,\n            },\n        },\n        {\n            key = 'maxResistance',\n            name = 'maxResistance_name',\n            description = 'maxResistance_description',\n            renderer = 'number',\n            default = 5,\n            argument = {\n                min = 1,\n            },\n        },\n    }\n}\n",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\scripts\\Skoomaesthesia\\player.lua": "local I = require('openmw.interfaces')\n\nI.Settings.registerPage {\n    key = 'Skoomaesthesia',\n    l10n = 'Skoomaesthesia',\n    name = 'pageName',\n    description = 'pageDescription',\n}\n\nlocal addiction = require('scripts.Skoomaesthesia.addiction')\nlocal visuals = require('scripts.Skoomaesthesia.visuals')\n\nreturn {\n    engineHandlers = {\n        onConsume = function(item)\n            if item.recordId ~= 'potion_skooma_01' then return end\n            visuals.dose()\n            addiction.dose()\n        end,\n        onUpdate = function()\n            addiction.update()\n        end,\n        onFrame = function(_)\n            visuals.frame()\n        end,\n        onSave = function()\n            return {\n                visuals = visuals.save(),\n                addiction = addiction.save()\n            }\n        end,\n        onLoad = function(savedState)\n            if not savedState then return end\n            visuals.load(savedState.visuals)\n            addiction.load(savedState.addiction)\n        end,\n    }\n}\n",
    "Skoomaesthesia-49920-v1-1-1-1704358450\\Data Files\\scripts\\Skoomaesthesia\\visuals.lua": "local core = require('openmw.core')\nlocal storage = require('openmw.storage')\nlocal postprocessing = require('openmw.postprocessing')\nlocal I = require('openmw.interfaces')\n\nI.Settings.registerGroup {\n    key = 'SettingsSkoomaesthesia_Visuals',\n    page = 'Skoomaesthesia',\n    l10n = 'Skoomaesthesia',\n    name = 'visualsGroupName',\n    permanentStorage = true,\n    settings = {\n        {\n            key = 'maxIntensity',\n            name = 'maxIntensity_name',\n            renderer = 'number',\n            default = 0.3,\n            argument = {\n                min = 0,\n                max = 1,\n            },\n        },\n        {\n            key = 'maxBlur',\n            name = 'maxBlur_name',\n            renderer = 'number',\n            default = 1.0,\n            argument = {\n                min = 0,\n                max = 1,\n            },\n        },\n    }\n}\n\nlocal settings = storage.playerSection('SettingsSkoomaesthesia_Visuals')\n\nlocal shader = postprocessing.load('skoomaesthesia')\n\nlocal STAGE = {\n    idle = \"idle\",\n    beginning = \"beginning\",\n    active = \"active\",\n    ending = \"ending\"\n}\n\nlocal NEXT_STAGE = {\n    [STAGE.beginning] = STAGE.active,\n    [STAGE.active] = STAGE.ending,\n    [STAGE.ending] = STAGE.idle,\n}\n\nlocal DURATION = {\n    [STAGE.beginning] = 1,\n    [STAGE.active] = 58,\n    [STAGE.ending] = 1,\n}\n\nlocal function elapsed(timestamp)\n    return (core.getGameTime() - timestamp) / core.getGameTimeScale()\nend\n\nlocal HANDLER = {\n    [STAGE.idle] = function(_) end,\n    [STAGE.beginning] = function(state)\n        state.power = elapsed(state.timestamp) / DURATION[STAGE.beginning]\n    end,\n    [STAGE.active] = function(state)\n        state.power = 1\n    end,\n    [STAGE.ending] = function(state)\n        state.ending = 1 - elapsed(state.timestamp) / DURATION[STAGE.ending]\n    end,\n}\n\nlocal state = {\n    stage = STAGE.idle,\n    power = 0,\n    timestamp = 0,\n}\n\nlocal function dose()\n    if state.stage == STAGE.idle then\n        shader:enable()\n    end\n    if state.stage == STAGE.idle or state.stage == STAGE.ending then\n        state.stage = STAGE.beginning\n    end\n    state.timestamp = core.getGameTime()\nend\n\nlocal function frame()\n    if state.stage == STAGE.idle then return end\n    if elapsed(state.timestamp) > DURATION[state.stage] then\n        state.stage = NEXT_STAGE[state.stage]\n        state.timestamp = core.getGameTime()\n        state.power = 0\n        if state.stage == STAGE.idle then\n            shader:disable()\n        end\n    end\n    HANDLER[state.stage](state)\n    local intensity = state.power * settings:get('maxIntensity')\n    shader:setFloat('intensity', intensity)\n    local blurRadius = state.power * settings:get('maxBlur')\n    shader:setFloat('radius', blurRadius)\n    local colorCycle = core.getSimulationTime() * 0.1 % 2\n    colorCycle = colorCycle < 1 and colorCycle or (1 - (colorCycle - 1))\n    shader:setFloat('cycle', colorCycle)\nend\n\nlocal function save()\n    return state\nend\n\nlocal function load(savedState)\n    if not savedState then return end\n    state.stage = savedState.stage\n    state.timestamp = savedState.timestamp\n    state.power = savedState.power\nend\n\nreturn {\n    dose = dose,\n    frame = frame,\n    save = save,\n    load = load,\n}\n"
  }
}