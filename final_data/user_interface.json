{
  "title": "User interface reference\uf0c1",
  "content": [
    {
      "header": "Layouts\uf0c1",
      "content": []
    },
    {
      "paragraph": "Every widget is defined by a layout, which is a Lua table with the following fields (all of them are optional): type: One of the available widget types fromopenmw.ui.TYPE. content: a Content (openmw.ui.content), which contains layouts for the children of this widget. layer: only applies for the root widget. (Windows, HUD, etc) template: a Lua table which pre-defines a layout for this widget. See Templates below for more details. external: similar to properties, but they affect how other widgets interact with this one. See the widget pages for details."
    },
    {
      "header": "Layers\uf0c1",
      "content": []
    },
    {
      "paragraph": "Layers control how widgets overlap - layers with higher indexes render over layers with lower indexes.\nWidgets within the same layer which were added later overlap the ones created earlier.\nA layer can also be set as non-interactive, which prevents all mouse interactions with the widgets in that layer. Pre-defined OpenMW layers: HUDinteractive Windowsinteractive Notificationnon-interactive MessageBoxinteractive"
    },
    {
      "header": "Elements\uf0c1",
      "content": []
    },
    {
      "paragraph": "Element is the root widget of a layout.\nIt is an independent part of the UI, connected only to a specific layer, but not any other layouts.\nCreating or destroying an element also creates/destroys all of its children."
    },
    {
      "header": "Content\uf0c1",
      "content": []
    },
    {
      "paragraph": "A container holding all the widget\u2019s children. It has a few important differences from a Lua table: All the keys are integers, i. e. it is an \u201carray\u201d Holes are not allowed. At any point all keys from1to the highestnmust contain a value."
    },
    {
      "header": "Templates\uf0c1",
      "content": []
    },
    {
      "paragraph": "Templates are Lua tables with the following (optional) fields: props: Same as in layouts, defines the behaviour of this widget. Can be overwritten bypropsvalues in the layout."
    },
    {
      "header": "Events\uf0c1",
      "content": []
    },
    {
      "header": "Widget types\uf0c1",
      "content": []
    },
    {
      "header": "Example\uf0c1",
      "content": []
    },
    {
      "paragraph": "scripts/clock.lua"
    },
    {
      "code": "local\nui\n=\nrequire\n(\n'openmw.ui'\n)\nlocal\nutil\n=\nrequire\n(\n'openmw.util'\n)\nlocal\ncalendar\n=\nrequire\n(\n'openmw_aux.calendar'\n)\nlocal\ntime\n=\nrequire\n(\n'openmw_aux.time'\n)\nlocal\nelement\n=\nui\n.\ncreate\n{\n-- important not to forget the layer\n-- by default widgets are not attached to any layer and are not visible\nlayer\n=\n'HUD'\n,\ntype\n=\nui\n.\nTYPE\n.\nText\n,\nprops\n=\n{\n-- position in the top right corner\nrelativePosition\n=\nutil\n.\nvector2\n(\n1\n,\n0\n),\n-- position is for the top left corner of the widget by default\n-- change it to align exactly to the top right corner of the screen\nanchor\n=\nutil\n.\nvector2\n(\n1\n,\n0\n),\ntext\n=\ncalendar\n.\nformatGameTime\n(\n'%H:%M'\n),\ntextSize\n=\n24\n,\n-- default black text color isn't always visible\ntextColor\n=\nutil\n.\ncolor\n.\nrgb\n(\n0\n,\n1\n,\n0\n),\n},\n}\nlocal\nfunction\nupdateTime\n()\n-- formatGameTime uses current time by default\n-- otherwise we could get it by calling `core.getGameTime()`\nelement\n.\nlayout\n.\nprops\n.\ntext\n=\ncalendar\n.\nformatGameTime\n(\n'%H:%M'\n)\n-- the layout changes won't affect the widget unless we request an update\nelement\n:\nupdate\n()\nend\n-- we are showing game time in hours and minutes\n-- so no need to update more often than once a game minute\ntime\n.\nrunRepeatedly\n(\nupdateTime\n,\n1\n*\ntime\n.\nminute\n,\n{\ntype\n=\ntime\n.\nGameTime\n})"
    },
    {
      "paragraph": "clock.omwscripts"
    },
    {
      "code": "PLAYER\n:\nscripts\n/\nclock\n.\nlua"
    },
    {
      "paragraph": "\u00a9 Copyright 2024, OpenMW Team.Revision7d84b85d."
    }
  ]
}