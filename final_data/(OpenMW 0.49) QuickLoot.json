{
  "folder_name": "(OpenMW 0.49) QuickLoot",
  "lua_files": {
    "QuickLoot-54950-1-5-1723820244\\QuickLoot\\scripts\\OwnlysQuickLoot\\ql_cont.lua": "local core = require('openmw.core')\nif core.API_REVISION <65 then return end\n\nlocal I = require('openmw.interfaces')\nlocal self = require('openmw.self')\nlocal inspectors = {}\nlocal currentTime = nil\nlocal active = false\nlocal initialized = false\n\nlocal function table_length(t)\n\tlocal i = 0\n\tfor _ in pairs(t) do\n\t\ti=i+1\n\tend\n\treturn i\nend\n\nlocal function initialize()\n\tif not initialized then\n\t\tinitialized = true\n\t\tanimation = require('openmw.animation')\n\t\tlootTime = animation.getTextKeyTime(self, \"containeropen: loot\")\n\t\tstopTime = animation.getTextKeyTime(self, \"containeropen: stop\") or 0\n\t\tcloseTime = animation.getTextKeyTime(self, \"containerclose: stop\") or 0\n\tend\nend\n\nQuickLoot_openAnimation = function(player)\n\tinitialize()\n\tif not lootTime then return end\n\tif table_length(inspectors) == 0 then\n\t\tlocal tempTime = closeTime-(currentTime or closeTime) \n\t\tanimation.cancel(self, 'containerclose')\n\t\tif tempTime + 1/30 > lootTime then\n\t\t\tanimation.playBlended(self, 'containeropen',{priority  = 9999,startPoint = math.max(tempTime,0.0001), startKey =\"loot\", stopKey = \"stop\", autoDisable =false})\n\t\telse\n\t\t\tanimation.playBlended(self, 'containeropen',{priority  = 9999,startPoint = tempTime, startKey =\"start\", stopKey = \"stop\",autoDisable =false})\n\t\tend\n\t\tcurrentTime = animation.getCurrentTime(self, \"containeropen\")\n\tend\n\tinspectors[player.id] = true\n\tactive = true\nend\n\nQuickLoot_closeAnimation = function(player)\n\tinitialize()\n\tif not lootTime then return end\n\tinspectors[player.id] = nil\n\tif table_length(inspectors) == 0 and currentTime then\n\t\tanimation.cancel(self, 'containeropen')\n\t\tanimation.playBlended(self, 'containerclose',{priority  = 9999,startPoint = stopTime-(currentTime or stopTime),startKey =\"start\", stopKey = \"stop\"})\n\t\tcurrentTime = stopTime-(currentTime or stopTime)\n\tend\n\tactive = true\nend\n\nonUpdate = function(dt)\n\tif not active then\n\t\treturn\n\tend\n\tlocal at = animation.getCurrentTime(self, \"containeropen\")\n\tcurrentTime = at\n\tif at and at + dt + 1/60 > lootTime and at < lootTime then\n\t\tanimation.cancel(self, 'containeropen')\n\t\tanimation.playBlended(self, 'containeropen',{priority  = 9999,startKey = \"loot\",startPoint  =0.0001, stopKey = \"stop\",autoDisable =false})\n\telseif not at then\n\t\tat = animation.getCurrentTime(self, \"containerclose\")\n\t\tcurrentTime = at\t\t\t\t\n\tend\n\tif not currentTime then\n\t\tactive = false\n\tend\nend\n\n\nreturn{\n\tengineHandlers = { \n\t\tonUpdate = onUpdate,\n\t\t_onAnimationTextKey = onAnimationTextKey,\n\t\t_onPlayAnimation = playBlendedAnimation,\n\t},\n\teventHandlers = { \n\t\tOwnlysQuickLoot_openAnimation = QuickLoot_openAnimation,\n\t\tOwnlysQuickLoot_closeAnimation =QuickLoot_closeAnimation,\n\t}\n}",
    "QuickLoot-54950-1-5-1723820244\\QuickLoot\\scripts\\OwnlysQuickLoot\\ql_g.lua": "local acti = require(\"openmw.interfaces\").Activation\nlocal types = require('openmw.types')\nlocal disabledPlayers = {}\nlocal activateNextUpdate = {}\nlocal activateSecondNextUpdate = {}\nlocal world = require('openmw.world')\nlocal actuallyActivateTable = {}\nlocal organicContainers = {\n\tbarrel_01_ahnassi_drink=true,\n\tbarrel_01_ahnassi_food =true,\n\tcom_chest_02_fg_supply =true,\n\tcom_chest_02_mg_supply =true,\n\tflora_treestump_unique =true,\n}\nlocal onActivateStuff = {\n[\"TR_m4_Sathasa Andas\"] = true,\n[\"Assi Serimilk\"] = true,\n[\"TR_m1_q_ArgonianHitman2\"] = true,\n[\"chargen class\"] = true,\n[\"TR_m4_HautharmoKollop\"] = true,\n[\"TR_m4_And_Temple_Coffer\"] = true,\n[\"TR_m3_Vontus\"] = true,\n[\"TR_m2_q_9_DreynisDummy\"] = true,\n[\"TR_m4_Rivyn_Dalvani\"] = true,\n[\"TR_m3_Iveru Falaal\"] = true,\n[\"TR_m3_Kha_Chest_01\"] = true,\n[\"TR_m1_Lish\"] = true,\n[\"com_chest_Daed_cursed\"] = true,\n[\"TR_m3_OE_MG_RdgrdPaint\"] = true,\n[\"TR_m4_TT_TempleCoffersB\"] = true,\n[\"TR_m2_Temis Lorthus_d\"] = true,\n[\"TR_m4_UshuKur_D_Milur\"] = true,\n[\"TR_m4_d_veers-in-brine\"] = true,\n[\"TR_m4_Morio_Stulti_Dead\"] = true,\n[\"TR_m3_q_5_ind_guard\"] = true,\n[\"chargen dock guard\"] = true,\n[\"Vivyne Andrano\"] = true,\n[\"TR_m4_d_Salrym Helseri\"] = true,\n[\"TR_m4_q_AABstash\"] = true,\n[\"TR_m4_UshuKur_D_Folcard\"] = true,\n[\"de_p_closet_02_nuncius\"] = true,\n[\"TR_m1_Claudine Hesault\"] = true,\n[\"Dravasa Andrethi\"] = true,\n[\"TR_m2_Erena Raneth\"] = true,\n[\"TR_m3_Kha_Chest_03\"] = true,\n[\"TR_m7_Dalin Kren\"] = true,\n[\"BM_greedyman\"] = true,\n[\"BM_WindBag\"] = true,\n[\"T_MwDe_Furn_CardHortB02\"] = true,\n[\"TR_m3_q_sack_wooden\"] = true,\n[\"TR_m4_UshuKur_D_Jubal\"] = true,\n[\"TR_m3_Edryon Rorvan\"] = true,\n[\"TR_m1_q_ArgonianHitman1\"] = true,\n[\"TR_m4_HH_HearingChest\"] = true,\n[\"TR_m1_treasurehunt_5\"] = true,\n[\"TR_m3_Yannib Nassirasu\"] = true,\n[\"TR_i2_303_barrel_poison\"] = true,\n[\"TR_m3_Treram_Odalyn\"] = true,\n[\"TR_m4_Rolis Hlor\"] = true,\n[\"Neldris Llervu\"] = true,\n[\"T_CyrImp_FurnR_Display2\"] = true,\n[\"TR_m4_q_AlynuChest\"] = true,\n[\"TR_m3_Reynant Alciente\"] = true,\n[\"T_MwDe_Furn_CardHortB01\"] = true,\n[\"de_p_desk_nuncius\"] = true,\n[\"T_CyrImp_FurnR_Display1\"] = true,\n[\"TR_m4_TT_Ulmon_Dead\"] = true,\n[\"TR_m3_Garvs Ovav\"] = true,\n[\"chest_ClawFang_UNIQUE\"] = true,\n[\"TR_m3_q_sack_brass\"] = true,\n[\"TR_m1_treasurehunt_3\"] = true,\n[\"TR_m7_Mervs Herano\"] = true,\n[\"TR_m4_TT_OrcVivec\"] = true,\n[\"TR_m1_q_YishiniVampDead\"] = true,\n[\"TR_m2_S_Jeela\"] = true,\n[\"TR_m2_q_38_favryn\"] = true,\n[\"TR_m7_Gnaeus Barossa\"] = true,\n[\"chargen name\"] = true,\n[\"TR_m4_Ando_NevusaBarrel\"] = true,\n[\"TR_m4_Gavros_Falas_dead\"] = true,\n[\"chargen boat guard 2\"] = true,\n[\"TR_m4_And_GavrosDesk\"] = true,\n[\"TR_m3_Bartolomaeus\"] = true,\n[\"TR_m1_Doves_Athryon\"] = true,\n[\"TR_m2_q_A9_3_Doril\"] = true,\n[\"TR_m4_Vanith Garos DEAD\"] = true,\n[\"TR_m4_UshuKur_D_Tryr\"] = true,\n[\"TR_m4_UshuKur_D_Nivis\"] = true,\n[\"TR_m4_UshuKur_D_Kassius\"] = true,\n[\"TR_m4_UshuKur_D_Gildar\"] = true,\n[\"TR_m4_UshuKur_D_Gelvu\"] = true,\n[\"TR_m4_UshuKur_D_Algus\"] = true,\n[\"TR_m1_Khifzah_Dead\"] = true,\n[\"TR_m4_TT_Ravur_Othravel\"] = true,\n[\"Vireveri Darethran\"] = true,\n[\"TR_m4_Synell_Gioranus\"] = true,\n[\"TR_m3_D_Jebyn\"] = true,\n[\"TR_m3_q_hideseektrap\"] = true,\n[\"TR_m2_q_27_heelkur\"] = true,\n[\"TR_m3_Antio Florane2\"] = true,\n[\"TR_m1_treasurehunt_4\"] = true,\n[\"TR_m3-531_crate_01_eggb\"] = true,\n[\"chargen boat guard 3\"] = true,\n[\"TR_m1_Q59_PR_Basket_1\"] = true,\n[\"Nelmil Hler\"] = true,\n[\"TR_m1_SilverSerpentKeg\"] = true,\n[\"com_chest_01_hircine2\"] = true,\n[\"TR_m4_q_TMM_chest\"] = true,\n[\"Dralas Gilu\"] = true,\n[\"TR_m3_pilgrimsupplies\"] = true,\n[\"TR_m1_Gritnol\"] = true,\n[\"TR_m2_Uviri Olmen\"] = true,\n[\"Relur Faryon\"] = true,\n[\"Daynasa Telandas\"] = true,\n[\"TR_m2_q_36_ArvsChest\"] = true,\n[\"TR_m3_EbonTowerIL_Dummy\"] = true,\n[\"TR_m3_Kha_10_Chest_Gold\"] = true,\n[\"Tadera Andules\"] = true,\n[\"TR_m2_q_14_NalethChest\"] = true,\n[\"TR_m1_fishermancorpse\"] = true,\n[\"TR_m1_treasurehunt_1\"] = true,\n[\"Dovor Oren\"] = true,\n[\"com_chest_02_maryn\"] = true,\n[\"com_chest_02_jeanne_u\"] = true,\n[\"Rararyn Radarys\"] = true,\n[\"TR_m4_D_Armun_Caravan_2\"] = true,\n[\"chargen boat guard 1\"] = true,\n[\"TR_m4_HH_Ulvo3_Chest\"] = true,\n[\"TR_m3_ManielSylbenitte\"] = true,\n[\"chest_tomb_Sandas\"] = true,\n[\"TR_m4_AA_SehutuMummy\"] = true,\n[\"TR_m4_AndoHH_LiqCrate\"] = true,\n[\"TR_m2_q_9_Barrel_uni\"] = true,\n[\"TR_m4_d_smugglerteyn\"] = true,\n[\"TR_m4_D_KhirakaiBandit2\"] = true,\n[\"TR_m4_D_KhirakaiBandit1\"] = true,\n[\"TR_m4_D_Joscus\"] = true,\n[\"TR_m4_D_Armun_Caravan_3\"] = true,\n[\"TR_m4_D_Armun_Caravan_1\"] = true,\n[\"TR_m7_Q_DivingForArns\"] = true,\n[\"TR_m6_LA3_Dae_Chest\"] = true,\n[\"TR_m4_Aro Helseri\"] = true,\n[\"TR_m7_q_Uls Herano_slp\"] = true,\n[\"TR_m3_q_A5_crate_01\"] = true,\n[\"TR_m3-239_cont_box_tap\"] = true,\n[\"Alvura Othrenim\"] = true,\n[\"TR_m4_Olvys Omayn\"] = true,\n[\"TR_m3_PilgrimStranded\"] = true,\n[\"TR_m3_Tindalos Miranus\"] = true,\n[\"TR_m3_Sadryn Seles\"] = true,\n[\"TR_m1_treasurehunt_2\"] = true,\n[\"Endris Dilmyn\"] = true,\n[\"TR_m1_orchest_curse_i62\"] = true,\n[\"TR_m3_Ralam_Othravel\"] = true,\n[\"TR_m3_Nerlis\"] = true,\n[\"Llandras Belaal\"] = true,\n[\"TR_m4_UshuKur_D_Guard01\"] = true,\n[\"ashamanu\"] = true,\n[\"TR_m1_FW_BrazenCrate\"] = true,\n[\"TR_m3_Aillijar\"] = true,\n[\"flora_treestump_unique\"] = true,\n[\"TR_m3_Karandia Corrux\"] = true,\n[\"TR_m3_Foedus Locutius\"] = true,\n[\"TR_m4-349_WaterTrap_Cst\"] = true,\n[\"TR_m4_dolg_gro-madrag\"] = true,\n[\"TR_m2_Kaye\"] = true,\n[\"TR_m1_Q59_PR_Urn\"] = true,\n[\"TR_m2_Ilmeni Benamamat\"] = true,\n[\"TR_m4_Treram_chest\"] = true,\n[\"TR_m3_DilavesaIndoran\"] = true,\n[\"TR_m2_Eifid\"] = true,\n[\"TR_m4_Hlavora Tilvur\"] = true,\n[\"processus vitellius\"] = true,\n[\"Eralane Hledas\"] = true,\n[\"TR_m1_dead_Alvar_O\"] = true,\n[\"TR_m3_OE_fiendchest2\"] = true,\n[\"TR_m3_OE_raathim_urn_1\"] = true,\n[\"TR_m4_TG_ElarFandasBook\"] = true,\n[\"TR_m2_Arfil\"] = true,\n[\"TR_m2_q_9_MithasDead\"] = true,\n[\"TR_m4_Nivis Dalomo\"] = true,\n[\"TR_m2_q_A8_2_Seinda\"] = true,\n[\"TR_m3-239_cont_box_rug\"] = true,\n[\"TR_m2_q_12_Rianele_Sele\"] = true,\n[\"TR_m1_Q_chest_rgirth\"] = true,\n[\"TR_m3_Addamarys Saldro\"] = true,\n[\"TR_m1_dead_Redram_Oran\"] = true,\n[\"TR_m3_OE_fiendchest1\"] = true,\n[\"TR_m3_Enix Caripus\"] = true,\n[\"TR_m1_q_MorvinGirith\"] = true,\n[\"TR_m3_Folms Hiralas\"] = true,\n[\"TR_m4_Ando_FaulerChest\"] = true,\n[\"Contain_BM_stalhrim_01\"] = true,\n[\"TR_m1_Q59_PR_basket_2\"] = true,\n[\"TR_m3_Ulvo Telvor\"] = true,\n[\"chargen captain\"] = true,\n[\"TR_m3_Kha_Chest_06\"] = true,\n[\"TR_m3_Kha_Chest_05\"] = true,\n[\"TR_m3_q_hideseekchest\"] = true,\n[\"rigmor halfhand\"] = true,\n[\"TR_m3_Kha_Chest_00\"] = true,\n[\"TR_m3_q_EP_sack\"] = true,\n[\"TR_m3_OE_fiendchest3\"] = true,\n[\"TR_m3_Kha_Chest_04\"] = true,\n[\"TR_m3_Kha_Chest_02\"] = true,\n[\"TR_m3_sarvayn_chest\"] = true,\n[\"ralen hlaalo\"] = true,\n}\nonActivateStuffOnce = {}\n\n\nfunction triggerMwscriptTrap(obj, player)\n\tlocal script = world.mwscript.getLocalScript(obj, player)\n\t\n\tif script then\n\t\tif script.variables.setonce == 0 \n\t\tor script.variables.done == 0 \n\t\tor script.variables.doOnce == 0\n\t\tthen\n\t\t\tplayer:sendEvent(\"OwnlysQuickLoot_fellForTrap\", obj)\n\t\t\tobj:activateBy(player)\n\t\t\t--world._runStandardActivationAction(obj, world.players[1])\n\t\t\treturn true\n\t\t\n\t\telseif not script.variables.setonce\n\t\tand not script.variables.done\n\t\tand not script.variables.doOnce\n\t\tand onActivateStuff[obj.recordId]\n\t\tand not onActivateStuffOnce[obj.recordId] then\n\t\t\tonActivateStuffOnce[obj.recordId] = true\n\t\t\tplayer:sendEvent(\"OwnlysQuickLoot_fellForTrap\", obj)\n\t\t\tobj:activateBy(player)\n\t\t\t--world._runStandardActivationAction(obj, world.players[1])\n\t\t\treturn true\n\t\tend\n\tend\nend\n\n\n\nlocal function activateContainer(cont, player)\n\tif not disabledPlayers[player.id] and not actuallyActivateTable[player.id] then\n\t\t--world._runStandardActivationAction(cont, world.players[1])\n\t\ttriggerMwscriptTrap(cont,player)\n\t\tif not types.Lockable.isLocked(cont)\n\t\tand not types.Lockable.getTrapSpell(cont)\n\t\tand (not cont.type.record(cont).isOrganic or organicContainers[cont.recordId])\n\t\tthen\n\t\t\tplayer:sendEvent(\"OwnlysQuickLoot_activatedContainer\", cont)\n\t\t\treturn false\n\t\tend\n\tend\nend\nlocal function activateActor(actor,player)\n\tif not disabledPlayers[player.id] and not actuallyActivateTable[player.id] and actor.type.isDead(actor) then\n\t\ttriggerMwscriptTrap(actor,player)\n\t\tplayer:sendEvent(\"OwnlysQuickLoot_activatedContainer\", actor)\n\t\treturn false\n\tend\n\treturn true\nend\n\nlocal function resolve(cont)\n\ttypes.Container.inventory(cont):resolve()\nend\n\nlocal function take(data)\n\tlocal player = data[1]\n\tlocal container = data[2]\n\tlocal thing = data[3]\n\tif thing.type == types.Book then\n\t\tthing:moveInto(types.Player.inventory(player))\n\telseif thing.recordId == \"gold_001\" or thing.recordId == \"gold_005\" or thing.recordId == \"gold_010\" or thing.recordId == \"gold_025\" or thing.recordId == \"gold_100\" then --90% sure its just gold_001\n\t\tthing:teleport(player.cell, player.position, player.rotation)\n\t\ttable.insert(activateSecondNextUpdate,{thing,player,container}) -- gold takes 2 ticks to become valid and allow owner changes\n\telse\n\t\tthing:teleport(player.cell, player.position, player.rotation)\n\t\tthing.owner.factionId = container.owner.factionId\n\t\tthing.owner.factionRank = container.owner.factionRank\n\t\tthing.owner.recordId = container.owner.recordId\n\t\ttable.insert(activateNextUpdate,{thing,player})\n\tend\n\t--thing:activateBy(player)\n--moveInto(types.Player.inventory(player))\n\t--player:sendEvent(\"TakeAll_closeUI\")\nend\n\nlocal function takeAll(data)\n\tlocal player = data[1]\n\tlocal container = data[2]\n\tlocal i =0\n\ttypes.Container.inventory(container):resolve()\n\tif not triggerMwscriptTrap(container,player) then\n\t\t--print(container,container.type,types.Container.inventory(container):isResolved())\n\t\tfor _, thing in pairs(types.Container.inventory(container):getAll()) do\n\t\t\tlocal thingRecord = thing.type.records[thing.recordId]\n\t\t\tif not thingRecord.name or thingRecord.name == \"\" or not types.Item.isCarriable(thing) then\n\t\t\t\t--ignore\n\t\t\telseif thing.type == types.Book then\n\t\t\t\tthing:moveInto(types.Player.inventory(player))\n\t\t\t\ti=i+1\n\t\t\telseif thing.recordId == \"gold_001\" or thing.recordId == \"gold_005\" or thing.recordId == \"gold_010\" or thing.recordId == \"gold_025\" or thing.recordId == \"gold_100\" then --90% sure its just gold_001\n\t\t\t\tthing:teleport(player.cell, player.position, player.rotation)\n\t\t\t\ttable.insert(activateSecondNextUpdate,{thing,player,container}) -- gold takes 2 ticks to become valid and allow owner changes\n\t\t\telse\n\t\t\t\tthing:teleport(player.cell, player.position, player.rotation)\n\t\t\t\tthing.owner.factionId = container.owner.factionId\n\t\t\t\tthing.owner.factionRank = container.owner.factionRank\n\t\t\t\tthing.owner.recordId = container.owner.recordId\n\t\t\t\ttable.insert(activateNextUpdate,{thing,player})\n\t\t\t\t\n\t\t\t\ti=i+1\n\t\t\tend\n\t\t\t--thing:activateBy(player)\n\t\t--moveInto(types.Player.inventory(player))\n\t\tend\n\t\tif i>0 then\n\t\t\t--player:sendEvent(\"TakeAll_PlaySound\",\"Item Ingredient Up\")\n\t\tend\n\tend\nend\n\n\nacti.addHandlerForType(types.Container, activateContainer)\nacti.addHandlerForType(types.NPC, activateActor)\nacti.addHandlerForType(types.Creature, activateActor)\n\nlocal function onUpdate(dt)\n\tfor _, t in pairs(activateNextUpdate) do\n\t\tif t[3] then\n\t\t\tt[1].owner.factionId = t[3].owner.factionId\n\t\t\tt[1].owner.factionRank = t[3].owner.factionRank\n\t\t\tt[1].owner.recordId = t[3].owner.recordId\n\t\tend\n\t\tt[1]:activateBy(t[2])\n\tend\n\t--for a,b in pairs(actuallyActivateTable) do\n\t--\tactuallyActivateTable[a] = b-1\n\t--\tif b == 0 then \n\t--\t\tactuallyActivateTable[a] = nil\n\t--\tend\n\t--end\n\tactivateNextUpdate = activateSecondNextUpdate\n\tactivateSecondNextUpdate = {}\nend\nlocal function playerToggledMod(arg)\n\tlocal player = arg[1]\n\tlocal toggle = arg[2]\n\tdisabledPlayers[player.id] = not toggle\nend\n\nlocal function actuallyActivate(arg)\n\tlocal player = arg[1]\n\tlocal obj = arg[2]\n\t--actuallyActivateTable[player.id] = 2\n\t--world._runStandardActivationAction(obj, player)\n\tobj:activateBy(player)\nend\n\nreturn {\n\teventHandlers = {\n\t\tOwnlysQuickLoot_take = take,\n\t\tOwnlysQuickLoot_takeAll = takeAll,\n\t\tOwnlysQuickLoot_takeBook = takeBook,\n\t\tOwnlysQuickLoot_resolve = resolve,\n\t\tOwnlysQuickLoot_actuallyActivate = actuallyActivate,\n\t\tOwnlysQuickLoot_playerToggledMod = playerToggledMod,\n\t},\n\tengineHandlers = {\n\t\tonUpdate = onUpdate,\n\t}\n}",
    "QuickLoot-54950-1-5-1723820244\\QuickLoot\\scripts\\OwnlysQuickLoot\\ql_helpers.lua": "local function rgbToHsv(r, g, b, a)\n  --r, g, b, a = r / 255, g / 255, b / 255, a / 255\n  local max, min = math.max(r, g, b), math.min(r, g, b)\n  local h, s, v\n  v = max\n\n  local d = max - min\n  if max == 0 then s = 0 else s = d / max end\n\n  if max == min then\n    h = 0 -- achromatic\n  else\n    if max == r then\n    h = (g - b) / d\n    if g < b then h = h + 6 end\n    elseif max == g then h = (b - r) / d + 2\n    elseif max == b then h = (r - g) / d + 4\n    end\n    h = h / 6\n  end\n\n  return h, s, v, a\nend\n\n--[[\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n]]\nlocal function hsvToRgb(h, s, v, a)\n  local r, g, b\n\n  local i = math.floor(h * 6);\n  local f = h * 6 - i;\n  local p = v * (1 - s);\n  local q = v * (1 - f * s);\n  local t = v * (1 - (1 - f) * s);\n\n  i = i % 6\n\n  if i == 0 then r, g, b = v, t, p\n  elseif i == 1 then r, g, b = q, v, p\n  elseif i == 2 then r, g, b = p, v, t\n  elseif i == 3 then r, g, b = p, q, v\n  elseif i == 4 then r, g, b = t, p, v\n  elseif i == 5 then r, g, b = v, p, q\n  end\n\n  return r,g,b,a --r * 255, g * 255, b * 255, a * 255\nend\n\nlocal function readFont(file)\n\tlocal temp = file:reverse()\n\tlocal fileNameLength = temp:find(\"\\\\\")-1\n\tlocal path = file:sub(1,-fileNameLength-1)\n\tlocal maxHeight = 0\n\tlocal minYOffset = 99999\n\tlocal lines = {}\n\tfor line in vfs.lines(file) do\n\t\ttable.insert(lines, line)\n\tend\n\t\n\tlocal glyphData = {}\n\tfor i=2,#lines do\n\t\tif i<5 or lines[i]:sub(1,4) == \"char\" then\n\t\t\tglyphData[i] = {}\n\t\t\tfor a in lines[i]:gmatch(\"%S+\") do\n\t\t\t\tlocal delimiterPos = a:find(\"=\")\n\t\t\t\tif delimiterPos then\n\t\t\t\t\tglyphData[i][a:sub(1,delimiterPos-1)] = a:sub(delimiterPos+1,#a)\n\t\t\t\t\t--print(i..\" \"..a:sub(1,delimiterPos-1)..\"=\"..a:sub(delimiterPos+1,#a))\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal glyphFile = path..glyphData[3].file:sub(2,-2)\n\tlocal lineHeight = glyphData[2].lineHeight\n\tlocal glyphs = {}\n\tfor i=5,#glyphData do\n\t\tminYOffset = math.min(minYOffset, tonumber(glyphData[i].yoffset ))\n\tend\n\tfor i=5,#glyphData do\n\t\tglyphData[i].yoffset = tonumber(glyphData[i].yoffset )--minYOffset\n\t\tmaxHeight = math.max(maxHeight, tonumber(glyphData[i].height)+tonumber(glyphData[i].yoffset ))\n\tend\n\t--local shaveOff = lineHeight-maxHeight\n\t--print(\"minY\",minYOffset)\n\t--print(\"maxHeight\",maxHeight)\n\t--print(\"lineHeight\",lineHeight)\n\t--local lineHeight = customLineHeight[playerSettings:get(\"FONT\")] or maxHeight\n\tfor i=5,#glyphData do\n\t\tlocal character = string.char(tonumber(glyphData[i].id))\n\t\tfixInt = 0--fixInterpolation[playerSettings:get(\"FONT\")][character] or 0\n\t\tglyphs[character] = {\n\t\t\txadvance  = tonumber(glyphData[i].xadvance ), \n\t\t\txoffset  = tonumber(glyphData[i].xoffset ), \n\t\t\tyoffset  = tonumber(glyphData[i].yoffset )+fixInt, \n\t\t\theight = tonumber(glyphData[i].height), \n\t\t\twidth = tonumber(glyphData[i].width), \n\t\t\ttexture =ui.texture{\n\t\t\t\tpath = glyphFile,\n\t\t\t\toffset = v2(tonumber(glyphData[i].x), tonumber(glyphData[i].y)),\n\t\t\t\tsize = v2(tonumber(glyphData[i].width), tonumber(glyphData[i].height))\n\t\t\t}\n\t\t}\n\tend\n\treturn glyphs,lineHeight\nend\n\nlocal function texText(t)--currentHealth,maxHealth,size,color, widgetWidth, widgetHeight, align)\n\tif t.currentHealth == \"player\" then\n\t\treturn {}\n\tend\n\tlocal glyphs = glyphs\n\tlocal lineHeight = lineHeight\n\tif t.obscured then\n\t\tglyphs = daedric\n\t\tlineHeight = daedricHeight\n\tend\n\tlocal widgetWidth = t.widgetWidth or 50\n\tlocal widgetHeight = t.widgetHeight or 14\n\tlocal lineLevel = 0\n\tlocal size = (t.size or playerSettings:get(\"HP_SIZE\"))\n\tlocal relScale = 1/lineHeight*size\n\tlocal aspectRatio = widgetHeight/widgetWidth\n\tlocal str = \"\"\n\tif type(t.currentHealth) == \"number\" then\n\t\tstr= str..math.floor(t.currentHealth)\n\telse\n\t\tstr = str..(t.currentHealth or \"\")\n\tend\n\tif HP_MAXHP and t.maxHealth then\n\t\tstr = str..\"/\"..math.floor(t.maxHealth)\n\tend\n\tlocal ret = {}\n\tlocal totalWidth = 0\n\t\n\tlocal middleOffset = 0\n\tlocal stretchGlyph = 1\n\tlocal gapMult = 0.5\n\tfor i=1, #str do\n\t\tlocal symbol = str:sub(i,i)\n\t\tif glyphs[symbol] and glyphs[symbol].width then\n\t\t\tlocal glyphHeight = lineHeight\n\t\t\t--local glyphHeight = glyphs[symbol].height\n\t\t\tlocal spaceLeft = glyphs[symbol].xoffset*gapMult\n\t\t\tlocal spaceRight = (glyphs[symbol].xadvance- glyphs[symbol].xoffset- glyphs[symbol].width)*gapMult\n\t\t\tlocal glyphWidth =  glyphs[symbol].width*stretchGlyph\n\t\t\tif symbol == \" \" then\n\t\t\t\tglyphWidth = glyphWidth+8\n\t\t\tend\n\t\t\tlocal total = spaceLeft+spaceRight+glyphWidth\n\t\t\tlocal relTotal = relScale* total   *aspectRatio\n\t\t\tif symbol ==\"/\" then\n\t\t\t\tmiddleOffset = totalWidth+relTotal/2\n\t\t\tend\n\t\t\ttotalWidth = totalWidth+relTotal\n\t\tend\n\tend\n\tif middleOffset > 0 then\n\t\tmiddleOffset = totalWidth/2-middleOffset\n\tend\n\tlocal currentPos = 0.5-totalWidth/2+middleOffset\n\tif t.align ==\"right\" then\n\t\tcurrentPos = 0\n\telseif t.align == \"left\" then\n\t\tcurrentPos = 1-totalWidth\n\tend\n\tlocal levelChars = {\"a\",\"b\",\"c\",\"d\",\"e\"}\n\tlocal lineLevel= 0\n\tfor a,b in pairs(levelChars) do\n\t\tif glyphs[b] then\n\t\t\tlineLevel = math.max(lineLevel, glyphs[b].height+glyphs[b].yoffset)\n\t\tend\n\tend\n\tif lineLevel == 0 then\n\t\tlineLevel = glyphs[\"0\"].height+glyphs[\"0\"].yoffset\n\tend\n\tlineLevel = lineLevel+0.005\n\tfor i=1, #str do\n\t\tlocal symbol = str:sub(i,i)\n\t\tif glyphs[symbol] and glyphs[symbol].width then\n\t\t\tlocal glyphHeight = lineHeight\n\t\t\t--local glyphHeight = glyphs[symbol].height\n\t\t\tlocal spaceLeft = glyphs[symbol].xoffset*gapMult\n\t\t\tlocal spaceRight = (glyphs[symbol].xadvance- glyphs[symbol].xoffset- glyphs[symbol].width)*gapMult\n\t\t\tlocal glyphWidth =  glyphs[symbol].width*stretchGlyph\n\t\t\tif symbol == \" \" then\n\t\t\t\tglyphWidth = glyphWidth+10\n\t\t\tend\n\t\t\tlocal total = spaceLeft+spaceRight+glyphWidth\n\t\t\tlocal relSpaceLeft = relScale*spaceLeft*aspectRatio\n\t\t\tlocal relSpaceRight = relScale*spaceRight*aspectRatio\n\t\t\tlocal relWidth = relScale*glyphWidth*aspectRatio\n\t\t\t--print(relScale,glyphWidth,aspectRatio)\n\t\t\t--print(glyphs[symbol].height*relScale,glyphs[symbol].height,relScale)\n\t\t\tlocal relTotal = relScale*total*aspectRatio\n\t\t\tlocal letterDepth = math.max(0,(glyphs[symbol].height+glyphs[symbol].yoffset-lineLevel)/lineHeight)\n\t\t\t--print(symbol, letterDepth)\n\t\t\tlocal anchor = letterDepth / (glyphs[symbol].height*relScale)/1.5\n\t\t\ttable.insert(ret,{\n\t\t\t\ttype = ui.TYPE.Image,\n\t\t\t\tprops = {\n\t\t\t\t\tresource = glyphs[symbol].texture,\n\t\t\t\t\trelativePosition= v2(currentPos+relSpaceLeft, 0.41+size/3+letterDepth*relScale*160+TEXT_OFFSET),--glyphs[symbol].yoffset*relScale+(1-size)/2),\n\t\t\t\t\trelativeSize  = v2(relWidth, glyphs[symbol].height*relScale),\n\t\t\t\t\tcolor = t.color,\n\t\t\t\t\tanchor = v2(0,1)\n\t\t\t\t}\n\t\t\t} )\n\t\t\tcurrentPos = currentPos + relTotal\n\t\tend\n\tend\n\t--table.insert(ret,{\n\t--\ttype = ui.TYPE.Image,\n\t--\tprops = {\n\t--\t\tresource = background,\n\t--\t\ttileH = false,\n\t--\t\ttileV = false,\n\t--\t\trelativeSize  = v2(1,1),\n\t--\t\talpha = 0.6,\n\t--\t},\n\t--})\n\treturn ret\nend\n\n---- UTF8 conversions\nlocal char, byte, pairs, floor = string.char, string.byte, pairs, math.floor\nlocal table_insert, table_concat = table.insert, table.concat\nlocal unpack = table.unpack or unpack\n\n\nlocal function unicode_to_utf8(code)\n   -- converts numeric UTF code (U+code) to UTF-8 string\n   local t, h = {}, 128\n   while code >= h do\n      t[#t+1] = 128 + code%64\n      code = floor(code/64)\n      h = h > 32 and 32 or h/2\n   end\n   t[#t+1] = 256 - 2*h + code\n   return char(unpack(t)):reverse()\nend\n\nlocal function utf8_to_unicode(utf8str, pos)\n   -- pos = starting byte position inside input string (default 1)\n   pos = pos or 1\n   local code, size = utf8str:byte(pos), 1\n   if code >= 0xC0 and code < 0xFE then\n      local mask = 64\n      code = code - 128\n      repeat\n         local next_byte = utf8str:byte(pos + size) or 0\n         if next_byte >= 0x80 and next_byte < 0xC0 then\n            code, size = (code - mask - 2) * 64 + next_byte, size + 1\n         else\n            code, size = utf8str:byte(pos), 1\n         end\n         mask = mask * 32\n      until code < mask\n   end\n   -- returns code, number of bytes in this utf8 char\n   return code, size\nend\n\nlocal map_1252_to_unicode = {\n   [0x80] = 0x20AC,\n   [0x81] = 0x81,\n   [0x82] = 0x201A,\n   [0x83] = 0x0192,\n   [0x84] = 0x201E,\n   [0x85] = 0x2026,\n   [0x86] = 0x2020,\n   [0x87] = 0x2021,\n   [0x88] = 0x02C6,\n   [0x89] = 0x2030,\n   [0x8A] = 0x0160,\n   [0x8B] = 0x2039,\n   [0x8C] = 0x0152,\n   [0x8D] = 0x8D,\n   [0x8E] = 0x017D,\n   [0x8F] = 0x8F,\n   [0x90] = 0x90,\n   [0x91] = 0x2018,\n   [0x92] = 0x2019,\n   [0x93] = 0x201C,\n   [0x94] = 0x201D,\n   [0x95] = 0x2022,\n   [0x96] = 0x2013,\n   [0x97] = 0x2014,\n   [0x98] = 0x02DC,\n   [0x99] = 0x2122,\n   [0x9A] = 0x0161,\n   [0x9B] = 0x203A,\n   [0x9C] = 0x0153,\n   [0x9D] = 0x9D,\n   [0x9E] = 0x017E,\n   [0x9F] = 0x0178,\n   [0xA0] = 0x00A0,\n   [0xA1] = 0x00A1,\n   [0xA2] = 0x00A2,\n   [0xA3] = 0x00A3,\n   [0xA4] = 0x00A4,\n   [0xA5] = 0x00A5,\n   [0xA6] = 0x00A6,\n   [0xA7] = 0x00A7,\n   [0xA8] = 0x00A8,\n   [0xA9] = 0x00A9,\n   [0xAA] = 0x00AA,\n   [0xAB] = 0x00AB,\n   [0xAC] = 0x00AC,\n   [0xAD] = 0x00AD,\n   [0xAE] = 0x00AE,\n   [0xAF] = 0x00AF,\n   [0xB0] = 0x00B0,\n   [0xB1] = 0x00B1,\n   [0xB2] = 0x00B2,\n   [0xB3] = 0x00B3,\n   [0xB4] = 0x00B4,\n   [0xB5] = 0x00B5,\n   [0xB6] = 0x00B6,\n   [0xB7] = 0x00B7,\n   [0xB8] = 0x00B8,\n   [0xB9] = 0x00B9,\n   [0xBA] = 0x00BA,\n   [0xBB] = 0x00BB,\n   [0xBC] = 0x00BC,\n   [0xBD] = 0x00BD,\n   [0xBE] = 0x00BE,\n   [0xBF] = 0x00BF,\n   [0xC0] = 0x00C0,\n   [0xC1] = 0x00C1,\n   [0xC2] = 0x00C2,\n   [0xC3] = 0x00C3,\n   [0xC4] = 0x00C4,\n   [0xC5] = 0x00C5,\n   [0xC6] = 0x00C6,\n   [0xC7] = 0x00C7,\n   [0xC8] = 0x00C8,\n   [0xC9] = 0x00C9,\n   [0xCA] = 0x00CA,\n   [0xCB] = 0x00CB,\n   [0xCC] = 0x00CC,\n   [0xCD] = 0x00CD,\n   [0xCE] = 0x00CE,\n   [0xCF] = 0x00CF,\n   [0xD0] = 0x00D0,\n   [0xD1] = 0x00D1,\n   [0xD2] = 0x00D2,\n   [0xD3] = 0x00D3,\n   [0xD4] = 0x00D4,\n   [0xD5] = 0x00D5,\n   [0xD6] = 0x00D6,\n   [0xD7] = 0x00D7,\n   [0xD8] = 0x00D8,\n   [0xD9] = 0x00D9,\n   [0xDA] = 0x00DA,\n   [0xDB] = 0x00DB,\n   [0xDC] = 0x00DC,\n   [0xDD] = 0x00DD,\n   [0xDE] = 0x00DE,\n   [0xDF] = 0x00DF,\n   [0xE0] = 0x00E0,\n   [0xE1] = 0x00E1,\n   [0xE2] = 0x00E2,\n   [0xE3] = 0x00E3,\n   [0xE4] = 0x00E4,\n   [0xE5] = 0x00E5,\n   [0xE6] = 0x00E6,\n   [0xE7] = 0x00E7,\n   [0xE8] = 0x00E8,\n   [0xE9] = 0x00E9,\n   [0xEA] = 0x00EA,\n   [0xEB] = 0x00EB,\n   [0xEC] = 0x00EC,\n   [0xED] = 0x00ED,\n   [0xEE] = 0x00EE,\n   [0xEF] = 0x00EF,\n   [0xF0] = 0x00F0,\n   [0xF1] = 0x00F1,\n   [0xF2] = 0x00F2,\n   [0xF3] = 0x00F3,\n   [0xF4] = 0x00F4,\n   [0xF5] = 0x00F5,\n   [0xF6] = 0x00F6,\n   [0xF7] = 0x00F7,\n   [0xF8] = 0x00F8,\n   [0xF9] = 0x00F9,\n   [0xFA] = 0x00FA,\n   [0xFB] = 0x00FB,\n   [0xFC] = 0x00FC,\n   [0xFD] = 0x00FD,\n   [0xFE] = 0x00FE,\n   [0xFF] = 0x00FF,\n}\nlocal map_unicode_to_1252 = {}\nfor code1252, code in pairs(map_1252_to_unicode) do\n   map_unicode_to_1252[code] = code1252\nend\n\nlocal function fromutf8(utf8str)\n   local pos, result_1252 = 1, {}\n   while pos <= #utf8str do\n      local code, size = utf8_to_unicode(utf8str, pos)\n      pos = pos + size\n      code = code < 128 and code or map_unicode_to_1252[code] or ('?'):byte()\n      table_insert(result_1252, char(code))\n   end\n   return table_concat(result_1252)\nend\n\nlocal function toutf8(str1252)\n   local result_utf8 = {}\n   for pos = 1, #str1252 do\n      local code = str1252:byte(pos)\n      table_insert(result_utf8, unicode_to_utf8(map_1252_to_unicode[code] or code))\n   end\n   return table_concat(result_utf8)\nend\n\nlocal bytemarkers = { {0x7FF,192}, {0xFFFF,224}, {0x1FFFFF,240} }\nlocal function hextoutf8(decimal)\n\n    if decimal<128 then return string.char(decimal) end\n    local charbytes = {}\n    for bytes,vals in ipairs(bytemarkers) do\n      if decimal<=vals[1] then\n        for b=bytes+1,2,-1 do\n          local mod = decimal%64\n          decimal = (decimal-mod)/64\n          charbytes[b] = string.char(128+mod)\n        end\n        charbytes[1] = string.char(vals[2]+decimal)\n        break\n      end\n    end\n    return table.concat(charbytes)\n\nend\n\n\nreturn {readFont,texText,rgbToHsv,hsvToRgb,fromutf8,toutf8,hextoutf8}",
    "QuickLoot-54950-1-5-1723820244\\QuickLoot\\scripts\\OwnlysQuickLoot\\ql_makeborder.lua": "local ui = require('openmw.ui')\nlocal util = require('openmw.util')\n\nlocal auxUi = require('openmw_aux.ui')\n\nlocal constants = require('scripts.omw.mwui.constants')\n\nlocal v2 = util.vector2\nlocal whiteTexture = constants.whiteTexture\nlocal menuTransparency = ui._getMenuTransparency()\n\nlocal sideParts = {\n    left = v2(0, 0),\n    right = v2(1, 0),\n    top = v2(0, 0),\n    bottom = v2(0, 1),\n}\nlocal cornerParts = {\n    top_left = v2(0, 0),\n    top_right = v2(1, 0),\n    bottom_left = v2(0, 1),\n    bottom_right = v2(1, 1),\n}\n\nlocal borderSidePattern = 'textures/menu_%s_border_%s.dds'\nlocal borderCornerPattern = 'textures/menu_%s_border_%s_corner.dds'\n\nlocal borderResources = {}\nlocal borderPieces = {}\nfor _, thickness in ipairs{'thin', 'thick'} do\n    borderResources[thickness] = {}\n    for k in pairs(sideParts) do\n        borderResources[thickness][k] = ui.texture{ path = borderSidePattern:format(thickness, k) }\n    end\n    for k in pairs(cornerParts) do\n        borderResources[thickness][k] = ui.texture{ path = borderCornerPattern:format(thickness, k) }\n    end\n\n    borderPieces[thickness] = {}\n    for k in pairs(sideParts) do\n        local horizontal = k == 'top' or k == 'bottom'\n        borderPieces[thickness][k] = {\n            type = ui.TYPE.Image,\n            props = {\n                resource = borderResources[thickness][k],\n                tileH = horizontal,\n                tileV = not horizontal,\n            },\n        }\n    end\n    for k in pairs(cornerParts) do\n        borderPieces[thickness][k] = {\n            type = ui.TYPE.Image,\n            props = {\n                resource = borderResources[thickness][k],\n            },\n        }\n    end\nend\n\n\n\n\nfunction borderTemplates(thickness,color,borderSize)\n    --local borderSize = (thickness == 'thin') and constants.border or constants.thickBorder\n    local borderV = v2(1, 1) * borderSize\n    local result = {}\n    result.horizontalLine = {\n        type = ui.TYPE.Image,\n        props = {\n            resource = borderResources[thickness].top,\n            tileH = true,\n            tileV = false,\n            size = v2(0, borderSize),\n            relativeSize = v2(1, 0),\n        },\n    }\n\n    result.verticalLine = {\n        type = ui.TYPE.Image,\n        props = {\n            resource = borderResources[thickness].left,\n            tileH = false,\n            tileV = true,\n            size = v2(borderSize, 0),\n            relativeSize = v2(0, 1),\n        },\n    }\n\n    result.borders = {\n        content = ui.content {},\n    }\n    for k, v in pairs(sideParts) do\n        local horizontal = k == 'top' or k == 'bottom'\n        local direction = horizontal and v2(1, 0) or v2(0, 1)\n        result.borders.content:add {\n            template = borderPieces[thickness][k],\n            props = {\n                position = (direction - v) * borderSize,\n                relativePosition = v,\n                size = (v2(1, 1) - direction * 3) * borderSize,\n                relativeSize = direction,\n\t\t\t\tcolor = color\n            }\n        }\n    end\n    for k, v in pairs(cornerParts) do\n        result.borders.content:add {\n            template = borderPieces[thickness][k],\n            props = {\n                position = -v * borderSize,\n                relativePosition = v,\n                size = borderV,\n\t\t\t\tcolor = color\n            },\n        }\n    end\n    result.borders.content:add {\n        external = { slot = true },\n        props = {\n            position = borderV,\n            size = borderV * -2,\n            relativeSize = v2(1, 1),\n        }\n    }\n\n    result.box = {\n        type = ui.TYPE.Container,\n        content = ui.content{},\n    }\n    for k, v in pairs(sideParts) do\n        local horizontal = k == 'top' or k == 'bottom'\n        local direction = horizontal and v2(1, 0) or v2(0, 1)\n        result.box.content:add {\n            template = borderPieces[thickness][k],\n            props = {\n                position = (direction + v) * borderSize,\n                relativePosition = v,\n                size = (v2(1, 1) - direction) * borderSize,\n                relativeSize = direction,\n            }\n        }\n    end\n    for k, v in pairs(cornerParts) do\n        result.box.content:add {\n            template = borderPieces[thickness][k],\n            props = {\n                position = v * borderSize,\n                relativePosition = v,\n                size = borderV,\n            },\n        }\n    end\n    result.box.content:add {\n        external = { slot = true },\n        props = {\n            position = borderV,\n            relativeSize = v2(1, 1),\n        }\n    }\n\n    local backgroundTransparent = {\n        type = ui.TYPE.Image,\n        props = {\n            resource = whiteTexture,\n            color = util.color.rgb(0, 0, 0),\n            alpha = menuTransparency,\n        },\n    }\n    local backgroundSolid = {\n        type = ui.TYPE.Image,\n        props = {\n            resource = whiteTexture,\n            color = util.color.rgb(0, 0, 0),\n        },\n    }\n\n    result.boxTransparent = auxUi.deepLayoutCopy(result.box)\n    result.boxTransparent.content:insert(1, {\n        template = backgroundTransparent,\n        props = {\n            relativeSize = v2(1, 1),\n            size = borderV * 2,\n        },\n    })\n\n    result.boxSolid = auxUi.deepLayoutCopy(result.box)\n    result.boxSolid.content:insert(1, {\n        template = backgroundSolid,\n        props = {\n            relativeSize = v2(1, 1),\n            size = borderV * 2,\n        },\n    })\n\n    return result\nend\nreturn borderTemplates\n--\n--local thinBorders = borderTemplates('thin')\n--local thickBorders = borderTemplates('thick')\n--\n--return function(templates)\n--    for k, t in pairs(thinBorders) do\n--        templates[k] = t\n--    end\n--    for k, t in pairs(thickBorders) do\n--        templates[k .. 'Thick'] = t\n--    end\n--end\n",
    "QuickLoot-54950-1-5-1723820244\\QuickLoot\\scripts\\OwnlysQuickLoot\\ql_p - texText test.lua": "types = require('openmw.types')\nNPC = require('openmw.types').NPC\ncore = require('openmw.core')\nstorage = require('openmw.storage')\nMODNAME = \"OwnlysQuickLoot\"\nplayerSettings = storage.playerSection('SettingsPlayer'..MODNAME)\nI = require(\"openmw.interfaces\")\nself = require(\"openmw.self\")\nnearby = require('openmw.nearby')\ncamera = require('openmw.camera')\nCamera = require('openmw.interfaces').Camera\nutil = require('openmw.util')\nui = require('openmw.ui')\nauxUi = require('openmw_aux.ui')\nasync = require('openmw.async')\nvfs = require('openmw.vfs')\nKEY = require('openmw.input').KEY\ninput = require('openmw.input')\nv2 = util.vector2\nv3 = util.vector3\nlocal Controls = require('openmw.interfaces').Controls\nlocal makeBorder = require(\"scripts.OwnlysQuickLoot.ql_makeborder\")\nlocal settings = require(\"scripts.OwnlysQuickLoot.ql_settings\")\nlocal helpers = require(\"scripts.OwnlysQuickLoot.ql_helpers\")\nreadFont, texText, rgbToHsv, hsvToRgb,fromutf8,toutf8 = unpack(helpers)\nglyphs,lineHeight = readFont(\"textures\\\\fonts\\\\Asul.fnt\")\nlineXOffset = 0.0\nTEXT_OFFSET = 0\nlocal background = ui.texture { path = 'black' }\nvalueTex = ui.texture { path = 'textures\\\\QuickLoot_coins.dds' }\nvalueByWeightTex = ui.texture { path = 'textures\\\\QuickLoot_scale.dds' }\nweightTex = ui.texture { path = 'textures\\\\QuickLoot_weight.dds' }\nlocal fKeyTex = ui.texture { path = 'textures\\\\QuickLoot_F.dds' }\nlocal rKeyTex = ui.texture { path = 'textures\\\\QuickLoot_R.dds' }\nlocal inspectedContainer = nil\nlocal resources = types.Actor.stats.dynamic\nTAKEALL_KEYBINDING = KEY.F\nlocal selectedIndex = 1\nlocal lastItemCount = 99999999\nlocal uiLoc = v2(0.75,0.5)\nlocal uiSize = v2(0.25,0.4)\nlocal textureCache = {}\n\n\n\n\n\n\n\n\nlocal function getTexture(path)\n\tif not textureCache[path] then\n\t\ttextureCache[path] = ui.texture{path = path}\n\tend\n\t\n\treturn textureCache[path]\nend\nfor a,b in pairs(input.triggers) do\nprint(a,b)\nend\ninput.registerTriggerHandler(\"ToggleSpell\", async:callback(function(dt, use, sneak, run)\n      -- while sneaking, only activate things while holding the run binding\n      --print(dtff)\n\t  return false\nend))\ninput.registerTriggerHandler(\"ToggleWeapon\", async:callback(function(dt, use, sneak, run)\n      -- while sneaking, only activate things while holding the run binding\n      --print(dt)\n\t  return false\nend)) \n\n\nfunction drawUI()\n\tlocal uiSize = uiSize\n\tborderFile = \"thin\"\n\tif playerSettings:get(\"BORDER_STYLE\") == \"verythick\" or playerSettings:get(\"BORDER_STYLE\") == \"thick\" then\n\t\tborderFile = \"thick\"\n\tend\n\tborderOffset = playerSettings:get(\"BORDER_STYLE\") == \"verythick\" and 4 or playerSettings:get(\"BORDER_STYLE\") == \"thick\" and 3 or playerSettings:get(\"BORDER_STYLE\") == \"normal\" and 2 or (playerSettings:get(\"BORDER_STYLE\") == \"thin\" or playerSettings:get(\"BORDER_STYLE\") == \"max performance\") and 1 or 0\n\tborderTemplate =  makeBorder(borderFile, borderColor or nil, borderOffset).borders\n\tif hud then \n\t\thud:destroy()\n\tend\n\tlocal localizedName = inspectedContainer.type.records[inspectedContainer.recordId].name\n\t\n\tprint(111)\n\thud = ui.create({\t--root\n\t\ttype = ui.TYPE.Widget,\n\t\tlayer = 'HUD',\n\t\tprops = {\n\t\t\t--position = playerSettings:get(\"POSITION\") == \"Bottom Left\" and v2(94,-startOffset) or v2(startOffset,startOffset),\n\t\t\t--size = v2(0.2,0.2),\n\t\t\tanchor = v2(0.5,0.5), --playerSettings:get(\"POSITION\") == \"Bottom Left\" and v2(0,1) or v2(0,0),\n\t\t\trelativePosition = uiLoc, --playerSettings:get(\"POSITION\") == \"Bottom Left\" and v2(0,1) or v2(0,0),\n\t\t\trelativeSize =  uiSize,\n\t\t},\n\t\tcontent = ui.content {\n\t\t\t--{ --background\n\t\t\t--\ttype = ui.TYPE.Image,\n\t\t\t--\tprops = {\n\t\t\t--\t\tresource = background,\n\t\t\t--\t\ttileH = false,\n\t\t\t--\t\ttileV = false,\n\t\t\t--\t\trelativeSize  = v2(1,1),\n\t\t\t--\t\trelativePosition = v2(0,0),\n\t\t\t--\t\t--position = v2(1,1),\n\t\t\t--\t\t--size = v2(-2,-2),\n\t\t\t--\t\talpha = 0.3,\n\t\t\t--\t}\n\t\t\t--}\n\t\t}\n\t})\n\tlocal screenAspectRatio = ui.screenSize()\n\tprint (screenAspectRatio)\n\tscreenAspectRatio = screenAspectRatio.x/screenAspectRatio.y\n\tprint(screenAspectRatio)\n\tuiSize= v2(uiSize.x*screenAspectRatio, uiSize.y)\n\tprint(uiSize)\n\tlocal headerFooterMargin = 0.01\n\tlocal headerFooterHeight = 0.06\n\t\n\t--Header\n\ttable.insert(hud.layout.content,{\n\t\tname = 'text',\n\t\ttype = ui.TYPE.Text,\n\t\tprops = {\n\t\t\ttext = localizedName,\n\t\t\ttextColor = util.color.rgba(1, 1, 1, 0.85),\n\t\t\ttextShadow = true,\n\t\t\tanchor = v2(0, 0.5),\n\t\t\ttextSize = 35,\n\t\t\ttextShadowColor = util.color.rgba(0,0,0,0.75),\n\t\t\tposition = v2(0, 0),\n\t\t\trelativeSize  = v2(1,headerFooterHeight),\n\t\t\trelativePosition = v2(0.01, 0),\n\t\t\t--position = NAME.position,\n\t\t\t--visible = c.textVisible and  playerLevel>=level + playerSettings:get(\"REQUIRED_HP\"),\n\t\t\tanchor = v2(0,0),\n\t\t\t\n\t\t}\n\t})\n\t--table.insert(hud.layout.content,{ -- r.1.7\n\t--\ttype = ui.TYPE.Widget,\n\t--\tprops = {\n\t--\t\tposition = v2(0, 0),\n\t--\t\trelativeSize  = v2(1,headerFooterHeight),\n\t--\t\trelativePosition = v2(0.01, 0),\n\t--\t\t--position = NAME.position,\n\t--\t\t--visible = c.textVisible and  playerLevel>=level + playerSettings:get(\"REQUIRED_HP\"),\n\t--\t\tanchor = v2(0,0),\n\t--\t},\n\t--\tcontent = ui.content (texText({align = \"right\",currentHealth = localizedName,widgetWidth=uiSize.x,widgetHeight = uiSize.y*headerFooterHeight, color = nameColor, size = 1}))\n\t--})\n\t\n\t--Footer\n\ttable.insert(hud.layout.content,{ -- r.1.7\n\t\ttype = ui.TYPE.Widget,\n\t\tprops = {\n\t\t\tposition = v2(0, 0),\n\t\t\trelativeSize  = v2(1,headerFooterHeight),\n\t\t\trelativePosition = v2(0.55,1-headerFooterHeight),\n\t\t\t--position = NAME.position,\n\t\t\t--visible = c.textVisible and  playerLevel>=level + playerSettings:get(\"REQUIRED_HP\"),\n\t\t\tanchor = v2(0,0),\n\t\t},\n\t\tcontent = ui.content (texText({align = \"right\",currentHealth = \"[F] TakeAll\",widgetWidth=uiSize.x,widgetHeight = uiSize.y*headerFooterHeight, color = nameColor, size = 0.65}))\n\t})\n\ttable.insert(hud.layout.content,{ -- r.1.7\n\t\ttype = ui.TYPE.Widget,\n\t\tprops = {\n\t\t\tposition = v2(0, 0),\n\t\t\trelativeSize  = v2(1,headerFooterHeight),\n\t\t\trelativePosition = v2(0.45,1-headerFooterHeight),\n\t\t\t--position = NAME.position,\n\t\t\t--visible = c.textVisible and  playerLevel>=level + playerSettings:get(\"REQUIRED_HP\"),\n\t\t\tanchor = v2(1,0),\n\t\t},\n\t\tcontent = ui.content (texText({align = \"left\",currentHealth = \"[R] Search\",widgetWidth=uiSize.x,widgetHeight = uiSize.y*headerFooterHeight, color = nameColor, size = 0.65}))\n\t})\n\t\n\t\n\tlocal itemHud = { -- r.1.7\n\t\ttype = ui.TYPE.Widget,\n\t\tprops = {\n\t\t\trelativeSize  = v2(1,1-2*(headerFooterHeight+headerFooterMargin)),\n\t\t\trelativePosition = v2(0,headerFooterHeight+headerFooterMargin),\n\t\t\t--position = NAME.position,\n\t\t\t--visible = c.textVisible and  playerLevel>=level + playerSettings:get(\"REQUIRED_HP\"),\n\t\t\tanchor = v2(0,0),\n\t\t},\n\t\tcontent = ui.content {}\n\t}\n\ttable.insert(hud.layout.content, itemHud)\n\ttable.insert(itemHud.content, {\n\t\ttype = ui.TYPE.Image,\n\t\tprops = {\n\t\t\tresource = background,\n\t\t\ttileH = false,\n\t\t\ttileV = false,\n\t\t\trelativeSize  = v2(1,1),\n\t\t\trelativePosition = v2(0,0),\n\t\t\t--position = v2(1,1),\n\t\t\t--size = v2(-2,-2),\n\t\t\talpha = 0.3,\n\t\t}\n\t})\n\ttable.insert(itemHud.content, { -- Border\n\t\ttemplate = borderTemplate,\n\t\tprops = {\n\t\t\trelativeSize  = v2(1,1),\n\t\t\trelativePosition = v2(0,0),\n\t\t\talpha = 0.5,\n\t\t\t--relativePosition= v2(0,0),\n\t\t}\n\t})\n\tlocal relativePosition = 0.01\n\tlocal lineHeight = 0.06\n\tlocal margin = 0.01\n\tlocal entryWidth = 0.7--1-(1.5*lineHeight + 0.01)\n\tlocal boxDimensions = v2(uiSize.x,uiSize.y*(1-2*(headerFooterHeight+headerFooterMargin)))\n\tlocal textDimensions = v2(uiSize.x*entryWidth,uiSize.y*(1-2*(headerFooterHeight+headerFooterMargin)))\n\tlocal aspectRatio = boxDimensions.x/boxDimensions.y \n\tlocal itemNameX = lineHeight/aspectRatio + 0.02\n\tlocal widgets = {\"valueByWeight\",\"value\",\"weight\"} --inverse sorting\n\t\n\tlocal itemBoxHeaderFooterScale = 1.3333\n\tif #widgets > 1 then\n\t\t---[[\n\t\t--TopLine\n\t\ttable.insert(itemHud.content,\n\t\t{\n\t\t\ttype = ui.TYPE.Image,\n\t\t\tprops = {\n\t\t\t\tresource = getTexture(\"textures/menu_thin_border_bottom.dds\"),\n\t\t\t\ttileH = false,\n\t\t\t\ttileV = false,\n\t\t\t\trelativeSize  = v2(1,0),\n\t\t\t\tsize = v2(-borderOffset*2,1),\n\t\t\t\tposition = v2(borderOffset,0),\n\t\t\t\trelativePosition = v2(0, lineHeight*itemBoxHeaderFooterScale),\n\t\t\t\talpha = 0.4,\n\t\t\t}\n\t\t})\n\t\t--BottomLine\n\t\ttable.insert(itemHud.content,\n\t\t{\n\t\t\ttype = ui.TYPE.Image,\n\t\t\tprops = {\n\t\t\t\tresource = getTexture(\"textures/menu_thin_border_bottom.dds\"),\n\t\t\t\ttileH = false,\n\t\t\t\ttileV = false,\n\t\t\t\trelativeSize  = v2(1,0),\n\t\t\t\tsize = v2(-borderOffset*2,1),\n\t\t\t\tposition = v2(borderOffset,0),\n\t\t\t\trelativePosition = v2(0, 1-lineHeight*itemBoxHeaderFooterScale),\n\t\t\t\talpha = 0.4,\n\t\t\t}\n\t\t})\n\t\t--]]\n\t\t--TopBackground\n\t\ttable.insert(itemHud.content,\n\t\t{\n\t\t\ttype = ui.TYPE.Image,\n\t\t\tprops = {\n\t\t\t\tresource = background,\n\t\t\t\ttileH = false,\n\t\t\t\ttileV = false,\n\t\t\t\trelativeSize  = v2(1,lineHeight*itemBoxHeaderFooterScale),\n\t\t\t\tsize = v2(-borderOffset*2,0),\n\t\t\t\tposition = v2(borderOffset,0),\n\t\t\t\trelativePosition = v2(0, 0),\n\t\t\t\talpha = 0.4,\n\t\t\t}\n\t\t})\n\t\t--BottomBackground\n\t\ttable.insert(itemHud.content,\n\t\t{\n\t\t\ttype = ui.TYPE.Image,\n\t\t\tprops = {\n\t\t\t\tresource = background,\n\t\t\t\ttileH = false,\n\t\t\t\ttileV = false,\n\t\t\t\trelativeSize  = v2(1,lineHeight*itemBoxHeaderFooterScale),\n\t\t\t\tsize = v2(-borderOffset*2,0),\n\t\t\t\tposition = v2(borderOffset,0),\n\t\t\t\trelativePosition = v2(0, 1-lineHeight*itemBoxHeaderFooterScale),\n\t\t\t\talpha = 0.4,\n\t\t\t}\n\t\t})\n\t\trelativePosition = relativePosition + lineHeight*itemBoxHeaderFooterScale+margin\n\t\tlocal widgetOffset = 0.05 --scrollbar\n\t\tfor _, widget in pairs(widgets) do\n\t\t\tprint(widget)\n\t\t\ttable.insert(itemHud.content,{\n\t\t\t\ttype = ui.TYPE.Image,\n\t\t\t\tprops = {\n\t\t\t\t\tresource = _G[widget..\"Tex\"],\n\t\t\t\t\ttileH = false,\n\t\t\t\t\ttileV = false,\n\t\t\t\t\trelativeSize  = v2(0.9*lineHeight*itemBoxHeaderFooterScale/aspectRatio,0.9*lineHeight*itemBoxHeaderFooterScale),\n\t\t\t\t\trelativePosition = v2(1-widgetOffset, lineHeight*itemBoxHeaderFooterScale),\n\t\t\t\t\tanchor = v2(1,1),\n\t\t\t\t\talpha = 0.6,\n\t\t\t\t}\n\t\t\t})\n\t\t\twidgetOffset =widgetOffset+ lineHeight*itemBoxHeaderFooterScale*1.1\n\t\tend\n\tend\n\t--{\n\t--\ttype = ui.TYPE.Widget,\n\t--\tprops = {\n\t--\t\t--position = v2(0, 0),\n\t--\t\trelativeSize  = v2(1,0),\n\t--\t\tsize = v2(-borderOffset*2,1),\n\t--\t\tposition = v2(borderOffset,0),\n\t--\t\trelativePosition = v2(0, lineHeight),\n\t--\t\t--position = NAME.position,\n\t--\t\t--visible = c.textVisible and  playerLevel>=level + playerSettings:get(\"REQUIRED_HP\"),\n\t--\t\tanchor = v2(0,0),\n\t--\t},\n\t--\tcontent = ui.content {\n\t--\t\t--{ -- Border\n\t--\t\t--\ttemplate = borderTemplate,\n\t--\t\t--\tprops = {\n\t--\t\t--\t\trelativeSize  = v2(1,1),\n\t--\t\t--\t\trelativePosition = v2(0,0),\n\t--\t\t--\t\talpha = 0.5,\n\t--\t\t--\t\t--relativePosition= v2(0,0),\n\t--\t\t--\t}\n\t--\t\t--}\n\t--\t\t\n\t--\t\t\n\t--\t}textures/menu_%s_border_%s.dds\n\t--\t\n\t--})\n\t\n\tfor _, thing in pairs(types.Container.inventory(inspectedContainer):getAll()) do\n\t\tlocal thingRecord = thing.type.records[thing.recordId]\n\t\tif not thingRecord then\n\t\t\tui.showMessage(\"ERROR: no record for \"..thing.id..\" (please report this bug)\")\n\t\telse\n\t\t\tlocal thingName =  thingRecord.name or thing.id\n\t\t\tthingName= fromutf8(thingName)\n\t\t\tprint(thingName)\n\t\t\tlocal icon = thingRecord.icon\n\t\t\tlocal thingCount = thing.count or 1\n\t\t\tlocal countText = thingCount > 1 and \" (\"..thing.count..\")\" or \"\"\n\t\t\tif icon then\n\t\t\t\tlocal ench = thing and (thing.enchant or thingRecord.enchant ~= \"\" and thingRecord.enchant )\n\t\t\t\tif ench then\n\t\t\t\t\tprint(\"ench\")\n\t\t\t\t\ttable.insert(itemHud.content, {\n\t\t\t\t\t\ttype = ui.TYPE.Image,\n\t\t\t\t\t\tprops = {\n\t\t\t\t\t\t\tresource = getTexture(\"textures\\\\menu_icon_magic_mini.dds\"),\n\t\t\t\t\t\t\ttileH = false,\n\t\t\t\t\t\t\ttileV = false,\n\t\t\t\t\t\t\trelativeSize  = v2(lineHeight/aspectRatio,lineHeight),\n\t\t\t\t\t\t\trelativePosition = v2(0.01,relativePosition),\n\t\t\t\t\t\t\t--position = v2(1,1),\n\t\t\t\t\t\t\t--size = v2(-2,-2),\n\t\t\t\t\t\t\talpha = 0.7,\n\t\t\t\t\t\t}\n\t\t\t\t\t})\t\t\t\n\t\t\t\tend\n\t\t\t\ttable.insert(itemHud.content, {\n\t\t\t\t\ttype = ui.TYPE.Image,\n\t\t\t\t\tprops = {\n\t\t\t\t\t\tresource = getTexture(icon),\n\t\t\t\t\t\ttileH = false,\n\t\t\t\t\t\ttileV = false,\n\t\t\t\t\t\trelativeSize  = v2(lineHeight/aspectRatio,lineHeight),\n\t\t\t\t\t\trelativePosition = v2(0.01,relativePosition),\n\t\t\t\t\t\t--position = v2(1,1),\n\t\t\t\t\t\t--size = v2(-2,-2),\n\t\t\t\t\t\talpha = 0.7,\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\tend\n\t\t\ttable.insert(itemHud.content, \n\t\t\t{ -- r.1.7\n\t\t\t\ttype = ui.TYPE.Widget,\n\t\t\t\tprops = {\n\t\t\t\t\t--position = v2(0, 0),\n\t\t\t\t\trelativeSize  = v2(entryWidth,lineHeight),\n\t\t\t\t\trelativePosition = v2(itemNameX, relativePosition),\n\t\t\t\t\t--position = NAME.position,\n\t\t\t\t\t--visible = c.textVisible and  playerLevel>=level + playerSettings:get(\"REQUIRED_HP\"),\n\t\t\t\t\tanchor = v2(0,0),\n\t\t\t\t},\n\t\t\t\tcontent = ui.content (texText({align = \"right\",currentHealth = thingName..countText,widgetWidth=boxDimensions.x, widgetHeight = boxDimensions.y*lineHeight, color = nameColor, size = 1}))\n\t\t\t})\n\t\t\tlocal widgetOffset = 0.05 --scrollbar\n\t\t\t--thingCount\n\t\t\tlocal thingValue = thingRecord.value\n\t\t\tlocal thingWeight = thingRecord.weight\n\t\t\tfor _, widget in pairs(widgets) do\n\t\t\t\tlocal text = \"\"..math.floor(thingValue*10)/10\n\t\t\t\tif widget == \"valueByWeight\" then\n\t\t\t\t\ttext = \"\"..(math.floor(thingValue/thingWeight*10)/10)\n\t\t\t\telseif widget == \"weight\" then\n\t\t\t\t\ttext = \"\"..math.floor(thingWeight*10)/10\n\t\t\t\tend\n\t\t\t\tprint(widget)\n\t\t\t\tlocal tempSize = v2(1.1*lineHeight*itemBoxHeaderFooterScale,lineHeight)\n\t\t\t\ttable.insert(itemHud.content, \n\t\t\t\t{ -- r.1.7\n\t\t\t\t\ttype = ui.TYPE.Widget,\n\t\t\t\t\tprops = {\n\t\t\t\t\t\t--position = v2(0, 0),\n\t\t\t\t\t\trelativeSize  = tempSize,\n\t\t\t\t\t\trelativePosition = v2(1-widgetOffset, relativePosition+lineHeight),\n\t\t\t\t\t\tanchor = v2(1,1),\n\t\t\t\t\t\t--alpha = 0.4,\n\t\t\t\t\t},\n\t\t\t\t\tcontent = ui.content (texText({align = \"left\",currentHealth =text,widgetWidth=boxDimensions.x*tempSize.x, widgetHeight = boxDimensions.y*tempSize.y, color = nameColor, size = 1}))\n\t\t\t\t})\n\t\t\t\twidgetOffset =widgetOffset+ lineHeight*1.1*itemBoxHeaderFooterScale\n\t\t\tend\n\t\t\t\n\t\t\t\n\t\t\trelativePosition = relativePosition + lineHeight+margin\n\t\tend\n\t\t\n\tend\n\thud:update()\n\t\n\t\n\t\n\tdo return end\n\tfor _,resource in pairs(widgets) do\n\n\t\ttable.insert(container.layout.content, ui.create({ --r.1\n\t\t\t\ttype = ui.TYPE.Widget,\n\t\t\t\tprops = {\n\t\t\t\t\tsize = v2(0,0),\n\t\t\t\t\tanchor = v2(0,1),\n\t\t\t\t\trelativePosition = v2(0,1),\n\t\t\t\t\trelativeSize = v2(1,0),\n\t\t\t\t\tposition = v2(0,-pos),\n\t\t\t\t\t},\n\t\t\t\tcontent = ui.content {\n\t\t\t\t\tui.create({ --r.1\n\t\t\t\t\t\ttype = ui.TYPE.Widget,\n\t\t\t\t\t\tprops = {\n\t\t\t\t\t\t\trelativeSize  = v2(0,1),\n\t\t\t\t\t\t\tsize = v2(max*LENGTH_MULT,0),\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcontent = ui.content ({\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype = ui.TYPE.Image,\n\t\t\t\t\t\t\t\tprops = {\n\t\t\t\t\t\t\t\t\tresource = background,\n\t\t\t\t\t\t\t\t\ttileH = false,\n\t\t\t\t\t\t\t\t\ttileV = false,\n\t\t\t\t\t\t\t\t\trelativeSize  = v2(1,1),\n\t\t\t\t\t\t\t\t\talpha = 0.5,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tplayerSettings:get(\"BORDER_STYLE\")~=\"none\" and \n\t\t\t\t\t\t\t{ -- Border\n\t\t\t\t\t\t\t\ttemplate = borderTemplate,\n\t\t\t\t\t\t\t\tprops = {\n\t\t\t\t\t\t\t\t\trelativeSize  = v2(1,1),\n\t\t\t\t\t\t\t\t\talpha = 0.5,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} or {},\n\t\t\t\t\t\t})\n\t\t\t\t\t}),\n\t\t\t\t\tui.create({ --r.2\n\t\t\t\t\t\ttype = ui.TYPE.Widget,\n\t\t\t\t\t\tprops = {\n\t\t\t\t\t\t\trelativeSize  = v2(1,1)\n\t\t\t\t\t\t},\n\t\t\t\t\t\tcontent = ui.content ({\n\t\t\t\t\t\t\tplayerSettings:get(\"LAGBAR\") and { -- Damage Bar r.2.lag\n\t\t\t\t\t\t\t\tname = \"lag\",\n\t\t\t\t\t\t\t\ttype = ui.TYPE.Image,\n\t\t\t\t\t\t\t\tprops = {\n\t\t\t\t\t\t\t\t\tresource = foreground,\n\t\t\t\t\t\t\t\t\t--relativePosition= v2(0,0.5),\n\t\t\t\t\t\t\t\t\ttileH = true,\n\t\t\t\t\t\t\t\t\ttileV = false,\n\t\t\t\t\t\t\t\t\tcolor =  playerSettings:get(resource:upper()..\"LAG_COL\"),\n\t\t\t\t\t\t\t\t\tposition = v2(borderOffset,borderOffset),\n\t\t\t\t\t\t\t\t\t--size = v2(-2,-3),\n\t\t\t\t\t\t\t\t\tsize = v2(current*LENGTH_MULT-borderOffset*2,-borderOffset*2),\n\t\t\t\t\t\t\t\t\trelativeSize  = v2(0,1),\n\t\t\t\t\t\t\t\t\talpha = 0.85,\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} or {},\n\t\t\t\t\t\t\t{ -- HP Bar r.2.main\n\t\t\t\t\t\t\t\tname = \"main\",\n\t\t\t\t\t\t\t\ttype = ui.TYPE.Image,\n\t\t\t\t\t\t\t\tprops = {\n\t\t\t\t\t\t\t\t\tresource = foreground,\n\t\t\t\t\t\t\t\t\ttileH = false,\n\t\t\t\t\t\t\t\t\ttileV = false,\n\t\t\t\t\t\t\t\t\tcolor =  playerSettings:get(resource:upper()..\"_COL\"),\n\t\t\t\t\t\t\t\t\t--position = v2(1, 1),\n\t\t\t\t\t\t\t\t\tposition = v2(borderOffset,borderOffset),\n\t\t\t\t\t\t\t\t\tsize = v2(math.min(max,current)*LENGTH_MULT-borderOffset*2,-borderOffset*2),\n\t\t\t\t\t\t\t\t\trelativeSize  = v2(0,1),\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tresource == \"health\" and playerSettings:get(\"HEALBAR\") and { -- Healing r.2.healing\n\t\t\t\t\t\t\t\tname = \"healing\",\n\t\t\t\t\t\t\t\ttype = ui.TYPE.Image,\n\t\t\t\t\t\t\t\tprops = {\n\t\t\t\t\t\t\t\t\tresource = foreground,\n\t\t\t\t\t\t\t\t\ttileH = true,\n\t\t\t\t\t\t\t\t\ttileV = false,\n\t\t\t\t\t\t\t\t\tcolor =  playerSettings:get(\"HEALING_COL\"),\n\t\t\t\t\t\t\t\t\talpha = 0.45,\n\t\t\t\t\t\t\t\t\tsize = v2(0,0),\n\t\t\t\t\t\t\t\t\tposition = v2(-borderOffset,0),\n\t\t\t\t\t\t\t\t\trelativeSize  = v2(0,1),\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} or {},\n\t\t\t\t\t\t\tplayerSettings:get(\"TEXT\") ~= \"hidden\" and {\n\t\t\t\t\t\t\t\tname = 'text',\n\t\t\t\t\t\t\t\ttype = ui.TYPE.Text,\n\t\t\t\t\t\t\t\tprops = {\n\t\t\t\t\t\t\t\t\ttext = playerSettings:get(\"TEXT\") == \"current\" and \"\"..math.floor(current) or math.floor(current)..\"/\".. math.floor(max),\n\t\t\t\t\t\t\t\t\ttextColor = util.color.rgba(1, 1, 1, 0.85),\n\t\t\t\t\t\t\t\t\tposition = v2(2, -math.floor(barThickness/12)),\n\t\t\t\t\t\t\t\t\ttextShadow = true,\n\t\t\t\t\t\t\t\t\tanchor = v2(0, 0.5),\n\t\t\t\t\t\t\t\t\trelativePosition = v2(0, 0.5),\n\t\t\t\t\t\t\t\t\ttextSize = barThickness+math.floor(barThickness/6),\n\t\t\t\t\t\t\t\t\ttextShadowColor = util.color.rgba(0,0,0,0.75)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} or {},\n\t\t\t\t\t\t})\n\t\t\t\t\t}),\n\t\t\t\t\tplayerSettings:get(resource:upper()..\"_FLASHING_THRESHOLD\") >0 and ui.create{ -- r.3\n\t\t\t\t\t\ttype = ui.TYPE.Image,\n\t\t\t\t\t\tprops = {\n\t\t\t\t\t\t\tresource = flashing,\n\t\t\t\t\t\t\ttileH = false,\n\t\t\t\t\t\t\ttileV = false,\n\t\t\t\t\t\t\tcolor =  playerSettings:get(resource:upper()..\"LAG_COL\"),\n\t\t\t\t\t\t\t--position = v2(1, 1),\n\t\t\t\t\t\t\t--position = v2(borderOffset,borderOffset),\n\t\t\t\t\t\t\t--size = v2(math.min(max,current)*LENGTH_MULT-borderOffset*2,-borderOffset*2),\n\t\t\t\t\t\t\trelativeSize  = v2(0,1),\n\t\t\t\t\t\t\tsize = v2(max*LENGTH_MULT,0),\n\t\t\t\t\t\t\talpha = 0,\n\t\t\t\t\t\t},\n\t\t\t\t\t} or {},\n\t\t\t\t}\n\t\t\t})\n\t\t)\n\t\t\n\t\tpos = pos+verticalOffset\n\t\t_G[resource] = { -- magicka, fatigue, health =\n\t\t\tbar = container.layout.content[#container.layout.content].layout.content,\n\t\t\tmax = max*LENGTH_MULT,\n\t\t\tcurrent = current,\n\t\t\tcached = current,\n\t\t\tpaused = current,\n\t\t\tlag = current,\n\t\t\tlagCached = current,\n\t\t\ttimer = 0,\n\t\t\tlerp = current,\n\t\t\tLENGTH_MULT = LENGTH_MULT,\n\t\t\tflashing = false\n\t\t}\n\t\tif playerSettings:get(\"TEXT_POS\") == \"right\" then\n\t\t\t_G[resource].bar[2].layout.content[\"text\"].props.position = v2(math.floor(max*LENGTH_MULT)-2,0)\n\t\t\t_G[resource].bar[2].layout.content[\"text\"].props.anchor = v2(1,0.5)\n\t\telseif playerSettings:get(\"TEXT_POS\") == \"right outside\" then\n\t\t\t_G[resource].bar[2].layout.content[\"text\"].props.position = v2(math.floor(max*LENGTH_MULT)+2,0)\n\t\t\t\n\t\tend\n\tend\n\t\nend\n\n\n\nlocal animation = require('openmw.animation')\nfunction onFrame(dt)\n--I.UI.setMode()\n\tlocal camera = require('openmw.camera')\n\tlocal cameraPos = camera.getPosition()\n\tlocal rayDistance = core.getGMST(\"iMaxActivateDist\")+0.1\n\tlocal res = nearby.castRenderingRay(cameraPos, cameraPos+camera.viewportToWorldVector(v2(0.5,0.5)):emul(v3(rayDistance,rayDistance,rayDistance)))\n\t--print(res.hitObject)\n\t--print(animation.hasGroup(res.hitObject, \"ContainerOpen Start\"))\n\t--I.UI.addMode('Container', {target = res.hitObject})\n\tif inspectedContainer and (res.hitObject == nil or res.hitObject ~= inspectedContainer) then\n\t\tinspectedContainer:sendEvent(\"OwnlysQuickLoot_closeAnimation\",self)\n\t\tinspectedContainer = nil\n\t\tControls.overrideCombatControls(false)\n\t\tCamera.enableZoom(\"quickloot\")\n\t\tlastItemCount = 99999999\n\t\tif hud then \n\t\t\thud:destroy() \n\t\tend\n\tend\n\t\n\t--print(res.hitObject.type == types.Container)\n\t--print(res.hitObject)\n\tif not inspectedContainer \n\tand res.hitObject \n\tand (\n\t\tres.hitObject.type == types.Container \n\t\tor (\n\t\t\tres.hitObject.type == types.NPC\n\t\t\tand types.Actor.isDead(res.hitObject)\n\t\t)\n\t)\t\n\tand not types.Lockable.isLocked(res.hitObject)\n\tand not types.Lockable.getTrapSpell(res.hitObject)\n\tthen\n\t\tif not types.Container.inventory(res.hitObject):isResolved() then\n\t\t\tcore.sendGlobalEvent(\"OwnlysQuickLoot_resolve\",res.hitObject)\n\t\telse\n\t\t\tinspectedContainer = res.hitObject\n\t\t\tControls.overrideCombatControls(true) \n\t\t\tCamera.disableZoom(\"quickloot\")\n\t\t\tinspectedContainer:sendEvent(\"OwnlysQuickLoot_openAnimation\",self)\n\t\t\tselectedIndex = 1\n\t\tend\n\tend\n\tif inspectedContainer then\n\t\tlocal itemCount = 0\n\t\tlocal entryCount = 0\n\t\tfor _, thing in pairs(types.Container.inventory(inspectedContainer):getAll()) do\n\t\t\titemCount = itemCount + thing.count\n\t\t\tentryCount = entryCount + 1\n\t\tend\n\t\tif entryCount < selectedIndex then\n\t\t\tselectedIndex = entryCount\n\t\tend\n\t\t\n\t\t\n\t\tif lastItemCount ~= itemCount then\n\t\t\tdrawUI()\n\t\tend\n\t\t\n\t\tlastItemCount = itemCount\n\tend\nend\nlocal function onKey(key)\n\t--print(core.getRealTime() - OPENED_TIMESTAMP)\n\tif inspectedContainer and key.code == TAKEALL_KEYBINDING then\n\t\tcore.sendGlobalEvent(\"OwnlysQuickLoot_takeAll\",{self, inspectedContainer})\n\tend\n\treturn false\nend\nreturn {    \n\teventHandlers = {\n\t\tUiModeChanged = UiModeChanged,\n\t\tOwnlysQuickLoot_activatedContainer = activatedContainer\n\t},\n\tengineHandlers = {\n\t\tonFrame = onFrame,\n\t\tonUpdate = onUpdate,\n\t\tonKeyPress = onKey\n    },\n\t--eventHandlers = {\n    --    FHB_AI_update = AI_update,\n    --}\n}",
    "QuickLoot-54950-1-5-1723820244\\QuickLoot\\scripts\\OwnlysQuickLoot\\ql_p.lua": "types = require('openmw.types')\nNPC = require('openmw.types').NPC\ncore = require('openmw.core')\nstorage = require('openmw.storage')\nMODNAME = \"OwnlysQuickLoot\"\nplayerSection = storage.playerSection('SettingsPlayer'..MODNAME)\nI = require(\"openmw.interfaces\")\nself = require(\"openmw.self\")\nnearby = require('openmw.nearby')\ncamera = require('openmw.camera')\nCamera = require('openmw.interfaces').Camera\nutil = require('openmw.util')\nui = require('openmw.ui')\nauxUi = require('openmw_aux.ui')\nasync = require('openmw.async')\nvfs = require('openmw.vfs')\nKEY = require('openmw.input').KEY\ninput = require('openmw.input')\nv2 = util.vector2\nv3 = util.vector3\nlocal Controls = require('openmw.interfaces').Controls\nlocal makeBorder = require(\"scripts.OwnlysQuickLoot.ql_makeborder\")\nlocal settings = require(\"scripts.OwnlysQuickLoot.ql_settings\")\nlocal helpers = require(\"scripts.OwnlysQuickLoot.ql_helpers\")\nreadFont, texText, rgbToHsv, hsvToRgb,fromutf8,toutf8,hextoutf8 = unpack(helpers)\nlocal background = ui.texture { path = 'black' }\nlocal white = ui.texture { path = 'white' }\nvalueTex = ui.texture { path = 'textures\\\\QuickLoot_coins.dds' }\nvalueByWeightTex = ui.texture { path = 'textures\\\\QuickLoot_scale.dds' }\nbackpackTex = ui.texture { path = 'textures\\\\QuickLoot_backpack.dds' }\nweightTex = ui.texture { path = 'textures\\\\QuickLoot_weight.dds' }\nfSymbolicTex =   ui.texture { path = 'textures\\\\QuickLoot_F_symbolic.dds' }\nrSymbolicTex =   ui.texture { path = 'textures\\\\QuickLoot_R_symbolic.dds' }\nfKeyTex =   ui.texture { path = 'textures\\\\QuickLoot_F.dds' }\nrKeyTex =   ui.texture { path = 'textures\\\\QuickLoot_R.dds' }\nlocal handTex = ui.texture { path = 'textures\\\\QuickLoot_hand.dds' }\nlocal inspectedContainer = nil\nlocal selectedIndex = 1\nlocal backupSelectedIndex = 1\nlocal backupSelectedContainer = nil\nlocal scrollPos = 1\nlocal containerItems = {}\nTAKEALL_KEYBINDING = KEY.F\nlocal lastItemCount = 99999999\nuiLoc = v2(playerSection:get(\"X\")/100,playerSection:get(\"Y\")/100)\nuiSize = v2(playerSection:get(\"WIDTH\")/100,playerSection:get(\"HEIGHT\")/100)\nlocal textureCache = {}\nlocal bookSection = storage.playerSection('ReadBooks'..MODNAME)\nlocal encumbranceCurrent = 0\nlocal organicContainers = {\n\tbarrel_01_ahnassi_drink=true,\n\tbarrel_01_ahnassi_food =true,\n\tcom_chest_02_fg_supply =true,\n\tcom_chest_02_mg_supply =true,\n\tflora_treestump_unique =true,\n}\nmodEnabled = true\nmodDisableFlags = {}\nlocal shiftPressed = false\n\nfunction updateModEnabled()\n\tlocal tempState = true\n\tfor a,b in pairs(modDisableFlags) do\n\t\tif not b then\n\t\t\ttempState = false\n\t\tend\n\tend\n\t\n\tmodEnabled=playerSection:get(\"ENABLED\") and tempState\n\tcloseHud()\n\tcore.sendGlobalEvent(\"OwnlysQuickLoot_playerToggledMod\",{self,modEnabled})\nend\n\nfunction shallowcopy(orig)\n    local orig_type = type(orig)\n    local copy\n    if orig_type == 'table' or orig_type == 'userdata' then\n        copy = {}\n        for orig_key, orig_value in pairs(orig) do\n            copy[orig_key] = orig_value\n        end\n    else -- number, string, boolean, etc\n        copy = orig\n    end\n    return copy\nend\n\n\nquickLootText = {\n\tprops = {\n\t\t\ttextColor = playerSection:get(\"FONT_TINT\"),--util.color.rgba(1, 1, 1, 1),\n\t\t\ttextShadow = true,\n\t\t\ttextShadowColor = util.color.rgba(0,0,0,0.75),\n\t\t\t--textAlignV = ui.ALIGNMENT.Center,\n\t\t\t--textAlignH = ui.ALIGNMENT.Center,\n\t}\n}\n\nlocal itemFontSize = 21\n\n\n\nlocal function getTexture(path)\n\tif not textureCache[path] then\n\t\ttextureCache[path] = ui.texture{path = path}\n\tend\n\t\n\treturn textureCache[path]\nend\n\ninput.registerTriggerHandler(\"ToggleSpell\", async:callback(function(dt, use, sneak, run)\n\tif inspectedContainer then\n\t\tcore.sendGlobalEvent(\"OwnlysQuickLoot_actuallyActivate\",{self, inspectedContainer})\n\t\tI.UI.setMode(\"Container\",{target = inspectedContainer})\n\t\ttypes.Actor.setStance(self, types.Actor.STANCE.Nothing)\n\tend\nend))\n\ninput.registerTriggerHandler(\"ToggleWeapon\", async:callback(function(dt, use, sneak, run)\n\tif inspectedContainer then\n\t\tcore.sendGlobalEvent(\"OwnlysQuickLoot_takeAll\",{self, inspectedContainer})\n\tend\nend)) \n\nfunction drawUI()\n\t\n\tif backupSelectedContainer == inspectedContainer then\n\t\tselectedIndex = backupSelectedIndex\n\telse\n\t\tscrollPos = 1\n\tend\n\tbackupSelectedIndex = selectedIndex\n\tbackupSelectedContainer = inspectedContainer \n\tlocal uiSize = uiSize\n\tborderFile = \"thin\"\n\tif playerSection:get(\"BORDER_STYLE\") == \"verythick\" or playerSection:get(\"BORDER_STYLE\") == \"thick\" then\n\t\tborderFile = \"thick\"\n\tend\n\tborderOffset = playerSection:get(\"BORDER_STYLE\") == \"verythick\" and 4 or playerSection:get(\"BORDER_STYLE\") == \"thick\" and 3 or playerSection:get(\"BORDER_STYLE\") == \"normal\" and 2 or (playerSection:get(\"BORDER_STYLE\") == \"thin\" or playerSection:get(\"BORDER_STYLE\") == \"max performance\") and 1 or 0\n\tborderTemplate =  makeBorder(borderFile, borderColor or nil, borderOffset).borders\n\tif hud then \n\t\thud:destroy()\n\tend\n\tlocal localizedName = inspectedContainer.type.records[inspectedContainer.recordId].name\n\t\n\thud = ui.create({\t--root\n\t\ttype = ui.TYPE.Widget,\n\t\tlayer = 'HUD',\n\t\tname = 'QuickLootBox',\n\t\tprops = {\n\t\t\t--position = playerSection:get(\"POSITION\") == \"Bottom Left\" and v2(94,-startOffset) or v2(startOffset,startOffset),\n\t\t\t--size = v2(0.2,0.2),\n\t\t\tanchor = v2(0.5,0.5), --playerSection:get(\"POSITION\") == \"Bottom Left\" and v2(0,1) or v2(0,0),\n\t\t\trelativePosition = uiLoc, --playerSection:get(\"POSITION\") == \"Bottom Left\" and v2(0,1) or v2(0,0),\n\t\t\trelativeSize =  uiSize,\n\t\t},\n\t\tcontent = ui.content {\n\t\t\t--{ --background\n\t\t\t--\ttype = ui.TYPE.Image,\n\t\t\t--\tprops = {\n\t\t\t--\t\tresource = background,\n\t\t\t--\t\ttileH = false,\n\t\t\t--\t\ttileV = false,\n\t\t\t--\t\trelativeSize  = v2(1,1),\n\t\t\t--\t\trelativePosition = v2(0,0),\n\t\t\t--\t\t--position = v2(1,1),\n\t\t\t--\t\t--size = v2(-2,-2),\n\t\t\t--\t\talpha = 0.3,\n\t\t\t--\t}\n\t\t\t--}\n\t\t}\n\t})\n\tlocal screenAspectRatio = ui.screenSize()\n\tlocal textSizeMult = screenAspectRatio.y /1200*(uiSize.y/0.4)\n\tlocal headerFooterScale = (textSizeMult^0.5)/textSizeMult\n\ttextSizeMult = textSizeMult^0.5\n\ttextSizeMult=textSizeMult*playerSection:get(\"textSizeMult\")/100\n\theaderFooterScale = headerFooterScale*playerSection:get(\"textSizeMult\")/100\n\tscreenAspectRatio = screenAspectRatio.x/screenAspectRatio.y\n\tuiSize= v2(uiSize.x*screenAspectRatio, uiSize.y)\n\tlocal hudAspectRatio = uiSize.x/uiSize.y\n\tlocal hudLayerSize = ui.layers[ui.layers.indexOf(\"HUD\")].size\n\t\n\tlocal headerFooterMargin = 0.005\n\tlocal headerFooterHeight = 0.06*headerFooterScale\n\tlocal captionOffset = 0\n\n\t\n\n\tlocal stealCol = nil\n\tif inspectedContainer.owner.recordId\n\tor inspectedContainer.owner.factionId and types.NPC.getFactionRank(self, inspectedContainer.owner.factionId) == 0\n\tor inspectedContainer.owner.factionId and types.NPC.getFactionRank(self, inspectedContainer.owner.factionId) < inspectedContainer.owner.factionRank then\n\t\t--stealCol = util.color.rgba(1,0.714, 0.706, 1)\n\t\tstealCol = util.color.rgba(1,0.05, 0.05, 1)\n\t\t--STEALING ICON\n\t\t--captionOffset = headerFooterHeight/hudAspectRatio\n\t\t\n\tend\n\t--Caption: CONTAINER NAME\n\tlocal headline ={\n\t\ttype = ui.TYPE.Flex,\n\t\tprops = {\n\t\t\tposition = v2(0, 0),\n\t\t\trelativeSize  = v2(1,headerFooterHeight),\n\t\t\trelativePosition = v2(0 + captionOffset, 0),\n\t\t\tanchor = v2(0,0),\n\t\t\thorizontal = true,\n\t\t},\n\t\tcontent = ui.content({})\n\t}\n\ttable.insert(hud.layout.content,headline)\n\t\n\ttable.insert(headline.content,{\n\t\ttype = ui.TYPE.Text,\n\t\ttemplate = quickLootText,\n\t\tprops = {\n\t\t\ttext = localizedName..\" \",\n\t\t\ttextSize= 25*textSizeMult,\n\t\t\tposition = v2(0, 0),\n\t\t\trelativeSize  = v2(1,headerFooterHeight),\n\t\t\trelativePosition = v2(0.015 + captionOffset, headerFooterHeight/2),\n\t\t\tanchor = v2(0,0.5),\n\t\t\ttextColor = stealCol or playerSection:get(\"ICON_TINT\"),\n\t\t}\n\t})\n\t\n\t\n\n\tif stealCol then\n\t\ttable.insert(headline.content,{\n\t\t\ttype = ui.TYPE.Image,\n\t\t\tprops = {\n\t\t\t\tresource = handTex,\n\t\t\t\ttileH = false,\n\t\t\t\ttileV = false,\n\t\t\t\tposition = v2(0, 0),\n\t\t\t\t--relativeSize  = v2(1,1),\n\t\t\t\tsize = v2(hudLayerSize.y*uiSize.y*headerFooterHeight*0.9,hudLayerSize.y*uiSize.y*headerFooterHeight*0.9),\n\t\t\t\talpha = 0.8,\n\t\t\t}\n\t\t})\n\tend\n\n\n\t--itemHUD\n\tlocal itemHud = { -- r.1.7\n\t\ttype = ui.TYPE.Widget,\n\t\tprops = {\n\t\t\trelativeSize  = v2(1,1-2*(headerFooterHeight+headerFooterMargin)),\n\t\t\trelativePosition = v2(0,headerFooterHeight+headerFooterMargin),\n\t\t},\n\t\tcontent = ui.content {}\n\t}\n\ttable.insert(hud.layout.content, itemHud)\n\t\n\t--itemHUD BACKGROUND\n\ttable.insert(itemHud.content, {\n\t\ttype = ui.TYPE.Image,\n\t\tprops = {\n\t\t\tresource = background,\n\t\t\ttileH = false,\n\t\t\ttileV = false,\n\t\t\trelativeSize  = v2(1,1),\n\t\t\trelativePosition = v2(0,0),\n\t\t\talpha = 0.3,\n\t\t}\n\t})\n\t--itemHUD BORDER\n\ttable.insert(itemHud.content, {\n\t\ttemplate = borderTemplate,\n\t\tprops = {\n\t\t\trelativeSize  = v2(1,1),\n\t\t\talpha = 0.5,\n\t\t}\n\t})\n\tlocal boxDimensions = v2(uiSize.x,uiSize.y*(1-2*(headerFooterHeight+headerFooterMargin)))\n\tlocal entryWidth = 0.7--1-(1.5*lineHeight + 0.01)\n\tlocal itemBoxHeaderFooterHeight = 0.08*headerFooterScale\n\tlocal widgets = {} --inverse sorting\n\tif playerSection:get(\"COLUMN_WV\") then\n\t\ttable.insert(widgets,\"valueByWeight\")\n\tend\n\tif playerSection:get(\"COLUMN_VALUE\") then\n\t\ttable.insert(widgets,\"value\")\n\tend\n\tif playerSection:get(\"COLUMN_WEIGHT\") then\n\t\ttable.insert(widgets,\"weight\")\n\tend\n\t--local textDimensions = v2(uiSize.x*entryWidth,uiSize.y*(1-2*(headerFooterHeight+headerFooterMargin)))\n\t\n\tlocal localListDimensions = v2(1,1-(#widgets>0 and 2 or 1)*(itemBoxHeaderFooterHeight+0.001))\n\t--local listBoxDimensions = v2(boxDimensions.x,#widgets >1 and boxDimensions.y*(1-2*(itemBoxHeaderFooterHeight+0.003)+margin) or boxDimensions.y*(1-itemBoxHeaderFooterHeight-0.003+margin))\n\tlocal realListBoxDimensions = v2(boxDimensions.x,boxDimensions.y*localListDimensions.y) --only for line max items\n\tlocal absoluteRealListBoxDimensions = realListBoxDimensions:emul(v2(hudLayerSize.x/screenAspectRatio,hudLayerSize.y))\n\tlocal margin = 0.01 --0.001 margin before and after list\n\tlocal maxItems = math.floor(absoluteRealListBoxDimensions.y / (itemFontSize*textSizeMult*1.5+margin*absoluteRealListBoxDimensions.y))--pctOfListHeightPerEntry / realListBoxDimensions.y --math.floor(realListBoxDimensions.y/(0.021))--math.floor(14*(boxDimensions.y/0.4))\n\tlocal pctOfListHeightPerEntry = localListDimensions.y / maxItems --absoluteRealListBoxDimensions.y / (itemFontSize*textSizeMult+margin)\n\tlocal itemHudAspectRatio = boxDimensions.x/boxDimensions.y \n\tlocal lineHeight = localListDimensions.y/maxItems\n\tlineHeight = lineHeight - margin +1/maxItems*margin--/2\n\tlocal relativePosition = 0\n\tlocal itemNameX = lineHeight/itemHudAspectRatio + 0.02\n\t\n\t\n\t--itemList HEADER\n\tif #widgets > 0 then\n\t\t--itemList HEADER Background\n\t\ttable.insert(itemHud.content,\n\t\t{\n\t\t\ttype = ui.TYPE.Image,\n\t\t\tprops = {\n\t\t\t\tresource = background,\n\t\t\t\ttileH = false,\n\t\t\t\ttileV = false,\n\t\t\t\trelativeSize  = v2(1,itemBoxHeaderFooterHeight),\n\t\t\t\tsize = v2(-borderOffset*2,-borderOffset),\n\t\t\t\tposition = v2(borderOffset,borderOffset),\n\t\t\t\trelativePosition = v2(0, 0),\n\t\t\t\talpha = 0.4,\n\t\t\t}\n\t\t})\n\t\t--itemList HEADER Line\n\t\ttable.insert(itemHud.content,\n\t\t{\n\t\t\ttype = ui.TYPE.Image,\n\t\t\tprops = {\n\t\t\t\tresource = getTexture(\"textures/menu_thin_border_bottom.dds\"),\n\t\t\t\ttileH = false,\n\t\t\t\ttileV = false,\n\t\t\t\trelativeSize  = v2(1,0),\n\t\t\t\tsize = v2(-borderOffset*2,1),\n\t\t\t\tposition = v2(borderOffset,-1),\n\t\t\t\trelativePosition = v2(0, itemBoxHeaderFooterHeight),\n\t\t\t\talpha = 0.4,\n\t\t\t}\n\t\t})\n\t\trelativePosition = relativePosition + itemBoxHeaderFooterHeight+0.001\n\t\tlocal widgetOffset = 0.05 -- for scrollbar\n\t\t--itemList HEADER ICONS\n\t\tfor _, widget in pairs(widgets) do\n\t\t\ttable.insert(itemHud.content,{\n\t\t\t\ttype = ui.TYPE.Image,\n\t\t\t\tprops = {\n\t\t\t\t\tresource = _G[widget..\"Tex\"],\n\t\t\t\t\ttileH = false,\n\t\t\t\t\ttileV = false,\n\t\t\t\t\trelativeSize  = v2(0.85*itemBoxHeaderFooterHeight/itemHudAspectRatio,0.85*itemBoxHeaderFooterHeight),\n\t\t\t\t\trelativePosition = v2(1-widgetOffset, itemBoxHeaderFooterHeight),\n\t\t\t\t\tposition = v2(0,-2),\n\t\t\t\t\tanchor = v2(1,1),\n\t\t\t\t\talpha = 0.8,\n\t\t\t\t\tcolor = playerSection:get(\"ICON_TINT\"),\n\t\t\t\t}\n\t\t\t})\n\t\t\twidgetOffset =widgetOffset+ math.max(0.12,0.105*textSizeMult)--itemBoxHeaderFooterHeight*headerFooterScale\n\t\tend\n\telse\n\t\trelativePosition = relativePosition+borderOffset/absoluteRealListBoxDimensions.y\n\tend\n\t\n\t\n\t--SORTING\n\tcontainerItems = types.Container.inventory(inspectedContainer):getAll()\n\tlocal sortedItems = {\n\t\t{}, --cash = {},\n\t\t{}, --keys = {},\n\t\t{}, --lockpicks = {},\n\t\t{}, --soulgems = {},\n\t\t{}, --ingredients= {},\n\t\t{}, --repair = {},\n\t\t{}, --other = {}\n\t}\n\tfor _,item in pairs(containerItems) do\n\t\tlocal itemType = item.type\n\t\tlocal itemRecordId =item.recordId\n\t\tlocal itemRecord = item.type.record(itemRecordId)\n\t\tif not itemRecord.name or itemRecord.name == \"\" or not types.Item.isCarriable(item) then\n\t\t\t-- ignore\n\t\telseif itemType == types.Miscellaneous and itemRecordId == \"gold_001\" and playerSection:get(\"CONTAINER_SORTING_CASH\") then\n\t\t\ttable.insert(sortedItems[1], {item, itemRecord.value, itemRecord.weight})\n\t\telseif itemType == types.Miscellaneous and itemRecord.isKey and playerSection:get(\"CONTAINER_SORTING_KEYS\") then\n\t\t\ttable.insert(sortedItems[2], {item, itemRecord.value, itemRecord.weight})\n\t\telseif (itemType == types.Lockpick or itemType == types.Probe) and playerSection:get(\"CONTAINER_SORTING_LOCKPICKS\") then\n\t\t\ttable.insert(sortedItems[3], {item, itemRecord.value, itemRecord.weight})\n\t\telseif itemType == types.Miscellaneous and itemRecordId:sub(1,12) == \"misc_soulgem\" and playerSection:get(\"CONTAINER_SORTING_SOULGEMS\") then\n\t\t\ttable.insert(sortedItems[4], {item, itemRecord.value, itemRecord.weight})\n\t\telseif itemType == types.Ingredient and playerSection:get(\"CONTAINER_SORTING_INGREDIENTS\") > 0 then\n\t\t\tif itemRecord.weight <= playerSection:get(\"CONTAINER_SORTING_INGREDIENTS\") then\n\t\t\t\ttable.insert(sortedItems[5], {item, itemRecord.value, itemRecord.weight})\n\t\t\telse\n\t\t\t\ttable.insert(sortedItems[7], {item, itemRecord.value, itemRecord.weight})\n\t\t\tend\n\t\telseif itemType == types.Repair and playerSection:get(\"CONTAINER_SORTING_REPAIR\") then\n\t\t\ttable.insert(sortedItems[6], {item, itemRecord.value, itemRecord.weight})\n\t\telse\n\t\t\ttable.insert(sortedItems[7], {item, itemRecord.value, itemRecord.weight})\n\t\tend\n\tend\n\tcontainerItems = {}\n\tfor cat, tbl in pairs(sortedItems) do\n\t\tif playerSection:get(\"CONTAINER_SORTING_STATS\") ~= \"Vanilla\" then\n\t\t\ttable.sort(tbl, function(a,b)\n\t\t\t\tif playerSection:get(\"CONTAINER_SORTING_STATS\") == \"Lowest Weight\" then\n\t\t\t\t\treturn a[3]<b[3]\n\t\t\t\telseif playerSection:get(\"CONTAINER_SORTING_STATS\") == \"Highest Value\" then\n\t\t\t\t\treturn a[2]>b[2]\n\t\t\t\telse --\"Best W/V\"\n\t\t\t\t\treturn a[2]/a[3] > b[2]/b[3]\n\t\t\t\tend\n\t\t\tend)\n\t\telse\n\t\t\tlocal prio={\n\t\t\t\tWeapon = 20,\n\t\t\t\tArmor = 18,\n\t\t\t\tClothing = 16,\n\t\t\t\tPotion = 14,\n\t\t\t\tIngredient = 12,\n\t\t\t\tApparatus = 10,\n\t\t\t\tBook = 8,\n\t\t\t\tLight = 6,\n\t\t\t\tMiscellaneous = 4,\n\t\t\t\tLockpick = 2,\n\t\t\t\tRepair = 0,\n\t\t\t\tProbe = -2,\n\t\t\t}\n\t\t\ttable.sort(tbl, function(a,b)\n\t\t\t\tif (prio[tostring(a[1].type)] or -99) == (prio[tostring(b[1].type)] or -99) then\n\t\t\t\t\treturn string.upper(a[1].type.record(a[1]).name) < string.upper(b[1].type.record(b[1]).name)\n\t\t\t\telse\n\t\t\t\t\treturn (prio[tostring(a[1].type)] or -99) > (prio[tostring(b[1].type)] or -99)\n\t\t\t\tend\n\t\t\tend)\n\t\t\t--print(tostring(tbl[1].type))\n\t\t\t\n\t\tend\n\t\tfor _, itemData in pairs(tbl) do\n\t\t\ttable.insert(containerItems,itemData[1])\n\t\tend\n\tend\n\t\n\t--SCROLLBAR\n\tlocal highlightWidth = 1\n\tlocal highlightWidthAbs = -borderOffset*2\n\t--local listLimit = 1-itemBoxHeaderFooterHeight\n\tlocal scrollBarRange = localListDimensions.y --listLimit-relativePosition\n\tselectedIndex = math.min(selectedIndex,#containerItems)\n\t--print(selectedIndex)\n\t--if \n\tif selectedIndex >= scrollPos+maxItems-1 then\n\t\tscrollPos = math.min(#containerItems-maxItems+1, selectedIndex - maxItems+2)\n\telseif selectedIndex <= scrollPos then\n\t\tscrollPos = math.max(1,selectedIndex-1)\n\tend\n\tscrollPos = math.min(scrollPos, math.max(1,#containerItems+2-maxItems))\n\tlocal visibleItems = math.min(maxItems,#containerItems-scrollPos+1)\n\t--if #containerItems > maxItems then\n\tif scrollPos > 1 or #containerItems > maxItems then\n\t\thighlightWidth = 0.96\n\t\thighlightWidthAbs = -borderOffset\n\t\t--SCROLLBAR BACKGROUND\n\t\ttable.insert(itemHud.content,\n\t\t{\n\t\t\ttype = ui.TYPE.Image,\n\t\t\tprops = {\n\t\t\t\tresource = background,\n\t\t\t\ttileH = false,\n\t\t\t\ttileV = false,\n\t\t\t\trelativePosition = v2(0.96,relativePosition),\n\t\t\t\trelativeSize  = v2(0.04,scrollBarRange),\n\t\t\t\tsize = v2(-borderOffset,0),\n\t\t\t\talpha = 0.2,\n\t\t\t\tcolor = playerSection:get(\"FONT_TINT\"),\n\t\t\t}\n\t\t})\n\t\t--SCROLLBAR VISIBLE RANGE\n\t\ttable.insert(itemHud.content,\n\t\t{\n\t\t\ttype = ui.TYPE.Image,\n\t\t\tprops = {\n\t\t\t\tresource = white,\n\t\t\t\ttileH = false,\n\t\t\t\ttileV = false,\n\t\t\t\trelativePosition = v2(0.96,(scrollPos-1)/#containerItems*scrollBarRange+relativePosition),\n\t\t\t\trelativeSize  = v2(0.04,visibleItems/#containerItems*scrollBarRange),\n\t\t\t\tsize = v2(-borderOffset,0),\n\t\t\t\talpha = 0.15,\n\t\t\t\tcolor = playerSection:get(\"ICON_TINT\"),\n\t\t\t\t\n\t\t\t}\n\t\t})\n\t\t--SCROLLBAR SELECTED\n\t\ttable.insert(itemHud.content,\n\t\t{\n\t\t\ttype = ui.TYPE.Image,\n\t\t\tprops = {\n\t\t\t\tresource = white,\n\t\t\t\ttileH = false,\n\t\t\t\ttileV = false,\n\t\t\t\trelativePosition = v2(0.96,(selectedIndex-1)/#containerItems*scrollBarRange+relativePosition),\n\t\t\t\trelativeSize  = v2(0.04,1/#containerItems*scrollBarRange),\n\t\t\t\tsize = v2(-borderOffset,0),\n\t\t\t\talpha = 0.5,\n\t\t\t\tcolor = playerSection:get(\"ICON_TINT\"),\n\t\t\t}\n\t\t})\n\tend\n\tencumbranceCurrent = types.Actor.getEncumbrance(self)\n\tlocal encumbranceMax = types.Actor.stats.attributes.strength(self).modified*core.getGMST(\"fEncumbranceStrMult\")\n\t\n\t--for _, thing in pairs(types.Container.inventory(inspectedContainer):getAll()) do\n\t-- ITEMS\n\tlocal renderedEntries = 0\n\tfor i, thing in pairs(containerItems) do\n\t\tlocal thingRecord = thing.type.records[thing.recordId]\n\t\tif not thingRecord then\n\t\t\tui.showMessage(\"ERROR: no record for \"..thing.id..\" (please report this bug)\")\n\t\telseif i >=scrollPos and renderedEntries < maxItems then\n\t\t\trenderedEntries = renderedEntries + 1\n\t\t\tlocal thingName =  thingRecord.name or thing.id\n\t\t\t--thingName= fromutf8(thingName)\n\t\t\t--print(thingName)\n\t\t\tlocal icon = thingRecord.icon\n\t\t\tlocal thingCount = thing.count or 1\n\t\t\tlocal countText = thingCount > 1 and \" (\"..thing.count..\")\" or \"\"\n\t\t\tif i == selectedIndex then\n\t\t\t\t-- SELECTION HIGHLIGHT\n\t\t\t\ttable.insert(itemHud.content, {\n\t\t\t\t\ttype = ui.TYPE.Image,\n\t\t\t\t\tprops = {\n\t\t\t\t\t\tresource = white,\n\t\t\t\t\t\ttileH = false,\n\t\t\t\t\t\ttileV = false,\n\t\t\t\t\t\trelativeSize  = v2(highlightWidth,lineHeight),--+margin/2),\n\t\t\t\t\t\trelativePosition = v2(0,relativePosition),\n\t\t\t\t\t\tposition = v2(borderOffset,0),\n\t\t\t\t\t\t--size = v2(-2,-2),\n\t\t\t\t\t\tsize = v2(highlightWidthAbs,0),\n\t\t\t\t\t\talpha = 0.3,\n\t\t\t\t\t\tcolor = playerSection:get(\"ICON_TINT\"),\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\tend\n\t\t\tlocal ench = thing and (thing.enchant or thingRecord.enchant ~= \"\" and thingRecord.enchant )\n\t\t\tif icon then\n\t\t\t\tif ench then \n\t\t\t\t\t--ENCHANT ICON\n\t\t\t\t\ttable.insert(itemHud.content, {\n\t\t\t\t\t\ttype = ui.TYPE.Image,\n\t\t\t\t\t\tprops = {\n\t\t\t\t\t\t\tresource = getTexture(\"textures\\\\menu_icon_magic_mini.dds\"),\n\t\t\t\t\t\t\ttileH = false,\n\t\t\t\t\t\t\ttileV = false,\n\t\t\t\t\t\t\trelativeSize  = v2(lineHeight/itemHudAspectRatio,lineHeight),\n\t\t\t\t\t\t\trelativePosition = v2(0.01,relativePosition),\n\t\t\t\t\t\t\t--position = v2(1,1),\n\t\t\t\t\t\t\t--size = v2(-2,-2),\n\t\t\t\t\t\t\talpha = 0.7,\n\t\t\t\t\t\t}\n\t\t\t\t\t})\t\t\t\n\t\t\t\tend\n\t\t\t\t-- ITEM ICON\n\t\t\t\ttable.insert(itemHud.content, {\n\t\t\t\t\ttype = ui.TYPE.Image,\n\t\t\t\t\tprops = {\n\t\t\t\t\t\tresource = getTexture(icon),\n\t\t\t\t\t\ttileH = false,\n\t\t\t\t\t\ttileV = false,\n\t\t\t\t\t\trelativeSize  = v2(lineHeight/itemHudAspectRatio,lineHeight),\n\t\t\t\t\t\trelativePosition = v2(0.01,relativePosition+lineHeight),\n\t\t\t\t\t\tanchor = v2(0,1),\n\t\t\t\t\t\talpha = 0.7,\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\tend\n\t\t\t\n\t\t\tlocal readItem = \"\"\n\t\t\tif not ench and thing.itemRecordId ~=\"sc_paper plain\" and playerSection:get(\"READ_BOOKS\") ~= \"off\" and thing.type == types.Book then\n\t\t\t\tif playerSection:get(\"READ_BOOKS\") == \"read\" then\n\t\t\t\t\treadItem = bookSection:get(thing.recordId) and \" \"..(not playerSection:get(\"FONT_FIX\") and hextoutf8(0xd83d) or \"\") or \"\"\n\t\t\t\telse\n\t\t\t\t\treadItem = not bookSection:get(thing.recordId) and \" \"..(not playerSection:get(\"FONT_FIX\") and hextoutf8(0xd83d) or \"\") or \"\"\n\t\t\t\tend\n\t\t\tend\n\t\t\t-- ITEM NAME + COUNT\n\t\t\ttable.insert(itemHud.content, { \n\t\t\t\ttype = ui.TYPE.Text,\n\t\t\t\ttemplate = quickLootText,\n\t\t\t\tprops = {\n\t\t\t\t\ttext = \"\"..thingName..countText..readItem,--..hextoutf8(0xd83d)..hextoutf8(0xd83e),--thingName..countText,\n\t\t\t\t\ttextSize = itemFontSize*textSizeMult,--itemFontSize*textSizeMult,\n\t\t\t\t\t\n\t\t\t\t\trelativeSize  = v2(entryWidth,lineHeight),\n\t\t\t\t\trelativePosition = v2(itemNameX, relativePosition+lineHeight/2),\n\t\t\t\t\tanchor = v2(0,0.5),\n\t\t\t\t},\n\t\t\t\t})\n\t\t\tlocal widgetOffset = 0.05 --scrollbar\n\t\t\tlocal thingValue = thingRecord.value\n\t\t\tlocal thingWeight = thingRecord.weight\n\t\t\tfor _, widget in pairs(widgets) do\n\t\t\t\tlocal text = math.floor(thingValue*10)/10\n\t\t\t\tlocal textColor = nil\n\t\t\t\tif widget == \"valueByWeight\" then\n\t\t\t\t\ttext = (math.floor(thingValue/thingWeight*10+0.5)/10)\n\t\t\t\telseif widget == \"weight\" then\n\t\t\t\t\ttext = math.floor(thingWeight*10+0.5)/10\n\t\t\t\t\tif thingWeight+encumbranceCurrent > encumbranceMax then\n\t\t\t\t\t\ttextColor = util.color.rgb(0.85,0, 0)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tif text >99 or text > 1.2 and (text%1 <=0.1 or text%1 >=0.9) then\n\t\t\t\t\ttext = math.floor(text)\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif text == 1/0 then\n\t\t\t\t\tif not playerSection:get(\"FONT_FIX\") then\n\t\t\t\t\t\ttext = hextoutf8(0x221e)\n\t\t\t\t\tend\n\t\t\t\telseif text >= 10^6-100 then --1m\n\t\t\t\t\ttext = text/1000--*1.005/1000\n\t\t\t\t\tlocal e = math.floor(math.log10(text))\n\t\t\t\t\ttext = text + 10^e*1.005-10^e\n\t\t\t\t\tlocal suffixes = {\"K\",\"M\",\"G\",\"T\",\"P\",\"E\",\"Z\"}\n\t\t\t\t\tlocal i = 1\n\t\t\t\t\twhile text >= 1000 do\n\t\t\t\t\t\ttext = text/1000\n\t\t\t\t\t\ti=i+1\n\t\t\t\t\tend\n\t\t\t\t\t--text = string.format(\"%.2f\",text)\n\t\t\t\t\ttext = math.floor(text*100)/100 -- control rounding instead of string format\n\t\t\t\t\ttext = string.format(\"%.2f\",text)\n\t\t\t\t\tif #text == 6 then\n\t\t\t\t\t\ttext=text:sub(1,3)\n\t\t\t\t\telse\n\t\t\t\t\t\ttext = text:sub(1,4)\n\t\t\t\t\tend\n\t\t\t\t\ttext = text..\" \"..suffixes[i]\n\t\t\t\telseif text >= 1000 then\n\t\t\t\t\ttext = math.floor(text/1000)..(playerSection:get(\"FONT_FIX\") and hextoutf8(0x200a)..hextoutf8(0x200a) or \"\")..string.format(\"%.3f\",math.floor((text%1000)/1000)):sub(3)\n\t\t\t\tend\n\t\t\t\ttext = \"\"..text\n\t\t\t\t\n\t\t\t\tlocal tempSize = v2(1.1*itemBoxHeaderFooterHeight,lineHeight)\n\t\t\t\ttable.insert(itemHud.content, {\n\t\t\t\t\ttype = ui.TYPE.Text,\n\t\t\t\t\ttemplate = quickLootText,\n\t\t\t\t\tprops = {\n\t\t\t\t\t\ttext = text,\n\t\t\t\t\t\ttextSize = itemFontSize*textSizeMult,\n\t\t\t\t\t\trelativeSize  = tempSize,\n\t\t\t\t\t\trelativePosition = v2(1-widgetOffset, relativePosition+lineHeight/2),\n\t\t\t\t\t\tanchor = v2(1,0.5),\n\t\t\t\t\t\ttextColor = textColor,\n\t\t\t\t\t},\n\t\t\t\t})\n\t\t\t\twidgetOffset =widgetOffset+ math.max(0.12,0.105*textSizeMult)\n\t\t\tend\n\t\t\trelativePosition = relativePosition + lineHeight+margin\n\t\tend\n\t\t\n\tend\n\t--itemList FOOTER Line\n\ttable.insert(itemHud.content,\n\t{\n\t\ttype = ui.TYPE.Image,\n\t\tprops = {\n\t\t\tresource = getTexture(\"textures/menu_thin_border_bottom.dds\"),\n\t\t\ttileH = false,\n\t\t\ttileV = false,\n\t\t\trelativeSize  = v2(1,0),\n\t\t\tsize = v2(-borderOffset*2,1),\n\t\t\tposition = v2(borderOffset,0),\n\t\t\trelativePosition = v2(0, 1-itemBoxHeaderFooterHeight),\n\t\t\talpha = 0.4,\n\t\t}\n\t})\n\t--itemList FOOTER Background\n\ttable.insert(itemHud.content,\n\t{\n\t\ttype = ui.TYPE.Image,\n\t\tprops = {\n\t\t\tresource = background,\n\t\t\ttileH = false,\n\t\t\ttileV = false,\n\t\t\trelativeSize  = v2(1,itemBoxHeaderFooterHeight),\n\t\t\tsize = v2(-borderOffset*2,-borderOffset-1),\n\t\t\tposition = v2(borderOffset,1),\n\t\t\trelativePosition = v2(0, 1-itemBoxHeaderFooterHeight),\n\t\t\talpha = 0.4,\n\t\t}\n\t})\n\t\n\tlocal encumbranceColor = playerSection:get(\"FONT_TINT\")\n\tlocal encumbranceIconColor = playerSection:get(\"ICON_TINT\")\n\tif encumbranceCurrent > encumbranceMax then\n\t\tencumbranceColor = util.color.rgb(0.85,0, 0)\n\t\tencumbranceIconColor = util.color.rgb(1,0, 0)\n\tend\n\t--itemList Footer ENCUMBRANCE ICON\n\ttable.insert(itemHud.content,{\n\t\ttype = ui.TYPE.Image,\n\t\tprops = {\n\t\t\tresource = backpackTex,\n\t\t\ttileH = false,\n\t\t\ttileV = false,\n\t\t\trelativeSize  = v2(itemBoxHeaderFooterHeight*1.05/itemHudAspectRatio,itemBoxHeaderFooterHeight*1.0), --1.05 stretch\n\t\t\trelativePosition = v2(1-0.005, 1-itemBoxHeaderFooterHeight/2),\n\t\t\tposition = v2(0,0),\n\t\t\tanchor = v2(0,0),\n\t\t\talpha = 0.5,\n\t\t\tanchor = v2(1,0.5),\n\t\t\tcolor = encumbranceIconColor,\n\t\t}\n\t})\n\t\n\t--itemList Footer ENCUMBRANCE TEXT\n\ttable.insert(itemHud.content,{\n\t\ttype = ui.TYPE.Text,\n\t\ttemplate = quickLootText,\n\t\tprops = {\n\t\t\ttext = \"\"..math.floor(encumbranceCurrent+0.5).. \"/\"..math.floor(encumbranceMax+0.5),\n\t\t\ttextSize= 20*textSizeMult,\n\t\t\tposition = v2(0, 0),\n\t\t\trelativeSize  = v2(1,itemBoxHeaderFooterHeight),\n\t\t\trelativePosition = v2(0.985-itemBoxHeaderFooterHeight*1.05/itemHudAspectRatio, 1-itemBoxHeaderFooterHeight/2),\n\t\t\tanchor = v2(1,0.5),\n\t\t\ttextColor = encumbranceColor,\n\t\t},\n\t})\n\t\n\t\n\tif playerSection:get(\"FOOTER_HINTS\") ~= \"Disabled\" then\n\t\tlocal fTex = fKeyTex\n\t\tlocal rTex = rKeyTex\n\t\tif playerSection:get(\"FOOTER_HINTS\") == \"Symbolic\" then\n\t\t\tfTex = fSymbolicTex\n\t\t    rTex = rSymbolicTex\n\t\tend\t\n\t\t\t\n\t\t--SUB-FOOTER ICON Right\n\t\ttable.insert(hud.layout.content,{\n\t\t\ttype = ui.TYPE.Image,\n\t\t\tprops = {\n\t\t\t\tresource = fTex,\n\t\t\t\ttileH = false,\n\t\t\t\ttileV = false,\n\t\t\t\trelativeSize  = v2(headerFooterHeight*0.8/(uiSize.x/uiSize.y),headerFooterHeight*0.8),\n\t\t\t\trelativePosition = v2(0.505,1-headerFooterHeight/2),\n\t\t\t\tanchor = v2(0,0.5),\n\t\t\t\talpha = 0.6,\n\t\t\t\tcolor = playerSection:get(\"ICON_TINT\"),\n\t\t\t\t\n\t\t\t}\n\t\t})\n\t\t--SUB-FOOTER TEXT Right\n\t\ttable.insert(hud.layout.content,{\n\t\t\ttype = ui.TYPE.Text,\n\t\t\ttemplate = quickLootText,\n\t\t\tprops = {\n\t\t\t\ttext = \"Take All\",\n\t\t\t\ttextSize= 20*textSizeMult,\n\t\t\t\tposition = v2(0, 0),\n\t\t\t\trelativeSize  = v2(1,headerFooterHeight),\n\t\t\t\trelativePosition = v2(0.508+headerFooterHeight*0.8/(uiSize.x/uiSize.y),1-headerFooterHeight/2+0.0015),\n\t\t\t\ttextColor = playerSection:get(\"ICON_TINT\"),\n\t\t\t\tanchor = v2(0,0.5),\n\t\t\t},\t})\n\t\t\n\t\t--SUB-FOOTER ICON Left\n\t\ttable.insert(hud.layout.content,{\n\t\t\ttype = ui.TYPE.Image,\n\t\t\tprops = {\n\t\t\t\tresource = rTex,\n\t\t\t\ttileH = false,\n\t\t\t\ttileV = false,\n\t\t\t\trelativeSize  = v2(headerFooterHeight*0.8/(uiSize.x/uiSize.y),headerFooterHeight*0.8),\n\t\t\t\trelativePosition = v2(0.495,1-headerFooterHeight/2),\n\t\t\t\tanchor = v2(1,0.5),\n\t\t\t\talpha = 0.6,\n\t\t\t\tcolor = playerSection:get(\"ICON_TINT\"),\n\t\t\t}\n\t\t})\n\t\t--SUB-FOOTER TEXT Left\n\t\ttable.insert(hud.layout.content,{\n\t\t\ttype = ui.TYPE.Text,\n\t\t\ttemplate = quickLootText,\n\t\t\tprops = {\n\t\t\t\ttext = \"Search\",\n\t\t\t\ttextSize= 20*textSizeMult,\n\t\t\t\ttextAlignH = ui.ALIGNMENT.End,\n\t\t\t\trelativeSize  = v2(1,headerFooterHeight),\n\t\t\t\trelativePosition = v2(0.493-headerFooterHeight*0.8/(uiSize.x/uiSize.y),1-headerFooterHeight/2+0.0015),\n\t\t\t\tanchor = v2(1,0.5),\n\t\t\t\ttextColor = playerSection:get(\"ICON_TINT\"),\n\t\t\t},})\n\tend\n\t--hud:update()\n\t\nend\n\nfunction closeHud()\n\tif inspectedContainer then\n\t\tinspectedContainer:sendEvent(\"OwnlysQuickLoot_closeAnimation\",self)\n\t\tinspectedContainer = nil\n\t\tControls.overrideCombatControls(false)\n\t\ttypes.Player.setControlSwitch(self, types.Player.CONTROL_SWITCH.Magic, true) \n\t\ttypes.Player.setControlSwitch(self, types.Player.CONTROL_SWITCH.Fighting, true)\n\t\tCamera.enableZoom(\"quickloot\")\n\t\tlastItemCount = 99999999\n\t\tif hud then \n\t\t\thud:destroy() \n\t\tend\n\tend\nend\n\n\n\nfunction onFrame(dt)\n\tif inspectedContainer and  core.contentFiles.has(\"QuickSpellCast.omwscripts\")  and types.Actor.getStance(self) == types.Actor.STANCE.Spell then\n\t\ttypes.Actor.setStance(self, types.Actor.STANCE.Nothing)\n\tend\n\t\n --self.controls.use = 0\n\tif not modEnabled then\n\t\treturn\n\tend\n\tif I.UI.getMode() and not showInMainMenuOverride then\n\t\treturn\n\tend\n\tif playerSection:get(\"CONTAINER_ANIMATION\") == \"disabled by shift\" then\n\t\tlocal newShiftPressed = input.isShiftPressed()\n\t\tif shiftPressed ~= newShiftPressed then\n\t\t\tif inspectedContainer then\n\t\t\t\tif newShiftPressed then\n\t\t\t\t\tinspectedContainer:sendEvent(\"OwnlysQuickLoot_closeAnimation\",self)\n\t\t\t\telse\n\t\t\t\t\tinspectedContainer:sendEvent(\"OwnlysQuickLoot_openAnimation\",self)\n\t\t\t\tend\n\t\t\tend\n\t\tend\t\t\n\t\tshiftPressed = newShiftPressed\n\tend\n\tlocal camera = require('openmw.camera')\n\tlocal cameraPos = camera.getPosition()\n\tlocal iMaxActivateDist = core.getGMST(\"iMaxActivateDist\")+0.1\n\tlocal activationDistance = iMaxActivateDist + camera.getThirdPersonDistance();\n\tlocal telekinesis = types.Actor.activeEffects(self):getEffect(core.magic.EFFECT_TYPE.Telekinesis);\n\tif (telekinesis) then\n\t\tactivationDistance = activationDistance + (telekinesis.magnitude * 22);\n\tend\n\tactivationDistance = activationDistance+0.1\n\tlocal res = nearby.castRenderingRay(\n\t\tcameraPos,\n\t\tcameraPos + camera.viewportToWorldVector(v2(0.5,0.5)) * activationDistance,\n\t\t{ ignore = self }\n\t)\n\t\n\tif inspectedContainer and (res.hitObject == nil or res.hitObject ~= inspectedContainer) then\n\t\tcloseHud()\n\telseif inspectedContainer and types.Actor.getEncumbrance(self) ~= encumbranceCurrent then\n\t\tdrawUI()\n\tend\n\t\n\tif not inspectedContainer \n\tand res.hitObject \n\tand (\n\t\t\tres.hitObject.type == types.Container\n\t\t\tand (not types.Container.record(res.hitObject).isOrganic or organicContainers[res.hitObject.recordId])\n\t\tor ((\n\t\t\t\tres.hitObject.type == types.NPC\n\t\t\t\tor res.hitObject.type == types.Creature\n\t\t\t)\n\t\t\tand types.Actor.isDead(res.hitObject)\n\t\t)\n\t)\t\n\tand not types.Lockable.isLocked(res.hitObject)\n\tand not types.Lockable.getTrapSpell(res.hitObject)\n\tthen\n\t\tif not types.Container.inventory(res.hitObject):isResolved() then\n\t\t\tcore.sendGlobalEvent(\"OwnlysQuickLoot_resolve\",res.hitObject)\n\t\telse\n\t\t\tinspectedContainer = res.hitObject\n\t\t\tControls.overrideCombatControls(true)\n\t\t\ttypes.Player.setControlSwitch(self, types.Player.CONTROL_SWITCH.Magic, false) \n\t\t\ttypes.Player.setControlSwitch(self, types.Player.CONTROL_SWITCH.Fighting, false)\n\t\t\tCamera.disableZoom(\"quickloot\")\n\t\t\tif playerSection:get(\"CONTAINER_ANIMATION\") == \"immediately\" or playerSection:get(\"CONTAINER_ANIMATION\") == \"disabled by shift\" and not input.isShiftPressed() then\n\t\t\t\tinspectedContainer:sendEvent(\"OwnlysQuickLoot_openAnimation\",self)\n\t\t\tend\n\t\t\tselectedIndex = 1\n\t\tend\n\tend\n\tif inspectedContainer then\n\t\tlocal itemCount = 0\n\t\tlocal entryCount = 0\n\t\tfor _, thing in pairs(types.Container.inventory(inspectedContainer):getAll()) do\n\t\t\titemCount = itemCount + thing.count\n\t\t\tentryCount = entryCount + 1\n\t\tend\n\t\tif entryCount < selectedIndex then\n\t\t\tselectedIndex = entryCount\n\t\tend\n\t\t\n\t\t\n\t\tif lastItemCount ~= itemCount then\n\t\t\tdrawUI()\n\t\tend\n\t\t\n\t\tlastItemCount = itemCount\n\tend\nend\n\nlocal function onKey(key)\n\tif not modEnabled then\n\t\treturn\n\tend\n\t--print(key)\n\t--print(core.getRealTime() - OPENED_TIMESTAMP)\n\t--if inspectedContainer and key.code == TAKEALL_KEYBINDING then\n\t--\tcore.sendGlobalEvent(\"OwnlysQuickLoot_takeAll\",{self, inspectedContainer})\n\t--end\n\t--return false\nend\nlocal function onMouseWheel(vertical)\n\tif not modEnabled then\n\t\treturn\n\tend\n\t--print(vertical)\n\tif inspectedContainer then\n\t\t--local newIndex = math.min(#containerItems,math.max(1,selectedIndex - vertical))\n\t\tlocal newIndex = selectedIndex - vertical\n\t\tif newIndex == 0 then\n\t\t\tnewIndex = #containerItems\n\t\telseif newIndex > #containerItems then\n\t\t\tnewIndex = 1\n\t\tend\n\t\tif selectedIndex ~= newIndex then\n\t\t\tselectedIndex = newIndex\n\t\t\tbackupSelectedIndex = newIndex\n\t\t\tdrawUI()\n\t\tend\n\tend\nend\n\nfunction onControllerButtonPress (ctrl)\n\tif not modEnabled then\n\t\treturn\n\tend\n\tif inspectedContainer then\n\t\tlocal newIndex = selectedIndex\n\t\tif ctrl == input.CONTROLLER_BUTTON.DPadDown then\n\t\t\tnewIndex = selectedIndex + 1\n\t\telseif ctrl == input.CONTROLLER_BUTTON.DPadUp then\n\t\t\tnewIndex = selectedIndex - 1\n\t\tend\n\t\tif newIndex == 0 then\n\t\t\tnewIndex = #containerItems\n\t\telseif newIndex > #containerItems then\n\t\t\tnewIndex = 1\n\t\tend\n\t\tif selectedIndex ~= newIndex then\n\t\t\tselectedIndex = newIndex\n\t\t\tbackupSelectedIndex = newIndex\n\t\t\tdrawUI()\n\t\tend\n\tend\nend\n\n\nlocal function activatedContainer(cont)\n\tif not modEnabled then\n\t\treturn\n\tend\n\t--print(inspectedContainer,cont)\n\tif inspectedContainer == cont then\n\t\tif containerItems[selectedIndex] then\n\t\t\tcore.sendGlobalEvent(\"OwnlysQuickLoot_take\",{self, cont, containerItems[selectedIndex]})\n\t\t\tif playerSection:get(\"CONTAINER_ANIMATION\") == \"on take\" then\n\t\t\t\tinspectedContainer:sendEvent(\"OwnlysQuickLoot_openAnimation\",self)\n\t\t\tend\n\t\tend\n\tend\nend\n\nlocal function UiModeChanged(data)\n\tif data.newMode == \"Book\" or data.newMode == \"Scroll\" then\n\t\t--print(data.oldMode,data.newMode, data.arg.recordId)\n\t\t--local readBooks = bookSection:get(\"ReadBooks\") \n\t\t--readBooks = shallowcopy(readBooks)\n\t\t--bookSection:get(\"ReadBooks\")\n\t\t--readBooks[data.arg.recordId] = true\n\t\tbookSection:set(data.arg.recordId, true)\n\tend\n\tif not modEnabled then\n\t\treturn\n\tend\n\tif data.newMode then\n\t\tcloseHud()\n\telse\n\t--print(data.arg)\n\tend\n\tshowInMainMenuOverride = false\nend\nlocal function onLoad()\nupdateModEnabled()\nend\nlocal function fellForTrap(arg)\n\n\tif I.UI.getMode() then\n\t\tI.UI.setMode()\n\tend\nend\n\nlocal function toggle(onOff,uniqueFlag)\n\tmodDisableFlags[uniqueFlag] = onOff\n\tupdateModEnabled()\nend\n\nlocal function windowVisible()\n\tif inspectedContainer then\n\t\treturn true\n\tend\n\treturn false\nend\n\n\n\nreturn {    \n\teventHandlers = {\n\t\tUiModeChanged = UiModeChanged,\n\t\tOwnlysQuickLoot_activatedContainer = activatedContainer,\n\t\tOwnlysQuickLoot_fellForTrap = fellForTrap,\n\t\tOwnlysQuickLoot_windowVisible = windowVisible,\n\t\tOwnlysQuickLoot_toggle = toggle, -- toggle(<true/false>, \"myModName\")\n\t},\n\tengineHandlers = {\n\t\tonFrame = onFrame,\n\t\tonUpdate = onUpdate,\n\t\tonKeyPress = onKey,\n\t\tonMouseWheel = onMouseWheel,\n\t\tonLoad = onLoad,\n\t\tonControllerButtonPress = onControllerButtonPress,\n    },\n\t--eventHandlers = {\n    --    FHB_AI_update = AI_update,\n    --}\n}",
    "QuickLoot-54950-1-5-1723820244\\QuickLoot\\scripts\\OwnlysQuickLoot\\ql_settings.lua": "local function getColorFromGameSettings(colorTag)\n    local result = core.getGMST(colorTag)\n\tif not result then\n\t\treturn util.color.rgb(1,1,1)\n\tend\n    local rgb = {}\n    for color in string.gmatch(result, '(%d+)') do\n        table.insert(rgb, tonumber(color))\n    end\n    if #rgb ~= 3 then\n        print(\"UNEXPECTED COLOR: rgb of size=\", #rgb)\n        return util.color.rgb(1, 1, 1)\n    end\n    return util.color.rgb(rgb[1] / 255, rgb[2] / 255, rgb[3] / 255)\nend\n\nsettings = {\n    key = 'SettingsPlayer'..MODNAME,\n    page = MODNAME,\n    l10n = \"QuickLoot\",\n    name = \"QuickLoot\",\n\tdescription = \"\",\n    permanentStorage = true,\n    settings = {\n\t\t{\n\t\t\tkey = \"ENABLED\",\n\t\t\tname = \"Enabled\",\n\t\t\tdescription = \"Allows disabling the mod entirely\",\n\t\t\trenderer = \"checkbox\",\n\t\t\tdefault = true,\n\t\t},\n\t\t{\n\t\t\tkey = \"CONTAINER_ANIMATION\",\n\t\t\tname = \"Container Animation\",\n\t\t\tdescription = \"For 'Animated Containers' \\nCan make looting stuff on top of containers more difficult\\nIf it doesn't work, your OpenMW version might not be recent enough\",\n\t\t\tdefault = \"immediately\", \n\t\t\trenderer = \"select\",\n\t\t\targument = {\n\t\t\t\tdisabled = false,\n\t\t\t\tl10n = \"LocalizationContext\", \n\t\t\t\titems = {\"off\", \"immediately\", \"on take\", \"disabled by shift\"},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tkey = \"WIDTH\",\n\t\t\tname = \"Width (%)\",\n\t\t\tdescription = \"of the ui element (1-100)\",\n\t\t\trenderer = \"number\",\n\t\t\tdefault = 25,\n\t\t\targument = {\n\t\t\t\tmin = 1,\n\t\t\t\tmax = 100,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tkey = \"HEIGHT\",\n\t\t\tname = \"Height (%)\",\n\t\t\tdescription = \"of the ui element (1-100)\",\n\t\t\trenderer = \"number\",\n\t\t\tdefault = 40,\n\t\t\targument = {\n\t\t\t\tmin = 1,\n\t\t\t\tmax = 100,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tkey = \"X\",\n\t\t\tname = \"X Position (%)\",\n\t\t\tdescription = \"Location of the center (1-100)\",\n\t\t\trenderer = \"number\",\n\t\t\tdefault = 75,\n\t\t\targument = {\n\t\t\t\tmin = 1,\n\t\t\t\tmax = 100,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tkey = \"Y\",\n\t\t\tname = \"Y Position (%)\",\n\t\t\tdescription = \"Location of the center (1-100)\",\n\t\t\trenderer = \"number\",\n\t\t\tdefault = 50,\n\t\t\targument = {\n\t\t\t\tmin = 1,\n\t\t\t\tmax = 100,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tkey = \"textSizeMult\",\n\t\t\tname = \"textSizeMult (%)\",\n\t\t\tdescription = \"1-200\",\n\t\t\trenderer = \"number\",\n\t\t\tdefault = 90,\n\t\t\targument = {\n\t\t\t\tmin = 1,\n\t\t\t\tmax = 200,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tkey = \"FOOTER_HINTS\",\n\t\t\tname = \"Keybinding Hints\",\n\t\t\tdescription = \"shows the keybinding hints for 'Take All' and 'Search'\",\n\t\t\tdefault = \"Symbolic\", \n\t\t\trenderer = \"select\",\n\t\t\targument = {\n\t\t\t\tdisabled = false,\n\t\t\t\tl10n = \"LocalizationContext\", \n\t\t\t\titems = {\"Disabled\", \"Symbolic\", \"F / R\"},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tkey = \"CONTAINER_SORTING_STATS\",\n\t\t\tname = \"Item Sorting by Weight/ Value\",\n\t\t\tdescription = \"Changes the order of icons in containers\",\n\t\t\tdefault = \"Best W/V\", \n\t\t\trenderer = \"select\",\n\t\t\targument = {\n\t\t\t\tdisabled = false,\n\t\t\t\tl10n = \"LocalizationContext\", \n\t\t\t\titems = {\"Vanilla\", \"Lowest Weight\", \"Highest Value\", \"Best W/V\"},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tkey = \"CONTAINER_SORTING_CASH\",\n\t\t\tname = \"Sorting: Cash On Top\",\n\t\t\tdescription = \"\",\n\t\t\trenderer = \"checkbox\",\n\t\t\tdefault = true\n\t\t},\n\t\t{\n\t\t\tkey = \"CONTAINER_SORTING_KEYS\",\n\t\t\tname = \"Sorting: Keys On Top\",\n\t\t\tdescription = \"\",\n\t\t\trenderer = \"checkbox\",\n\t\t\tdefault = true\n\t\t},\n\t\t{\n\t\t\tkey = \"CONTAINER_SORTING_LOCKPICKS\",\n\t\t\tname = \"Sorting: Lockpicks On Top\",\n\t\t\tdescription = \"\",\n\t\t\trenderer = \"checkbox\",\n\t\t\tdefault = true\n\t\t},\n\t\t{\n\t\t\tkey = \"CONTAINER_SORTING_SOULGEMS\",\n\t\t\tname = \"Sorting: Soulgems On Top\",\n\t\t\tdescription = \"\",\n\t\t\trenderer = \"checkbox\",\n\t\t\tdefault = true\n\t\t},\n\t\t{\n\t\t\tkey = \"CONTAINER_SORTING_INGREDIENTS\",\n\t\t\tname = \"Sorting: Ingredients below weight...\",\n\t\t\tdescription = \"0 = Disable\",\n\t\t\trenderer = \"number\",\n\t\t\tdefault = 1.5,\n\t\t\targument = {\n\t\t\t\tmin = 0,\n\t\t\t\tmax = 200,\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tkey = \"CONTAINER_SORTING_REPAIR\",\n\t\t\tname = \"Sorting: Repair Tools On Top\",\n\t\t\tdescription = \"\",\n\t\t\trenderer = \"checkbox\",\n\t\t\tdefault = true\n\t\t},\n\t\t\n\t\t{\n\t\t\tkey = \"COLUMN_WEIGHT\",\n\t\t\tname = \"Show Weight Column\",\n\t\t\tdescription = \"\",\n\t\t\trenderer = \"checkbox\",\n\t\t\tdefault = true\n\t\t},\n\t\t{\n\t\t\tkey = \"COLUMN_VALUE\",\n\t\t\tname = \"Show Value Column\",\n\t\t\tdescription = \"\",\n\t\t\trenderer = \"checkbox\",\n\t\t\tdefault = true\n\t\t},\n\t\t{\n\t\t\tkey = \"COLUMN_WV\",\n\t\t\tname = \"Show W/V Column\",\n\t\t\tdescription = \"\",\n\t\t\trenderer = \"checkbox\",\n\t\t\tdefault = true\n\t\t},\n\t\t{\n\t\t\tkey = \"BORDER_STYLE\",\n\t\t\tname = \"Border style\",\n\t\t\tdescription = \"\",\n\t\t\tdefault = \"thin\", \n\t\t\trenderer = \"select\",\n\t\t\targument = {\n\t\t\t\tdisabled = false,\n\t\t\t\tl10n = \"LocalizationContext\", \n\t\t\t\titems = {\"none\", \"thin\", \"normal\", \"thick\", \"verythick\"}--,\"stylized 1\", \"stylized 2\", \"stylized 3\", \"stylized 4\"},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tkey = \"READ_BOOKS\",\n\t\t\tname = \"Show read books\",\n\t\t\tdescription = \"doesn't work with the font fix below\",\n\t\t\tdefault = \"read\", \n\t\t\trenderer = \"select\",\n\t\t\targument = {\n\t\t\t\tdisabled = false,\n\t\t\t\tl10n = \"LocalizationContext\", \n\t\t\t\titems = {\"off\", \"unread\", \"read\"}--,\"stylized 1\", \"stylized 2\", \"stylized 3\", \"stylized 4\"},\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\tkey = \"FONT_TINT\",\n\t\t\tname = \"Font Color\",\n\t\t\tdescription = \"\",\n\t\t\tdisabled = false,\n\t\t\tdefault = getColorFromGameSettings(\"FontColor_color_normal\"), --green\n\t\t\trenderer = \"color\",\n\t\t},\n\t\t{\n\t\t\tkey = \"ICON_TINT\",\n\t\t\tname = \"Icon Tint\",\n\t\t\tdescription = \"\",\n\t\t\tdisabled = false,\n\t\t\tdefault = getColorFromGameSettings(\"FontColor_color_normal_over\"), --green\n\t\t\trenderer = \"color\",\n\t\t},\n\t\t{\n\t\t\tkey = \"FONT_FIX\",\n\t\t\tname = \"Fix buggy font\",\n\t\t\tdescription = \"If you see boxes or questionmarks where there should be numbers, enable this setting to disable reliance on the included font\",\n\t\t\trenderer = \"checkbox\",\n\t\t\tdefault = false\n\t\t},\n\t}\n}\n\n\n\n\nlocal function updateSettings()\n\tshowInMainMenuOverride = true\n\tuiLoc = v2(playerSection:get(\"X\")/100,playerSection:get(\"Y\")/100)\n\tuiSize = v2(playerSection:get(\"WIDTH\")/100,playerSection:get(\"HEIGHT\")/100)\n\tcloseHud()\n\t--core.sendGlobalEvent(\"OwnlysQuickLoot_playerToggledMod\",{self,playerSection:get(\"ENABLED\")})\n\tupdateModEnabled()\n\tquickLootText = {\n\tprops = {\n\t\t\ttextColor = playerSection:get(\"FONT_TINT\"),--util.color.rgba(1, 1, 1, 1),\n\t\t\ttextShadow = true,\n\t\t\ttextShadowColor = util.color.rgba(0,0,0,0.75),\n\t\t\t--textAlignV = ui.ALIGNMENT.Center,\n\t\t\t--textAlignH = ui.ALIGNMENT.Center,\n\t}\n}\n\t--calculateBarPositions()\n\t--if container then\n\t--\tcontainer:destroy()\n\t--end\n\t--container = nil\n\t----makeUI()\nend\n\n\nI.Settings.registerGroup(settings)\n\n\nI.Settings.registerPage {\n    key = MODNAME,\n    l10n = \"QuickLoot\",\n    name = \"QuickLoot\",\n    description = \"If you're aiming at a container, a preview will appear as soon as you change a setting\"\n}\n\n\nplayerSection:subscribe(async:callback(updateSettings))\nreturn true"
  }
}