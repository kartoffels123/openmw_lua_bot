{
  "folder_name": "Smooth Master Index",
  "lua_files": {
    "BMI fix-52991-1-5-1-1704499476\\MWSE\\mods\\SmoothMasterIndex\\BMI_swap.lua": "ZackBridge = require(\"SmoothMasterIndex.scripts.SmoothMasterIndex.zackbridge\")\nlocal function teleport(ob, pos, rot)\n    tes3.positionCell({\n        reference  = ob,\n        cell = ob.cell,\n        position = pos,\n        orientation = rot\n    })\nend\nlocal function swapObjects(obx1, obx2)\n    local ob1Pos =ZackBridge.vector3(  obx1.position.x,obx1.position.y,obx1.position.z)\n    local ob1Rot =ZackBridge.vector3(  obx1.orientation.x,obx1.orientation.y,obx1.orientation.z)\n    local ob2Pos =ZackBridge.vector3(  obx2.position.x,obx2.position.y,obx2.position.z)\n    local ob2Rot =ZackBridge.vector3(  obx2.orientation.x,obx2.orientation.y,obx2.orientation.z)\n    teleport(obx1, ob2Pos, ob2Rot)\n    teleport(obx2, ob1Pos, ob1Rot)\nend\nlocal function findObjectInCell(cellName, obId, type)\n    local cell = ZackBridge.getCell(cellName)\n\n    for index, value in ipairs(ZackBridge.getObjectsInCell(cell, type)) do\n        if (value.id:lower() == obId) then return value end\n    end\nend\nlocal function getRecord(id) return tes3.getObject(id) end\nlocal function placeIfNotFound(objectId, cellName, position)\n    local record = (getRecord(objectId))\n    if (record == nil) then return nil end\n    local cell = ZackBridge.getCell(cellName)\n    for index, value in ipairs(\n                            ZackBridge.getObjectsInCell(cell, \"Miscellaneous\")) do\n        if (value.id:lower() == objectId:lower()) then return nil end\n    end\n    print(\"Placing \".. objectId)\n    local newOb = tes3.createReference({\n        object = objectId,\n        position = position,\n        cell = cellName,\n        orientation = ZackBridge.vector3(0, 0, 0)\n    })\n\n    return newOb\nend\nlocal function placeOrb()\n    local ret = {}\n    table.insert(ret,\n                 placeIfNotFound(\"t_com_crystalball_01\",\n                                 \"Caldera, Guild of Mages\",\n                                 ZackBridge.vector3(793.762, 570.143, 232.457)))\n    table.insert(ret,\n                 placeIfNotFound(\"t_com_crystalballstand_01\",\n                                 \"Caldera, Guild of Mages\",\n                                 ZackBridge.vector3(793.762, 570.143, 232.457)))\n    return ret\nend\nlocal swapDone = false\nlocal function swapBroken(cellName)\n    -- if (swapDone) then return end\n\n    local cell1 = \"Indoranyon, Propylon Chamber\"\n\n    local cell2 = \"Andasreth, Propylon Chamber\"\n    local ob1, ob2\n    if (cellName == cell1) then\n        ob1 = findObjectInCell(cell1, \"active_port_roth\", \"Activator\")\n        ob2 = findObjectInCell(cell1, \"active_port_falen\", \"Activator\")\n\n        swapObjects(ob1, ob2)\n    elseif (cellName == cell2) then\n        ob1 = findObjectInCell(cell2, \"active_port_hlor\", \"Activator\")\n        ob2 = findObjectInCell(cell2, \"active_port_beran\", \"Activator\")\n\n        swapObjects(ob1, ob2)\n    else\n    end\n    swapDone = true\nend\nreturn {\n    interfaceName = \"zhac_BMI_swap\",\n    interface = {\n        version = 1,\n        swapObjects = swapObjects,\n        swapBroken = swapBroken,\n        placeOrb = placeOrb\n    }\n}\n",
    "BMI fix-52991-1-5-1-1704499476\\MWSE\\mods\\SmoothMasterIndex\\main.lua": "ZackBridge = require(\"SmoothMasterIndex.scripts.SmoothMasterIndex.zackbridge\")\nlocal BMI_swap = require(\"SmoothMasterIndex.bmi_swap\").interface\nlocal lastChamber = nil\nlocal positions = {\n    [1] = {\n        x = 4097,\n        y = 3898,\n        z = 12758,\n        rotation = 180,\n        cell = \"Hlormaren, Propylon Chamber\",\n        short = \"hlor\"\n    },\n    [2] = {\n        x = 540,\n        y = 630,\n        z = -368,\n        rotation = 270,\n        cell = \"Andasreth, Propylon Chamber\",\n        short = \"andra\"\n    },\n    [3] = {\n        x = 540,\n        y = 1024,\n        z = -608,\n        rotation = 270,\n        cell = \"Berandas, Propylon Chamber\",\n        short = \"beran\"\n    },\n    [4] = {\n        x = 302,\n        y = 504,\n        z = -368,\n        rotation = 270,\n        cell = \"Falasmaryon, Propylon Chamber\",\n        short = \"falas\"\n    },\n    [5] = {\n        x = 410,\n        y = 898,\n        z = -496,\n        rotation = 270,\n        cell = \"Falensarano, Propylon Chamber\",\n        short = \"falen\"\n    },\n    [6] = {\n        x = 489,\n        y = 766,\n        z = -368,\n        rotation = 270,\n        cell = \"Indoranyon, Propylon Chamber\",\n        short = \"indo\"\n    },\n    [7] = {\n        x = 244,\n        y = 888,\n        z = -368,\n        rotation = 270,\n        cell = \"Marandus, Propylon Chamber\",\n        short = \"maran\"\n    },\n    [8] = {\n        x = 366,\n        y = 628,\n        z = -447,\n        rotation = -90,\n        cell = \"Rotheran, Propylon Chamber\",\n        short = \"roth\"\n    },\n    [9] = {\n        x = 408,\n        y = 767,\n        z = -484,\n        rotation = 270,\n        cell = \"Telasero, Propylon Chamber\",\n        short = \"telas\"\n    },\n    [10] = {\n        x = 290,\n        y = 778,\n        z = -496,\n        rotation = -90,\n        cell = \"Valenvaryon, Propylon Chamber\",\n        short = \"valen\"\n    }\n}\nlocal function playerHasItem(itemId)\n    local player = tes3.player\n    if player then\n        local inventory = player.object.inventory\n        for _, stack in pairs(inventory) do\n            if stack.object.id == itemId then return true end\n        end\n        for index, actor in ipairs(tes3.mobilePlayer.friendlyActors) do\n            local inventory = actor.inventory\n            if not inventory then return false end\n            for _, stack in pairs(inventory) do\n                if stack.object.id == itemId then return true end\n            end\n        end\n    end\n    return false\nend\nlocal function activateMan(object, actor)\n    if (tes3.player.cell.name ~= \"Caldera, Guild of Mages\") then return true end\n    local playerSneaking = tes3.player.mobile.isSneaking\n    if (object.baseObject.id:lower() == \"t_com_crystalball_01\" or\n        object.baseObject.id:lower() == \"t_com_crystalballstand_01\") then\n        if (tes3.player.data.SMI == nil) then tes3.player.data.SMI = {} end\n        tes3.player.data.SMI.TpToLevel = 1\n        local hasMasterIndex = playerHasItem(\"index_master\")\n        if (hasMasterIndex) then\n            if (tes3.player.data.SMI and tes3.player.data.SMI.lastChamber) then\n                lastChamber = tes3.player.data.SMI.lastChamber\n            end\n            for index, fort in ipairs(positions) do\n                if (fort.cell == lastChamber) then\n\n                    tes3.positionCell({\n                        cell = fort.cell,\n                        position = tes3vector3.new(fort.x, fort.y, fort.z),\n                        orientation = tes3vector3.new(0, 0,\n                                                      math.rad(fort.rotation))\n                    })\n                    tes3.playSound({sound = \"Thunder2\"})\n                end\n            end\n            return false\n        end\n    end\n\n    if (object.baseObject.id == \"folms mirel\") then\n        local hasMasterIndex = playerHasItem(\"index_master\")\n        if (tes3.player.data.SMI == nil) then tes3.player.data.SMI = {} end\n        tes3.player.data.SMI.TpToLevel = 2\n\n        if (playerSneaking and hasMasterIndex) then\n            if (tes3.player.data.triedOrbPlace == nil) then\n                local obs = BMI_swap.placeOrb()\n\n                tes3.player.data.triedOrbPlace = true\n            end\n            if (tes3.player.data.SMI and tes3.player.data.SMI.lastChamber) then\n                lastChamber = tes3.player.data.SMI.lastChamber\n            end\n            for index, fort in ipairs(positions) do\n                if (fort.cell == lastChamber) then\n\n                    tes3.positionCell({\n                        cell = fort.cell,\n                        position = tes3vector3.new(fort.x, fort.y, fort.z),\n                        orientation = tes3vector3.new(0, 0,\n                                                      math.rad(fort.rotation))\n                    })\n                    tes3.playSound({sound = \"Thunder2\"})\n                end\n            end\n            return false\n        end\n\n    end\nend\nlocal calderaPos = {\n    {x = 690, y = 555, z = 146, rotation = 90},\n    {x = 763, y = 702, z = 412, rotation = 90}\n}\nlocal function activateActivator(object, actor)\n    for index, fort in ipairs(positions) do\n        if (fort.cell == object.cell.name) then\n            if (tes3.player.data.SMI == nil) then\n\n                tes3.player.data.SMI = {}\n            end\n            tes3.player.data.SMI.lastChamber = fort.cell\n\n        end\n    end\n    for index, fort in ipairs(positions) do\n\n        if (object.id == \"active_port_\" .. fort.short) then\n            local hasIndex = playerHasItem(\"index_\" .. fort.short)\n            local hasMasterIndex = playerHasItem(\"index_master\")\n            local playerSneaking = tes3.player.mobile.isSneaking\n            if (hasMasterIndex and playerSneaking) then\n                local level = 2\n                if (tes3.player.data.SMI and tes3.player.data.SMI.TpToLevel) then\n                    level = tes3.player.data.SMI.TpToLevel\n                end\n                tes3.positionCell({\n                    cell = \"Caldera, Guild of Mages\",\n                    position = tes3vector3.new(calderaPos[level].x,\n                                               calderaPos[level].y,\n                                               calderaPos[level].z),\n                    orientation = tes3vector3.new(0, 0, math.rad(\n                                                      calderaPos[level].rotation))\n                })\n                tes3.playSound({sound = \"Thunder2\"})\n            elseif (hasMasterIndex or hasIndex) then\n                tes3.positionCell({\n                    cell = fort.cell,\n                    position = tes3vector3.new(fort.x, fort.y, fort.z),\n                    orientation = tes3vector3.new(0, 0, math.rad(fort.rotation))\n                })\n                tes3.playSound({sound = \"Thunder2\"})\n            else\n                tes3.messageBox(\"You do not have the Index for this Propylon.\")\n\n            end\n            for index, fort in ipairs(positions) do\n                if (fort.cell == actor.cell.name) then\n                    if (tes3.player.data.SMI == nil) then\n\n                        tes3.player.data.SMI = {}\n                    end\n                    if (fort.cell == \"Indoranyon, Propylon Chamber\" and\n                        tes3.player.data.SMI.IndoryFixed == nil) then\n                        BMI_swap.swapBroken(fort.cell)\n                        --   print(\"Fixing Indory\")\n                        tes3.player.data.SMI.IndoryFixed = true\n                    end\n                    if (fort.cell == \"Andasreth, Propylon Chamber\" and\n                        tes3.player.data.SMI.AndaFixed == nil) then\n                        BMI_swap.swapBroken(fort.cell)\n                        tes3.player.data.SMI.AndaFixed = true\n                        --  print(\"Fixing ANda\")\n                    end\n\n                end\n            end\n            return false\n        end\n    end\nend\nZackBridge.AddObjectTypeActivationHandler(\"Activator\", activateActivator)\nZackBridge.AddObjectTypeActivationHandler(\"Miscellaneous\", activateMan)\nZackBridge.AddObjectTypeActivationHandler(\"NPC\", activateMan)\nlocal function onSave() return {lastChamber = lastChamber} end\nlocal function onLoad(data) if (data) then lastChamber = data.lastChamber end end\n",
    "BMI fix-52991-1-5-1-1704499476\\MWSE\\mods\\SmoothMasterIndex\\scripts\\SmoothMasterIndex\\ZackBridge.lua": "local interFaceLoaded, I = pcall(require, \"openmw.interfaces\")\n\nlocal utilLoaded, util = pcall(require, \"openmw.util\")\nlocal coreLoaded, core = pcall(require, \"openmw.core\")\nlocal typesLoaded, types = pcall(require, \"openmw.types\")\nlocal storageLoaded, storage = pcall(require, \"openmw.storage\")\nlocal worldLoaded, world = pcall(require, \"openmw.world\")\n\n\nlocal mwse = true--not coreLoaded\nlocal ZackBridge = {}\n\nlocal ZackBridgeEngineHandlers = nil\nlocal allTypes = {\n\n}\nif (mwse) then\n    ZackBridgeEngineHandlers = require(\"SmoothMasterIndex.scripts.SmoothMasterIndex.ZackBridgeEngineHandlers\")\n    allTypes = {\n        [\"Container\"] = tes3.objectType.container,\n        [\"Activator\"] = tes3.objectType.activator,\n        [\"Apparatus\"] = tes3.objectType.apparatus,\n        [\"Ingredient\"] = tes3.objectType.ingredient,\n        [\"NPC\"] = tes3.objectType.npc,\n        [\"Miscellaneous\"] = tes3.objectType.miscItem\n    }\nelse\n    allTypes = {\n        [\"Apparatus\"] = types.Apparatus,\n        [\"Armor\"] = types.Armor,\n        [\"Book\"] = types.Book,\n        [\"Clothing\"] = types.Clothing,\n        [\"Ingredient\"] = types.Ingredient,\n        [\"Light\"] = types.Light,\n        [\"Lockpick\"] = types.Lockpick,\n        [\"Miscellaneous\"] = types.Miscellaneous,\n        [\"Potion\"] = types.Potion,\n        [\"Probe\"] = types.Probe,\n        [\"Repair\"] = types.Repair,\n        [\"Weapon\"] = types.Weapon,\n        [\"Creature\"] = types.Creature,\n        [\"Door\"] = types.Door,\n        [\"NPC\"] = types.NPC,\n        [\"Player\"] = types.Player,\n        [\"Static\"] = types.Static,\n        [\"Container\"] = types.Container\n    }\nend\n--get specific objects\n\n\n\nfunction ZackBridge.getPlayer()\n    if (mwse) then\n        return tes3.player\n    end\n    for index, value in ipairs(world.activeActors) do\n        if (value.type == types.Player) then\n            return value\n        end\n    end\nend\nfunction ZackBridge.vector3(x,y,z)\nreturn tes3vector3.new(x,y,z)\nend\nfunction ZackBridge.getObjectRecordId(object)\nif(mwse) then\n    if(object.id ~= nil) then\n        \nreturn object.id\n    elseif(object.object.id ~= nil) then\n        return object.object.id\n    end\n    return\nend\nreturn object.recordId\n\nend\nfunction ZackBridge.getOwnerId(object)\n    if (mwse) then\n        if(tes3.getOwner(object) ~= nil) then\n        return tes3.getOwner(object).id\n        end\n        \n        return\n    end\n    return object.ownerRecordId\nend\n\n--work with items and inventories\nfunction ZackBridge.getInventory(object)\n    if (mwse) then\n        if (object.object ~= nil) then\n            return object.object.inventory\n        else\n            return object.inventory\n        end\n    end\n    if (object.type == types.NPC or object.type == types.Creature or object.type == types.Player) then\n        return types.Actor.inventory(object)\n    elseif (object.type == types.Container) then\n        return types.Container.content(object)\n    end\nend\n\nfunction ZackBridge.SplitStack(item, count)\n    if (mwse) then\n        return\n    end\n    return item:split(count)\nend\n\nfunction ZackBridge.TransferItem(to, itemToTransfer, count)\n    if (mwse) then\n        return\n    end\n    itemToTransfer:moveInto(ZackBridge.getInventory(to), count)\nend\nfunction ZackBridge.TeleportItem(object,newCell,newPos,newRot)\n    if(newRot == nil) then\n        newRot = 0\n    end\nif(mwse) then\n    tes3.positionCell({\n        object = object,\n        cell = newCell,\n        position = newPos,\n        orientation = newRot\n    })\n    return\nend\nobject:teleport(newCell, newPos)\n\nend\nfunction ZackBridge.getInventoryTable(object, obType)\n    if (mwse) then\n        return\n    end\n    if (object.type == types.NPC or object.type == types.Creature or object.type == types.Player) then\n        return types.Actor.inventory(object):getAll(allTypes[obType])\n    elseif (object.type == types.Container) then\n        return types.Container.content(object):getAll(allTypes[obType])\n    end\nend\n\nfunction ZackBridge.RemoveItem(itemId, count, actor)\n    if (mwse) then\n        return\n    end\n    ZackBridge.getInventory(actor):find(itemId):remove(count)\nend\n\nfunction ZackBridge.AddItem(itemId, count, actor)\n    if (mwse) then\n        tes3.addItem({ reference = actor, item = itemId, playSound = false, count = count })\n        return\n    end\n    local item = world.createObject(itemId, count)\n\n    local inv = ZackBridge.getInventory(actor)\n    item:moveInto(types.Actor.inventory(actor))\n    return item\nend\n\n--work with record data\nlocal miscConsts = {}\n\nif (mwse == false) then\n    miscConsts = {\n        [\"Alembic\"] = types.Apparatus.TYPE.Alembic,\n        [\"Calcinator\"] = types.Apparatus.TYPE.Calcinator,\n        [\"MortarPestle\"] = types.Apparatus.TYPE.MortarPestle,\n        [\"Retort\"] = types.Apparatus.TYPE.Retort,\n    }\nelse\n    miscConsts = {\n        [\"Alembic\"] = tes3.apparatusType.alembic,\n        [\"Calcinator\"] = tes3.apparatusType.calcinator,\n        [\"MortarPestle\"] = tes3.apparatusType.mortarPestle,\n        [\"Retort\"] = tes3.apparatusType.retort,\n    }\nend\n\nfunction ZackBridge.getConst(constName)\n    if (mwse) then\n        return\n    end\n    return miscConsts[constName]\nend\n\nfunction ZackBridge.isWorldPaused()\n    if (mwse) then\n        return false\n    end\n    return core.isWorldPaused()\nend\n\nfunction ZackBridge.getObjectsInCell(cellOrCellname, obType)\n    if (mwse) then\n        local myType = allTypes[obType]\n        local cell = cellOrCellname\n        if (cell.id == nil) then\n            cell = ZackBridge.getCell(cell)\n        end\n        local refs = {}\n        for ref in cell:iterateReferences(myType) do\n            table.insert(refs, ref)\n        end\n        return refs\n    end\n    local cell = cellOrCellname\n    if (cell.name == nil) then\n        cell = world.getCellByName(cell)\n    else\n        cell = cellOrCellname\n    end\n    local myType = allTypes[obType]\n    return cell:getAll(myType)\nend\n\nfunction ZackBridge.getObjectRecordData(item)\n    if (mwse) then\n        if (item.object ~= nil) then\n            return {\n                quality = item.object.quality,\n                type = item.object.type\n            }\n        else\n            return {\n                quality = item.quality,\n                type = item.type\n            }\n        end\n    end\n    local quality = nil\n    local type = nil\n    if (item.type.TYPE ~= nil) then\n        quality = item.type.record(item).quality\n        type = item.type.record(item).type\n    end\n    return {\n        quality = quality,\n        type = type\n    }\nend\n\n--handle events\nlocal function AddEngineHandlerMWSE(functionName, func)\n\nend\nfunction ZackBridge.AddEngineHandler(functionName, func)\n    if (mwse) then\n        ZackBridgeEngineHandlers.addFunction(functionName, func)\n        return\n    end\n    I.ZackBridgeEngineHandlers.addFunction(functionName, func)\nend\n\nlocal function AddObjectTypeActivationHandlerMWSE(typeName, handler)\n\nend\nfunction ZackBridge.AddObjectTypeActivationHandler(typeName, handler)\n    if (allTypes[typeName] == nil) then\n        print(\"No type found\", #allTypes, typeName)\n        return\n    end\n    if (mwse) then\n        ZackBridgeEngineHandlers.RegisterActivateByType(handler, allTypes[typeName])\n        return\n    end\n    I.Activation.addHandlerForType(allTypes[typeName], handler)\nend\n\nfunction ZackBridge.AddObjectActivationHandler(object, handler)\n    if (mwse) then\n        return\n    end\n    I.Activation.addHandlerForObject(object, handler)\nend\n\nfunction ZackBridge.getCell(cellName)\n    if (mwse) then\n        return tes3.getCell({ id = cellName })\n    end\n    return world.getCellByName(cellName)\nend\n\nreturn ZackBridge\n",
    "BMI fix-52991-1-5-1-1704499476\\MWSE\\mods\\SmoothMasterIndex\\scripts\\SmoothMasterIndex\\ZackBridgeEngineHandlers.lua": "local worldLoaded, world = pcall(require, \"openmw.world\")\n\nlocal mwse = true\nlocal engineHandlers = {}\nlocal function onInit()\n\nend\nlocal activateFunctions = {}\nlocal updateFunctions = {}\nlocal function onUpdate(dt)\n    if (mwse) then\n        for index, func in ipairs(updateFunctions) do\n            func(dt.delta)\n        end\n    else\n        for index, func in ipairs(updateFunctions) do\n            func(dt)\n        end\n    end\nend\n function engineHandlers.addFunction(name, func)\n    if (name == \"onUpdate\") then\n        table.insert(updateFunctions, func)\n    end\nend\n\nfunction engineHandlers.RegisterActivateByType(func, type)\n    table.insert(activateFunctions, { func = func, type = type })\n    return nil\nend\nlocal function onActivateMWSE(e)\n    local result = true\n    for index, funcData in ipairs(activateFunctions) do\n        if (funcData.type == e.target.object.objectType) then\n            \n            local res =  funcData.func(e.target, e.activator)\n            if(res == false) then\n                result = false\n            end\n        end\n    end\n    if(result == false) then\n        return false\n    end\nend\nif (mwse == false) then\n    print(\"Not MWSE\")\n    return {\n        interfaceName  = \"ZackBridgeEngineHandlers\",\n        interface      = {\n            version = 1,\n            addFunction = engineHandlers.addFunction,\n        },\n        eventHandlers  = {\n        },\n        engineHandlers = { onInit = onInit, onLoad = onInit, onUpdate = onUpdate }\n    }\nelse\n    event.register(tes3.event.activate, onActivateMWSE)\n    event.register(tes3.event.simulate, onUpdate)\nend\n\nreturn engineHandlers",
    "BMI fix-52991-1-5-1-1704499476\\scripts\\BetterMasterIndex\\BMI_Actor.lua": "local nearby = require(\"openmw.nearby\")\nlocal self = require(\"openmw.self\")\nlocal core = require(\"openmw.core\")\nlocal types = require(\"openmw.types\")\nlocal I = require(\"openmw.interfaces\")\nlocal function getPlayer()         --This\n    if core.API_REVISION > 40 then --nearby.players was added after 0.48 was released.\n        return nearby.players[1]--Not multiplayer friendly, but oh well\n    end\n    for index, value in ipairs(nearby.actors) do --This is the best way to get the player without events in 0.48\n        if value.type == types.Player then\n            return value\n        end\n    end\nend\nlocal isFollowingPlayerTrue = false\nlocal function isFollowingPlayer()\n    isFollowingPlayerTrue = false\n    local func = function(param)\n        --Check if the actor is following the player\n        if param.target == getPlayer() and param.type == \"Follow\" then\n            isFollowingPlayerTrue = true\n        end\n    end\n    I.AI.forEachPackage(func)--This runs the above function for every AI package on this actor\n    return isFollowingPlayerTrue\nend\nlocal function BMI_teleportFollower(data)\n    if isFollowingPlayer() then --Only send a global event, if we are following the player.\n        core.sendGlobalEvent(\"BMI_TeleportToCell\",\n            {\n                item = self,\n                cellname = data.destCell,\n                position = data.destPos,\n                rotation = data.destRot\n            })\n    end\nend\nreturn { engineHandlers = { onActive = onActive }, eventHandlers = { BMI_teleportFollower = BMI_teleportFollower } }\n",
    "BMI fix-52991-1-5-1-1704499476\\scripts\\BetterMasterIndex\\BMI_global.lua": "local types = require(\"openmw.types\")\nlocal world = require(\"openmw.world\")\nlocal core = require(\"openmw.core\")\nlocal acti = require(\"openmw.interfaces\").Activation\nlocal util = require(\"openmw.util\")\nlocal I = require(\"openmw.interfaces\")\n\nlocal playerSneaking = false\nif (core.API_REVISION < 44) then\n    error(\"Better Master Index requires a newer version of OpenMW. Please update.\")\nend\nlocal strongholdData = {}\nlocal godModeState = false\nlocal swappedPropylons = false\nlocal triedOrbPlace = false\n\nlocal function getPlayer()\n    for i, ref in ipairs(world.activeActors) do\n        if (ref.type == types.Player) then return ref end\n    end\nend\nlocal function createRotation(x, y, z)\n    if (core.API_REVISION < 40) then\n        return util.vector3(x, y, z)\n        --Rotations changed from vector3 to transforms in 0.49\n    else\n        local rotate = util.transform.rotateZ(z)\n        --This drops y and x\n        return rotate\n    end\nend\nlocal lastChamber = nil\nlocal TpToLevel = 2\n--Hardcoded positions from the orginal MWScripts\nlocal positions = {\n    [1] = {\n        x = 4097,\n        y = 3898,\n        z = 12758,\n        rotation = 180,\n        cell = \"Hlormaren, Propylon Chamber\",\n        short = \"hlor\"\n    },\n    [2] = {\n        x = 540,\n        y = 630,\n        z = -368,\n        rotation = 270,\n        cell = \"Andasreth, Propylon Chamber\",\n        short = \"andra\"\n    },\n    [3] = {\n        x = 540,\n        y = 1024,\n        z = -608,\n        rotation = 270,\n        cell = \"Berandas, Propylon Chamber\",\n        short = \"beran\"\n    },\n    [4] = {\n        x = 302,\n        y = 504,\n        z = -368,\n        rotation = 270,\n        cell = \"Falasmaryon, Propylon Chamber\",\n        short = \"falas\"\n    },\n    [5] = {\n        x = 410,\n        y = 898,\n        z = -496,\n        rotation = 270,\n        cell = \"Falensarano, Propylon Chamber\",\n        short = \"falen\"\n    },\n    [6] = {\n        x = 489,\n        y = 766,\n        z = -368,\n        rotation = 270,\n        cell = \"Indoranyon, Propylon Chamber\",\n        short = \"indo\"\n    },\n    [7] = {\n        x = 244,\n        y = 888,\n        z = -368,\n        rotation = 270,\n        cell = \"Marandus, Propylon Chamber\",\n        short = \"maran\"\n    },\n    [8] = {\n        x = 366,\n        y = 628,\n        z = -447,\n        rotation = -90,\n        cell = \"Rotheran, Propylon Chamber\",\n        short = \"roth\"\n    },\n    [9] = {\n        x = 408,\n        y = 767,\n        z = -484,\n        rotation = 270,\n        cell = \"Telasero, Propylon Chamber\",\n        short = \"telas\"\n    },\n    [10] = {\n        x = 290,\n        y = 778,\n        z = -496,\n        rotation = -90,\n        cell = \"Valenvaryon, Propylon Chamber\",\n        short = \"valen\"\n    }\n}\n\nlocal function playerHasItem(itemId)\n    if godModeState == true then return true end\n    if (I.CCC_cont ~= nil) then return I.CCC_cont.itemCarriedByPlayer(itemId) end\n    --This checks if the interface for a container mod is active, and if it exists, check if any of the containers the player is carrying contain this item.\n    local inInv = types.Actor.inventory(getPlayer()):find(itemId)\n    if (inInv) then return true end --Check if the player has the item\n\n    for index, value in ipairs(world.activeActors) do\n        --Not sure who is the player's companion, but if anyone has it, it's probably one of the player's followers.\n        local inCInv = types.Actor.inventory(value):find(itemId)\n        if inCInv then return true end\n    end\n    return false\nend\nlocal function teleportPlayer(actor, cell, pos, rot)\n    if actor.type == types.Player then\n        for index, value in ipairs(world.activeActors) do\n            value:sendEvent(\"teleportFollower\",\n                { destPos = pos, destCell = cell, destRot = rot })\n        end\n    end\n    actor:teleport(cell,\n        pos, {\n            rotation = rot,\n            onGround = true\n        })\nend\nlocal function activateMan(object, actor)\n    if (object.cell.name ~= \"Caldera, Guild of Mages\") then\n        return\n    end\n    if (object.recordId == \"t_com_crystalball_01\" or object.recordId == \"t_com_crystalballstand_01\") then\n        TpToLevel = 1\n        local hasMasterIndex = playerHasItem(\"index_master\")\n        if (hasMasterIndex) then\n            for index, fort in ipairs(positions) do\n                if (fort.cell == lastChamber) then\n                    actor:sendEvent(\"BMIPlaySound\", \"Thunder2\")\n                    teleportPlayer(actor, fort.cell, util.vector3(fort.x, fort.y, fort.z),\n                        createRotation(0, 0, math.rad(fort.rotation)))\n                end\n            end\n            return false\n        end\n    end\n\n    if (object.recordId == \"folms mirel\") then\n        if (triedOrbPlace == false) then\n            local obs = I.zhac_BMI_swap.placeOrb()\n            for index, value in ipairs(obs) do\n                acti.addHandlerForObject(value, activateMan)\n            end\n            triedOrbPlace = true\n        end\n        TpToLevel = 2\n        local hasMasterIndex = playerHasItem(\"index_master\")\n        if (playerSneaking and hasMasterIndex) then\n            for index, fort in ipairs(positions) do\n                if (fort.cell == lastChamber) then\n                    actor:sendEvent(\"BMIPlaySound\", \"Thunder2\")\n                    teleportPlayer(actor, fort.cell, util.vector3(fort.x, fort.y, fort.z),\n                        createRotation(0, 0, math.rad(fort.rotation)))\n                end\n            end\n            return false\n        end\n    end\nend\n\nlocal calderaPos = {\n    { x = 690, y = 555, z = 146, rotation = 90 },\n    { x = 763, y = 702, z = 412, rotation = 90 }\n}\nlocal function activatePort(object, actor)\n    for index, fort in ipairs(positions) do\n        if (fort.cell == object.cell.name) then\n            lastChamber = fort.cell\n        end\n        if (object.recordId == \"active_port_\" .. fort.short) then\n            --  local newOb = removeScript(object)\n            local hasIndex = playerHasItem(\"index_\" .. fort.short)\n            local hasMasterIndex = playerHasItem(\"index_master\")\n\n            if (playerSneaking and hasMasterIndex) then\n                actor:sendEvent(\"BMIPlaySound\", \"Thunder2\")\n                teleportPlayer(actor, \"Caldera, Guild of Mages\", util.vector3(calderaPos[TpToLevel].x,\n                    calderaPos[TpToLevel].y,\n                    calderaPos[TpToLevel].z), createRotation(0, 0, math.rad(calderaPos[TpToLevel].rotation)))\n            elseif (hasIndex or hasMasterIndex) then\n                actor:sendEvent(\"BMIPlaySound\", \"Thunder2\")\n                teleportPlayer(actor, fort.cell, util.vector3(fort.x, fort.y, fort.z),\n                    createRotation(0, 0, math.rad(fort.rotation)))\n            else\n                actor:sendEvent(\"BMIShowMessage\",\n                    \"You do not have the Index for this Propylon.\")\n            end\n            print(object.recordId)\n            return false\n        end\n    end\n    return false\nend\nlocal swapDone = false\nlocal errorState = false\nlocal function onSave()\n    return\n    { lastChamber = lastChamber, TpToLevel = TpToLevel, triedOrbPlace = triedOrbPlace, swapDone = swapDone, }\nend\n\nlocal function onPlayerAdded(player)\n    if (errorState) then\n        getPlayer():sendEvent(\"BMIShowMessage\",\n            \"Propylons have their script active! You must check the \")\n    end\n    if (swapDone == false) then\n        I.zhac_BMI_swap.swapBroken()\n\n        swapDone = true\n    end\nend\nlocal function onInit()\n    for index, fort in ipairs(positions) do\n        local cxell = world.getCellByName(fort.cell)\n        for x, object in ipairs(cxell:getAll(types.Activator)) do\n            for l, tfort in ipairs(positions) do\n                if (object.recordId == \"active_port_\" .. tfort.short) then\n                    --  local newOb = removeScript(object)\n                    acti.addHandlerForObject(object, activatePort)\n                    --  print(object.recordId)\n                end\n            end\n        end\n    end\n    local cmages = world.getCellByName(\"Caldera, Guild of Mages\")\n    for index, object in ipairs(cmages:getAll(types.NPC)) do\n        if (object.recordId == \"folms mirel\") then\n            acti.addHandlerForObject(object, activateMan)\n        end\n    end\n    acti.addHandlerForType(types.Miscellaneous, activateMan)\n    --  for index, object in ipairs(cmages:getAll(types.Miscellaneous)) do\n    --    if (object.recordId == \"t_com_crystalball_01\" or object.recordId == \"t_com_crystalballstand_01\") then\n    --\n    --   end\n    --end\n    -- acti.addHandlerForType(types.Activator,activatePort)\nend\nlocal function onLoad(data)\n    if (data) then\n        lastChamber = data.lastChamber\n        TpToLevel = data.TpToLevel\n        triedOrbPlace = data.triedOrbPlace\n        swapDone = data.swapDone\n    end\n    onInit()\nend\nlocal function BMI_TeleportToCell(data)\n    --Simple function to teleport an object to any cell.\n\n    if (data.cellname.name ~= nil) then\n        data.cellname = data.cellname.name\n    end\n    data.item:teleport(data.cellname, data.position, data.rotation)\nend\nlocal function CCCSneakUpdate(val)\n    playerSneaking = val; print(val);\nend\nlocal function setGodModeState(state)\n    godModeState = state\nend\nreturn {\n    interfaceName = \"zhac_BMI\",\n    interface = {\n        version = 1,\n        onInit = onInit,\n        activatePort = activatePort\n    },\n    engineHandlers = {\n        onInit = onInit,\n        onLoad = onLoad,\n        onSave = onSave,\n        onPlayerAdded = onPlayerAdded,\n    },\n    eventHandlers = {\n        BMISneakUpdate = CCCSneakUpdate,\n        BMI_TeleportToCell = BMI_TeleportToCell,\n        setGodModeState = setGodModeState\n    }\n}\n",
    "BMI fix-52991-1-5-1-1704499476\\scripts\\BetterMasterIndex\\BMI_player.lua": "local types = require(\"openmw.types\")\nlocal core = require(\"openmw.core\")\nlocal self = require(\"openmw.self\")\nlocal ui = require(\"openmw.ui\")\nlocal async = require(\"openmw.async\")\nlocal util = require(\"openmw.util\")\nlocal I = require(\"openmw.interfaces\")\nlocal storage = require(\"openmw.storage\")\nlocal ambient = require('openmw.ambient')\nlocal debug = require('openmw.debug')\nif (core.API_REVISION < 44) then\n    I.Settings.registerPage {\n        key = \"SettingsBMI\",\n        l10n = \"SettingsBMI\",\n        name = \"Smooth Master Index\",\n        description = \"Smooth Master Index requires a newer version of OpenMW. Please update.\"\n    }\n    error(\"Smooth Master Index requires a newer version of OpenMW. Please update.\")\nend\nI.Settings.registerPage {\n    key = \"SettingsBMI\",\n    l10n = \"SettingsBMI\",\n    name = \"Smooth Master Index\",\n}\n\nI.Settings.registerGroup {\n    key = \"SettingsBMI\",\n    page = \"SettingsBMI\",\n    l10n = \"AshlanderArchitect\",\n    name = \"Smooth Master Index\",\n    description = \"Corporeal Carryable Containers\",\n    permanentStorage = false,\n    settings = {\n        {\n            key = \"rerunPropylonSwap\",\n            renderer = \"checkbox\",\n            name = \"Rerun Propylon Swap\",\n            description =\n            \"If you togle this option, the swap in Rotheran and Falensarano will be re-ran in case it got out of sync.\",\n\n            default = true\n        },\n    }\n}\nlocal playerSettings = storage.playerSection(\"SettingsBMI\")\nplayerSettings:subscribe(async:callback(function(section, key)\n    if key then\n        if (key == \"rerunPropylonSwap\") then\n            core.sendGlobalEvent(\"swapBroken\", true)\n        end\n    end\nend))\nlocal wasSneaking = false\nlocal function onUpdate(dt)\n    local isSneaking = self.controls.sneak\n    if (isSneaking ~= wasSneaking) then\n        core.sendGlobalEvent(\"BMISneakUpdate\", isSneaking)\n    end\n    wasSneaking = isSneaking\nend\nlocal function BMIShowMessage(message)\n    ui.showMessage(message)\nend\nlocal function BMIPlaySound(soundID)\n    ambient.playSound(soundID)\nend\nlocal function onLoad()\n    core.sendGlobalEvent(\"setGodModeState\", debug.isGodMode())\nend\nreturn {\n    engineHandlers = {\n        onUpdate = onUpdate,\n        onLoad = onLoad,\n\n        onConsoleCommand = function()\n            async:newUnsavableSimulationTimer(0.1, function()\n                onLoad()\n            end)\n        end,\n    },\n    eventHandlers = { BMIShowMessage = BMIShowMessage, BMIPlaySound = BMIPlaySound }\n}\n",
    "BMI fix-52991-1-5-1-1704499476\\scripts\\BetterMasterIndex\\BMI_swap.lua": "local types = require(\"openmw.types\")\nlocal world = require(\"openmw.world\")\nlocal acti = require(\"openmw.interfaces\").Activation\nlocal util = require(\"openmw.util\")\nlocal I = require(\"openmw.interfaces\")\nlocal function teleport(ob, pos, rot) ob:teleport(ob.cell, pos, rot) end\nlocal function swapObjects(ob1, ob2)\n    local ob1Pos = ob1.position\n    local ob1Rot = ob1.rotation\n    local ob2Pos = ob2.position\n    local ob2Rot = ob2.rotation\n    teleport(ob1, ob2Pos, ob2Rot)\n    teleport(ob2, ob1Pos, ob1Rot)\nend\nlocal function findObjectInCell(cellName, obId)\n    local cell = world.getCellByName(cellName)\n\n    for index, value in ipairs(cell:getAll(types.Activator)) do\n        if (value.recordId == obId) then return value end\n    end\nend\nlocal function getRecord(id)\n    for index, value in ipairs(types.Miscellaneous.records) do\n        if (value.id == id) then return value end\n    end\n    return nil\nend\nlocal function placeIfNotFound(objectId, cellName, position)\n    local record = (getRecord(objectId))\n    if (record == nil) then return nil end\n    local cell = world.getCellByName(cellName)\n    for index, value in ipairs(cell:getAll(types.Miscellaneous)) do\n        if (value.recordId == objectId:lower()) then return nil end\n    end\n    print(\"Placing \", objectId)\n    local newOb = world.createObject(objectId)\n    teleport(newOb, position)\n    return newOb\nend\nlocal function placeOrb()\n    local ret = {}\n    table.insert(ret,\n        placeIfNotFound(\"t_com_crystalball_01\",\n            \"Caldera, Guild of Mages\",\n            util.vector3(793.762, 570.143, 232.457)))\n    table.insert(ret,\n        placeIfNotFound(\"t_com_crystalballstand_01\",\n            \"Caldera, Guild of Mages\",\n            util.vector3(793.762, 570.143, 232.457)))\n    return ret\nend\nlocal swapDone = false\nlocal function swapBroken(force)\n    if (swapDone and not force) then return end\n    local cell = \"Indoranyon, Propylon Chamber\"\n    local ob1 = findObjectInCell(cell, \"active_port_roth\")\n    local ob2 = findObjectInCell(cell, \"active_port_falen\")\n    swapObjects(ob1, ob2)\n\n    cell = \"Andasreth, Propylon Chamber\"\n    ob1 = findObjectInCell(cell, \"active_port_hlor\")\n    ob2 = findObjectInCell(cell, \"active_port_beran\")\n    swapObjects(ob1, ob2)\n    swapDone = true\n    print(\"Did the swap.\")\nend\nlocal function onSave()\nreturn {swapDone = swapDone}\nend\nlocal function onLoad(data)\nif not data then return end\n\nswapDone = data.swapDone\nend\nreturn {\n    interfaceName = \"zhac_BMI_swap\",\n    interface = {\n        version = 1,\n        swapObjects = swapObjects,\n        swapBroken = swapBroken,\n        placeOrb = placeOrb\n    },\n    engineHandlers = {\n        onInit = onInit,\n        onSave = onSave,\n        onLoad = onLoad,\n    },\n    eventHandlers = { swapBroken = swapBroken }\n}\n",
    "BMI fix-52991-1-5-1-1704499476\\__MACOSX\\MWSE\\mods\\SmoothMasterIndex\\._main.lua": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000q\u0000\u0000\u0000\u0002\u0000\u0000\u0000Ј\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ј\u0000\u0000\u0000�\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u000b\u0000\u0000\u0015com.apple.provenance\u0000\u0001\u0000\u0000&ЃJЦ\u0019_‰i",
    "BMI fix-52991-1-5-1-1704499476\\__MACOSX\\scripts\\BetterMasterIndex\\._BMI_Actor.lua": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000q\u0000\u0000\u0000\u0002\u0000\u0000\u0000Ј\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ј\u0000\u0000\u0000�\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u000b\u0000\u0000\u0015com.apple.provenance\u0000\u0001\u0000\u0000&ЃJЦ\u0019_‰i",
    "BMI fix-52991-1-5-1-1704499476\\__MACOSX\\scripts\\BetterMasterIndex\\._BMI_global.lua": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000q\u0000\u0000\u0000\u0002\u0000\u0000\u0000Ј\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ј\u0000\u0000\u0000�\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u000b\u0000\u0000\u0015com.apple.provenance\u0000\u0001\u0000\u0000&ЃJЦ\u0019_‰i",
    "BMI fix-52991-1-5-1-1704499476\\__MACOSX\\scripts\\BetterMasterIndex\\._BMI_player.lua": "\u0000\u0005\u0016\u0007\u0000\u0002\u0000\u0000Mac OS X        \u0000\u0002\u0000\u0000\u0000\t\u0000\u0000\u00002\u0000\u0000\u0000q\u0000\u0000\u0000\u0002\u0000\u0000\u0000Ј\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ATTR\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ј\u0000\u0000\u0000�\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000�\u0000\u0000\u0000\u000b\u0000\u0000\u0015com.apple.provenance\u0000\u0001\u0000\u0000&ЃJЦ\u0019_‰i"
  }
}