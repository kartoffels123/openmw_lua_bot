{
  "folder_name": "Practical Repair (OpenMW)",
  "lua_files": {
    "Practical Repair-54683-0-11-1716222557\\scripts\\practical_repair\\addWorkstations.lua": "local I = require(\"openmw.interfaces\")\n\n-- this is an example/template on how to add more workstations to your game\n\nlocal stations = {{\n    id = \"fargoth\", -- record id of the object to be considered as a workstation, any game object is valid\n    name = \"Workbench\", -- name that will be displayed\n    tool = \"prong\" -- the type of tool that can be used for this workstation, the pattern used to match either record id or name of the object\n}, {\n    id = \"furn_com_rm_table_04\", -- the table with hrisskar's note in the census office in seyda neen\n    name = \"Worktable\", -- for objects that already have a name tooltip, it's better to use an empty string\n    tool = \"hammer\"\n}}\n\nfor _, station in pairs(stations) do\n    -- I.PracticalRepair_eqnx.addStation(station)\nend\n\n-- then you need to include this file in your omwscripts file under GLOBAL\n-- e.g\n-- GLOBAL: scripts/practical_repair/addWorkstations.lua\n",
    "Practical Repair-54683-0-11-1716222557\\scripts\\practical_repair\\global.lua": "local types = require(\"openmw.types\")\nlocal I = require(\"openmw.interfaces\")\nlocal core = require(\"openmw.core\")\nlocal l10n = core.l10n(\"practical_repair\")\nlocal util = require(\"openmw.util\")\nlocal storage = require(\"openmw.storage\")\nlocal settings = storage.globalSection(\"Settings_practical_repair_main_option\")\n\nlocal tempTransfer = {}\n\nlocal function nameOrIdMatch(tool, toolType)\n    if tool.recordId:find(toolType) or tool.type.record(tool).name:lower():find(toolType) then\n        return tool\n    end\nend\n\nI.ItemUsage.addHandlerForType(types.Repair, function(object, actor)\n    if settings:get(\"Mod Status\") then\n        actor:sendEvent(\"PracticalRepair_message_eqnx\", {\n            msg = l10n(\"PracticalRepair_findAnvilOrForge\"),\n            fail = true\n        })\n        return false\n    end\nend)\n\nlocal function getToolTypeForStation(stationObj)\n    for _, station in pairs(I.PracticalRepair_eqnx.stations) do\n        if station.id:lower() == stationObj.recordId then\n            return station.tool\n        end\n    end\nend\n\nlocal function returnTools(actor)\n    for k, v in pairs(tempTransfer[actor.id] or {}) do\n        v:moveInto(types.Actor.inventory(actor))\n    end\n    tempTransfer[actor.id] = {}\nend\n\nreturn {\n    engineHandlers = {\n        onSave = function()\n            return {\n                tempTransfer = tempTransfer\n            }\n        end,\n        onLoad = function(data)\n            if data and data.tempTransfer then\n                tempTransfer = data.tempTransfer\n            end\n        end,\n        -- future, refactor this block of code\n        onActivate = function(obj, actor)\n            local toolType = getToolTypeForStation(obj)\n            if actor.type == types.Player and toolType then\n\n                if #I.PracticalRepair_eqnx.activationBlock[actor.id] > 0 then\n                    table.remove(I.PracticalRepair_eqnx.activationBlock[actor.id])\n                    return\n                end\n\n                actor:sendEvent(\"PracticalRepair_setPickingRepairTool_eqnx\", true)\n\n                local repairtool\n                for _, repairItem in pairs(types.Actor.inventory(actor):getAll(types.Repair)) do\n                    local temp = nameOrIdMatch(repairItem, toolType)\n                    if temp then\n                        repairtool = temp\n                    else\n                        if not tempTransfer[actor.id] then\n                            tempTransfer[actor.id] = {}\n                        end\n                        table.insert(tempTransfer[actor.id], repairItem)\n                    end\n                end\n                if repairtool then\n                    for _, repairItem in pairs(tempTransfer[actor.id] or {}) do\n                        -- protected call because teleport() can be dodgy in *extremely* rare cases\n                        local successful, res = pcall(repairItem.teleport, repairItem, actor.cell,\n                            actor.position - util.vector3(0, 0, 10000))\n                        if not successful then\n                            print(\"[Practical Repair] Warning:\", res)\n                            returnTools(actor)\n                            return\n                        end\n                    end\n                    actor:sendEvent(\"AddUiMode\", {\n                        mode = \"Repair\",\n                        target = repairtool\n                    })\n                    actor:sendEvent(\"PracticalRepair_repairBoost_eqnx\")\n                    return\n                end\n\n                tempTransfer[actor.id] = {}\n                actor:sendEvent(\"PracticalRepair_setPickingRepairTool_eqnx\", false)\n                actor:sendEvent(\"PracticalRepair_message_eqnx\", {\n                    msg = string.format(l10n(\"PracticalRepair_equipToRepair\"), toolType),\n                    fail = true\n                })\n            end\n        end\n    },\n    eventHandlers = {\n        PracticalRepair_initPlayer_eqnx = function(player)\n            for _, station in pairs(I.PracticalRepair_eqnx.stations) do\n                player:sendEvent(\"PracticalRepair_updateStation_eqnx\", {\n                    id = station.id,\n                    name = station.name\n                })\n            end\n            core.sendGlobalEvent(\"PracticalRepair_returnTools_eqnx\", player)\n        end,\n        PracticalRepair_returnTools_eqnx = returnTools\n    }\n}\n",
    "Practical Repair-54683-0-11-1716222557\\scripts\\practical_repair\\global_interface.lua": "local core = require(\"openmw.core\")\nlocal world = require(\"openmw.world\")\nlocal aux_util = require(\"openmw_aux.util\")\n\nlocal l10n = core.l10n(\"practical_repair\")\n\nlocal activationBlock = setmetatable({}, {\n    __index = function()\n        return {}\n    end\n})\n\nlocal stations = {{\n    id = \"furn_anvil00\",\n    name = l10n(\"PracticalRepair_Anvil\"),\n    tool = \"hammer\"\n}, {\n    id = \"furn_t_fireplace_01\",\n    name = l10n(\"PracticalRepair_Forge\"),\n    tool = \"prong\"\n}, {\n    id = \"furn_de_forge_01\",\n    name = l10n(\"PracticalRepair_Forge\"),\n    tool = \"prong\"\n}, {\n    id = \"furn_de_bellows_01\",\n    name = l10n(\"PracticalRepair_Forge\"),\n    tool = \"prong\"\n}, {\n    id = \"Furn_S_forge\",\n    name = l10n(\"PracticalRepair_Forge\"),\n    tool = \"prong\"\n}}\n\nlocal help = [[\n    addStation(arg): Adds a repair station to the mod database.\n    Added stations are not persistent between sessions.\n    I.PracticalRepair_eqnx.addStation({\n        id = \"my_workstation_recordid\",\n        name = \"my_workstation_name\",\n        tool = \"prong_hammer_anypattern\"\n    })\n\n    registeredStations: Prints all registered stations\n    I.PracticalRepair_eqnx.registeredStations\n\n    stationsInfo: Prints all location of registered stations\n    I.PracticalRepair_eqnx.stationsInfo\n\n    blockActivation(obj): Increments activation block counter for the object\n    I.PracticalRepair_eqnx.blockActivation(world.players[1])\n\n    info: Prints info about the mod\n]]\n\nreturn {\n    interfaceName = \"PracticalRepair_eqnx\",\n    interface = setmetatable({}, {\n        __index = function(_, key)\n            if key == \"info\" then\n                return tostring(require(\"scripts.practical_repair.modInfo\"))\n            end\n            if key == \"help\" then\n                return help\n            end\n            if key == \"registeredStations\" then\n                return aux_util.deepToString(stations, 2)\n            end\n            if key == \"addStation\" then\n                return function(arg)\n                    assert(arg.id, \"Please provide id of the station.\")\n                    assert(arg.tool, \"Please provide tool for the station\")\n                    assert(arg.name, \"Please provide name for the station\")\n                    print(string.format(\"[Practical Repair] Adding station: %s [%s]\", arg.id, arg.tool))\n\n                    table.insert(stations, arg)\n\n                    for _, player in pairs(world.players) do\n                        player:sendEvent(\"PracticalRepair_updateStation_eqnx\", {\n                            id = arg.id,\n                            name = arg.name\n                        })\n                    end\n                end\n            end\n            if key == \"stationsInfo\" then\n                local stationIds = {}\n                local str = \"\"\n                for _, station in pairs(stations) do\n                    stationIds[station.id] = station.tool\n                end\n                for _, cell in pairs(world.cells) do\n                    for _, object in pairs(cell:getAll()) do\n                        if stationIds[object.recordId] then\n                            str = str .. object.recordId ..\n                                      string.format(\" [%s] ---> [%s]\\n\", stationIds[object.recordId], cell.name)\n                        end\n                    end\n                end\n                return str\n            end\n            if key == \"stations\" then\n                return stations\n            end\n            if key == \"blockActivation\" then\n                return function(player)\n                    assert(player, \"No game object provided\")\n                    if #activationBlock[player.id] == 0 then\n                        activationBlock[player.id] = {}\n                    end\n                    table.insert(activationBlock[player.id], true)\n                end\n            end\n            if key == \"activationBlock\" then\n                return activationBlock\n            end\n        end\n    })\n}\n",
    "Practical Repair-54683-0-11-1716222557\\scripts\\practical_repair\\message.lua": "local ui = require(\"openmw.ui\")\nlocal ambient = require(\"openmw.ambient\")\nlocal storage = require(\"openmw.storage\")\nlocal settings = storage.globalSection(\"Settings_practical_repair_main_option\")\n\nreturn {\n    eventHandlers = {\n        PracticalRepair_message_eqnx = function(status)\n            if settings:get(\"Notification\") then\n                ui.showMessage(status.msg)\n                if status.fail then\n                    ambient.playSound(\"repair fail\", {\n                        pitch = 2\n                    })\n                end\n            end\n        end\n    }\n}\n",
    "Practical Repair-54683-0-11-1716222557\\scripts\\practical_repair\\modInfo.lua": "local CHANGES = [[ \n    Added checks when activating uninteractable objects such as statics\n    Added missing template file addWorkstations.lua\n    Handles rare cases of errors when activating a workstation\n    Added an interface function -blockActivation(actor)- to allow other mods to block activation of a station\n]]\n\nreturn setmetatable({\n    MOD_NAME = \"Practical Repair\",\n    MOD_VERSION = 0.11,\n    MIN_API = 60,\n    CHANGES = CHANGES\n}, {\n    __tostring = function(modInfo)\n        return string.format(\"\\n[%s]\\nVersion: %s\\nMinimum API: %s\\nChanges: %s\", modInfo.MOD_NAME, modInfo.MOD_VERSION, modInfo.MIN_API, modInfo.CHANGES)\n    end,\n    __metatable = tostring\n})\n\n-- require(\"scripts.practical_repair.modInfo\")\n",
    "Practical Repair-54683-0-11-1716222557\\scripts\\practical_repair\\player.lua": "local util = require(\"openmw.util\")\nlocal ui = require(\"openmw.ui\")\nlocal self = require(\"openmw.self\")\nlocal nearby = require(\"openmw.nearby\")\nlocal input = require(\"openmw.input\")\nlocal camera = require(\"openmw.camera\")\nlocal core = require(\"openmw.core\")\nlocal types = require(\"openmw.types\")\nlocal I = require(\"openmw.interfaces\")\nlocal storage = require(\"openmw.storage\")\nlocal settings = storage.globalSection(\"Settings_practical_repair_main_option\")\nlocal modInfo = require(\"scripts.practical_repair.modInfo\")\nlocal l10n = core.l10n(\"practical_repair\")\n\nI.Settings.registerPage {\n    key = \"practical_repair_main_page\",\n    l10n = \"practical_repair\",\n    name = \"settings_modName\",\n    description = l10n(\"settings_modDesc\"):format(modInfo.MOD_VERSION)\n}\n\nlocal menu = nil\nlocal stations = {}\nlocal pickingRepairTool\nlocal targetStation\nlocal lastBoostedAmount = 0\nlocal iMaxActivateDist = core.getGMST(\"iMaxActivateDist\")\n\nlocal function destroyIndicator()\n    if menu then\n        menu:destroy()\n        menu = nil\n    end\nend\n\nlocal function modDisabled()\n    local disabled = settings:get(\"Mod Status\") == false\n    if disabled then\n        targetStation = nil\n        pickingRepairTool = false\n        destroyIndicator()\n    end\n    return disabled\nend\n\nlocal function getTarget(distanceLimit, viewPort_v2)\n    local cameraPos = camera.getPosition()\n    local cursorVector = camera.viewportToWorldVector(viewPort_v2 or util.vector2(0.5, 0.5))\n    local maxRayDistance = distanceLimit or camera.getViewDistance()\n    local finalPos = cameraPos + cursorVector * maxRayDistance\n    local rayResult = nearby.castRenderingRay(cameraPos, finalPos,\n        { -- seems like castRenderingRay is better than castRay for this\n            collisionType = nearby.COLLISION_TYPE.World,\n            ignore = self\n        })\n    return rayResult, cameraPos, finalPos\nend\n\nlocal function pad(layout)\n    return {\n        template = I.MWUI.templates.padding,\n        content = ui.content {{\n            template = I.MWUI.templates.padding,\n            content = ui.content {{\n                template = I.MWUI.templates.padding,\n                content = ui.content {layout}\n            }}\n        }}\n    }\nend\n\nlocal function createIndicator(targetStation)\n    local stationName = stations[targetStation.recordId]\n    if stationName:len() <= 0 then\n        return\n    end\n    local layout = {\n        name = targetStation.id,\n        layer = \"Notification\",\n        type = ui.TYPE.Flex,\n        props = {\n            relativePosition = util.vector2(0.50, 0.45)\n        },\n        content = ui.content {{\n            template = I.MWUI.templates.boxSolid,\n            content = ui.content {pad {\n                template = I.MWUI.templates.textHeader,\n                props = {\n                    text = stationName\n                }\n            }}\n        }}\n    }\n    if not menu then\n        menu = ui.create(layout)\n        menu:update()\n    elseif menu.layout.name ~= targetStation.id then\n        destroyIndicator()\n    end\nend\n\nlocal function checkTargetIsStation()\n    if I.UI.getMode() ~= nil then\n        destroyIndicator()\n        return\n    end\n    local telekinesisRange = types.Actor.activeEffects(self):getEffect(\"telekinesis\").magnitude\n    local activationDist = iMaxActivateDist + (telekinesisRange * 21.33333333)\n    local res = getTarget(activationDist)\n    if res.hit and res.hitObject and stations[res.hitObject.recordId] then\n        local canActivate = (res.hitPos - self.position):length() <= activationDist\n        if canActivate then\n            targetStation = res.hitObject\n            createIndicator(targetStation)\n        end\n    else\n        destroyIndicator()\n        targetStation = nil\n    end\nend\n\nlocal function clearBonus()\n    local armorerStat = types.NPC.stats.skills.armorer(self)\n    armorerStat.modifier = armorerStat.modifier - lastBoostedAmount\n    lastBoostedAmount = 0\nend\n\nreturn {\n    engineHandlers = {\n        onInputAction = function(action)\n            if action == input.ACTION.Activate and not pickingRepairTool then\n                if targetStation and I.UI.getMode() == nil then\n                    if targetStation.type == types.Static then\n                        targetStation:activateBy(self)\n                    end\n                end\n            end\n        end,\n        onFrame = function(dt)\n            if modDisabled() then\n                return\n            end\n            if not pickingRepairTool and I.UI.getMode() == \"Repair\" then\n                self:sendEvent(\"PracticalRepair_message_eqnx\", {\n                    msg = l10n(\"PracticalRepair_findAnvilOrForge\")\n                })\n                I.UI.removeMode(\"Repair\")\n            end\n            checkTargetIsStation()\n        end,\n        onActive = function()\n            core.sendGlobalEvent(\"PracticalRepair_initPlayer_eqnx\", self)\n        end,\n        onSave = function()\n            return {\n                lastBoostedAmount = lastBoostedAmount\n            }\n        end,\n        onLoad = function(data)\n            if data and data.lastBoostedAmount then\n                lastBoostedAmount = data.lastBoostedAmount\n                clearBonus()\n            end\n        end\n    },\n    eventHandlers = {\n        PracticalRepair_setPickingRepairTool_eqnx = function(bool)\n            pickingRepairTool = bool\n        end,\n        PracticalRepair_repairBoost_eqnx = function()\n            if settings:get(\"Repair Boost\") then\n                local armorerStat = types.NPC.stats.skills.armorer(self)\n                armorerStat.modifier = armorerStat.modifier + settings:get(\"Boost Amount\")\n                lastBoostedAmount = settings:get(\"Boost Amount\")\n                -- better to use fortify spell instead of modifying skill directly\n\n            end\n        end,\n        PracticalRepair_updateStation_eqnx = function(station)\n            stations[station.id] = station.name\n        end,\n        UiModeChanged = function(data)\n            if data.oldMode == \"Repair\" then\n                core.sendGlobalEvent(\"PracticalRepair_returnTools_eqnx\", self)\n                pickingRepairTool = false\n                clearBonus()\n            end\n        end\n    }\n}\n",
    "Practical Repair-54683-0-11-1716222557\\scripts\\practical_repair\\settings.lua": "local I = require(\"openmw.interfaces\")\nlocal core = require(\"openmw.core\")\n\nI.Settings.registerGroup {\n    key = \"Settings_practical_repair_main_option\",\n    page = \"practical_repair_main_page\",\n    l10n = \"practical_repair\",\n    name = \"setings_modCategory1_name\",\n    description = \"\",\n    permanentStorage = true,\n    settings = {{\n        key = \"Mod Status\",\n        renderer = \"checkbox\",\n        name = \"setings_modCategory1_setting1_name\",\n        description = \"setings_modCategory1_setting1_desc\",\n        default = true,\n        argument = {\n            trueLabel = core.getGMST(\"sYes\"),\n            falseLabel = core.getGMST(\"sNo\")\n        }\n    }, {\n        key = \"Repair Boost\",\n        renderer = \"checkbox\",\n        name = \"setings_modCategory1_setting2_name\",\n        description = \"setings_modCategory1_setting2_desc\",\n        default = false,\n        argument = {\n            trueLabel = core.getGMST(\"sYes\"),\n            falseLabel = core.getGMST(\"sNo\"),\n            disabled = false\n        }\n    }, {\n        key = \"Boost Amount\",\n        renderer = \"number\",\n        name = \"setings_modCategory1_setting3_name\",\n        description = \"setings_modCategory1_setting3_desc\",\n        default = 0,\n        argument = {\n            disabled = false\n        }\n    }, {\n        key = \"Notification\",\n        renderer = \"checkbox\",\n        name = \"setings_modCategory1_setting4_name\",\n        description = \"setings_modCategory1_setting4_desc\",\n        default = true,\n        argument = {\n            trueLabel = core.getGMST(\"sYes\"),\n            falseLabel = core.getGMST(\"sNo\")\n        }\n    }}\n}\n"
  }
}