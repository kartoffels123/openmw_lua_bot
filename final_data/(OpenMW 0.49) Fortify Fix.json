{
  "folder_name": "(OpenMW 0.49) Fortify Fix",
  "lua_files": {
    "Fortify Fix-54786-1-6-1717553068\\FortifyFix\\Scripts\\FortFix_p.lua": "local core = require('openmw.core')\nlocal self = require('openmw.self')\nlocal storage = require('openmw.storage')\nlocal types = require('openmw.types')\nlocal I = require(\"openmw.interfaces\")\nlocal input = require('openmw.input')\nlocal async = require('openmw.async')\nlocal animation = require('openmw.animation')\nlocal MOD_NAME = \"FortifyFix\"\nlocal playerSection = storage.playerSection(\"SettingsPlayer\" .. MOD_NAME)\nlocal storedValues = storage.playerSection(\"storedValues\" .. MOD_NAME)\nstoredValues:setLifeTime(storage.LIFE_TIME.GameSession)\nlocal UI = require('openmw.interfaces').UI\nlocal Player = require('openmw.types').Player\nlocal Actor = require('openmw.types').Actor\nlocal dynamic = types.Actor.stats.dynamic\nlocal dispelling = false\n\nlocal function dbg(...)\n\tif true then\n\t\tprint(...)\n\tend\nend\n\nI.Settings.registerPage {\n\tkey = MOD_NAME,\n\tl10n = MOD_NAME,\n\tname = \"Fortify Fix\",\n\tdescription = \"\"\n}\n\nI.Settings.registerGroup {\n\tkey = \"SettingsPlayer\" .. MOD_NAME,\n\tl10n = MOD_NAME,\n\tname = \"\",\n\tpage = MOD_NAME,\n\tdescription = \"\",\n\tpermanentStorage = true,\n\tsettings = {\n\t\t{\n\t\t\tkey = \"healthFortifyBase\",\n\t\t\tname = \"Fortify Max Health\",\n\t\t\tdefault = false,\n\t\t\trenderer = \"checkbox\",\n\t\t\tdescription = \"EXPERIMENTAL!! might permanently change your values\\nDO !!NOT!! UNINSTALL THE MOD WITH THIS SETTING ENABLED !!!\\nREINSTALLING THE MOD WON'T FIX PREVIOUS MISTAKES!\",\n\t\t},\n\t\t{\n\t\t\tkey = \"healthRestore\", -- \"restoreHealth\"\n\t\t\tname = \"Restored Health Per Buffed Minute\",\n\t\t\tdefault = 300,\n\t\t\targument = {\n\t\t\t\tmin = 0,\n\t\t\t\tmax = 99999999999,\n\t\t\t},\n\t\t\trenderer = \"number\",\n\t\t\tdescription = \"The percentage of the fortify effect that gets restored after it runs out\\nCalculated value will never exceed 100%\\n(Set to 0 to disable)\",\n\t\t},\n\t\t{\n\t\t\tkey = \"fatigueRestore\",\n\t\t\tname = \"Restored Fatigue Per Buffed Minute\",\n\t\t\tdefault = 300,\n\t\t\targument = {\n\t\t\t\tmin = 0,\n\t\t\t\tmax = 99999999999,\n\t\t\t},\n\t\t\trenderer = \"number\",\n\t\t\tdescription = \"The percentage of the fortify effect that gets restored after it runs out\\nCalculated value will never exceed 100%\\n(Set to 0 to disable)\",\n\t\t},\n\t\t{\n\t\t\tkey = \"magickaRestore\",\n\t\t\tname = \"Restored Magicka Per Buffed Minute\",\n\t\t\tdefault = 300,\n\t\t\targument = {\n\t\t\t\tmin = 0,\n\t\t\t\tmax = 99999999999,\n\t\t\t},\n\t\t\trenderer = \"number\",\n\t\t\tdescription = \"The percentage of the fortify effect that gets restored after it runs out\\nCalculated value will never exceed 100%\\n(Set to 0 to disable)\",\n\t\t},\n\t}\n}\n\n\n\n\nI.AnimationController.addTextKeyHandler('', function(groupname, key)\n\tif groupname == \"spellcast\" and key == \"self start\" then\n\t\tlocal spell = Player.getSelectedSpell(self)\n\t\tfor a,effect in pairs(spell.effects) do\n\t\t\tif effect.id == \"dispel\" and effect.magnitudeMin >= 100 then\n\t\t\t\tdispelling = true\n\t\t\t\t--dbg(\"started dispelling\")\n\t\t\tend\n\t\tend\n\telseif groupname == \"spellcast\" and key == \"self stop\" then\n\t\tdispelling = false\n\t\t--dbg(\"stopped dispelling\")\n\tend\nend)\n\nI.SkillProgression.addSkillUsedHandler(function(skillId, params)\n\t--if  playerSection:get(\"percentagePerMinute\") == 0 then\n\t--\treturn\n\t--end\n\tif dispelling and skillId == \"mysticism\" then\n\t\tlocal bonuses={\n\t\t\thealth = 0,\n\t\t\tmagicka = 0,\n\t\t\tfatigue = 0\n\t\t}\n\t\tfor a,b in pairs(bonuses) do\n\t\t\tif playerSection:get(a..\"Restore\") == 0 then\n\t\t\t\tbonuses[a] = nil\n\t\t\tend\n\t\tend\n\t\tfor a,b in pairs(Actor.activeSpells(self)) do\n\t\t\tfor c,d in pairs(b.effects) do\n\t\t\t\tif d.id == \"fortifyhealth\" or d.id == \"fortifyfatigue\" or d.id == \"fortifymagicka\" then\n\t\t\t\t\tlocal stat = d.id:sub(8,-1)\n\t\t\t\t\tif bonuses[stat] then\n\t\t\t\t\t\tbonuses[stat] = bonuses[stat]+d.magnitudeThisFrame\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tfor a,b in pairs(Actor.activeSpells(self)) do\n\t\t\tfor c,d in pairs(b.effects) do\n\t\t\t\tif d.duration and (d.id == \"fortifyhealth\" or d.id == \"fortifyfatigue\" or d.id == \"fortifymagicka\") then\n\t\t\t\t\tlocal spell = core.magic.spells.records[b.id]\n\t\t\t\t\tif spell ~= nil and spell.type == core.magic.SPELL_TYPE.Spell then\n\t\t\t\t\t\tlocal remStat = d.id:sub(8,-1)\n\t\t\t\t\t\tif bonuses[remStat] then\n\t\t\t\t\t\t\tif playerSection:get(remStat..\"FortifyBase\") then\n\t\t\t\t\t\t\t\tdynamic[remStat](self).current = math.max(1+d.magnitudeThisFrame,math.min(\n\t\t\t\t\t\t\t\t\tdynamic[remStat](self).base,\n\t\t\t\t\t\t\t\t\tdynamic[remStat](self).current + d.magnitudeThisFrame * math.min(1, d.duration / 60 * playerSection:get(remStat..\"Restore\") / 100)\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tdynamic[remStat](self).current = math.max(1+d.magnitudeThisFrame,math.min(\n\t\t\t\t\t\t\t\t\tdynamic[remStat](self).base + bonuses[remStat],\n\t\t\t\t\t\t\t\t\tdynamic[remStat](self).current + d.magnitudeThisFrame * math.min(1, d.duration / 60 * playerSection:get(remStat..\"Restore\") / 100)\n\t\t\t\t\t\t\t\t))\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t--dynamic[remStat](self).current = math.max(1+d.magnitudeThisFrame, math.min(\n\t\t\t\t\t\t\t--\tdynamic[remStat](self).base + bonuses[remStat],\n\t\t\t\t\t\t\t--\tdynamic[remStat](self).current + d.magnitudeThisFrame * math.min(1, d.duration / 60 * playerSection:get(\"percentagePerMinute\") / 100)\n\t\t\t\t\t\t\t--))\n\t\t\t\t\t\t\tActor.activeSpells(self):remove(b.activeSpellId)\n\t\t\t\t\t\t\tdbg(\"dispelled fortify \"..math.floor(d.magnitudeThisFrame * math.min(1, d.duration / 60 * playerSection:get(remStat..\"Restore\") / 100))..\" (\"..d.magnitudeThisFrame..\") \"..remStat..\" on self\")\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\nend)\n\nfunction onFrame()\n\t--print(os.time())\n\tlocal remId = nil\n\tlocal remMagnitude = nil\n\tlocal remStat = nil\n\tlocal remDuration = nil\n\tlocal bonuses={\n\t\thealth = 0,\n\t\tmagicka = 0,\n\t\tfatigue = 0\n\t}\n\t--[[\n\tfor a,b in pairs(bonuses) do\n\t\tif playerSection:get(a..\"Restore\") == 0 then\n\t\t\tbonuses[a] = nil\n\t\tend\n\tend\n\t]]\n\tfor a,b in pairs(Actor.activeSpells(self)) do\n\t\tfor c,d in pairs(b.effects) do\n\t\t\tif d.id == \"fortifyhealth\" or d.id == \"fortifyfatigue\" or d.id == \"fortifymagicka\" then\n\t\t\t\tlocal stat = d.id:sub(8,-1)\n\t\t\t\tbonuses[stat] = bonuses[stat]+d.magnitudeThisFrame\n\t\t\t\t--print(d.magnitudeThisFrame)\n\t\t\t\t--print(d.magnitudeMin)\n\t\t\t\tif d.duration and d.durationLeft < 0.2 and playerSection:get(stat..\"Restore\") ~= 0 then\n\t\t\t\t\t--print(d.durationLeft) -- when waiting: negative values\n\t\t\t\t\tremId = b.activeSpellId\n\t\t\t\t\tremMagnitude = d.magnitudeThisFrame\n\t\t\t\t\tremStat = stat\n\t\t\t\t\tremDuration = d.duration\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tif remId then\n\t\tif playerSection:get(remStat..\"FortifyBase\") then\n\t\t\tdynamic[remStat](self).current = math.max(1+remMagnitude,math.min(\n\t\t\t\tdynamic[remStat](self).base,\n\t\t\t\tdynamic[remStat](self).current + remMagnitude * math.min(1, remDuration / 60 * playerSection:get(remStat..\"Restore\") / 100)\n\t\t\t))\n\t\telse\n\t\t\tdynamic[remStat](self).current = math.max(1+remMagnitude,math.min(\n\t\t\t\tdynamic[remStat](self).base + bonuses[remStat],\n\t\t\t\tdynamic[remStat](self).current + remMagnitude * math.min(1, remDuration / 60 * playerSection:get(remStat..\"Restore\") / 100)\n\t\t\t))\n\t\tend\n\t\tdbg(\"fortify \"..remStat..\" ran out, +\"..remMagnitude..\" \"..remStat)\n\t\tActor.activeSpells(self):remove(remId)\n\t\tbonuses[remStat] = bonuses[remStat] - remMagnitude\n\tend\n\t\n\tfor a,b in pairs(bonuses) do\n\t\tif playerSection:get(a..\"FortifyBase\") then\n\t\t\tif buffCache[a] ~= b then\n\t\t\t\tdynamic[a](self).base = dynamic[a](self).base + b - buffCache[a]\n\t\t\t\tbuffCache[a] = b\n\t\t\t\t\n\t\t\tend\n\t\telse\n\t\t\tif buffCache[a]>0 then\n\t\t\t\tdynamic[a](self).base = dynamic[a](self).base - buffCache[a]\n\t\t\t\tbuffCache[a] = 0\n\t\t\tend\n\t\tend\n\tend\nend\n\nlocal function onInit()\n\tbuffCache = {health = 0, fatigue = 0, magicka = 0}\n\treturn {buffCache = {health = 0, fatigue = 0, magicka = 0}}\nend\nlocal function onLoad(data)\n\tif not data then\n\t\tprint(\"no data\")\n\telseif not data.buffCache then\n\t\tprint(\"no buffCache\")\n\tend\n\tbuffCache = data and data.buffCache or {health = 0, fatigue = 0, magicka = 0}\nend\n\nlocal function onSave()\n\treturn {buffCache = buffCache}\nend\n\n\nreturn {\n\tengineHandlers ={ \n\t\tonFrame = onFrame,\n\t\tonLoad = onLoad,\n\t\tonSave = onSave,\n\t\tonInit = onInit,\n\t}\n}\n\n"
  }
}