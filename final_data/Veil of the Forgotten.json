{
  "folder_name": "Veil of the Forgotten",
  "lua_files": {
    "Veil of the Forgotten-54526-1-1-1-1716850226\\MWSE\\mods\\ZackHasACat\\VeilOfTheForgotten\\main.lua": "local spokenToActor\nlocal idToRelease\nlocal thrownHit = false\nlocal settings = require(\"ZackHasACat.VeilOfTheForgotten.settings\")\nlocal function getValue(id)\n    if not tes3.player.data.votf then\n        tes3.player.data.votf = {}\n    end\n    return tes3.player.data.votf[id]\nend\nlocal function setValue(id, value)\n    if not tes3.player.data.votf then\n        tes3.player.data.votf = {}\n    end\n    tes3.player.data.votf[id] = value\nend\nlocal function isThrowableOrb(id)\n    if id == \"zhac_ball_01\" then\n        return true\n    elseif id == \"zhac_ball_02\" then\n        return true\n    elseif getValue(id) then\n        return true\n    end\n    return false\nend\nlocal function actorCanBeCaptured(actor)\n    local percentage = actor.mobile.health.current / actor.mobile.health.base\n    local sett = settings.healthCaptureThreshold\n    if not sett then\n        sett = 0.5\n    end\n    if actor.data.isControlled then\n        return true\n    end\n    return percentage <= sett\nend\n\nlocal function pacifyRef(refId)\n    local obj = tes3.getReference(refId)\n    obj.mobile.fight = 0\n    obj.mobile.hello = 0\n    obj.mobile.alarm = 0\n    obj.mobile:stopCombat(true)\n    obj.data.isControlled = true\n    tes3.setAIFollow({ reference = obj, target = tes3.player })\nend\nlocal function uiObjectTooltipCallback(e)\n    if e.object and getValue(e.object.id) then\n        local idcheck = getValue(e.object.id)\n        if idcheck then\n            local obj = tes3.getReference(idcheck)\n            e.tooltip:createLabel { text = \"Occupant: \" .. obj.object.name }\n        end\n    end\nend\nevent.register(tes3.event.uiObjectTooltip, uiObjectTooltipCallback)\nlocal function projectileHitEscape(point, weapon)\n    if not weapon.id then\n        return\n    end\n    idToRelease = getValue(weapon.id)\n    if idToRelease then\n        local obj = tes3.getReference(idToRelease)\n        tes3.positionCell { reference = obj, position = point, cell = tes3.player.cell }\n\n\n        timer.start({\n            duration = 0.3,\n            callback = function()\n                pacifyRef(idToRelease)\n            end\n        })\n        if obj.baseObject.id:lower() == \"tr_m2_darvon golaren\" then\n            tes3.addItem { reference = tes3.player, item = \"zhac_ball_02\", playSound = false }\n        else\n            tes3.addItem { reference = tes3.player, item = \"zhac_ball_01\", playSound = false }\n        end\n        return true\n    else\n        return false\n    end\nend\nlocal function makeDoll()\n    \nend\nlocal function projectileHitActorCallback(e)\n    local weapon = e.firingWeapon\n    if e.firingReference.baseObject.id ~= \"player\" or not weapon then\n        return\n    end\n    if weapon.id == \"zhac_ball_01\" or (weapon.id == \"zhac_ball_02\" and e.target.baseObject.id:lower() == \"tr_m2_darvon golaren\") then\n        local canBeCapt = actorCanBeCaptured(e.target)\n        if not canBeCapt then\n            tes3.messageBox(\"You must weaken this target before they may be captured.\")\n            return\n        end\n        print(\"projectileHitActorCallback\")\n        local newObject = weapon:createCopy()\n        if e.target.baseObject.id:lower() == \"tr_m2_darvon golaren\" then\n            if tes3.getJournalIndex({ id = \"ZHAC_MorianaQ_1\" }) < 70 then\n                tes3.updateJournal({ id = \"ZHAC_MorianaQ_1\", index = 70 })\n            end\n            setValue(\"darvonItem\", newObject.id)\n        end\n        if not settings.dropAtFeet then\n            tes3.addItem { reference = tes3.player, item = newObject, playSound = false }\n        else\n            tes3.createReference({\n                object = newObject,\n                position = e.target.position,\n                cell = e.target\n                    .cell,\n                orientation = e.target.orientation\n            })\n        end\n        setValue(newObject.id, e.target.id)\n        tes3.positionCell { reference = e.target, position = tes3vector3.new(0, 0, 0), cell = \"zhac_ballstorage\" }\n        thrownHit = true\n    elseif (weapon.id == \"zhac_ball_02\" and e.target.baseObject.id:lower() ~= \"tr_m2_darvon golaren\") then\n        tes3.messageBox(\"This globe is not attuned to this person.\")\n    elseif getValue(weapon.id) then\n        local action = projectileHitEscape(e.target.position, weapon)\n        if action then\n            thrownHit = true\n        end\n    end\nend\nevent.register(tes3.event.projectileHitActor, projectileHitActorCallback)\nlocal function infoFilterCallback(e)\n    -- This early check will make sure our function\n    -- isn't executing unnecesarily\n    if (not e.passes) then\n        return\n    end\n\n    if e.dialogue.id:lower() ~= \"greeting 2\" and e.reference.data.isControlled then\n        -- Make sure to only block the greeting (Hello) lines\n        return false\n    end\nend\nevent.register(tes3.event.infoFilter, infoFilterCallback)\nlocal function projectileHitObjectCallback(e)\n    local point = e.position\n    local weapon = e.firingWeapon\n\n    if e.firingReference.baseObject.id ~= \"player\" then\n        return\n    end\n    local action = projectileHitEscape(point, weapon)\n    if action then\n        thrownHit = true\n    end\n\n    --thrownHit = true\nend\nevent.register(tes3.event.projectileHitObject, projectileHitObjectCallback)\n\nevent.register(tes3.event.projectileHitTerrain, projectileHitObjectCallback)\nlocal function makeIntoDoll(target)\n    \n    local id = getValue(target.baseObject.id)\n    local obj = tes3.getReference(id)\n    tes3.addSpell({ reference = obj, spell = \"zhac_standability\" })\n    local modifiedOrientation = tes3vector3.new(0, 0,  tes3.player.orientation.z - 180)\n    local modifiedPosition = tes3vector3.new(target.position.x, target.position.y, target.position.z + 10)\n    tes3.positionCell({ reference = obj, position =modifiedPosition, cell = target.cell, orientation = modifiedOrientation})\n    obj.scale = 0.1\n    --obj.mobile.activeAI = false\n    return false\nend\nlocal function unmakeIntoDoll(target)\n    \n    local id = getValue(target.baseObject.id)\n    local obj = tes3.getReference(id)\n    --obj.mobile.activeAI = true\n    tes3.removeSpell({ reference = obj, spell = \"zhac_standability\" })\n    tes3.positionCell { reference = obj, position = tes3vector3.new(0, 0, 0), cell = \"zhac_ballstorage\" }\n    obj.scale = 1\n    return false\nend\nlocal function activateCallback(e)\n    if e.target.object.id == \"zhac_crystal_01\" and tes3.getJournalIndex({ id = \"ZHAC_MorianaQ_1\" }) == 30 then\n        tes3.messageBox({\n            message =\n            \"As you touch the globe, the world goes dark.\\n\\nYou see a dark landscape. Red Mountain is in the distance, smoking far more than it currently does.\\nYou notice two fighters in the ruins of the city of Vivec. You recognize one as Moriana. They are struggling hard to fight each other, using fire, shock, all sorts of magic.\\n\\nFinally, you see Moriana struck down. It all goes black, and you awake.\",\n            buttons = { \"OK\" }\n        })\n\n        tes3.updateJournal({ id = \"ZHAC_MorianaQ_1\", index = 40 })\n        return false\n    elseif e.target.object.id:lower() == (\"T_Com_CrystalBallStand_01\"):lower() and tes3.mobilePlayer.readiedWeapon and isThrowableOrb(tes3.mobilePlayer.readiedWeapon.object.id) then\n        if tes3.menuMode() then\n            return\n        end\n        local moveMe = tes3.mobilePlayer.readiedWeapon.object.id\n        tes3.removeItem { reference = tes3.player, item = moveMe, playSound = false,count = 1 }\n        tes3.createReference({\n            object = moveMe,\n            position = e.target.position,\n            cell = e.target.cell,\n            orientation = e.target.orientation\n        })\n\n        return false\n    elseif e.target.data and e.target.data.isControlled == true then\n        tes3.setGlobal(\"zhac_speakingto_controlled\", 1)\n        spokenToActor = e.target\n        timer.start({\n            duration = .5,\n            callback = function()\n                tes3.setGlobal(\"zhac_speakingto_controlled\", 0)\n            end\n        })\n    elseif e.target.baseObject.id == \"zhac_shrinelady\" then\n        local val  = 0\n        local item = getValue(\"darvonItem\")\n        if item and tes3.getItemCount { reference = tes3.player, item = item } > 0 then\n            val = 1\n        end\n        tes3.setGlobal(\"zhac_votf_carrydar\", val)\n    elseif getValue(e.target.baseObject.id) then\n        if tes3.menuMode() then\n            unmakeIntoDoll(e.target)\n            return\n        else\n            makeIntoDoll(e.target)\n            return false\n        end\n    end\nend\nevent.register(\"menuEnter\", function(e)\n    local npcMobile = e.menu:getPropertyObject(\"PartHyperText_actor\")\n    if not (npcMobile and npcMobile.reference) then return end\n    local isNpc = npcMobile.reference.baseObject.objectType == tes3.objectType.npc\n\n    if isNpc and npcMobile.reference.data.isControlled == true then\n        local companionShareElement = e.menu:findChild(\"MenuDialog_service_companion\")\n        companionShareElement.visible = true\n    end\nend, { filter = \"MenuDialog\", priority = 100 })\nevent.register(tes3.event.activate, activateCallback)\n\nlocal function referenceActivatedCallback(e)\n    if e.reference.object.id == \"zhac_marker_compshare\" then\n        e.reference:delete()\n\n        tes3.showContentsMenu { reference = spokenToActor }\n    elseif e.reference.object.id == \"zhac_marker_compshare\" then\n            e.reference:delete()\n    \n            tes3.showContentsMenu { reference = spokenToActor }\n    elseif e.reference.object.id == \"zhac_marker_removedarv\" then\n        local remId = getValue(\"darvonItem\")\n        tes3.removeItem { reference = tes3.player, item = remId, playSound = false }\n    end\nend\n\nlocal function onAttackStart(e)\n    local mobile = e.reference.mobile\n    if not mobile then return end\n    if not mobile.readiedWeapon then return end\n    if e.reference ~= tes3.player then return end\n\n    local weapon = mobile.readiedWeapon.object --[[@as tes3weapon]]\n    if isThrowableOrb(weapon.id) then\n        thrownHit = false\n    end\nend\nlocal function projectileExpireCallback(e)\n    if e.firingReference.baseObject.id ~= \"player\" then\n        return\n    end\n    if not e.firingWeapon or not isThrowableOrb(e.firingWeapon.id) then\n        return\n    end\n    timer.start({\n        duration = 0.5,\n        callback = function()\n            if not thrownHit then\n                tes3.addItem { reference = tes3.player, item = e.firingWeapon.id, playSound = true }\n            end\n        end\n    })\nend\nevent.register(tes3.event.projectileExpire, projectileExpireCallback)\n\nevent.register(tes3.event.attackStart, onAttackStart)\nevent.register(tes3.event.referenceActivated, referenceActivatedCallback)\n",
    "Veil of the Forgotten-54526-1-1-1-1716850226\\MWSE\\mods\\ZackHasACat\\VeilOfTheForgotten\\settings.lua": "local configPath = \"zhac_votf\"\n\nlocal defaultConfig = {\n    dropAtFeet = false,\n    healthCaptureThreshold = 0.5,\n}\nlocal config = mwse.loadConfig(configPath, defaultConfig)\nlocal function registerModConfig()\n    EasyMCM = require(\"easyMCM.EasyMCM\")\n    local template = EasyMCM.createTemplate(\"Veil of the Forgotten\")\n    local page = template:createSideBarPage({\n        label = \"Settings\",\n        -- This description will be displayed at the right panel if no component is moused over.\n        description =\n            \"Veil of the Forgotten\\n\" ..\n            \"Version 1.0.0\\n\" ..\n            \"\\n\" ..\n            \"Veil of the Forgotten adds a quest, and a mechanic that allows you to capture creatures and people in 'temporal globes'.\\n\" ..\n            \"To begin, wait to have a dream with a vision, or visit the cave at the far southwest of the Grazelands.\\n\",\n    })\n    -- page:createCategory{\n    --      label = string.format(infoText)\n    --  }\n    -- page.description = infoText\n    local cSettings = page:createCategory(\"Settings\")\n    cSettings:createYesNoButton({\n        label = \"Drop at Feet\",\n        description =\n        \"If enabled, Temporal Globes will drop at the feet of the captured, if not, they will be added to your inventory.\",\n        variable = mwse.mcm.createTableVariable { id = \"dropAtFeet\", table = config }\n    })\n    cSettings:createPercentageSlider({\n        label          = \"Health Capture threshold\",\n        description    =\n        \"The percentage of health an actor must have expended to be captured. If it is at 10 percent, you'll have to have them under 10 percent to capture them initially.\",\n        variable       = mwse.mcm.createTableVariable { id = \"healthCaptureThreshold\", table = config },\n        min            = 0,\n        max            = 1,\n        step           = 1,\n        defaultSetting = 0.5\n    })\n    template:saveOnClose(configPath, config)\n    EasyMCM.register(template)\nend\nevent.register(\"modConfigReady\", registerModConfig)\n\nreturn config\n",
    "Veil of the Forgotten-54526-1-1-1-1716850226\\scripts\\VeilOfTheForgotten\\settings.lua": "local I = require('openmw.interfaces')\n\nlocal storage = require(\"openmw.storage\")\nlocal settings = storage.globalSection(\"SettingsVOTF\")\nlocal worldLoaded, world = pcall(require, \"openmw.world\")\n\nif worldLoaded then\n    I.Settings.registerGroup {\n        key = \"SettingsVOTF\",\n        page = \"SettingsVOTF\",\n        l10n = \"SettingsVOTF\",\n        name = \"Main Settings\",\n        permanentStorage = true,\n\n        settings = {\n            {\n                key = \"healthCaptureThreshold\",\n                renderer = \"number\",\n                name = \"Health Capture threshold\",\n                description = \"The percentage of health an actor must have expended to be captured. If it is at 10 percent, you'll have to have them under 10 percent to capture them initially.\",\n                default = 50,\n                max = 100,\n                min = 0\n            },\n            {\n                key = \"dropAtFeet\",\n                renderer = \"checkbox\",\n                description =\n                \"If enabled, Temporal Globes will drop at the feet of the captured, if not, they will be added to your inventory.\",\n                name = \"Drop at Feet\",\n                default = false,\n            },\n        },\n\n    }\nend\n\nreturn {\n    getHealthCaptureThreshold = function()\n        return settings:get(\"healthCaptureThreshold\") or 50\n    end,\n    getDropAtFeet = function()\n        return settings:get(\"dropAtFeet\") or false\n    end,\n}\n",
    "Veil of the Forgotten-54526-1-1-1-1716850226\\scripts\\VeilOfTheForgotten\\VOTF_A.lua": "local I = require(\"openmw.interfaces\")\nlocal self = require(\"openmw.self\")\nlocal core = require(\"openmw.core\")\nlocal types = require(\"openmw.types\")\nlocal async = require(\"openmw.async\")\nlocal nearby = require(\"openmw.nearby\")\nif core.API_REVISION < 59 then\n    return {}\nend\nlocal guideState = nil\nlocal isPendingCapture = false\nlocal expireDt = 0\nlocal isPawn = false\nlocal frozen = false\nlocal myOrb\nlocal anim = require('openmw.animation')\nlocal function isCaptured()\n    return types.Actor.activeSpells(self):isSpellActive(\"zhac_soulcapture_shock\")\nend\nlocal function onRelease()\n    types.Actor.stats.ai.fight(self).base = 0\n    types.Actor.stats.ai.hello(self).base = 0\n    types.Actor.stats.ai.alarm(self).base = 0\n    I.AI.removePackages()\n    types.Actor.setStance(self, types.Actor.STANCE.Nothing)\n    async:newUnsavableSimulationTimer(3, function()\n        types.Actor.stats.ai.fight(self).base = 0\n        types.Actor.stats.ai.hello(self).base = 0\n        types.Actor.stats.ai.alarm(self).base = 0\n        I.AI.removePackages()\n        types.Actor.setStance(self, types.Actor.STANCE.Nothing)\n        I.AI.startPackage({ type = \"Follow\", target = nearby.players[1] })\n    end)\nend\nlocal function makeIntoDoll(id)\n    myOrb = id\n    self:enableAI(false)\n    onRelease()\n    frozen = true\nend\nlocal function checkForCapture()\n    isPendingCapture = true\n    expireDt = core.getSimulationTime() + 10\nend\nlocal function onUpdate(dt)\n    if isPendingCapture then\n        if core.getSimulationTime() < expireDt then\n            if isCaptured() then\n                core.sendGlobalEvent(\"captureComplete\", self)\n                isPendingCapture = false\n                isPawn = true\n            end\n        else\n            isPendingCapture = false\n        end\n    end\n    if frozen then\n        anim.skipAnimationThisFrame(self)\n        if myOrb then\n            local orb\n            for index, value in ipairs(nearby.items) do\n                if value.recordId == myOrb then\n                    orb = value\n                    break\n                end\n            end\n            if not orb then\n                self:enableAI(true)\n                core.sendGlobalEvent(\"putBackInCell\", self)\n                frozen = false\n            end\n        end\n    end\nend\nreturn {\n    eventHandlers = {\n        checkForCapture = checkForCapture,\n        onRelease = onRelease,\n        makeIntoDoll = makeIntoDoll,\n    },\n    engineHandlers = {\n        onUpdate = onUpdate,\n        onSave = function()\n            return {\n                isPawn = isPawn,\n                frozen = frozen,\n                myOrb = myOrb,\n            }\n        end,\n        onLoad = function(data)\n            if data then\n                isPawn = data.isPawn\n                frozen = data.frozen\n                myOrb = data.myOrb\n            end\n            if frozen then\n                self:enableAI(false)\n                core.sendGlobalEvent(\"fixScale\", { actor = self, scale = 0.1 })\n            end\n        end\n    }\n}\n",
    "Veil of the Forgotten-54526-1-1-1-1716850226\\scripts\\VeilOfTheForgotten\\VOTF_G.lua": "local types = require(\"openmw.types\")\nlocal world = require(\"openmw.world\")\nlocal core = require(\"openmw.core\")\nif core.API_REVISION < 59 then\n    return {}\nend\nlocal acti = require(\"openmw.interfaces\").Activation\nlocal util = require(\"openmw.util\")\nlocal I = require(\"openmw.interfaces\")\nlocal async = require(\"openmw.async\")\nlocal calendar = require('openmw_aux.calendar')\nlocal settings = require(\"scripts.VeilOfTheForgotten.settings\")\n\nlocal storedActors = {}\nlocal controlledActors = {}\nlocal dollActors = {}\nlocal spokenToActor\nlocal function getMyBall(actorId)\n    if actorId == \"tr_m2_darvon golaren\" then\n        return \"zhac_ball_02\"\n    else\n        return \"zhac_ball_01\"\n    end\nend\nlocal darvonRecordId = nil\nlocal function captureComplete(actor)\n    local name = actor.type.records[actor.recordId].name\n    local oldRecord = types.Weapon.records[getMyBall(actor.recordId)]\n    local newRecordDraft = types.Weapon.createRecordDraft({\n        template = oldRecord,\n        name = oldRecord.name ..\n            \" (\" .. name .. \")\"\n    })\n    local newRecord = world.createRecord(newRecordDraft)\n    local newItem = world.createObject(newRecord.id)\n    if actor.recordId == \"tr_m2_darvon golaren\" then\n        if  types.Player.quests(world.players[1])[\"ZHAC_MorianaQ_1\"].stage < 70 then\n            types.Player.quests(world.players[1])[\"ZHAC_MorianaQ_1\"]:addJournalEntry(70)\n        end\n        darvonRecordId = newRecord.id\n\n    end\n    storedActors[newRecord.id] = actor.id\n    table.insert(controlledActors, actor.id)\n    newItem:moveInto(world.players[1])\n    actor:teleport(\"ZHAC_BallStorage\", actor.position)\nend\nlocal function releaseAtTarget(data)\n    local weapon = data.weapon\n    local pos = data.pos\n\n    if storedActors[weapon] then\n        for index, value in ipairs(world.getCellByName(\"ZHAC_BallStorage\"):getAll()) do\n            if value.id == storedActors[weapon] then\n                --  async:newUnsavableSimulationTimer(3, function()\n\n                value:teleport(world.players[1].cell, pos)\n                value:sendEvent(\"onRelease\")\n                -- end)\n                storedActors[weapon] = nil\n                world.createObject(getMyBall(value.recordId)):moveInto(world.players[1])\n                return\n            end\n        end\n    end\nend\nlocal function returnItem(data)\n    local item = data.itemId\n    local actor = data.actor\n    world.createObject(item):moveInto(actor)\nend\nlocal function npcActivation(actor, player)\n    if dollActors[actor.id] then\n        return false\n    end\n    for index, value in ipairs(controlledActors) do\n        if value == actor.id then\n            world.mwscript.getGlobalVariables(player)[\"zhac_speakingto_controlled\"] = 1\n            async:newUnsavableSimulationTimer(1, function()\n                world.mwscript.getGlobalVariables(player)[\"zhac_speakingto_controlled\"] = 0\n            end)\n            spokenToActor = actor\n            return\n        end\n    end\n\n    if actor.recordId == \"zhac_shrinelady\" and darvonRecordId then\n        local val  = 0\n        local item = types.Actor.inventory(player):countOf(darvonRecordId)\n        if item > 0 then\n            val = 1\n        end\n        world.mwscript.getGlobalVariables(player)[\"zhac_votf_carrydar\"] = val\n    end\nend\nI.Activation.addHandlerForType(types.NPC, npcActivation)\nlocal function miscActivation(item, player)\n    if item.recordId == (\"T_Com_CrystalBallStand_01\"):lower() then\n        local weapon = types.Actor.getEquipment(player)[types.Actor.EQUIPMENT_SLOT.CarriedRight]\n        if weapon and storedActors[weapon.recordId] then\n            weapon:teleport(item.cell, item.position, item.rotation)\n            return false\n        end\n    elseif storedActors[item.recordId] then\n        for index, value in ipairs(world.getCellByName(\"ZHAC_BallStorage\"):getAll()) do\n            if value.id == storedActors[item.recordId] then\n                --  async:newUnsavableSimulationTimer(3, function()\n                types.Actor.spells(value):add(\"zhac_standability\")\n                local pz = world.players[1].rotation:getAnglesZYX()\n                local rot = util.transform.rotateZ(pz - math.rad(180))\n                value:teleport(world.players[1].cell,\n                    util.vector3(item.position.x, item.position.y, item.position.z ),rot)\n                value:sendEvent(\"makeIntoDoll\",item.recordId)\n                dollActors[value.id] = true\n                -- end)\n                value:setScale(0.1)\n                return false\n            end\n        end\n        return false\n    end\nend\nlocal function putBackInCell(actor)\n    actor:setScale(1)\n    actor:teleport(\"ZHAC_BallStorage\", actor.position)\n    dollActors[actor.id] = nil\nend\nI.Activation.addHandlerForType(types.Miscellaneous, miscActivation)\nI.Activation.addHandlerForType(types.Weapon, miscActivation)\n--T_Com_CrystalBallStand_01\nreturn {\n    eventHandlers = {\n        captureComplete = captureComplete,\n        releaseAtTarget = releaseAtTarget,\n        returnItem = returnItem,\n        putBackInCell = putBackInCell,\n        fixScale = function (data)\n            data.actor:setScale(data.scale)\n            \n        end\n    },\n    engineHandlers = {\n        onLoad = function(data)\n            storedActors = data.storedActors or {}\n            controlledActors = data.controlledActors or {}\n            darvonRecordId = data.darvonRecordId\n            dollActors = data.dollActors or {}\n        end,\n        onSave = function()\n            return { storedActors = storedActors, controlledActors = controlledActors, darvonRecordId = darvonRecordId, dollActors = dollActors }\n        end,\n        onItemActive = function(item)\n            if item.recordId == \"zhac_marker_compshare\" and spokenToActor then\n                item:remove()\n                world.players[1]:sendEvent(\"openCompShare\", spokenToActor)\n            elseif item.recordId == \"zhac_marker_removedarv\" and darvonRecordId then\n             types.Actor.inventory(   world.players[1]):find(darvonRecordId):remove()\n            elseif item.recordId == \"zhac_marker_release\" then\n                for index, value in ipairs(controlledActors) do\n                    if value == spokenToActor.id then\n                        table.remove(controlledActors, index)\n                    end\n                end\n            end\n        end\n    }\n}\n",
    "Veil of the Forgotten-54526-1-1-1-1716850226\\scripts\\VeilOfTheForgotten\\VOTF_P.lua": "-- OpenMW Lua Script: Terminal Interface\nlocal core = require(\"openmw.core\")\nlocal I = require('openmw.interfaces')\nif core.API_REVISION < 59 then\n    I.Settings.registerPage {\n        key = \"SettingsVOTF\",\n        l10n = \"SettingsVOTF\",\n        name = \"Veil of the Forgotten\",\n        description = \"Your OpenMW version is out of date. Please download a version of 0.49 from April 2024 or newer.\"\n    }\n    return {}\nend\nlocal self = require(\"openmw.self\")\nlocal types = require('openmw.types')\nlocal nearby = require('openmw.nearby')\nlocal camera = require('openmw.camera')\nlocal util = require('openmw.util')\nlocal ui = require('openmw.ui')\nlocal ambient = require('openmw.ambient')\nlocal rotOffset = 0\nlocal rotOffset2 = 0\nlocal compatMode = core.API_REVISION == 29\n\nlocal settings = require(\"scripts.VeilOfTheForgotten.settings\")\nlocal function getMyBall(actorId)\n    if actorId == \"tr_m2_darvon golaren\" then\n        return \"zhac_ball_02\"\n    else\n        return \"zhac_ball_01\"\n    end\nend\nI.Settings.registerPage {\n    key = \"SettingsVOTF\",\n    l10n = \"SettingsVOTF\",\n    name = \"Veil of the Forgotten\",\n    description = \"These settings allow you to modify the behavior of Veil of the Forgotten.\"\n}\nlocal function anglesToV(pitch, yaw)\n    local xzLen = math.cos(pitch)\n    return util.vector3(xzLen * math.sin(yaw), -- x\n        xzLen * math.cos(yaw),                 -- y\n        math.sin(pitch)                        -- z\n    )\nend\nlocal getEquipment = types.Actor.getEquipment\nif compatMode then\n    getEquipment = types.Actor.equipment\nend\nlocal function getRotation(rot, angle)\n    if compatMode then\n        return rot\n    else\n        local z, y, x = rot:getAnglesZYX()\n        return { x = x, y = y, z = z }\n    end\nend\nlocal function getCameraDirData(sourcePos)\n    local pos = sourcePos\n    local pitch, yaw\n\n    pitch = -(camera.getPitch() + camera.getExtraPitch())\n    yaw = (camera.getYaw() + camera.getExtraYaw())\n\n    return pos, anglesToV(pitch, yaw)\nend\n\nlocal function getObjInCrosshairs(ignoreOb, mdist, alwaysPost, sourcePos)\n    if not sourcePos then\n        sourcePos = camera.getPosition()\n    end\n    local pos, v = getCameraDirData(sourcePos)\n\n    local dist = 8500\n    if (mdist ~= nil) then dist = mdist end\n\n    local ret = nearby.castRay(pos, pos + v * dist, { ignore = self })\n    local destPos = (pos + v * dist)\n\n    return ret\nend\nlocal function createRotation(x, y, z)\n    if (core.API_REVISION < 40) then\n        return util.vector3(x, y, z)\n    else\n        local rotate = util.transform.rotateZ(z)\n        local rotatex = util.transform.rotateX(x)\n        local rotatey = util.transform.rotateY(y)\n        rotate = rotate:__mul(rotatey)\n        rotate = rotate:__mul(rotatex)\n        return rotate\n    end\nend\n\nlocal wasDrawing = false\nlocal pendingReturnWeapon\nlocal returnPos\nlocal returnDelay = 0\nlocal function returnPendingActor()\n    core.sendGlobalEvent(\"releaseAtTarget\", { weapon = pendingReturnWeapon, pos = returnPos })\n    pendingReturnWeapon = nil\nend\nlocal function findVictim(release, weapon)\n    local xRot = camera.getPitch() - math.rad(rotOffset)\n    local zRot = getRotation(self.rotation).z ---- math.rad(rotOffset2)\n    local cast = getObjInCrosshairs(self, nil, false, nil)\n\n    if release and not cast.hitPos and weapon then\n        --give the item back\n        core.sendGlobalEvent(\"returnItem\", { itemId = weapon, actor = self })\n        --ui.showMessage(\"Your globe has been returned to you.\")\n        return\n    elseif not release and not cast.hitPos then\n        core.sendGlobalEvent(\"returnItem\", { itemId = weapon, actor = self })\n        return\n    end\n\n    local navMeshPosition = nearby.findNearestNavMeshPosition(cast.hitPos)\n    if not navMeshPosition and weapon then\n        core.sendGlobalEvent(\"returnItem\", { itemId = weapon, actor = self })\n        --   ui.showMessage(\"Your globe has been returned to you.\")\n        return\n    end\n    local dist\n    if weapon then\n        dist = (cast.hitPos - navMeshPosition):length()\n        if dist > 200 then\n            core.sendGlobalEvent(\"returnItem\", { itemId = weapon, actor = self })\n            -- ui.showMessage(\"Your globe has been returned to you.\")\n            return\n        end\n        local path = nearby.findPath(self.position, navMeshPosition, { includeFlags = nearby.NAVIGATOR_FLAGS.Walk })\n        if path ~= nearby.FIND_PATH_STATUS.Success then\n            core.sendGlobalEvent(\"returnItem\", { itemId = weapon, actor = self })\n            --  ui.showMessage(\"Your globe has been returned to you.\")\n            return\n        end\n    end\n    if release and cast.hitPos then\n        pendingReturnWeapon = weapon\n        returnPos = navMeshPosition\n        returnDelay = 3\n        return\n    end\n    if cast.hitObject and (cast.hitObject.type == types.NPC or cast.hitObject.type == types.Creature) then\n        local healthPercent = types.Actor.stats.dynamic.health(cast.hitObject).current /\n            types.Actor.stats.dynamic.health(cast.hitObject).base * 100\n        local threshold = settings.getHealthCaptureThreshold()\n        if weapon == \"zhac_ball_02\" and cast.hitObject.recordId ~= \"tr_m2_darvon golaren\" then\n            ui.showMessage(\"This globe is not attuned to this person.\")\n            core.sendGlobalEvent(\"returnItem\", { itemId = weapon, actor = self })\n            return\n        end\n        if healthPercent > threshold then\n            ui.showMessage(\"You must weaken this target before they may be captured.\")\n            core.sendGlobalEvent(\"returnItem\", { itemId = weapon, actor = self })\n            return\n        end\n        --  ui.showMessage(\"Hitting \" .. cast.hitObject.type.record(cast.hitObject).name)\n        cast.hitObject:sendEvent(\"checkForCapture\")\n        return\n    else\n        core.sendGlobalEvent(\"returnItem\", { itemId = weapon, actor = self })\n        return\n    end\nend\nlocal function onFrame(dt)\n    local drawing = self.controls.use == 1\n    if pendingReturnWeapon and ambient.isSoundPlaying(\"mysticism area\") then\n        returnDelay = 0\n    elseif pendingReturnWeapon and returnDelay > 0 then\n        returnDelay = returnDelay - dt\n    end\n    if returnPendingActor and returnDelay <= 0 then\n        returnPendingActor()\n        returnDelay = 0\n    end\n    if drawing then\n        wasDrawing = true\n    elseif not drawing and wasDrawing then\n        local weapon = getEquipment(self)[types.Actor.EQUIPMENT_SLOT.CarriedRight]\n        if not weapon then\n            return\n        end\n        if weapon.recordId == \"zhac_ball_01\" or weapon.recordId == \"zhac_ball_02\" then\n            findVictim(false, weapon.recordId)\n        else\n            local ballRecord = types.Weapon.records[\"zhac_ball_01\"]\n            if weapon.type.record(weapon).icon == ballRecord.icon then\n                findVictim(true, weapon.recordId)\n            end\n        end\n        wasDrawing = false\n    end\nend\nreturn {\n\n    interfaceName = \"ArrowStick\",\n    interface = {\n        getArrowRotation = getArrowRotation,\n    },\n    engineHandlers = {\n        onFrame = onFrame,\n    },\n    eventHandlers = {\n        openCompShare = function(actor)\n            I.UI.setMode(I.UI.MODE.Companion, { target = actor })\n        end,\n        returnPendingActor = returnPendingActor,\n    }\n}\n"
  }
}