{
  "folder_name": "Quicktrain",
  "lua_files": {
    "Quicktrain-53771-1-1-1713894229\\scripts\\QuickTrain\\quicktrain.lua": "local I = require(\"openmw.interfaces\")\nlocal ambient = require('openmw.ambient')\nlocal async = require(\"openmw.async\")\n\nlocal delay1 = 0.1\nlocal delay2 = 0.5\nlocal function UiModeChanged(data)\n    local newMode = data.newMode\n    local arg = data.arg\n    if newMode == \"Training\" then\n        async:newUnsavableSimulationTimer(delay1, function()\n            local soundPlaying = ambient.isSoundPlaying(\"skillraise\")\n            if soundPlaying then\n                async:newUnsavableSimulationTimer(delay2, function()\n                    local soundPlaying = ambient.isSoundPlaying(\"skillraise\")\n                    if not I.UI.getMode() and soundPlaying then\n                        I.UI.setMode(\"Training\", { target = arg })\n                    end\n                end)\n            end\n        end)\n    end\nend\nreturn {\n\n    eventHandlers = {\n        UiModeChanged = UiModeChanged\n    }\n}\n",
    "Quicktrain-53771-1-1-1713894229\\scripts\\QuickTrain\\training_log.lua": "local I = require(\"openmw.interfaces\")\nlocal ambient = require('openmw.ambient')\nlocal async = require(\"openmw.async\")\nlocal core = require(\"openmw.core\")\nlocal self = require(\"openmw.self\")\nlocal ui = require(\"openmw.ui\")\nlocal util = require(\"openmw.util\")\nlocal types = require(\"openmw.types\")\nlocal savedTrainerData = {}\n\nlocal logId\nlocal function addActorData(actor, skills)\n    savedTrainerData[actor.id] = {\n        name = types.NPC.record(actor).name,\n        cell = actor.cell.name,\n        skills = skills\n    }\nend\nlocal function getSkillData(skillName)\n    local skillLines = {}\n    for index, data in pairs(savedTrainerData) do\n        for skillId, skillValue in pairs(data.skills) do\n            local skillId = skillValue.name\n            if skillId == skillName then\n                table.insert(skillLines,\n                    {\n                        value = skillValue.base,\n                        line = data.name ..\n                            \" in \" .. data.cell .. \" up to \" .. tostring(skillValue.base)\n                    })\n            else\n            end\n        end\n    end\n    table.sort(skillLines, function(a, b) return a.value > b.value end)\n    return skillLines\nend\nlocal function getSkillBase(skillID, actor)\n    return types.NPC.stats.skills[skillID:lower()](actor).base\nend\n\nlocal function sortByValue(lhs, rhs)\n    return lhs[2] > rhs[2]\nend\nlocal function getSkillForTraining(actor, skill)\n    return getSkillBase(skill, actor)\nend\nlocal skillOrder\nlocal function tableFind(tbl, value)\n    for i, v in ipairs(tbl) do\n        if v == value then\n            return i\n        end\n    end\n    return nil\nend\nlocal function customSort(a, b)\n    -- Extract the skill names after the \"::\" and convert to lowercase\n\n    -- Get the positions of skills in the 'skillOrder' table\n    local positionA = tableFind(skillOrder, a.id)\n    local positionB = tableFind(skillOrder, b.id)\n\n    -- If either skill is not found in 'skillOrder' table, use alphabetical order\n    if not positionA then\n        positionA = string.lower(skillA)\n    end\n\n    if not positionB then\n        positionB = string.lower(skillB)\n    end\n\n    -- If base values are the same, sort by ID\n    if a.base == b.base then\n        return positionA < positionB\n    end\n\n    return a.base > b.base\nend\n\nlocal function getTrainerData(trainer)\n    local maxSkills = 3\n    local skills = {}\n    local skillRecords = {}\n    skillOrder = {}\n    for index, skill in pairs(core.stats.Skill.records) do\n        table.insert(skillRecords,skill.id)\n        table.insert(skillOrder,skill.id)\n    end\n    table.sort(skillRecords)\n    for index, skill in pairs(skillRecords) do\n        local record = core.stats.Skill.record(skill)\n        local value = types.NPC.stats.skills[skill](trainer).base\n\n        if #skills < maxSkills then\n            table.insert(skills, { id = skill,name = record.name, base = value })\n            table.sort(skills, customSort)\n        else\n            local lowest = skills[maxSkills]\n            if lowest.base < value then\n                skills[maxSkills].id = skill\n                skills[maxSkills].base = value\n                skills[maxSkills].name = record.name\n                table.sort(skills, customSort)\n            end\n        end\n    end\n    return skills\nend\nlocal function addTrainerData(trainer)\n    local skills = getTrainerData(trainer)\n    addActorData(trainer, skills)\nend\nlocal function UiModeChanged(data)\n    local newMode = data.newMode\n    local target = data.arg\n    if newMode == \"Training\" and target then\n        if not savedTrainerData[target.id] then\n            addTrainerData(target)\n        end\n    elseif newMode == \"Scroll\" and target and target.recordId == logId then\n        I.TrainingLogWindow.openTrainingLog()\n    end\nend\nreturn {\n\n    interfaceName = \"TrainingLog\",\n    interface = {\n\n        getSkillData = getSkillData,\n        getTrainerData = getTrainerData\n    },\n    eventHandlers = {\n        UiModeChanged = UiModeChanged,\n        setLogId = function(log)\n            logId = log\n        end,\n    },\n    engineHandlers = {\n        onSave = function() return { savedTrainerData = savedTrainerData, logId = logId } end,\n        onLoad = function(data)\n            if not data then return end\n            savedTrainerData = data.savedTrainerData\n            logId = data.logId\n        end,\n    }\n}\n",
    "Quicktrain-53771-1-1-1713894229\\scripts\\QuickTrain\\training_log_global.lua": "local template = \"bk_dagoth_urs_plans\"\nlocal types = require(\"openmw.types\")\nlocal world = require(\"openmw.world\")\n\nlocal logId\n\nlocal function onSave()\n    return { logId = logId, }\nend\n\nlocal function onLoad(data)\n    if data then\n        logId = data.logId\n    end\nend\nlocal function createBook(plr)\n    if not plr then plr = world.players[1] end\n    local draft = types.Book.createRecordDraft({ template = types.Book.record(template), name = \"Trainer Log\", text =\n    \"\", value = 0, enchantCapacity = 0 })\n    local record = world.createRecord(draft)\n    logId = record.id\n\n    local recordBook =world.createObject(logId)\n\n    recordBook:moveInto(plr)\n    plr:sendEvent(\"setLogId\",logId)\nend\nlocal function onPlayerAdded(plr)\n    if not logId then\n      createBook(plr)\n    end\nend\n\nreturn {\n    engineHandlers = { onSave = onSave, onLoad = onLoad, onPlayerAdded = onPlayerAdded },\n    eventHandlers = {createBook = createBook}\n}\n",
    "Quicktrain-53771-1-1-1713894229\\scripts\\QuickTrain\\training_log_window.lua": "local I = require(\"openmw.interfaces\")\nlocal ambient = require('openmw.ambient')\nlocal async = require(\"openmw.async\")\nlocal core = require(\"openmw.core\")\nlocal self = require(\"openmw.self\")\nlocal ui = require(\"openmw.ui\")\nlocal util = require(\"openmw.util\")\nlocal types = require(\"openmw.types\")\nlocal input = require(\"openmw.input\")\n\n\nlocal trainingLogWindow\nlocal hoveredOverId\nlocal columnsAndRows = {}\nlocal selectedCol = 1\nlocal selectedRow = 1\n\nlocal scale = 0.8\nlocal function scaledVector2(x,y)\nreturn util.vector2(x * scale, y * scale)\nend\nlocal function mouseMove(mouseEvent, data)\n    local id = data.id\n    if hoveredOverId ~= id then\n        hoveredOverId = id\n        for attributeIndex, attribute in ipairs(columnsAndRows) do\n            for skillIndex, skill in ipairs(attribute) do\n                if skill == id then\n                    selectedCol = attributeIndex\n                    selectedRow = skillIndex\n                    I.TrainingLogWindow.drawTrainingLog()\n                    return\n                end\n            end\n        end\n        I.TrainingLogWindow.drawTrainingLog()\n    end\nend\nlocal function flexedItems(content, horizontal)\n    if not horizontal then\n        horizontal = false\n    end\n    return ui.content {\n        {\n            type = ui.TYPE.Flex,\n            content = ui.content(content),\n            events = {\n                mouseMove = async:callback(mouseMove),\n            },\n            props = {\n                horizontal = horizontal,\n                align = ui.ALIGNMENT.Start,\n                arrange = ui.ALIGNMENT.Start,\n                --     size = util.vector2(100, 100),\n                autosize = true\n            }\n        }\n    }\nend\nlocal function renderItemBold(item, bold, id, tooltipData)\n    if not id then id = item end\n    local textTemplate = I.MWUI.templates.textNormal\n    if bold or hoveredOverId == id then\n        textTemplate = I.MWUI.templates.textHeader\n    end\n    return {\n        type = ui.TYPE.Container,\n        id = id,\n        tooltipData = tooltipData,\n        props = {\n            --  anchor = util.vector2(-1,0),\n            align = ui.ALIGNMENT.Center,\n            relativePosition = util.vector2(1, 0.5),\n            arrange = ui.ALIGNMENT.Center,\n        },\n        events = {\n            mouseMove = async:callback(mouseMove),\n          --  mousePress = async:callback(mouseClick),\n        },\n        content = ui.content {\n            {\n                template = I.MWUI.templates.padding,\n                alignment = ui.ALIGNMENT.Center,\n                content = ui.content {\n                    {\n                        type = ui.TYPE.Text,\n                        template = textTemplate,\n                        props = {\n                            text = item,\n                            textSize = 20 * scale,\n                            relativePosition = util.vector2(0.5, 0.5),\n                            arrange = ui.ALIGNMENT.Center,\n                            align = ui.ALIGNMENT.Center,\n                        }\n                    }\n                }\n            }\n        }\n    }\nend\n\nlocal function renderButton(text)\n    local itemTemplate\n    itemTemplate = I.MWUI.templates.boxThick\n\n    return {\n        type = ui.TYPE.Container,\n      --  events = {},\n        template = itemTemplate,\n        content = ui.content { renderItemBold(text) },\n    }\nend\nlocal function renderItemBoxed(content, size, itemTemplate)\n    local text\n    if not size then\n        size = scaledVector2(100, 100)\n    end\n    if not itemTemplate then\n        itemTemplate = I.MWUI.templates.boxThick\n    end\n\n    return {\n        type = ui.TYPE.Container,\n    --    events = {},\n        template = itemTemplate,\n        content = ui.content {\n            {\n                props = {\n                    size = size,\n                },\n                content = content\n            },\n        },\n    }\nend\nlocal function getSkillBase(skillID, actor)\n    return types.NPC.stats.skills[skillID:lower()](actor).base\nend\nlocal function drawTrainingLog()\n    if trainingLogWindow then\n        trainingLogWindow:destroy()\n    end\n    local xContent = {}\n    local content  = {}\n    for attributeIndex, attribute in pairs(core.stats.Attribute.records) do\n        local mySkills = {}\n        local attribContent = {}\n        local attribName = tostring(attribute.name ..\": \" .. tostring( types.Actor.stats.attributes[attribute.id](self).base))\n        table.insert(attribContent, renderItemBold(attribName, true))\n        local skillIndex = 0\n        if not columnsAndRows[attributeIndex] then\n            columnsAndRows[attributeIndex] = {}\n        end\n        for index, skill in pairs(core.stats.Skill.records) do\n            if skill.attribute == attribute.id then\n                skillIndex = skillIndex + 1\n\n                if not columnsAndRows[attributeIndex][skillIndex] then\n                    columnsAndRows[attributeIndex][skillIndex] = skill.name\n                end\n                local skillname = tostring(skill.name)\n                --   local skillBase = getSkillBase(skill.id,self)\n                --  local formattedString = string.format(\"%-10s: %d\", skillname, skillBase)\n\n                table.insert(mySkills, skillname)\n                table.insert(attribContent, renderItemBold(skillname))\n            end\n        end\n        if #mySkills > 0 then\n            table.insert(xContent, renderItemBoxed(flexedItems(attribContent, false), scaledVector2(150, 180)))\n        end\n    end\n    local attributeColumns = renderItemBoxed(flexedItems(xContent, true), util.vector2((160 * scale) * 7, 190 * scale),\n        I.MWUI.templates.padding)\n    local headerText       = renderItemBold(\"Training Log\", true)\n    table.insert(content, headerText)\n    table.insert(content, attributeColumns)\n    local knownTrainers = {}\n    local spacelessId = \"\"\n    for i, item in ipairs(core.stats.Skill.records) do\n        if item.name == hoveredOverId then\n            spacelessId = item.id\n            break\n        end\n    end\n    if hoveredOverId and core.stats.Skill.record(spacelessId) then\n        table.insert(knownTrainers, renderItemBold(hoveredOverId .. \": \" .. getSkillBase(spacelessId, self)))\n        table.insert(knownTrainers, renderItemBold(\"Known Trainers:\"))\n        local data = I.TrainingLog.getSkillData(hoveredOverId)\n        for i = 1, 10, 1 do\n            if data[i] then\n                table.insert(knownTrainers, renderItemBold(data[i].line))\n            else\n                table.insert(knownTrainers, renderItemBold(\"\"))\n            end\n        end\n    else\n        for i = 1, 12, 1 do\n            table.insert(knownTrainers, renderItemBold(\"\"))\n        end\n    end\n    local trainerRow = renderItemBoxed(flexedItems(knownTrainers, false),  util.vector2((160 * scale) * 7, 400 * scale),\n        I.MWUI.templates.padding)\n    table.insert(content, trainerRow)\n    -- table.insert(content, imageContent(resource, size))\n    trainingLogWindow = ui.create {\n        layer = \"Windows\",\n        template = I.MWUI.templates.boxTransparentThick\n        ,\n        props = {\n            anchor = util.vector2(0.5, 0.5),\n            relativePosition = util.vector2(0.5, 0.5),\n            arrange = ui.ALIGNMENT.Center,\n            align = ui.ALIGNMENT.Center,\n        },\n        content = ui.content {\n            {\n                type = ui.TYPE.Flex,\n                content = ui.content(content),\n                props = {\n                    horizontal = false,\n                    align = ui.ALIGNMENT.Center,\n                    arrange = ui.ALIGNMENT.Center,\n                    size = util.vector2(0, 0),\n                }\n            }\n        }\n    }\nend\n\nlocal function openTrainingLog()\n    --I.UI.setMode(\"Interface\", { windows = {} })\n    drawTrainingLog()\nend\n\nlocal function UiModeChanged(data)\n    local newMode = data.newMode\n    local arg = data.arg\n    if newMode == \"Training\" then\n    elseif not newMode and trainingLogWindow then\n        trainingLogWindow:destroy()\n        trainingLogWindow = nil\n    elseif newMode ~= \"Scroll\" and trainingLogWindow then\n\n        trainingLogWindow:destroy()\n        trainingLogWindow = nil\n    end\nend\n\nlocal function onKeyPress(key)\n    if not trainingLogWindow then return end\n\n    local nextCol = selectedCol\n    local nextRow = selectedRow\n    if key.code == input.KEY.LeftArrow then\n        nextCol = nextCol - 1\n    elseif key.code == input.KEY.RightArrow then\n        nextCol = nextCol + 1\n    elseif key.code == input.KEY.DownArrow then\n        nextRow = nextRow + 1\n    elseif key.code == input.KEY.UpArrow then\n        nextRow = nextRow - 1\n    end\n    if not columnsAndRows[nextCol] or not columnsAndRows[nextCol][nextRow] then\n\n    else\n        hoveredOverId = columnsAndRows[nextCol][nextRow]\n        selectedCol = nextCol\n        selectedRow = nextRow\n        drawTrainingLog()\n    end\nend\nlocal function onControllerButtonPress(id)\n    if not trainingLogWindow then return end\n\n    local nextCol = selectedCol\n    local nextRow = selectedRow\n    if id == input.CONTROLLER_BUTTON.DPadLeft then\n        nextCol = nextCol - 1\n    elseif id == input.CONTROLLER_BUTTON.DPadRight then\n        nextCol = nextCol + 1\n    elseif id == input.CONTROLLER_BUTTON.DPadDown then\n        nextRow = nextRow + 1\n    elseif id == input.CONTROLLER_BUTTON.DPadUp then\n        nextRow = nextRow - 1\n    end\n    if not columnsAndRows[nextCol] or not columnsAndRows[nextCol][nextRow] then\n\n    else\n        hoveredOverId = columnsAndRows[nextCol][nextRow]\n        selectedCol = nextCol\n        selectedRow = nextRow\n        drawTrainingLog()\n    end\nend\nreturn {\n\n    interfaceName = \"TrainingLogWindow\",\n    interface = {\n        drawTrainingLog = drawTrainingLog,\n        openTrainingLog = openTrainingLog,\n    },\n    eventHandlers = {\n        UiModeChanged = UiModeChanged,\n        drawTrainingLog = drawTrainingLog,\n        openTrainingLog = openTrainingLog,\n    },\n    engineHandlers = {\n        onKeyPress = onKeyPress,\n        onControllerButtonPress = onControllerButtonPress,\n    }\n}\n"
  }
}