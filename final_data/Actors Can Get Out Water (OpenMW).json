{
  "folder_name": "Actors Can Get Out Water (OpenMW)",
  "lua_files": {
    "Actors Can Get Out Water-55187-1-1-1725465069\\scripts\\actors_out_of_water\\creature.lua": "\nlocal self = require(\"openmw.self\")\nlocal types = require(\"openmw.types\")\nlocal Actor = types.Actor\nlocal selfRecord = types.Creature.record(self)\nlocal async = require(\"openmw.async\")\nlocal core = require(\"openmw.core\")\nlocal util = require(\"openmw.util\")\nlocal trans = util.transform\n--local nearby = require('openmw.nearby')\n\nlocal biped = selfRecord.isBiped\nlocal walk = selfRecord.canWalk\n\nlocal stdSize = 124\n\nlocal creatureSizes = {\n\t[\"almelexia.nif\"] = 1,\n\t[\"almelexia_warrior.nif\"] = 0.99,\n\t[\"ancestorghost.nif\"] = 1,\n\t[\"ascendedsleeper.nif\"] = 1.07,\n\t[\"ashghoul.nif\"] = 1.08,\n\t[\"ashslave.nif\"] = 1.04,\n\t[\"ashvampire.nif\"] = 1.2,\n\t[\"ashzombie.nif\"] = 1.03,\n\t[\"atronach_fire.nif\"] = 1.17,\n\t[\"atronach_frost.nif\"] = 1.31,\n\t[\"atronach_storm.nif\"] = 1.31,\n\t[\"babelfish.nif\"] = 0, -- Exclusively aquatic life must not be affected by this mod\n\t[\"bear_black_larger.nif\"] = 1.54,\n\t[\"bear_blond_larger.nif\"] = 1.03,\n\t[\"bear_brown_larger.nif\"] = 1.54,\n\t[\"bonelord.nif\"] = 1.16,\n\t[\"bonewalker.nif\"] = 1.11,\n\t[\"byagram.nif\"] = 0.77, -- theoriticaly 0.88, but Yagrum can't jump out of water\n\t[\"cavemudcrab.nif\"] = 0.61,\n\t[\"clannfear.nif\"] = 1,\n\t[\"clannfear_daddy.nif\"] = 1.44,\n\t[\"cliffracer.nif\"] = 2.21,\n\t[\"corprus_stalker.nif\"] = 1.03,\n\t[\"cr_draugr.nif\"] = 1.15,\n\t[\"daedroth.nif\"] = 1,\n\t[\"dagothr.nif\"] = 1.40,\n\t[\"draugrlord.nif\"] = 1.15,\n\t[\"dremora.nif\"] = 1,\n\t[\"dreugh.nif\"] = 0, -- Exclusively aquatic life must not be affected by this mod\n\t[\"durzog.nif\"] = 0.84,\n\t[\"durzog_collar.nif\"] = 0.84,\n\t[\"duskyalit.nif\"] = 0.94,\n\t[\"dwarvenspecter.nif\"] = 1,\n\t[\"fabricant.nif\"] = 0, -- theoriticaly 1, but this mod doesn't give them (mechanical creatures) ability to move up in water\n\t[\"fabricant_hulking.nif\"] = 0, -- theoriticaly 0.88, but this mod doesn't give them (mechanical creatures) ability to move up in water\n\t[\"fabricant_imperfect.nif\"] = 0, -- theoriticaly 2.04, but this mod doesn't give them (mechanical creatures) ability to move up in water\n\t[\"frostgiant.nif\"] = 1.98,\n\t[\"g_centurionspider.nif\"] = 0, -- this mod doesn't give them (mechanical creatures) ability to move up in water\n\t[\"goblin01.nif\"] = 0.84,\n\t[\"goblin02.nif\"] = 0.82,\n\t[\"goblin03.nif\"] = 1.23,\n\t[\"golden saint.nif\"] = 1,\n\t[\"greatbonewalker.nif\"] = 1.08,\n\t[\"guar.nif\"] = 1.20,\n\t[\"guar_white.nif\"] = 1.20,\n\t[\"guar_withpack.nif\"] = 1.20,\n\t[\"heart_akulakhan.nif\"] = 0, -- the Heart don't move in water\n\t[\"hircine.nif\"] = 0.98,\n\t[\"hircine_bear_larger.nif\"] = 2.06,\n\t[\"hircinewolf.nif\"] = 1.07,\n\t[\"horker.nif\"] = 0.4,\n\t[\"horker_larger.nif\"] = 0.89,\n\t[\"hunger.nif\"] = 0.85,\n\t[\"ice troll.nif\"] = 1.26,\n\t[\"iceminion.nif\"] = 0.60,\n\t[\"iceminion2.nif\"] = 0.60,\n\t[\"icemraider.nif\"] = 0.57,\n\t[\"kwama forager.nif\"] = 0.43,\n\t[\"kwama queen.nif\"] = 1.28,\n\t[\"kwama warior.nif\"] = 1.15,\n\t[\"kwama worker.nif\"] = 0.72,\n\t[\"lame_corprus.nif\"] = 0.92,\n\t[\"leastkagouti.nif\"] = 1.20,\n\t[\"liche.nif\"] = 1,\n\t[\"liche_king.nif\"] = 1,\n\t[\"lordvivec.nif\"] = 1.01,\n\t[\"minescrib.nif\"] = 0.32,\n\t[\"mount.nif\"] = 0.57,\n\t[\"netch_betty.nif\"] = 1.63,\n\t[\"netch_bull.nif\"] = 3.07,\n\t[\"nixhound.nif\"] = 0.87,\n\t[\"packrat.nif\"] = 0.46,\n\t[\"raven.nif\"] = 0.5,\n\t[\"rust rat.nif\"] = 0.45,\n\t[\"scamp_fetch.nif\"] = 0.85,\n\t[\"shalk.nif\"] = 0.37,\n\t[\"skeleton.nif\"] = 1,\n\t[\"slaughterfish.nif\"] = 0, -- Exclusively aquatic life must not be affected by this mod\n\t[\"sphere_centurions.nif\"] = 0, -- this mod doesn't give them (mechanical creatures) ability to move up in water\n\t[\"spherearcher.nif\"] = 0, -- this mod doesn't give them (mechanical creatures) ability to move up in water\n\t[\"spriggan.nif\"] = 1.01,\n\t[\"steam_centurions.nif\"] = 0, -- this mod doesn't give them (mechanical creatures) ability to move up in water\n\t[\"swimmer.nif\"] = 1.62,\n\t[\"udyrfrykte.nif\"] = 0.93,\n\t[\"undeadwolf_2.nif\"] = 0.63,\n\t[\"wingedtwilight.nif\"] = 0.99,\n\t[\"wolf_black.nif\"] = 0.63,\n\t[\"wolf_red.nif\"] = 0.63,\n\t[\"wolf_white.nif\"] = 0.88,\n\t[\"skinnpc.nif\"] = 1,\n}\n\nlocal NIFscales = {\n\t[\"ancestor_ghost_greater\"] = 1.3,\n\t[\"bm_bear_black_fat\"] = 1.55 / 1.5,\n\t[\"bm_bear_snow_unique\"] = 1.7,\n\t[\"bm_bear_spr_unique\"] = 1.2,\n\t[\"bonewalker_weak\"] = 0.8,\n\t[\"ogrim titan\"] = 1.3,\n\t[\"ogrim titan_velas\"] = 1.25,\n\t[\"dremora_lord_khash_uni\"] = 1.25,\n\t[\"fabricant_hulking_c_l\"] = 1.3,\n\t[\"goblin_officeruni\"] = 1 / 1.5,\n\t[\"bm_hircine\"] = 1.5,\n\t[\"bm_hircine2\"] = 1.9,\n\t[\"bm_icetroll_fg_uni\"] = 1.2,\n\t[\"netch_giant_unique\"] = 1.25,\n\t[\"dead rat\"] = 0.5,\n\t[\"rat_diseased\"] = 0.5,\n\t[\"rat_plague\"] = 0.5,\n\t[\"rat_plague_hall1\"] = 0.5,\n\t[\"rat_plague_hall1a\"] = 0.5,\n\t[\"rat_plague_hall2\"] = 0.5,\n\t[\"rat_rerlas\"] = 0.5,\n\t[\"bm_skeleton_pirate_capt\"] = 1.2,\n\t[\"skeleton nord \"] = 1.1, -- the final space is needed\n\t[\"skeleton nord_2\"] = 1.1,\n\t[\"skeleton_stahl_uni\"] = 1.1,\n\t[\"centurion_steam_a_c\"] = 1.2,\n\t[\"centurion_steam_advance\"] = 1.2,\n\t[\"centurion_steam_c_l\"] = 1.5,\n}\n\nlocal size\nlocal Model = string.match(selfRecord.model, '.*\\\\(.+)')\nif Model == nil then Model = \"no_model\" end -- theoriticaly impossible case\n\nModel = Model:lower()\nsize = creatureSizes[Model]\nif size == nil then -- we don't know this creature\n\tif selfRecord.canSwim and not walk and not biped and not selfRecord.canFly then\n\t\tsize = 0 -- we don't deal with pure aquatic life \n\telse\n\t\tsize = 1.1 -- If we don't know the creature we take the size of a high elf\n\t\tsize = size * stdSize\n\tend\nelse\n\tsize = size * stdSize\n\tlocal nifScale = NIFscales[self.recordId]\n\tif nifScale then size = size * nifScale end\nend\n\t\t\n\nlocal function waterCheck()\n\n\tasync:newUnsavableSimulationTimer(3 + math.random() * 2, waterCheck)\n\n\tif not Actor.isSwimming(self) or size == 0 then\n\t\treturn\n\tend\n\t\n\tlocal Cell = self.cell\n\tlocal Position = self.position\n\tlocal posZ = Position.z\n\tlocal finalSize = size * self.scale\n\tlocal newPosition\n\t\n\tif (walk or biped) and Actor.canMove(self) and posZ > Cell.waterLevel - finalSize then\n\n\t\tlocal fromActorSpace = trans.move(Position) * trans.rotateZ(self.rotation:getYaw()) -- y axis -> actor front\n\t\tnewPosition = fromActorSpace * util.vector3(0, finalSize * 0.25, finalSize * 0.9) -- move up + size*0.9, move front + size*0.25\n\n\t\t--testPosition = nearby.findNearestNavMeshPosition(newPosition, {\n\t\t--searchAreaHalfExtents = util.vector3(100, 100, 100),\n\t\t\t--includeFlags = nearby.NAVIGATOR_FLAGS.Walk,\n\t\t--})\n\n\telse\n\t\tnewPosition = util.vector3(Position.x,\n\t\t\t\t\t\t\t\t\tPosition.y,\n\t\t\t\t\t\t\t\t\tposZ + 20)\n\tend\n\t\n\tcore.sendGlobalEvent('Move', {\n\t\tactor = self,\n\t\tcell = Cell.name,\n\t\tposition = newPosition,\n\t})\n\t\nend\n\nasync:newUnsavableSimulationTimer(3 + math.random() * 2, waterCheck)\n",
    "Actors Can Get Out Water-55187-1-1-1725465069\\scripts\\actors_out_of_water\\global.lua": "local core = require(\"openmw.core\")\n\nreturn {\n\teventHandlers = {\n\t\tMove = function(e)\n\t\t\te.actor:teleport(e.cell, e.position)\n\t\tend,\n\t},\n}\n",
    "Actors Can Get Out Water-55187-1-1-1725465069\\scripts\\actors_out_of_water\\NPC.lua": "\nlocal self = require(\"openmw.self\")\nlocal types = require(\"openmw.types\")\nlocal Actor = types.Actor\nlocal selfRecord = types.NPC.record(self)\nlocal height = types.NPC.races.record(selfRecord.race).height\nlocal async = require(\"openmw.async\")\nlocal core = require(\"openmw.core\")\nlocal util = require(\"openmw.util\")\nlocal trans = util.transform\n--local nearby = require('openmw.nearby')\n\nlocal stdSize = 124\n\n--local raceSizes = {\n--\t[\"argonian\"] = 1.03,\n--\t[\"breton\"] = 1,\n--\t[\"dark elf\"] = 1,\n--\t[\"high elf\"] = 1.1,\n--\t[\"imperial\"] = 1,\n--\t[\"khajiit\"] = 1,\n--\t[\"nord\"] = 1.06,\n--\t[\"orc\"] = 1.05,\n--\t[\"redguard\"] = 1.02,\n--\t[\"wood elf\"] = 0.9,\n--}\n\n--local femaleSizes = {\n--\t[\"argonian\"] = 1,\n--\t[\"breton\"] = 0.95,\n--\t[\"dark elf\"] = 1,\n--\t[\"high elf\"] = 1.1,\n--\t[\"imperial\"] = 1,\n--\t[\"khajiit\"] = 0.95,\n--\t[\"nord\"] = 1.06,\n--\t[\"orc\"] = 1.05,\n--\t[\"redguard\"] = 1,\n--\t[\"wood elf\"] = 1,\n--}\n\nlocal size\nif selfRecord.isMale == true then\n\tsize = stdSize * height.male\nelse\n\tsize = stdSize * height.female\nend\n\n\nlocal function waterCheck()\n\n\tasync:newUnsavableSimulationTimer(3 + math.random() * 2, waterCheck)\n\n\tif not Actor.isSwimming(self) then\n\t\treturn\n\tend\n\t\n\tlocal Cell = self.cell\n\tlocal Position = self.position\n\tlocal posZ = Position.z\n\tlocal finalSize = size * self.scale\n\tlocal newPosition\n\t\n\tif Actor.canMove(self) and posZ > Cell.waterLevel - finalSize then\n\n\t\tlocal fromActorSpace = trans.move(Position) * trans.rotateZ(self.rotation:getYaw()) -- y axis -> actor front\n\t\tnewPosition = fromActorSpace * util.vector3(0, finalSize * 0.25, finalSize * 0.9) -- move up + size*0.9, move front + size*0.25\n\n\t\t--testPosition = nearby.findNearestNavMeshPosition(newPosition, {\n\t\t--searchAreaHalfExtents = util.vector3(100, 100, 100),\n\t\t\t--includeFlags = nearby.NAVIGATOR_FLAGS.Walk,\n\t\t--})\n\t\t\n\telse\n\t\tnewPosition = util.vector3(Position.x,\n\t\t\t\t\t\t\t\t\tPosition.y,\n\t\t\t\t\t\t\t\t\tposZ + 20)\n\tend\n\t\n\tcore.sendGlobalEvent('Move', {\n\t\tactor = self,\n\t\tcell = Cell.name,\n\t\tposition = newPosition,\n\t})\n\t\nend\n\nasync:newUnsavableSimulationTimer(3 + math.random() * 2, waterCheck)\n"
  }
}