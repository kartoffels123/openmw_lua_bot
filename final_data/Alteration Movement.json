{
  "folder_name": "Alteration Movement",
  "lua_files": {
    "Alteration Movement MWSE-53313-2-03-1691943287\\MWSE\\mods\\AlterationMovement\\main.lua": "\nlocal confPath = \"alterationMove_config\"\nlocal configDefault = {\n\ttoggleMode = false,\n\tmagickaCost = 3,\n\tlevelreq = 30,\n\tallowAirJump = true,\n\tairJumpCost = 10,\n\tairJumpMultiplier = 15,\n\tenableJumpVfx = true,\n\tenableSounds = true,\n\tenableJumpLimit = false,\n\talterationPerJump = 30,\n\trequireKnown = false\n}\n\nlocal config = mwse.loadConfig(confPath, configDefault)\nlocal levState = 0\nlocal sfState = 0\nlocal levTimer\nlocal groundCheckTimer\nlocal timesJumped = 0\n\nif not config then\n    config = { blocked = {} }\nend\n\nlocal function learnIntuitiveMagic(e)\n\n\tif ( e.caster ~= tes3.player ) then\n\t\treturn\n\tend\n\t\n\tif ( e.sourceInstance.sourceType ~= 1 ) then -- it is an enchantment or spell, the player didnt learn anything\n\t\t--tes3.messageBox(\"wrong type\")\n\t\treturn\n\tend\n\t--for k,_ in pairs(e.mobile.spellInstance.sourceEffects) do\n\tfor _,effect in pairs(e.sourceInstance.sourceEffects) do\n\t\tif ( effect.id == 9 and not tes3.player.data.AlterationMovement.knowsJump ) then -- jump\n\t\t\ttes3.player.data.AlterationMovement.knowsJump = true\n\t\t\ttes3.messageBox(\"You can now intuitively cast jump.\")\n\t\telseif ( effect.id == 10 and not tes3.player.data.AlterationMovement.knowsLevitate ) then -- levitate\n\t\t\ttes3.player.data.AlterationMovement.knowsLevitate = true\n\t\t\ttes3.messageBox(\"You can now intuitively cast levitation.\")\n\t\telseif ( effect.id == 11 and not tes3.player.data.AlterationMovement.knowsSlowfall ) then -- slowfall\n\t\t\ttes3.player.data.AlterationMovement.knowsSlowfall = true\n\t\t\ttes3.messageBox(\"You can now intuitively cast slowfall.\")\n\t\tend\n\tend\nend\n\nlocal function calcMaxJumps()\n\t\n\tlocal maxJumps = math.floor(tes3.mobilePlayer.alteration.current / config.alterationPerJump)\n\treturn maxJumps\n\t\nend\n\nlocal function checkGrounded()\n\tif ( not tes3.mobilePlayer.isFalling and not tes3.mobilePlayer.isFlying and not tes3.mobilePlayer.isJumping ) then\n\t\ttimesJumped = 0\n\t\tgroundCheckTimer:pause()\n\tend\nend\n\nlocal function playAlterationHit()\n\n\tif ( config.enableSounds ) then\n\t\ttes3.playSound({ sound = \"alteration hit\"})\n\tend\n\t\nend\n\nlocal function playAlterationFail()\n\n\tif ( config.enableSounds ) then\n\t\ttes3.playSound({ sound = \"Spell Failure Alteration\"})\n\tend\t\n\t\nend\n\nlocal function endEffects()\n\ttes3.removeSpell({ reference = tes3.player, spell = \"lack_am_levitate1\" })\n\ttes3.removeSpell({ reference = tes3.player, spell = \"lack_am_slowfall1\" })\n\tlevState = 0\n\tsfState = 0\n\tplayAlterationFail()\n\t\n\tif ( levTimer ) then\n\t\tlevTimer:pause()\n\tend\nend\n\nlocal function magTimer()\n\tif ( levState == 1 or sfState == 1 ) then\n\t\tif ( tes3.mobilePlayer.magicka.current < config.magickaCost ) then\n\t\t\tendEffects()\n\t\telse\n\t\t\ttes3.modStatistic({\n\t\t\t\treference = tes3.mobilePlayer,\n\t\t\t\tname = \"magicka\",\n\t\t\t\tcurrent = -config.magickaCost,\n\t\t\t\tlimitToBase = true\n\t\t\t})\n\t\t\ttes3.mobilePlayer:exerciseSkill(11, .02)\n\t\tend\n\tend\nend\n\nlocal function tryStartLevitate()\n\t\n\tif ( config.requireKnown and not tes3.player.data.AlterationMovement.knowsLevitate ) then\n\t\treturn\n\tend\n\n\tif ( tes3.mobilePlayer and ( tes3.mobilePlayer.isFalling or tes3.mobilePlayer.isJumping or tes3.mobilePlayer.isSwimming ) and tes3.mobilePlayer.alteration.current >= config.levelreq and levState == 0 ) then\n\t\tif ( tes3.mobilePlayer.magicka.current < config.magickaCost ) then\n\t\t\tplayAlterationFail()\t\t\n\t\t\treturn\n\t\tend\n\t\tlevState = 1\n\t\ttes3.addSpell({ reference = tes3.player, spell = \"lack_am_levitate1\" })\n\t\t\n\t\tif ( levTimer == nil ) then \n\t\t\tlevTimer = timer.start({ duration = 1, callback = magTimer, type = timer.simulate, iterations = -1 })\n\t\telse \n\t\t\tlevTimer:resume()\n\t\tend\n\t\t\n\t\tplayAlterationHit()\n\tend\n\t\nend\n\nlocal function tryStartSlowfall()\n\n\tif ( config.requireKnown and not tes3.player.data.AlterationMovement.knowsSlowfall ) then\n\t\treturn\n\tend\n\t\n\tif ( tes3.mobilePlayer and ( tes3.mobilePlayer.isFalling or tes3.mobilePlayer.isJumping ) and tes3.mobilePlayer.alteration.current >= config.levelreq and sfState == 0 ) then\n\t\tif ( tes3.mobilePlayer.magicka.current < config.magickaCost ) then\n\t\t\tplayAlterationFail()\n\t\t\treturn\n\t\tend\n\t\tsfState = 1\n\t\ttes3.addSpell({ reference = tes3.player, spell = \"lack_am_slowfall1\" })\n\t\t\n\t\tif ( levTimer == nil ) then \n\t\t\tlevTimer = timer.start({ duration = 1, callback = magTimer, type = timer.simulate, iterations = -1 })\n\t\telse \n\t\t\tlevTimer:resume()\n\t\tend\n\t\t\n\t\tplayAlterationHit()\n\tend\n\t\nend\n\nlocal function tryAirJump()\n\n\tif ( config.requireKnown and not tes3.player.data.AlterationMovement.knowsJump ) then\n\t\treturn\n\tend\n\t\n\tif ( tes3.mobilePlayer.isFalling or tes3.mobilePlayer.isJumping ) then\n\t\tif ( tes3.mobilePlayer and tes3.mobilePlayer.alteration.current >= config.levelreq and tes3.mobilePlayer.magicka.current >= config.airJumpCost ) then\n\t\t\t\n\t\t\tif ( config.enableJumpLimit ) then\n\t\t\t\tlocal mj = calcMaxJumps()\n\t\t\t\tif ( timesJumped >= mj ) then\n\t\t\t\t\tplayAlterationFail()\n\t\t\t\t\treturn\n\t\t\t\telse\n\t\t\t\t\tif not groundCheckTimer then\n\t\t\t\t\t\tgroundCheckTimer = timer.start({ duration = 1, callback = checkGrounded, type = timer.simulate, iterations = -1 })\n\t\t\t\t\telse\n\t\t\t\t\t\tgroundCheckTimer:resume()\n\t\t\t\t\tend\n\t\t\t\t\ttimesJumped = timesJumped + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tlocal x = tes3.mobilePlayer.reference.forwardDirection.x\n\t\t\tlocal y = tes3.mobilePlayer.reference.forwardDirection.y\n\t\t\tlocal z = 1\n\t\t\tlocal v = tes3vector3.new( x, y, z )\n\t\t\t\n\t\t\tlocal multiplier = ( tes3.mobilePlayer.alteration.current * config.airJumpMultiplier )\n\t\t\t\n\t\t\ttes3.mobilePlayer:doJump({ velocity = v * multiplier, allowMidairJumping = true })\n\t\t\tplayAlterationHit()\n\t\t\ttes3.modStatistic({\n\t\t\t\treference = tes3.mobilePlayer,\n\t\t\t\tname = \"magicka\",\n\t\t\t\tcurrent = -config.airJumpCost,\n\t\t\t\tlimitToBase = true\n\t\t\t})\n\t\t\ttes3.mobilePlayer:exerciseSkill(11, .05)\n\t\t\tif ( config.enableJumpVfx ) then\n\t\t\t\ttes3.createVisualEffect({ object = \"VFX_AlterationArea\", lifespan = 5, scale = 5, verticalOffset = 10, position = tes3.mobilePlayer.position })\n\t\t\tend\n\t\telse\n\t\t\tplayAlterationFail()\n\t\tend\n\tend\n\nend\n\nlocal function jumpDown(e)\n\n\tif not (e.keyCode == tes3.getInputBinding(tes3.keybind.jump).code ) then\n\t\treturn\n\tend\n\n\tif tes3.menuMode() then\n\t\treturn\n\tend\n\t\n\tif config.allowAirJump and e.isShiftDown then\n\t\ttryAirJump()\n\t\treturn\n\tend\n\t\n\tif config.toggleMode then\n\t\tif ( levState == 1 ) then\n\t\t\tendEffects()\n\t\telse\n\t\t\ttryStartLevitate()\n\t\tend\n\telse\n\t\ttryStartLevitate()\n\tend\n\t\n\nend\n\nlocal function jumpUp(e)\n\n\tif not (e.keyCode == tes3.getInputBinding(tes3.keybind.jump).code ) then\n\t\treturn\n\tend\n\n\tif tes3.menuMode() then\n\t\treturn\n\tend\n\t\n\tif ( levState == 1 and not config.toggleMode ) then\n\t\tendEffects()\n\tend\nend\n\nlocal function sneakDown(e)\n\n\tif not (e.keyCode == tes3.getInputBinding(tes3.keybind.sneak).code ) then\n\t\treturn\n\tend\n\n\tif tes3.menuMode() then\n\t\treturn\n\tend\n\t\n\tif config.toggleMode then\n\t\tif ( sfState == 1 ) then\n\t\t\tendEffects()\n\t\telse\n\t\t\ttryStartSlowfall()\n\t\tend\n\telse\n\t\ttryStartSlowfall()\n\tend\n\nend\n\nlocal function sneakUp(e)\n\tif not (e.keyCode == tes3.getInputBinding(tes3.keybind.sneak).code ) then\n\t\treturn\n\tend\n\t\n\tif tes3.menuMode() then\n\t\treturn\n\tend\n\t\n\tif ( sfState == 1 and not config.toggleMode ) then\n\t\tendEffects()\n\tend\nend\n\nlocal function loadedReset()\n\n\ttes3.removeSpell({ reference = tes3.player, spell = \"lack_am_levitate1\" })\n\ttes3.removeSpell({ reference = tes3.player, spell = \"lack_am_slowfall1\" })\n\tlevState = 0\n\tsfState = 0\n\t\nend\n\nlocal function loadPlayerKnowledge()\n\t\n\ttes3.player.data.AlterationMovement = tes3.player.data.AlterationMovement or {}\n\tif ( config.requireKnown and tes3.player.data.AlterationMovement.knowsJump and tes3.player.data.AlterationMovement.knowsLevitate and tes3.player.data.AlterationMovement.knowsSlowfall ) then\n\t\tevent.unregister(tes3.event.magicCasted, learnIntuitiveMagic)\n\tend\nend\n\nlocal function initialized()\n\n\tif tes3.isModActive(\"lack_AlterationMovement.esp\") then\n\t\tevent.register(tes3.event.keyDown, jumpDown)\n\t\tevent.register(tes3.event.keyUp, jumpUp)\n\t\tevent.register(tes3.event.keyDown, sneakDown)\n\t\tevent.register(tes3.event.keyUp, sneakUp)\n\t\tevent.register(tes3.event.loaded, loadPlayerKnowledge)\n\t\tevent.register(tes3.event.loaded, loadedReset)\n\t\t\n\t\tif ( config.requireKnown ) then\n\t\t\tevent.register(tes3.event.magicCasted, learnIntuitiveMagic)\n\t\tend\n\telse\n\t\ttes3.messageBox(\"Enable lack_AlterationMovement.esp to use Alteration Movement\")\n\tend\n\t\n\tprint(\"[Alteration Movement] Alteration Movement Initialized\")\nend\n\nevent.register(tes3.event.initialized, initialized)\n\nlocal function registerModConfig()\n    local EasyMCM = require(\"easyMCM.EasyMCM\")\n    local template = EasyMCM.createTemplate(\"Alteration Movement\")\n    template:saveOnClose(confPath, config)\n    local page = template:createSideBarPage{\n        sidebarComponents = {\n            EasyMCM.createInfo{ text = \"Alteration Movement\\n\\nby AlandroSul\\n\\nControls:\\nJump while falling/jumping to levitate\\nSneak while falling to slowfall\"},\n        }\n    }\n\n    local category = page:createCategory(\"Settings\")\n\n    category:createButton({\t\n\t\tbuttonText = \"Require that the player learn the spells.\",\n\t\tdescription = \"In order to unlock intuitive magic you must cast a spell with the corresponding effect (levitate, slowfall and jump) at least once. Default: disabled\",\n\t\tcallback = function(self)\n\t\t\tconfig.requireKnown = not config.requireKnown\n\t\t\tif ( config.requireKnown ) then\n\t\t\t\ttes3.messageBox(\"Learning requirement enabled.\")\n\t\t\t\tevent.register(tes3.event.magicCasted, learnIntuitiveMagic)\n\t\t\telse\n\t\t\t\ttes3.messageBox(\"Learning requirement disabled.\")\n\t\t\t\tevent.unregister(tes3.event.magicCasted, learnIntuitiveMagic)\n\t\t\tend\n\t\tend\n    })\n\t\n    category:createButton({\t\n\t\tbuttonText = \"Disable/Enable Toggle controls\",\n\t\tdescription = \"Enable to control by jump/sneak toggle rather than by holding the jump/sneak button down. Default: disabled\",\n\t\tcallback = function(self)\n\t\t\tconfig.toggleMode = not config.toggleMode\n\t\t\tif ( config.toggleMode ) then\n\t\t\t\ttes3.messageBox(\"Toggle mode enabled.\")\n\t\t\telse\n\t\t\t\ttes3.messageBox(\"Toggle mode disabled.\")\n\t\t\tend\n\t\tend\n    })\n\t\n    category:createButton({\t\n\t\tbuttonText = \"Disable/Enable Air Jump\",\n\t\tdescription = \"Enable to permit air jumping when holding shift instead of levitation. Default: enabled\",\n\t\tcallback = function(self)\n\t\t\tconfig.allowAirJump = not config.allowAirJump\n\t\t\tif ( config.allowAirJump ) then\n\t\t\t\ttes3.messageBox(\"Air jump enabled.\")\n\t\t\telse\n\t\t\t\ttes3.messageBox(\"Air jump disabled.\")\n\t\t\tend\n\t\tend\n    })\n\t\n    category:createButton({\t\n\t\tbuttonText = \"Disable/Enable Air Jump VFX\",\n\t\tdescription = \"Enable for alteration spell effects to appear when you air jump. Disable if you think its too much. Default: enabled\",\n\t\tcallback = function(self)\n\t\t\tconfig.enableJumpVfx = not config.enableJumpVfx\n\t\t\tif ( config.enableJumpVfx ) then\n\t\t\t\ttes3.messageBox(\"Air jump vfx enabled.\")\n\t\t\telse\n\t\t\t\ttes3.messageBox(\"Air jump vfx disabled.\")\n\t\t\tend\n\t\tend\n    })\n\t\n    category:createButton({\t\n\t\tbuttonText = \"Disable/Enable Air Jump limit\",\n\t\tdescription = \"Enable to limit number of jumps until you rest on ground for one second. By default, you get one jump per 30 points of alteration. E.g. 1 jump at 30, 3 jumps at 90... Default: disabled\",\n\t\tcallback = function(self)\n\t\t\tconfig.enableJumpLimit = not config.enableJumpLimit\n\t\t\tif ( config.enableJumpLimit ) then\n\t\t\t\ttes3.messageBox(\"Air jump limit enabled.\")\n\t\t\telse\n\t\t\t\ttes3.messageBox(\"Air jump limit disabled.\")\n\t\t\tend\n\t\tend\n    })\n\t\n    category:createButton({\t\n\t\tbuttonText = \"Disable/Enable Sounds\",\n\t\tdescription = \"Enable for alteration spell audio when using alteration movement abilities. Default: enabled\",\n\t\tcallback = function(self)\n\t\t\tconfig.enableSounds = not config.enableSounds\n\t\t\tif ( config.enableSounds ) then\n\t\t\t\ttes3.messageBox(\"Sound enabled.\")\n\t\t\telse\n\t\t\t\ttes3.messageBox(\"Sound disabled.\")\n\t\t\tend\n\t\tend\n    })\n\t\n\tcategory:createSlider {\n    label = \"Magicka Cost\",\n    description = \"Magicka cost per second when levitating/slowfalling. Default: 3\",\n    max = 100,\n    min = 1,\n    step = 1,\n    jump = 1,\n    variable = mwse.mcm:createTableVariable {\n        id = \"magickaCost\",\n        table = config\n    }\n\t}\n\t\n\tcategory:createSlider {\n    label = \"Air Jump Magicka Cost\",\n    description = \"Magicka cost per air jump. Default: 10\",\n    max = 100,\n    min = 1,\n    step = 1,\n    jump = 1,\n    variable = mwse.mcm:createTableVariable {\n        id = \"airJumpCost\",\n        table = config\n    }\n\t}\n\t\n\tcategory:createSlider {\n    label = \"Air Jump Skill Multiplier\",\n    description = \"Velocity multiplier for alteration skill when air jumping. Default: 15\",\n    max = 100,\n    min = 1,\n    step = 1,\n    jump = 1,\n    variable = mwse.mcm:createTableVariable {\n        id = \"airJumpMultiplier\",\n        table = config\n    }\n\t}\n\t\n\tcategory:createSlider {\n    label = \"Alteration Level Req\",\n    description = \"Alteration Level Requirement for intuitive magic. Default 30\",\n    max = 100,\n    min = 1,\n    step = 1,\n    jump = 1,\n    variable = mwse.mcm:createTableVariable {\n        id = \"levelreq\",\n        table = config\n    }\n\t}\n\t\n\tcategory:createSlider {\n    label = \"Alteration skill per air jump\",\n    description = \"Used in conjunction with the air jump limit option. This is how many points of Alteration skill are required per air jump. E.g. at default value 30, you would get 2 air jumps at alteration level 60.\",\n    max = 100,\n    min = 1,\n    step = 1,\n    jump = 1,\n    variable = mwse.mcm:createTableVariable {\n        id = \"alterationPerJump\",\n        table = config\n    }\n\t}\n\n    EasyMCM.register(template)\nend\n\nevent.register(\"modConfigReady\", registerModConfig)",
    "Alteration Movement OpenMW-53313-2-03-1711244265\\MWSE\\mods\\AlterationMovement\\main.lua": "\nlocal confPath = \"alterationMove_config\"\nlocal configDefault = {\n\ttoggleMode = false,\n\tmagickaCost = 3,\n\tlevelreq = 30,\n\tallowAirJump = true,\n\tairJumpCost = 10,\n\tairJumpMultiplier = 15,\n\tenableJumpVfx = true,\n\tenableSounds = true\n}\n\nlocal config = mwse.loadConfig(confPath, configDefault)\nlocal levState = 0\nlocal sfState = 0\nlocal levTimer\n\nif not config then\n    config = { blocked = {} }\nend\n\nlocal function playAlterationHit()\n\n\tif ( config.enableSounds ) then\n\t\ttes3.playSound({ sound = \"alteration hit\"})\n\tend\n\t\nend\n\nlocal function playAlterationFail()\n\n\tif ( config.enableSounds ) then\n\t\ttes3.playSound({ sound = \"Spell Failure Alteration\"})\n\tend\t\n\t\nend\nlocal function endEffects()\n\ttes3.removeSpell({ reference = tes3.player, spell = \"lack_am_levitate1\" })\n\ttes3.removeSpell({ reference = tes3.player, spell = \"lack_am_slowfall1\" })\n\tlevState = 0\n\tsfState = 0\n\tplayAlterationFail()\n\t\n\tif ( levTimer ) then\n\t\tlevTimer:pause()\n\tend\nend\n\nlocal function magTimer()\n\tif ( levState == 1 or sfState == 1 ) then\n\t\tif ( tes3.mobilePlayer.magicka.current < config.magickaCost ) then\n\t\t\tendEffects()\n\t\telse\n\t\t\ttes3.modStatistic({\n\t\t\t\treference = tes3.mobilePlayer,\n\t\t\t\tname = \"magicka\",\n\t\t\t\tcurrent = -config.magickaCost,\n\t\t\t\tlimitToBase = true\n\t\t\t})\n\t\t\ttes3.mobilePlayer:exerciseSkill(11, .02)\n\t\tend\n\tend\nend\n\nlocal function tryStartLevitate()\n\n\tif ( tes3.mobilePlayer and ( tes3.mobilePlayer.isFalling or tes3.mobilePlayer.isJumping ) and tes3.mobilePlayer.alteration.current >= config.levelreq and levState == 0 ) then\n\t\tif ( tes3.mobilePlayer.magicka.current < config.magickaCost ) then\n\t\t\tplayAlterationFail()\t\t\n\t\t\treturn\n\t\tend\n\t\tlevState = 1\n\t\ttes3.addSpell({ reference = tes3.player, spell = \"lack_am_levitate1\" })\n\t\t\n\t\tif ( levTimer == nil ) then \n\t\t\tlevTimer = timer.start({ duration = 1, callback = magTimer, type = timer.simulate, iterations = -1 })\n\t\telse \n\t\t\tlevTimer:resume()\n\t\tend\n\t\t\n\t\tplayAlterationHit()\n\tend\n\t\nend\n\nlocal function tryStartSlowfall()\n\n\tif ( tes3.mobilePlayer and ( tes3.mobilePlayer.isFalling or tes3.mobilePlayer.isJumping ) and tes3.mobilePlayer.alteration.current >= config.levelreq and sfState == 0 ) then\n\t\tif ( tes3.mobilePlayer.magicka.current < config.magickaCost ) then\n\t\t\tplayAlterationFail()\n\t\t\treturn\n\t\tend\n\t\tsfState = 1\n\t\ttes3.addSpell({ reference = tes3.player, spell = \"lack_am_slowfall1\" })\n\t\t\n\t\tif ( levTimer == nil ) then \n\t\t\tlevTimer = timer.start({ duration = 1, callback = magTimer, type = timer.simulate, iterations = -1 })\n\t\telse \n\t\t\tlevTimer:resume()\n\t\tend\n\t\t\n\t\tplayAlterationHit()\n\tend\n\t\nend\n\nlocal function tryAirJump()\n\n\tif ( tes3.mobilePlayer.isFalling or tes3.mobilePlayer.isJumping ) then\n\t\tif ( tes3.mobilePlayer and tes3.mobilePlayer.alteration.current >= config.levelreq and tes3.mobilePlayer.magicka.current >= config.airJumpCost ) then\n\t\t\t\n\t\t\tlocal x = tes3.mobilePlayer.reference.forwardDirection.x\n\t\t\tlocal y = tes3.mobilePlayer.reference.forwardDirection.y\n\t\t\tlocal z = 1\n\t\t\tlocal v = tes3vector3.new( x, y, z )\n\t\t\t\n\t\t\tlocal multiplier = ( tes3.mobilePlayer.alteration.current * config.airJumpMultiplier )\n\t\t\t\n\t\t\ttes3.mobilePlayer:doJump({ velocity = v * multiplier, allowMidairJumping = true })\n\t\t\tplayAlterationHit()\n\t\t\ttes3.modStatistic({\n\t\t\t\treference = tes3.mobilePlayer,\n\t\t\t\tname = \"magicka\",\n\t\t\t\tcurrent = -config.airJumpCost,\n\t\t\t\tlimitToBase = true\n\t\t\t})\n\t\t\ttes3.mobilePlayer:exerciseSkill(11, .05)\n\t\t\tif ( config.enableJumpVfx ) then\n\t\t\t\ttes3.createVisualEffect({ object = \"VFX_AlterationArea\", lifespan = 5, scale = 5, verticalOffset = 10, position = tes3.mobilePlayer.position })\n\t\t\tend\n\t\telse\n\t\t\tplayAlterationFail()\n\t\tend\n\tend\n\nend\n\nlocal function jumpDown(e)\n\n\tif not (e.keyCode == tes3.getInputBinding(tes3.keybind.jump).code ) then\n\t\treturn\n\tend\n\n\tif tes3.menuMode() then\n\t\treturn\n\tend\n\t\n\tif config.allowAirJump and e.isShiftDown then\n\t\ttryAirJump()\n\t\treturn\n\tend\n\t\n\tif config.toggleMode then\n\t\tif ( levState == 1 ) then\n\t\t\tendEffects()\n\t\telse\n\t\t\ttryStartLevitate()\n\t\tend\n\telse\n\t\ttryStartLevitate()\n\tend\n\t\n\nend\n\nlocal function jumpUp(e)\n\n\tif not (e.keyCode == tes3.getInputBinding(tes3.keybind.jump).code ) then\n\t\treturn\n\tend\n\n\tif tes3.menuMode() then\n\t\treturn\n\tend\n\t\n\tif ( levState == 1 and not config.toggleMode ) then\n\t\tendEffects()\n\tend\nend\n\nlocal function sneakDown(e)\n\n\tif not (e.keyCode == tes3.getInputBinding(tes3.keybind.sneak).code ) then\n\t\treturn\n\tend\n\n\tif tes3.menuMode() then\n\t\treturn\n\tend\n\t\n\tif config.toggleMode then\n\t\tif ( sfState == 1 ) then\n\t\t\tendEffects()\n\t\telse\n\t\t\ttryStartSlowfall()\n\t\tend\n\telse\n\t\ttryStartSlowfall()\n\tend\n\nend\n\nlocal function sneakUp(e)\n\tif not (e.keyCode == tes3.getInputBinding(tes3.keybind.sneak).code ) then\n\t\treturn\n\tend\n\t\n\tif tes3.menuMode() then\n\t\treturn\n\tend\n\t\n\tif ( sfState == 1 and not config.toggleMode ) then\n\t\tendEffects()\n\tend\nend\n\nlocal function initialized()\n\n\tif tes3.isModActive(\"lack_AlterationMovement.esp\") then\n\t\tevent.register(tes3.event.keyDown, jumpDown)\n\t\tevent.register(tes3.event.keyUp, jumpUp)\n\t\tevent.register(tes3.event.keyDown, sneakDown)\n\t\tevent.register(tes3.event.keyUp, sneakUp)\n\telse\n\t\ttes3.messageBox(\"Enable lack_AlterationMovement.esp to use Alteration Movement\")\n\tend\n\t\n\tprint(\"[Alteration Movement] Alteration Movement Initialized\")\nend\n\nevent.register(tes3.event.initialized, initialized)\n\nlocal function registerModConfig()\n    local EasyMCM = require(\"easyMCM.EasyMCM\")\n    local template = EasyMCM.createTemplate(\"Alteration Movement\")\n    template:saveOnClose(confPath, config)\n    local page = template:createSideBarPage{\n        sidebarComponents = {\n            EasyMCM.createInfo{ text = \"Alteration Movement\\n\\nby AlandroSul\\n\\nControls:\\nJump while falling/jumping to levitate\\nSneak while falling to slowfall\"},\n        }\n    }\n\n    local category = page:createCategory(\"Settings\")\n\n    category:createButton({\t\n\t\tbuttonText = \"Disable/Enable Toggle controls\",\n\t\tdescription = \"Enable to control by jump/sneak toggle rather than by holding the jump/sneak button down. Default: disabled\",\n\t\tcallback = function(self)\n\t\t\tconfig.toggleMode = not config.toggleMode\n\t\t\tif ( config.toggleMode ) then\n\t\t\t\ttes3.messageBox(\"Toggle mode enabled.\")\n\t\t\telse\n\t\t\t\ttes3.messageBox(\"Toggle mode disabled.\")\n\t\t\tend\n\t\tend\n    })\n\t\n    category:createButton({\t\n\t\tbuttonText = \"Disable/Enable Air Jump\",\n\t\tdescription = \"Enable to permit air jumping when holding shift instead of levitation. Default: enabled\",\n\t\tcallback = function(self)\n\t\t\tconfig.allowAirJump = not config.allowAirJump\n\t\t\tif ( config.allowAirJump ) then\n\t\t\t\ttes3.messageBox(\"Air jump enabled.\")\n\t\t\telse\n\t\t\t\ttes3.messageBox(\"Air jump disabled.\")\n\t\t\tend\n\t\tend\n    })\n\t\n    category:createButton({\t\n\t\tbuttonText = \"Disable/Enable Air Jump VFX\",\n\t\tdescription = \"Enable for alteration spell effects to appear when you air jump. Disable if you think its too much. Default: enabled\",\n\t\tcallback = function(self)\n\t\t\tconfig.enableJumpVfx = not config.enableJumpVfx\n\t\t\tif ( config.enableJumpVfx ) then\n\t\t\t\ttes3.messageBox(\"Air jump vfx enabled.\")\n\t\t\telse\n\t\t\t\ttes3.messageBox(\"Air jump vfx disabled.\")\n\t\t\tend\n\t\tend\n    })\n\t\n    category:createButton({\t\n\t\tbuttonText = \"Disable/Enable Sounds\",\n\t\tdescription = \"Enable for alteration spell audio when using alteration movement abilities. Default: enabled\",\n\t\tcallback = function(self)\n\t\t\tconfig.enableSounds = not config.enableSounds\n\t\t\tif ( config.enableSounds ) then\n\t\t\t\ttes3.messageBox(\"Sound enabled.\")\n\t\t\telse\n\t\t\t\ttes3.messageBox(\"Sound disabled.\")\n\t\t\tend\n\t\tend\n    })\n\t\n\tcategory:createSlider {\n    label = \"Magicka Cost\",\n    description = \"Magicka cost per second when levitating/slowfalling. Default: 3\",\n    max = 100,\n    min = 1,\n    step = 1,\n    jump = 1,\n    variable = mwse.mcm:createTableVariable {\n        id = \"magickaCost\",\n        table = config\n    }\n\t}\n\t\n\tcategory:createSlider {\n    label = \"Air Jump Magicka Cost\",\n    description = \"Magicka cost per air jump. Default: 10\",\n    max = 100,\n    min = 1,\n    step = 1,\n    jump = 1,\n    variable = mwse.mcm:createTableVariable {\n        id = \"airJumpCost\",\n        table = config\n    }\n\t}\n\t\n\tcategory:createSlider {\n    label = \"Air Jump Skill Multiplier\",\n    description = \"Velocity multiplier for alteration skill when air jumping. Default: 15\",\n    max = 100,\n    min = 1,\n    step = 1,\n    jump = 1,\n    variable = mwse.mcm:createTableVariable {\n        id = \"airJumpMultiplier\",\n        table = config\n    }\n\t}\n\t\n\tcategory:createSlider {\n    label = \"Alteration Level Req\",\n    description = \"Alteration Level Requirement for intuitive magic. Default 30\",\n    max = 100,\n    min = 1,\n    step = 1,\n    jump = 1,\n    variable = mwse.mcm:createTableVariable {\n        id = \"levelreq\",\n        table = config\n    }\n\t}\n\n    EasyMCM.register(template)\nend\n\nevent.register(\"modConfigReady\", registerModConfig)",
    "Alteration Movement OpenMW-53313-2-03-1711244265\\scripts\\AlterationMovement\\AlterationMovement_effects.lua": "local input = require('openmw.input')\nlocal types = require('openmw.types')\nlocal self = require('openmw.self')\nlocal storage = require('openmw.storage')\nlocal alterationMovementSettings = storage.playerSection(\"SettingsAlterationMovement\")\n\n\nlocal function isFalling()\n    local isFlying = false\n    local levEffect = types.Actor.activeEffects(self):getEffect(\"levitate\") --Checks the player for the levitate effect.\n    if levEffect and levEffect.magnitude > 0 then                           --If the levitate is appied, then we are flying.\n        isFlying = true\n    end\n    if not isFlying and not types.Actor.isOnGround(self) and (not types.Actor.isSwimming(self) or alterationMovementSettings:get(\"allowWaterTakeoff\")) then\n        --If we are:\n        --Not flying/levitating\n        --Not on the ground\n        --Not swimming(unless water takeoff is enabled)\n        --Then:\n        return true\n    else\n        return false\n    end\nend\nreturn {\n\n    levitate = {\n        id = \"levitate\",--ID of the effect we named\n        effectId = \"levitate\",--actual ID of the effect\n        name = \"levitate\",--Text that is showed when it is learned\n        magnitude = 10,--What magnitude to set\n        action = input.ACTION.Jump,--Action that triggers this\n        qualifier = isFalling, --Only apply if this function returns true\n       -- spell = \"lack_am_levitate1\"--Spell that is applied\n    },\n    slowfall = {\n\n        id = \"slowfall\",\n        effectId = \"slowfall\",\n        name = \"slow fall\",\n        magnitude = 10,\n        action = input.ACTION.Sneak,\n        qualifier = isFalling,\n     --   spell = \"lack_am_slowfall1\"\n    }\n}\n",
    "Alteration Movement OpenMW-53313-2-03-1711244265\\scripts\\AlterationMovement\\AlterationMovement_g.lua": "local world = require(\"openmw.world\")\nlocal util = require(\"openmw.util\")\nlocal function createObjectAtPlayer(objectId)\n  local pos = world.players[1].position\n  local newPos = util.vector3(pos.x,pos.y,pos.z - 10000)\n    local newObject = world.createObject(objectId):teleport(world.players[1].cell, newPos)\n  if newObject then\n    newObject.enabled = false\n  end\nend\n\nreturn { eventHandlers = { createObjectAtPlayer = createObjectAtPlayer } }\n",
    "Alteration Movement OpenMW-53313-2-03-1711244265\\scripts\\AlterationMovement\\AlterationMovement_p.lua": "local core = require('openmw.core')\nlocal input = require('openmw.input')\nlocal self = require('openmw.self')\nlocal types = require('openmw.types')\nlocal ui = require('openmw.ui')\nlocal debug = require('openmw.debug')\nlocal storage = require('openmw.storage')\nlocal I = require('openmw.interfaces')\n\nlocal effectData = require(\"scripts.AlterationMovement.AlterationMovement_effects\")\nlocal settingsFile = require(\"scripts.AlterationMovement.AlterationMovement_settings\")\nlocal knownEffects = {}\nlocal currentEffectData = {}\nlocal ambLoaded, ambient = pcall(require, 'openmw.ambient')\n--local jumpHeld = false\n--local sneakHeld = false\nlocal timePassed = 0\nif not settingsFile then\n    error(\"Missing dependancies, check script settings\")\nend\nlocal function exerciseSkill(amount)\n    I.SkillProgression.skillUsed(\"alteration\",\n        { useType = I.SkillProgression.SKILL_USE_TYPES.Acrobatics_Jump, skillGain = amount })\nend\n\nlocal alterationMovementSettings = storage.playerSection(\"SettingsAlterationMovement\")\nlocal function godMode()\n    return debug.isGodMode()\nend\nlocal function getRequiredAlteration()\n    if godMode() then return 0 end --If in god mode, can always fly\n    return alterationMovementSettings:get(\"levelreq\")\nend\n--local slowfallSpell = \"lack_am_slowfall1\"--This is the slowfall ability applied by the mod\n--local levitateSpell = \"lack_am_levitate1\"--This is the levitate ability applied by the mod\n\nlocal function getMagicka() --Quick way to check the player's current magicka\n    return types.Actor.stats.dynamic.magicka(self).current\nend\nlocal function modMagicka(amount) --Modify player macicka by the asked about amount, unless in god mode\n    if godMode() then return end\n    types.Actor.stats.dynamic.magicka(self).current = types.Actor.stats.dynamic.magicka(self).current - amount\nend\nlocal function playSound(soundName)\n    if ambLoaded then\n        ambient.playSound(soundName) --Playsound normally.\n    end\nend\nlocal function playAlterationHit()\n    if (alterationMovementSettings:get(\"enableSounds\")) then\n        playSound(\"alteration hit\")\n    end\nend\n\nlocal function playAlterationFail()\n    if (alterationMovementSettings:get(\"enableSounds\")) then\n        playSound(\"Spell Failure Alteration\")\n    end\nend\nlocal function endEffects(id)\n    if id then\n        local value = effectData[id]\n        if value.spell then\n            types.Actor.spells(self):remove(value.spell)\n        else\n            types.Actor.activeEffects(self):set(0, effectData[id].effectId)\n        end\n        if not currentEffectData[id] then\n            currentEffectData[id] = {}\n        end\n        currentEffectData[id].currentlyPressed = false\n        currentEffectData[id].currentlyActive = false\n        playAlterationFail()\n        return\n    end\n    for key, value in pairs(effectData) do\n        if value.spell then\n            types.Actor.spells(self):remove(value.spell)\n        else\n            types.Actor.activeEffects(self):remove(value.effectId)\n        end\n        if not currentEffectData[id] then\n            currentEffectData[id] = {}\n        end\n        currentEffectData[key].currentlyPressed = false\n        currentEffectData[key].currentlyActive = false\n    end\n    --Add the two effects, by spell ID, specified above.\n\n    playAlterationFail() --Play the effect for removing the effects, but only if sound is on\n    timePassed = 0\nend\nlocal function startEffects(id)\n    if effectData[id].spell then\n        types.Actor.spells(self):add(effectData[id].spell)\n    else\n        types.Actor.activeEffects(self):modify(effectData[id].magnitude, effectData[id].effectId)\n    end\n    exerciseSkill(0.5)\n    playAlterationHit()\n    if not currentEffectData[id] then\n        currentEffectData[id] = {}\n    end\n    currentEffectData[id].currentlyPressed = true\n    currentEffectData[id].currentlyActive = true\nend\n\n--local flyKnown = false--Stores the info about if the fly effect is known.\n--local fallKnown = false--Stores the info about if the slowfall effect is known.\nlocal function onUpdate(dt)\n    local held = false\n    local requireKnown = alterationMovementSettings:get(\"requireKnown\")\n    for key, value in pairs(effectData) do\n        if not currentEffectData[key] then\n            currentEffectData[key] = {}\n        end\n        if value.action ~= nil and currentEffectData[key].currentlyPressed and not input.isActionPressed(value.action) and not alterationMovementSettings:get(\"toggleMode\") then\n            endEffects(key)\n        elseif not value.action then\n        elseif currentEffectData[key].currentlyPressed then\n        end\n        if currentEffectData[key].currentlyPressed then\n            held = true\n        end\n        if requireKnown and not knownEffects[key] then\n            local activeEffects = types.Actor.activeEffects(self)\n            local hasEffect = activeEffects:getEffect(value.effectId)\n            if hasEffect and hasEffect.magnitude > 0 then\n                knownEffects[key] = true\n                ui.showMessage(\"You can now intuitively cast \" .. value.id .. \".\")\n            end\n        end\n    end\n    if held then               --Reduce macika while we are engaged.\n        timePassed = timePassed + dt\n        if timePassed > 1 then --Only reduce magicak once a second.\n            timePassed = 0\n            local mag = getMagicka()\n            local magCost = alterationMovementSettings:get(\"magickaCost\")\n            if mag < magCost then\n                endEffects() --Remove all effects now.\n            else\n                exerciseSkill(0.2)\n                modMagicka(magCost) --Reduce by the specified amount.\n            end\n        end\n    end\nend\nlocal function getSpellKnown(id) --Checks if we can cast the slowvall/levitation effects\n    if alterationMovementSettings:get(\"requireKnown\") == false then\n        return true\n    elseif knownEffects[id] then\n        return true\n    else\n        return false\n    end\nend\nlocal function onInputAction(id)\n    --onInputAction is used so that we can be correct with all bound controls, including controls.\n    --There is no onInputActionEnded, so we must use onUpdate to check for it.\n    if core.isWorldPaused() or core.getSimulationTime() == 0 then\n        return --Do nothing while paused\n    end\n    if types.NPC.stats.skills.alteration(self).modified < getRequiredAlteration() then return end\n    --Verify we are eligible to use the effects.\n    for key, value in pairs(effectData) do\n        if not currentEffectData[key] then\n            currentEffectData[key] = {}\n        end\n        if id == value.action and value.qualifier() and not currentEffectData[key].currentlyActive then\n            if not getSpellKnown(key) then return end\n\n            timePassed = 0 --Reset so we start counting now.\n            local mag = getMagicka()\n            local magCost = alterationMovementSettings:get(\"magickaCost\")\n            if mag < magCost then --Don't allow effects if we can't afford them.\n                playAlterationFail()\n                return\n            end\n            startEffects(key)\n        elseif id == value.action and currentEffectData[key].currentlyActive and alterationMovementSettings:get(\"toggleMode\") then\n            endEffects(value.effectId)\n        end\n    end\nend\nlocal function onSave()\n    return { currentEffectData = currentEffectData, knownEffects = knownEffects } --Need to save these states.\nend\nlocal function onLoad(data)\n    if data and data.knownEffects then --Only set these if we previously had data here.\n        knownEffects = data.knownEffects\n        currentEffectData = data.currentEffectData\n        for key, value in pairs(currentEffectData) do\n            if value.currentlyActive then\n                endEffects(key)\n            end\n        end\n        --  fallKnown = data.fallKnown\n        --   flyKnown = data.flyKnown\n    elseif data and data.fallKnown ~= nil then\n        knownEffects[\"levitate\"] = data.flyKnown\n        knownEffects[\"slowfall\"] = data.fallKnown\n    end\n    --    types.Actor.spells(self):remove(slowfallSpell) --Should never have these on load,\n    --  types.Actor.spells(self):remove(levitateSpell) --so remove them in case the game was saved with them applied\nend\nreturn { engineHandlers = { onInputAction = onInputAction, onUpdate = onUpdate, onLoad = onLoad, onSave = onSave } }\n",
    "Alteration Movement OpenMW-53313-2-03-1711244265\\scripts\\AlterationMovement\\AlterationMovement_settings.lua": "local I = require('openmw.interfaces')\nlocal types = require('openmw.types')\nlocal core = require('openmw.core')\nlocal ambLoaded, ambient = pcall(require, 'openmw.ambient')\nlocal configDefault = {\n    toggleMode = false,\n    magickaCost = 3,\n    levelreq = 30,\n    allowAirJump = true,\n    airJumpCost = 10,\n    airJumpMultiplier = 15,\n    enableJumpVfx = true,\n    enableSounds = true,\n    enableJumpLimit = false,\n    alterationPerJump = 30,\n    requireKnown = false\n}--Default settings, defined below\nif core.API_REVISION < 56 then\n    I.Settings.registerPage {\n        key = \"AlterationMovement\",\n        l10n = \"AlterationMovement\",\n        name = \"Alteration Movement\",\n        description =\n        \"Your OpenMW version is too old to use Alteration Movement.\\n\\nMake sure to download the latest OpenMW Development version.\"\n    }\n    --Register the settings page for the mod to indicate to the user that they are running an outdated version of OpenMW\n    return false\nelseif not core.contentFiles.has(\"lack_AlterationMovement.esp\") and true == false then\n    I.Settings.registerPage {\n        key = \"AlterationMovement\",\n        l10n = \"AlterationMovement\",\n        name = \"Alteration Movement\",\n        description = \"Enable lack_AlterationMovement.esp to use Alteration Movement\"\n    }\n\n    --Register the settings page for the mod to indicate to the user that they are lacking the ESP\n    return false\nend\nI.Settings.registerPage {\n    key = \"AlterationMovement\",\n    l10n = \"AlterationMovement\",\n    name = \"Alteration Movement\",\n    description = \"Alteration Movement\"\n}--Create the page for alteration movement\nI.Settings.registerGroup {\n    key = \"SettingsAlterationMovement\",\n    page = \"AlterationMovement\",\n    l10n = \"AlterationMovement\",\n    name = \"Alteration Movement\",\n    description =\n    \"Alteration Movement\\n\\nby AlandroSul\\n\\nControls:\\nJump while falling/jumping to levitate\\nSneak while falling to slowfall\\n\\nNote that Air jumping is not currently supported in OpenMW.\",\n    permanentStorage = false,\n    settings = {\n        {\n            key = \"toggleMode\",\n            renderer = \"checkbox\",\n            name = \"Disable/Enable Toggle controls\",\n            description =\n            \"Enable to control by jump/sneak toggle rather than by holding the jump/sneak button down. Default: disabled\",\n            default = configDefault.toggleMode\n        },\n        {\n            key = \"enableSounds\",\n            renderer = \"checkbox\",\n            name = \"Disable/Enable Sounds\",\n            description =\n            \"Enable for alteration spell audio when using alteration movement abilities. Default: enabled\",\n            default = configDefault.enableSounds\n        },\n        {\n            key = \"requireKnown\",\n            renderer = \"checkbox\",\n            name = \"Require that the player learn the spells.\",\n            description =\n            \"In order to unlock intuitive magic you must cast a spell with the corresponding effect (levitate, slowfall and jump) at least once. Default: disabled\",\n            default = configDefault.requireKnown\n        },\n        {\n            key = \"allowWaterTakeoff\",\n            renderer = \"checkbox\",\n            name = \"Allow Water Takeoff\",\n            description =\n            \"Enable to allow you to start levitation while swimming. Default: disabled\",\n            default = false\n        },\n        {\n            key = \"magickaCost\",\n            renderer = \"number\",\n            name = \"Magicka Cost\",\n            description =\n            \"Magicka cost per second when levitating/slowfalling. Default: 3\",\n            default = configDefault.magickaCost,\n            argument = {\n                min = 1,\n                integer = true,\n                max = 100,\n            },\n        },\n        {\n            key = \"levelreq\",\n            renderer = \"number\",\n            name = \"Alteration Level Req\",\n            description =\n            \"Alteration Level Requirement for intuitive magic. Default 30\",\n            default = configDefault.levelreq,\n            argument = {\n                min = 1,\n                integer = true,\n                max = 100,\n            },\n        },\n    }\n}\nreturn true"
  }
}