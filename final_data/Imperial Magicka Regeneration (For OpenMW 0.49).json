{
  "folder_name": "Imperial Magicka Regeneration (For OpenMW 0.49)",
  "lua_files": {
    "Imperial Magicka Regeneration-53923-1-1-1-1704700267\\Scripts\\imr_abil_resilience.lua": "local self = require('openmw.self')\nlocal types = require('openmw.types')\nlocal storage = require('openmw.storage')\nlocal core = require('openmw.core')\nlocal ui = require('openmw.ui')\nlocal I = require(\"openmw.interfaces\")\nlocal ambient = require('openmw.ambient')\nlocal NPC = require('openmw.types').NPC\n\n-- Getting mod settings\nlocal settings = {\n    main = storage.playerSection('NMRSettingsA'),\n    additions = storage.playerSection('NMRSettingsB'),\n    guilds = storage.playerSection('NMRSettingsGuildsPage'),\n}\n\n--Variables\nlocal imperialCultAbilityTimer = 0\nlocal isImperialCultAbilityUsed = false\nlocal isImperialCultAbilityCooldown = false\nlocal imperialCultAbilityCooldownTime = 300\nlocal divineResilienceCooldownTimer = 0\nlocal divineResilienceMult = 5\nlocal divineResilienceAbilityTimer = 0\nlocal healthLastFrame = types.Actor.stats.dynamic.health(self).current\nlocal cultAbilityMultiplier = 0\nlocal healthWasDamaged\n\nlocal gameTimeLastFrame = core.getGameTime()\nlocal gameTimeCurrentFrame = 0\nlocal gameTimeDifference = 0\nlocal gameTimeCounter = 0\n\nlocal isAbilityWorking = false\nlocal resilienceAbilityTime = 10\nlocal resilienceCooldownTime = 300\nlocal resilienceTimeLeft = 0\n\nlocal tick_time = 0.1\nlocal tick_counter = 0\n\n-- Sound parameters\nlocal soundParams = {\n    timeOffset=0,\n    volume=2,\n    scale=false,\n    pitch=0.3,\n    loop=true,\n }\n\n local soundParams2 = {\n    timeOffset=0,\n    volume=5,\n    scale=false,\n    pitch=1,\n    loop=false,\n }\n local soundParams3 = {\n    timeOffset=0,\n    volume=1.5,\n    scale=false,\n    pitch=0.7,\n    loop=false,\n }\n\n\n local function getCultAbilityMultiplier()\n    return cultAbilityMultiplier\n end\n\n local function getResilienceTimeLeft()\n    return resilienceTimeLeft\n end\n\n -- Ability function\n local function divineResilienceFunction(dt)\n    --print('Каунтер считаем? ' ..gameTimeCounter)\n    local currentHealth = types.Actor.stats.dynamic.health(self).current\n    local maxHealth = types.Actor.stats.dynamic.health(self).base\n    local currentHealthPercent = (currentHealth / maxHealth) * 100\n\n    if healthLastFrame > currentHealth and currentHealthPercent <= 30 and not isImperialCultAbilityUsed and not isImperialCultAbilityCooldown then\n        healthWasDamaged = true\n        --print('В прошлом фрейме: ' .. healthLastFrame .. 'В этом фрейме: ' .. currentHealth)\n    end\n    \n    healthLastFrame = currentHealth\n\n    if healthWasDamaged and not isImperialCultAbilityCooldown and not isImperialCultAbilityUsed then\n        isImperialCultAbilityUsed = true\n        healthWasDamaged = false\n        gameTimeLastFrame = core.getGameTime()\n        --ambient.playSound(\"Thunder2\", soundParams2)\n        ambient.playSoundFile(\"Sound\\\\spell_sound.mp3\", soundParams2)\n        --ambient.playSound(\"sprigganmagic\", soundParams2)\n        ambient.playSound(\"Water Layer\", soundParams)\n        isAbilityWorking = true\n        local imperialAbilityRank = NPC.getFactionRank(self, \"imperial cult\")\n            if imperialAbilityRank > 0 then\n                for _, rankInfo in ipairs(I.IMRGUILDS.ImperialCultGuildRanks) do\n                    if imperialAbilityRank == rankInfo.rank then\n                        cultAbilityMultiplier = rankInfo.multiplier + I.IMRART.getArtifactBonuses().abilPower\n\n                        break  -- Stop iterating once the player's rank is found\n                    end\n                end\n            end\n        ui.showMessage(\"You've been blessed by Divine Resilience!\\n\\nMagicka Regeneration speed: +\" .. cultAbilityMultiplier * 100 ..'%')\n    end\n    \n    -- Check if the ability is currently in use\n    if isImperialCultAbilityUsed then\n\n        gameTimeCurrentFrame = core.getGameTime()\n        gameTimeDifference = gameTimeCurrentFrame - gameTimeLastFrame\n        gameTimeCounter = gameTimeCounter + gameTimeDifference\n        gameTimeLastFrame = core.getGameTime()\n        --print('Считаем время действия!: ' ..gameTimeCounter)\n        resilienceTimeLeft = resilienceAbilityTime * 30 - gameTimeCounter\n        --print('Времени абилки осталось: ' ..resilienceTimeLeft)\n    \n        -- Check if the ability duration is over\n        if gameTimeCounter >= resilienceAbilityTime * 30 then\n            local excessTime = gameTimeCounter - resilienceAbilityTime * 30\n            -- Trigger the cooldown\n            gameTimeCounter = excessTime\n            isAbilityWorking = false\n            ambient.stopSound(\"Water Layer\");\n            cultAbilityMultiplier = 0\n            isImperialCultAbilityCooldown = true\n            isImperialCultAbilityUsed = false\n            --divineResilienceAbilityTimer = 0 -- Reset ability timer\n            ui.showMessage('Divine Resilience expires')\n        end\n    end\n    -- Check if the ability is on cooldown\n    if isImperialCultAbilityCooldown then\n        --divineResilienceCooldownTimer = divineResilienceCooldownTimer + dt\n        --print(divineResilienceCooldownTimer)\n        -- Check if the cooldown duration is over\n        gameTimeCurrentFrame = core.getGameTime()\n        gameTimeDifference = gameTimeCurrentFrame - gameTimeLastFrame\n        gameTimeCounter = gameTimeCounter + gameTimeDifference\n        gameTimeLastFrame = core.getGameTime()\n        --print('Считаем время кулдауна!: ' ..gameTimeCounter)\n\n        local cooldownArtifactBonus = I.IMRART.getArtifactBonuses().abilTime or 0\n        --print('Абилка получена? ' ..cooldownArtifactBonus)\n        --print ('Секунд кулдауна: ' ..resilienceCooldownTime - cooldownArtifactBonus)\n        --local gameTimeDifference = (gameTimeCurrentFrame - gameTimeLastFrame) / 30\n        --print('Времени прошло за тик: ' ..gameTimeDifference)\n        if gameTimeCounter >= (resilienceCooldownTime - cooldownArtifactBonus) * 30 then\n            \n            gameTimeCounter = 0\n            resilienceTimeLeft = 0\n            isImperialCultAbilityCooldown = false\n            divineResilienceCooldownTimer = 0\n            ui.showMessage('Divine Resilience is ready')\n        end\n    end\nend\n\n\nlocal function onUpdate(dt)\n    -- Divine Resilience of Imperial Cult ability\n    tick_counter = tick_counter + dt\n\n    if tick_counter >= tick_time then\n        if settings.guilds:get('NMRGuildsImperialCult') then\n            local playerImperialCultRank = NPC.getFactionRank(self, \"imperial cult\")\n            if playerImperialCultRank > 0 then\n                \n                divineResilienceFunction(dt)\n\n                --if isAbilityWorking == true then\n                    --gameTimer(howMuchTime)\n                --end\n                \n                \n            end\n        end\n        tick_counter = 0\n    end\nend\n\nlocal function onSave()\n    return {\n        healthWasDamaged = healthWasDamaged,\n        isImperialCultAbilityUsed = isImperialCultAbilityUsed,\n        isImperialCultAbilityCooldown = isImperialCultAbilityCooldown,\n        cultAbilityMultiplier = cultAbilityMultiplier,\n        divineResilienceAbilityTimer = divineResilienceAbilityTimer,\n        divineResilienceCooldownTimer = divineResilienceCooldownTimer,\n        healthLastFrame = healthLastFrame,\n        gameTimeCounter = gameTimeCounter,\n        gameTimeCurrentFrame = gameTimeCurrentFrame,\n        gameTimeDifference = gameTimeDifference,\n        gameTimeLastFrame = gameTimeLastFrame,\n    }\n  end\n\nlocal function onLoad(data)\n    if data then\n        healthWasDamaged = data.healthWasDamaged or false\n        isImperialCultAbilityUsed = data.isImperialCultAbilityUsed or false\n        isImperialCultAbilityCooldown = data.isImperialCultAbilityCooldown or false\n        cultAbilityMultiplier = data.cultAbilityMultiplier or 0\n        divineResilienceAbilityTimer = data.divineResilienceAbilityTimer or 0\n        divineResilienceCooldownTimer = data.divineResilienceCooldownTimer or 0\n        healthLastFrame = data.healthLastFrame or types.Actor.stats.dynamic.health(self).current\n        gameTimeCounter = data.gameTimeCounter or 0\n        gameTimeCurrentFrame = data.gameTimeCurrentFrame or 0\n        gameTimeDifference = data.gameTimeDifference or 0\n        gameTimeLastFrame =  data.gameTimeLastFrame or core.getGameTime()\n        --print('Каунтер загружен? ' ..gameTimeCounter)\n    end\nend\n\nreturn {\n    engineHandlers = {\n        dt = dt,\n        onUpdate = onUpdate,\n        onLoad = onLoad,\n        onSave = onSave,\n        data = data,\n    },\n    interfaceName = \"IMR_ABIL_RESIL\",\n    interface = {\n        cultAbilityMultiplier = getCultAbilityMultiplier,\n        resilienceTimeLeft = getResilienceTimeLeft,\n    },\n    \n}\n\n\n",
    "Imperial Magicka Regeneration-53923-1-1-1-1704700267\\Scripts\\imr_artifacts.lua": "local self = require('openmw.self')\nlocal types = require('openmw.types')\nlocal storage = require('openmw.storage')\nlocal I = require('openmw.interfaces')\nlocal core = require('openmw.core')\nlocal ui = require('openmw.ui')\nlocal util = require('openmw.util')\nlocal mwui = require('openmw.interfaces').MWUI\nlocal input = require('openmw.input')\nlocal NPC = require('openmw.types').NPC\nlocal async = require('openmw.async')\nlocal guilds = require('scripts.imr_guilds')\n\n--Settings\nlocal settings = {\n    main = storage.playerSection('NMRSettingsA'),\n    additions = storage.playerSection('NMRSettingsB'),\n    guilds = storage.playerSection('NMRSettingsGuildsPage'),\n}\n\nlocal artifactMultiplier = 0\nlocal artifactRegenPercent = 0\nlocal artifactFatigue = 0\nlocal artifactAbilTime = 0\nlocal artifactAbilPower = 0\nlocal artifactLowMultiplier = 0\nlocal artifactLowMultiplierThreshold = 0\nlocal artifactInitializerDelay = 0\nlocal checkCounter = 0\n\n--Timers to check equipped artifacts once per x frames\nlocal artifactsCheckTime = 30\nlocal artifactsCheckTimer = 0\n\n--Timers to check artifacts to show notifications\nlocal artifactsPopupTime = 60\nlocal artifactsPopupTimer = 0\n\n-- Artifacts that can speed up magicka regeneration\nlocal artifactMultipliers = {\n    {id = 'staff_magnus_unique', name = 'Staff of Magnus', multiplier = 0.10, maxRegen = 0.05, equipped = false, equippedThisFrame = false},\n    {id = 'steelstaffancestors_ttsa', name = 'Ancestral Wisdom Staff', fatigueMult = 0.10, equipped = false, equippedThisFrame = false},\n    {id = 'ebony_staff_trebonius', name = \"Trebonius' Staff\", lowMultiplier = 0.3, lowMultiplierThreshold = 0.20, maxRegen = -0.10, equipped = false, equippedThisFrame = false},\n    {id = \"ebony wizard's staff\", name = \"Wizard's Staff\", multiplier = 0.07, maxRegen = 0.05, equipped = false, equippedThisFrame = false},\n    {id = 'ebony_staff_tges', name = \"Maryon's Staff\", lowMultiplier = 0.4, lowMultiplierThreshold = 0.10, maxRegen = 0.10, equipped = false, equippedThisFrame = false},\n    {id = 'ring_mentor_unique', name = 'Ring of Mentor', multiplier = 0.05, equipped = false, equippedThisFrame = false},\n    {id = 'ring_warlock_unique', name = 'Ring of Warlock', multiplier = 0.06, equipped = false, equippedThisFrame = false},\n    {id = 'Akatosh Ring', name = \"Akatosh's Ring\", abilityTime = 60, equipped = false, equippedThisFrame = false},\n    {id = 'Septim Ring', name = \"Septim Ring\", abilityPower = 1.5, equipped = false, equippedThisFrame = false},\n    {id = 'ring_equity_uniq', name = \"Ring of Equity\", maxRegen = 0.05, equipped = false, equippedThisFrame = false},\n    {id = 'necromancers_amulet_uniq', name = 'Amulet of the Necromancer', multiplier = 0.10, equipped = false, equippedThisFrame = false},\n    {id = 'hortatorbelt', name = 'Belt of the Hortator', multiplier = 0.03, equipped = false, equippedThisFrame = false},\n    {id = 'amulet_unity_uniq', name = 'Amulet of Unity', multiplier = 0.08, equipped = false, equippedThisFrame = false},\n    {id = \"exquisite_robe_drake's pride\", name = \"Robe of the Drake's Pride\", equipped = false, multiplier = 0.10, equippedThisFrame = false},\n    {id = \"artifact_amulet of heartthrum\", name = \"Amulet of Heartthrum\", equipped = false, multiplier = 0.08, equippedThisFrame = false},\n}\n\n-- Looking for equipped items\nlocal function hasItemIDEquipped(itemID)\n    local item = types.Actor.inventory(self):find(itemID)\n    return item and types.Actor.hasEquipped(self, item)\nend\n\nlocal function equippedBonusMessage(name, bonuses)\n    local message = name .. ':\\n\\n'\n    for bonusType, value in pairs(bonuses) do\n        if value ~= 0 then\n            local bonusString = ''\n            if bonusType == 'multiplier' then\n                bonusString = 'Your Magicka regenerates ' .. value * 100 .. '% faster.'\n            elseif bonusType == 'regenPercent' then\n                bonusString = (value >= 0 and '+' or '') .. value * 100 .. '% to your total regenerable Magicka.'\n            elseif bonusType == 'fatigueMult' then\n                bonusString = 'Your Fatigue penalty to Magicka Regeneration reduced by ' .. value * 100 .. '%.'\n            elseif bonusType == 'abilityTime' then\n                bonusString = 'Divine Resilience ability recovers ' .. value .. ' seconds faster.'\n            elseif bonusType == 'abilityPower' then\n                bonusString = 'Divine Resilience ability multiplier is ' .. value * 100 .. '% higher.'\n            elseif bonusType == 'lowMultiplier' then\n                bonusString = 'Magicka regeneration speed with low Magicka (less than ' .. bonuses.lowMultiplierThreshold * 100 .. '%) is ' .. value * 100 .. '% faster.'\n            -- Add more bonuses as needed\n            end\n            message = message .. bonusString .. '\\n'\n        end\n    end\n    ui.showMessage(message)\nend\n\nlocal function artifactsInitializer()\n    for _, artifact in ipairs(artifactMultipliers) do\n        if hasItemIDEquipped(artifact.id) then\n            artifact.equipped = true\n        end\n    end\nend\n\nlocal function getArtifactBonuses()\n    return {\n        multiplier = artifactMultiplier,\n        lowMultiplier = artifactLowMultiplier,\n        regenPercent = artifactRegenPercent,\n        fatigue = artifactFatigue,\n        abilTime = artifactAbilTime,\n        abilPower = artifactAbilPower,\n        lowMultThresh = artifactLowMultiplierThreshold,\n        -- Add more bonuses as needed\n    }\nend\n\nlocal function getArtifactMultiplier()\n    return artifactMultiplier\nend\n\nlocal function calculateArtifactBonuses()\n    artifactMultiplier = 0\n    artifactLowMultiplier = 0\n    artifactRegenPercent = 0\n    artifactFatigue = 0\n    artifactAbilTime = 0\n    artifactAbilPower = 0\n    artifactLowMultiplierThreshold = 0\n    for _, artifact in ipairs(artifactMultipliers) do\n        if hasItemIDEquipped(artifact.id) then\n            artifactMultiplier = artifactMultiplier + (artifact.multiplier or 0)\n            artifactRegenPercent = artifactRegenPercent + (artifact.maxRegen or 0)\n            artifactFatigue = artifactFatigue + (artifact.fatigueMult or 0)\n            artifactAbilTime = artifactAbilTime + (artifact.abilityTime or 0)\n            artifactAbilPower = artifactAbilPower + (artifact.abilityPower or 0)\n            artifactLowMultiplier = artifactLowMultiplier + (artifact.lowMultiplier or 0)\n            artifactLowMultiplierThreshold = artifactLowMultiplierThreshold + (artifact.lowMultiplierThreshold or 0)\n            --print('В функции с артефактами:' .. artifactMultiplier)                  \n        end\n    end\n    return artifactMultiplier, artifactRegenPercent, artifactFatigue, artifactAbilTime, artifactAbilPower, artifactLowMultiplier, artifactLowMultiplierThreshold\n\nend\n\nlocal function onUpdate(dt)\n    --artifactMultiplier = 1\n    artifactsCheckTimer = artifactsCheckTimer + 1\n        if artifactsCheckTimer > artifactsCheckTime then\n            --print(I.IMRGUILDS.magesGuildBonus())\n            --print(artifactMultiplier)\n            if settings.additions:get('NMRArtMultiplier') then\n                artifactMultiplier, artifactRegenPercent, artifactFatigue, artifactAbilTime, artifactAbilPower, artifactLowMultiplier, artifactLowMultiplierThreshold = calculateArtifactBonuses()\n                --print(\"Artifact Multiplier:\", artifactMultiplier)\n                --print(\"Artifact Regen Percent:\", artifactRegenPercent)\n                --print(\"Artifact Fatigue:\", artifactFatigue)\n                --print(\"Artifact Ability Time:\", artifactAbilTime)\n                --print(\"Artifact Ability Power:\", artifactAbilPower)\n                --print(\"Artifact Low Multiplier:\", artifactLowMultiplier)\n                --print(\"Artifact Low Threshold:\", artifactLowMultiplierThreshold)\n            end\n            \n        artifactsCheckTimer = 0\n    end\nend\n\nlocal function onFrame(dt)\n\n    --Initialize equipped artifacts once\n    if artifactInitializerDelay < 1 then\n        artifactsInitializer()\n        artifactInitializerDelay = artifactInitializerDelay + 1\n        return\n    end\n\n    artifactsPopupTimer = artifactsPopupTimer + 1\n    \n    --If an artifact was equipped this check, show message\n    if settings.additions:get('NMRArtMultiplier') and artifactsPopupTimer > artifactsPopupTime then\n        for _, artifact in ipairs(artifactMultipliers) do\n            if not hasItemIDEquipped(artifact.id) then\n                checkCounter = checkCounter + 1\n                if checkCounter > 0 and not artifact.equipped then\n                    checkCounter = 0\n                end\n                artifact.equipped = false\n            elseif hasItemIDEquipped(artifact.id) then\n                checkCounter = checkCounter + 1\n                if checkCounter > 0 and not artifact.equipped then\n                    checkCounter = 0\n                    local bonuses = {\n                        multiplier = (artifact.multiplier or 0),\n                        lowMultiplier = (artifact.lowMultiplier or 0),\n                        lowMultiplierThreshold = (artifact.lowMultiplierThreshold or 0),\n                        regenPercent = (artifact.maxRegen or 0),\n                        fatigueMult = (artifact.fatigueMult or 0),\n                        abilityTime = (artifact.abilityTime or 0),\n                        abilityPower = (artifact.abilityPower or 0),\n                        -- Add more bonuses as needed\n                    }\n                    equippedBonusMessage(artifact.name, bonuses)\n                end\n                artifact.equipped = true\n            end\n        end\n        artifactsPopupTimer = 0\n    end\nend\n\nreturn {\n    engineHandlers = {\n        dt = dt,\n        onUpdate = onUpdate,\n        onFrame = onFrame,\n    },\n    interfaceName = \"IMRART\",\n    interface = {\n        getArtifactBonuses = getArtifactBonuses,\n        getArtifactMultiplier = getArtifactMultiplier,\n    },\n    \n}\n\n",
    "Imperial Magicka Regeneration-53923-1-1-1-1704700267\\Scripts\\imr_guilds.lua": "--local mcm = require('scripts.imr_mcm')\nlocal NPC = require('openmw.types').NPC\nlocal storage = require('openmw.storage')\nlocal types = require('openmw.types')\nlocal core = require('openmw.core')\nlocal self = require('openmw.self')\nlocal I = require('openmw.interfaces')\n\n\n-- GUILDS BONUSES\nlocal mageGuildRanks = {\n    {rank = 1, name = 'Associate', multiplier = 0.00},\n    {rank = 2, name = 'Apprentice', multiplier = 0.02},\n    {rank = 3, name = 'Journeyman', multiplier = 0.04},\n    {rank = 4, name = 'Evoker', multiplier = 0.06},\n    {rank = 5, name = 'Conjurer', multiplier = 0.8},\n    {rank = 6, name = 'Magician', multiplier = 0.10},\n    {rank = 7, name = 'Warlock', multiplier = 0.15},\n    {rank = 8, name = 'Wizard', multiplier = 0.20},\n    {rank = 9, name = 'Master Wizard', multiplier = 0.25},\n    {rank = 10, name = 'Arch-Mage', multiplier = 0.30},\n}\n\nlocal telvanniGuildRanks = {\n    {rank = 1, name = 'Hireling', multiplier = 0.00},\n    {rank = 2, name = 'Retainer', multiplier = 0.02},\n    {rank = 3, name = 'Oathman', multiplier = 0.04},\n    {rank = 4, name = 'Lawman', multiplier = 0.06},\n    {rank = 5, name = 'Mouth', multiplier = 0.08},\n    {rank = 6, name = 'Spellwright', multiplier = 0.10},\n    {rank = 7, name = 'Wizard', multiplier = 0.12},\n    {rank = 8, name = 'Master', multiplier = 0.14},\n    {rank = 9, name = 'Magister', multiplier = 0.16},\n    {rank = 10, name = 'Archmagister', multiplier = 0.20},\n}\n\nlocal TempleGuildRanks = {\n    {rank = 1, name = 'Layman', multiplier = 0.00},\n    {rank = 2, name = 'Novice', multiplier = 0.02},\n    {rank = 3, name = 'Initiate', multiplier = 0.04},\n    {rank = 4, name = 'Acolyte', multiplier = 0.06},\n    {rank = 5, name = 'Adept', multiplier = 0.08},\n    {rank = 6, name = 'Curate', multiplier = 0.10},\n    {rank = 7, name = 'Disciple', multiplier = 0.12},\n    {rank = 8, name = 'Diviner', multiplier = 0.14},\n    {rank = 9, name = 'Master', multiplier = 0.16},\n    {rank = 10, name = 'Patriarch', multiplier = 0.20},\n}\n\nlocal ImperialCultGuildRanks = {\n    {rank = 1, name = 'Layman', multiplier = 0.00},\n    {rank = 2, name = 'Novice', multiplier = 2.5},\n    {rank = 3, name = 'Initiate', multiplier = 2.8},\n    {rank = 4, name = 'Acolyte', multiplier = 3.1},\n    {rank = 5, name = 'Adept', multiplier = 3.4},\n    {rank = 6, name = 'Disciple', multiplier = 3.7},\n    {rank = 7, name = 'Oracle', multiplier = 4.0},\n    {rank = 8, name = 'Invoker', multiplier = 4.3},\n    {rank = 9, name = 'Theurgist', multiplier = 5.6},\n    {rank = 10, name = 'Primate', multiplier = 5.0},\n}\n\n--Variables\n\nlocal telvanniMultiplier = 0\nlocal guildCounter = 0 -- Counter to check for guilds bonuses\nlocal timeToCheckGuilds = 30 -- Periods to check for guilds bonuses\n\n--Bonuses\nlocal magesGuildBonus = 0\nlocal telvanniGuildBonus = 1\nlocal templeGuildBonus = 0\nlocal ImperialCultGuildBonus = 0\n\n--Settings\nlocal settings = {\n    main = storage.playerSection('NMRSettingsA'),\n    additions = storage.playerSection('NMRSettingsB'),\n    guilds = storage.playerSection('NMRSettingsGuildsPage'),\n}\n \n\nlocal function checkMagesGuildBonus()\n    return magesGuildBonus\nend\nlocal function checkTelvanniBonus()\n    return telvanniMultiplier\nend\nlocal function checkTempleBonus()\n    return templeGuildBonus\nend\nlocal function checkCultBonus()\n    return ImperialCultGuildBonus\nend\n\n--Checking for guilds and adjusting their bonuses\n\nlocal function onUpdate(dt)\n    --print(NPC.getFactionRank(self, \"mages guild\"))\n    if settings.guilds:get('NMRGuildsMages') or settings.guilds:get('NMRGuildsTelvanni') or settings.guilds:get('NMRGuildsTemple') then\n        guildCounter = guildCounter + 1\n    end\n        \n    if guildCounter == timeToCheckGuilds then\n        --Checking for Mages Guild ranks and multipliers\n        if settings.guilds:get('NMRGuildsMages') then\n            local playerMageRank = NPC.getFactionRank(self, \"mages guild\")\n            if playerMageRank > 1 then\n                for _, rankInfo in ipairs(mageGuildRanks) do\n                    if playerMageRank == rankInfo.rank then\n                        -- Print information based on the player's rank\n                        magesGuildBonus = rankInfo.multiplier\n                        --print('Mages Guild Rank:', rankInfo.name)\n                        --print('Maximum Magicka to regenerate: +', rankInfo.multiplier , '%')\n                        break  -- Stop iterating once the player's rank is found\n                    end\n                end\n            end\n        end\n        --Checking for House Telvanni ranks and multipliers\n        if settings.guilds:get('NMRGuildsTelvanni') then\n            local playerTelvanniRank = NPC.getFactionRank(self, \"telvanni\")\n            if playerTelvanniRank > 1 then\n                for _, rankInfo in ipairs(telvanniGuildRanks) do\n                    if playerTelvanniRank == rankInfo.rank then\n                        telvanniMultiplier = 0\n                        -- Print information based on the player's rank\n                        telvanniGuildBonus = rankInfo.multiplier\n                        telvanniMultiplier = telvanniMultiplier + telvanniGuildBonus\n                        --print('House Telvanni Rank: ', rankInfo.name)\n                        --print('Bonus speed to magicka regeneration: ', rankInfo.multiplier)\n                        \n                        break  -- Stop iterating once the player's rank is found\n                    end\n                end\n            end\n        end\n        --Checking for Tribunal Temple ranks and multipliers\n        if settings.guilds:get('NMRGuildsTemple') then\n            local playerTribunalRank = NPC.getFactionRank(self, \"temple\")\n            if playerTribunalRank > 1 and settings.additions:get('NMRFatigueMult') then\n                for _, rankInfo in ipairs(TempleGuildRanks) do\n                    if playerTribunalRank == rankInfo.rank then\n                        -- Print information based on the player's rank\n                        templeGuildBonus = rankInfo.multiplier\n                        --print('Temple Rank: ', rankInfo.name)\n                        --print('Fatigue influences Magicka regeneration less by : ', rankInfo.multiplier, '%')\n                        break  -- Stop iterating once the player's rank is found\n                    end\n                end\n            end\n        end            \n        guildCounter = 0\n    end\nend\n\nreturn {\n    engineHandlers = {\n        dt = dt,\n        onUpdate = onUpdate,\n    },\n    interfaceName = \"IMRGUILDS\",\n    interface = {\n        mageGuildRanks = mageGuildRanks,\n        telvanniGuildRanks = telvanniGuildRanks,\n        TempleGuildRanks = TempleGuildRanks,\n        ImperialCultGuildRanks = ImperialCultGuildRanks,\n        magesGuildBonus = checkMagesGuildBonus,\n        telvanniGuildBonus = checkTelvanniBonus,\n        templeGuildBonus = checkTempleBonus,\n        ImperialCultGuildBonus = checkCultBonus, \n    },\n    \n}",
    "Imperial Magicka Regeneration-53923-1-1-1-1704700267\\Scripts\\imr_main.lua": "--[[\n\nMod: Imperial Magicka Regeneration\nAuthor: Craftymonkey (Always Hungry)\n\n--]]\n\nlocal self = require('openmw.self')\nlocal types = require('openmw.types')\nlocal storage = require('openmw.storage')\nlocal I = require('openmw.interfaces')\nlocal core = require('openmw.core')\nlocal ui = require('openmw.ui')\nlocal util = require('openmw.util')\nlocal input = require('openmw.input')\nlocal NPC = require('openmw.types').NPC\nlocal async = require('openmw.async')\nlocal RegenUtil= require('scripts.imr_regen_util')\n\n\n--Settings\nlocal settings = {\n    main = storage.playerSection('NMRSettingsA'),\n    additions = storage.playerSection('NMRSettingsB'),\n    guilds = storage.playerSection('NMRSettingsGuildsPage'),\n}\n\n\nlocal second = 1\nlocal oneSecond = 1\nlocal accumulatedTime = 0\nlocal accumulatedRegen = 0\n\n--Linking regeneration to the game time\nlocal gameTimeLastFrame = core.getGameTime()\n\n--Updating max and min regen values\nlocal mxRegenTime\nlocal mnRegenTime\nlocal mxRegenTimeLastCheck\nlocal mnRegenTimeLastCheck\n\n--Fatigue penalties\nlocal fatiguePenalties = {\n    { threshold = 20, multiplier = 0.5},\n    { threshold = 40, multiplier = 0.7},\n    { threshold = 60, multiplier = 0.8},\n    { threshold = 80, multiplier = 0.9},\n}\n\n--multipliers and stats\nlocal baseSpeedMultiplier = 1\nlocal totalModifier = 1\nlocal regenStat = types.Actor.stats.attributes.intelligence(self).modified\n\n--tick time\nlocal tick_time = 0.1\nlocal tick_timer = 0\n\n--Variables for rest and wait\nlocal magickaLastFrame = 0\nlocal magickaCurrentFrame = 0\nlocal initializeTime = 0\n\nlocal restTimer = 0\nlocal restTime = 5\n\nlocal timeLastFrame = 0\nlocal timeCurrentFrame = 0\nlocal timeDifference = 0\n\nlocal maxRegenPercentage = settings.main:get('NMRMaxRegenPercentage') / 100\n\nlocal regenAmount\nlocal positiveBonuses\n\n--Fortify Magicka\nlocal fortifyMagnitude = 0\n\nlocal isResting = false\nlocal onFrameTime = 5\nlocal onFrameTimer = 0\n\n\n-- Calculating regenerated magicka per second:\nlocal function printMagickaRegenPerSecond(regenAmount, totalModifier)\n    local regenPerSecond = regenAmount / second\n    local formattedRegenPerSecond = string.format(\"%.2f\", regenPerSecond)\n    --print('Magicka Regeneration per Second: ' .. formattedRegenPerSecond)\n\n    if totalModifier then\n        --print('Total Modifier: ' .. totalModifier)\n    end\nend\n\nlocal function getRegenAmount()\n    return regenAmount\nend\n\nlocal function getTotalModifier()\n    return totalModifier\nend\n\n\nlocal function onUpdate(dt)\n    --print('onUpdate тут работает, или нет?')\n    -- If the mod is not active or the player has Atronach sign and the settings don't allow regeneration with it, then the rest of the code shouldn't work\n    if settings.main:get('NMRisActive') == false or types.Actor.spells(self).wombburn and settings.additions:get('NMRAtronachSign') then\n        --print(\"Modification is disabled or Atronach sign prevents regeneration\")\n        return\n    end\n\n    tick_timer = tick_timer + dt\n\n    if tick_timer >= tick_time then\n        local atronachMultiplier = 1\n\n        --print('Magnitude? ' .. fortifyMagicka.magnitude .. 'Duration?' .. fortifyMagicka.magnitudeModifier)\n\n        if types.Actor.spells(self).wombburn then\n            atronachMultiplier = settings.additions:get('NMRAtronachMultiplier')\n            --print('Atronach multiplier: ' .. atronachMultiplier)\n        end\n\n\n\n        local currentMagicka = types.Actor.stats.dynamic.magicka(self).current\n        local maxMagicka = types.Actor.stats.dynamic.magicka(self).base\n        local isIntelligence = settings.additions:get('NMRIntRegen')\n        local currentHealth = types.Actor.stats.dynamic.health(self).current\n\n\n        if settings.additions:get('NMRFortifyMagicka') then\n        local fortifyMagickaEff = types.Actor.activeEffects(self):getEffect(core.magic.EFFECT_TYPE.FortifyMagicka)\n            if fortifyMagickaEff then\n                fortifyMagnitude = fortifyMagickaEff.magnitude\n            else\n                fortifyMagnitude = 0\n            end\n        end\n\n\n        local maxRegenerableMagicka = I.IMRRegenUtil.calculateMaxRegenAmount(maxMagicka, fortifyMagnitude)\n        --print('Calculation complete. Restoring to: ' .. maxRegenerableMagicka)\n        --Calculating regen time\n        local gameTimeCurrentFrame = core.getGameTime()\n        local gameTimeDifference = (gameTimeCurrentFrame - gameTimeLastFrame) / core.getGameTimeScale()\n        --print('Time per tick: ' ..gameTimeDifference)\n\n        if gameTimeDifference >= 1 and isResting then\n            --print('Regeneration calcelled based on time passed')\n            gameTimeLastFrame = gameTimeCurrentFrame\n            tick_timer = 0\n            return\n        end\n        isResting = false\n\n        \n\n        \n        if settings.additions:get('NMRIntRegen') then\n            regenStat = types.Actor.stats.attributes.intelligence(self).modified \n        else\n            regenStat = types.Actor.stats.attributes.willpower(self).modified\n        end\n\n        --Second check to ensure that we need to regenerate magicka at all\n        if regenStat <= 0 \n            or currentMagicka >= maxRegenerableMagicka \n            or currentHealth <= 0 then\n            tick_timer = 0\n            gameTimeLastFrame = gameTimeCurrentFrame\n            --print('А магия не регенерирует, лоль')\n            return\n        end\n\n        --resetting our modifiers to their initial values\n        local fatigueMultiplier = 1\n        totalModifier = 1\n        \n        \n\n        local regenAmount, regenTime = I.IMRRegenUtil.calculateRegenAmount(maxMagicka, regenStat, gameTimeDifference, oneSecond)\n        --print('Regen amount: ' .. regenAmount .. ' Regen time: ' .. regenTime)\n        \n\n        -- Calculating fatigue modifier\n        if settings.additions:get('NMRFatigueMult') then\n            local fatiguePercent = (types.Actor.stats.dynamic.fatigue(self).current / types.Actor.stats.dynamic.fatigue(self).base) * 100\n\n            for _, penalty in ipairs(fatiguePenalties) do\n                if fatiguePercent < penalty.threshold then\n                    fatigueMultiplier = penalty.multiplier\n                    --print('Эгегей! ' ..fatigueMultiplier)\n                    break\n                end\n            end\n        \n            if settings.guilds:get('NMRGuildsTemple') then\n                fatigueMultiplier = math.min(fatigueMultiplier + I.IMRGUILDS.templeGuildBonus(), 1)\n                --print('Temple fatigue modifier: ' .. I.IMRGUILDS.templeGuildBonus())\n                --print('Fatigue modifier with temple: ' .. fatigueMultiplier)\n            end\n\n            fatigueMultiplier = math.min(fatigueMultiplier + I.IMRART.getArtifactBonuses().fatigue, 1)\n            --print('Fatigue modifier with arts: ' .. fatigueMultiplier)\n        end\n        \n        local artifactMultiplier = I.IMRART.getArtifactBonuses().multiplier\n        --print('Artifact modifier: ' .. artifactMultiplier)\n        local telvanniMultiplier = I.IMRGUILDS.telvanniGuildBonus()\n        --print('Telvanni modifier: ' .. telvanniMultiplier)\n        local divineResilienceMult = I.IMR_ABIL_RESIL.cultAbilityMultiplier()\n        --print('Бонус абилки: ' ..divineResilienceMult)\n        -- calculating total amount based on what modifiers are turned on\n        \n\n        \n        positiveBonuses = totalModifier + artifactMultiplier + telvanniMultiplier + divineResilienceMult\n         \n        local artifactThreshold = I.IMRART.getArtifactBonuses().lowMultThresh\n        if I.IMRART.getArtifactBonuses().lowMultThresh ~= 0 then\n            if currentMagicka < maxMagicka * artifactThreshold then\n                local lowMagickaArtMult = I.IMRART.getArtifactBonuses().lowMultiplier\n                --print('Получили бонусы для низкой магии: ' ..lowMagickaArtMult)\n                positiveBonuses = positiveBonuses + lowMagickaArtMult\n            end\n        end\n        totalModifier = positiveBonuses * fatigueMultiplier * atronachMultiplier\n        --print(totalModifier)\n        regenAmount = regenAmount * totalModifier\n        --print('А восстанавливать мы будем вот столько:' .. regenAmount)\n\n        --Calculating amount of regenerated magicka per second to show its value\n        accumulatedTime = accumulatedTime + gameTimeDifference\n        accumulatedRegen = accumulatedRegen + regenAmount\n\n        -- Accumulate until one second has passed\n        if accumulatedTime >= second then\n            -- Print magicka regeneration per second\n            --print('Восстановлено в секунду: ' .. accumulatedRegen .. '. Модификатор восстановления: ' .. totalModifier)\n            --printMagickaRegenPerSecond(accumulatedRegen, totalModifier)\n            --print('Время до полного восстановления (формула): ' .. regenTime)\n            --print('Время до полного восстановления (магия / магия в секунду): ' .. maxMagicka / accumulatedRegen)\n            --print('Регенерируем до: ' .. maxRegenerableMagicka .. ' Это ' .. (maxRegenerableMagicka / maxMagicka ) * 100 .. '% от общей магии.')\n            --print('Позитивные бонусы (аддитивно): ' .. positiveBonuses)\n            --print('Бонусы гильдий: Гильдия магов' .. I.IMRGUILDS.magesGuildBonus() .. ' Тельванни: ' .. I.IMRGUILDS.telvanniGuildBonus() .. ' Культ: ' .. I.IMRGUILDS.ImperialCultGuildBonus() .. ' Храм: ' .. I.IMRGUILDS.templeGuildBonus())\n            --print('Бонус от абилки: ' .. I.IMR_ABIL_RESIL.cultAbilityMultiplier())\n            --print('Модификатор при низкой магии: ' ..I.IMRART.getArtifactBonuses().lowMultiplier)\n            --print('Модификатор силы абилки: ' ..I.IMRART.getArtifactBonuses().abilPower)\n            --print('Трешолд за артефакты: ' ..I.IMRART.getArtifactBonuses().lowMultThresh)\n            --print('Бонусы для стамины: ' ..I.IMRART.getArtifactBonuses().fatigue)\n            --print('Бонусы для скорости регена от артов: ' ..I.IMRART.getArtifactBonuses().multiplier)\n            --print('Бонусы времени абилки: ' ..I.IMRART.getArtifactBonuses().abilTime)\n\n            -- Reset accumulated time and regeneration for the next second\n            accumulatedTime = 0\n            accumulatedRegen = 0\n        end\n\n        if currentMagicka < maxRegenerableMagicka then\n            --print('Магии не хватает, регенерировать!')\n            local newValue = math.min(currentMagicka + regenAmount, maxRegenerableMagicka)\n            --print('Восстановили магию вот на столько: ' ..regenAmount)\n            --print('До максимума во сколько? ' ..maxRegenerableMagicka)\n            --print(newValue)\n            types.Actor.stats.dynamic.magicka(self).current = newValue\n            --print('Новое значение магии: ' .. newValue)\n        end\n        gameTimeLastFrame = gameTimeCurrentFrame\n        tick_timer = 0\n    end\nend\n--[[\nlocal function onKeyPress(key)\n    --if key.symbol == 'x' then\n            --ambient.playSoundFile(\"Sound\\\\spell_sound.mp3\", soundParams2)\n    --end\nend\n--]]\n\nlocal function onFrame(dt)\n    onFrameTimer = onFrameTimer + 1\n    if onFrameTimer >= onFrameTime then\n        if I.UI.getMode() == 'Rest' then\n            isResting = true\n        end\n        onFrameTimer = 0\n    end\nend\n\nreturn {\n    engineHandlers = {\n        dt = dt,\n        onUpdate = onUpdate,\n        onKeyPress = onKeyPress,\n        onFrame = onFrame,\n    },\n    interfaceName = \"IMRREGEN\",\n    interface = {\n        regenAmount = getRegenAmount,\n        totalModifier = getTotalModifier,\n        maxRegenerableMagicka = getMaxRegenerableMagicka,\n        getRegenAmount = getRegenAmount,\n    },\n}\n",
    "Imperial Magicka Regeneration-53923-1-1-1-1704700267\\Scripts\\imr_mcm.lua": "local storage = require('openmw.storage')\nlocal I = require('openmw.interfaces')\nlocal async = require('openmw.async')\n\nI.Settings.registerPage {\n    key = \"NMRSettingsMain\",\n    l10n = \"NMRSettingsMain\",\n    name = \"Imperial Magicka Regen\",\n    description = \"These settings allow you to modify the behavior of Imperial Magicka Recovery.\"\n}\n\nI.Settings.registerPage {\n    key = \"NMRSettingsGuilds\",\n    l10n = \"NMRSettingsGuilds\",\n    name = \"Imperial Magicka Regen: Guilds\",\n    description = \"When enabled, some guilds ranks will provide certain bonuses to Magicka regeneration.\"\n}\n\nI.Settings.registerGroup({\n    key = 'NMRSettingsA', \n    page = 'NMRSettingsMain',\n    l10n = 'NMRSettingsMain',\n    name = 'Base Settings',\n    permanentStorage = true,\n    settings = {\n        {\n            key = \"NMRisActive\",\n            renderer = \"checkbox\",\n            name = \"Modification is enabled\",\n            description =\n            \"Uncheck to disable Imperial Magicka Recovery and its features.\",\n            default = true\n        },\n        {\n            key = 'NMRbaseRegenTime',\n            name = 'Base Regen Time',\n            description = 'Specifies how fast Magicka regenerates (in seconds) to 100% when Intelligence is 1.',\n            default = 200,\n            renderer = 'number',\n            argument = {\n                min = 10,\n                max = 1000,\n                integer = true,\n            },\n        },\n        {\n            key = 'NMRfastRegenTime',\n            name = 'Min Regen Time',\n            description = 'Specifies how fast Magicka regenerates (in seconds) to 100% when Intelligence is 100. (100 Intelligence is the hard cap for this mod)',\n            default = 140,\n            renderer = 'number',\n            argument = {\n                min = 5,\n                max = 1000,\n                integer = true,\n            },\n        },\n        {\n            key = 'NMRMaxRegenPercentage',\n            name = 'Max Regen Percentage',\n            description = 'Sets the maximum percentage of Magicka regeneration allowed (0-100).\\n\\nDefault is 20 for a balanced experience with potions and scrolls. Advancing through Mages Guild ranks can grant up to +30%, and certain artifacts can further enhance this by up to 15%. (but not higher than 100%).',\n            default = 20,\n            renderer = 'number',\n            argument = {\n                min = 0,\n                max = 100,\n                integer = true,\n            },\n        },\n    },\n})\n\nI.Settings.registerGroup({\n    key = 'NMRSettingsB', \n    page = 'NMRSettingsMain',\n    l10n = 'NMRSettingsMain',\n    name = 'Additions',\n    permanentStorage = true,\n    settings = {\n        {\n            key = \"NMRIntRegen\",\n            renderer = \"checkbox\",\n            name = \"Intelligence-powered\",\n            description =\n            \"If checked, Intelligence will control Magicka regeneration. If unchecked, it will be controlled by Willpower.\",\n            default = true\n        },\n        {\n            key = \"NMRFortifyMagicka\",\n            renderer = \"checkbox\",\n            name = \"Fortify Magicka effect\",\n            description =\n            \" If checked, the Fortify Magicka effect will be treated as your maximum Magicka for the purpose of regeneration.\",\n            default = false\n        },\n        {\n            key = \"NMRFatigueMult\",\n            renderer = \"checkbox\",\n            name = \"Fatigue multiplier\",\n            description =\n            \"If checked, Fatigue will influence Magicka regeneration, up to a modifier of 0.5 at zero Fatigue. Effectively limits your ability to spam spells while running or in combat.\",\n            default = true\n        },\n        {\n            key = \"NMRArtMultiplier\",\n            renderer = \"checkbox\",\n            name = \"Artifacts bonuses\",\n            description =\n            \"If enabled, specific artifacts and unique items will provide additional bonuses to Magicka regeneration.\",\n            default = true\n        },\n        {\n            key = \"NMRAtronachSign\",\n            renderer = \"checkbox\",\n            name = \"Atronach sign\",\n            description =\n            \"If checked, the Atronach Sign will prevent Magicka regeneration.\",\n            default = true\n        },\n        {\n            key = 'NMRAtronachMultiplier',\n            name = 'Atronach sign multiplier',\n            description = 'Magicka regeneration speed multiplier for the Atronach Sign.',\n            default = 0.3, \n            renderer = 'select',\n            argument = {\n                disabled = false,\n                l10n = 'LocalizationContext', \n                items = {0.1, 0.2, 0.3, 0.4, 0.5},\n            },\n        },\n        {\n            key = 'NMRrestHandler',\n            name = 'Regenerate while Waiting/Resting',\n            renderer = 'checkbox',\n            description = 'If enabled, IMR will handle waiting and resting, suppressing vanilla resting regeneration. Should be working properly but disable if issues arise. Note: Atronach sign limits magicka regen during rest to Max Regen Percentage.',\n            default = true\n        },\n    },\n})\n\nI.Settings.registerGroup({\n    key = 'NMRSettingsGuildsPage', \n    page = 'NMRSettingsGuilds',\n    l10n = 'NMRSettingsGuildsMain',\n    name = 'Guilds bonuses',\n    permanentStorage = true,\n    settings = {\n        {\n            key = \"NMRGuildsMages\",\n            renderer = \"checkbox\",\n            name = \"Mages Guild\",\n            description =\n            \"\\nAdvancing in the Mages Guild ranks will increase the maximum % your Magicka can regenerate. Not applicable if Max Regen Percentage setting is 100%.\\n\\nApprentice: +2% to total Magicka that can be regenerated.\\n.\\n.\\n.\\nArch-Mage: +30% to total Magicka that can be regenerated.\",\n            default = true\n        },\n        {\n            key = \"NMRGuildsTelvanni\",\n            renderer = \"checkbox\",\n            name = \"House Telvanni\",\n            description =\n            \"\\nAdvancing in the House Telvanni ranks will increase your Magicka regeneration speed.\\n\\nRetainer: +2% to your Magicka regeneration speed.\\n.\\n.\\n.\\nArchmagister: +20% to your Magicka regeneration speed.\",\n            default = true\n        },\n        {\n            key = \"NMRGuildsTemple\",\n            renderer = \"checkbox\",\n            name = \"Tribunal Temple\",\n            description =\n            \"\\nAdvancing in the Tribunal Temple ranks will lessen the impact of fatigue penalties. Not applicable if Fatigue multiplier setting is disabled.\\n\\nNovice: 2% weaker penalty (with 0 Fatigue your Magicka regen speed multiplier will be 0.52 instead of 0.5).\\n.\\n.\\n.\\nPatriarch: 20% weaker penalty (with 0 Fatigue your Magicka regen speed multiplier will be 0.7 instead of 0.5).\",\n            default = true\n        },\n        {\n            key = \"NMRGuildsImperialCult\",\n            renderer = \"checkbox\",\n            name = \"Imperial Cult\",\n            description =\n            \"\\nJoining the Imperial Cult gives you the Divine Resilience ability, boosting your Magicka regeneration speed when Health drops below 30%.\\n\\nNovice: 150% Magicka regeneration speed boost for 10 seconds.\\n.\\n.\\n.\\nPrimate: 400% Magicka regeneration speed boost for 10 seconds.\",\n            default = true\n        },\n        {\n            key = \"NMRGuildsSounds\",\n            renderer = \"checkbox\",\n            name = \"Notifications sounds\",\n            description =\n            \"\\nTurn off to disable custom sounds for rank promotions in the guilds above.\",\n            default = true\n        },\n    },\n})\n\n\nlocal settings = {\n    main = storage.playerSection('NMRSettingsA'),\n    additions = storage.playerSection('NMRSettingsB'),\n    guilds = storage.playerSection('NMRSettingsGuildsPage'),\n}\n\n\n\nlocal atronachMultiplier = 1\nlocal mcmInitializerDelay = 0\nlocal timeToUpdateSettings = 0\n\n\n\nlocal function updateTempleGuildIfFatigue()\n    local disabled = not settings.additions:get('NMRFatigueMult')\n    I.Settings.updateRendererArgument('NMRSettingsGuildsPage', 'NMRGuildsTemple', {disabled = disabled})\n\nend\n\nlocal function updateAtronachSign()\n    local disabled = settings.additions:get('NMRAtronachSign')\n    I.Settings.updateRendererArgument('NMRSettingsB', 'NMRAtronachMultiplier', {disabled = disabled, l10n = 'randomValue', items = {0.1, 0.2, 0.3, 0.4, 0.5}})\n\nend\n\nlocal function updateAtronachSignMult()\n    if settings.additions:get('NMRAtronachMultiplier') and not settings.additions:get('NMRAtronachSign') then\n        atronachMultiplier = settings.additions:get('NMRAtronachMultiplier')\n        --print(atronachMultiplier)\n    elseif settings.additions:get('NMRAtronachSign') then\n        atronachMultiplier = 1\n        --print(atronachMultiplier)\n    end\nend\n\nlocal function disableModification()\n    local disabled = not settings.main:get('NMRisActive')\n    I.Settings.updateRendererArgument('NMRSettingsA', 'NMRbaseRegenTime', {disabled = disabled})\n    I.Settings.updateRendererArgument('NMRSettingsA', 'NMRfastRegenTime', {disabled = disabled})\n    I.Settings.updateRendererArgument('NMRSettingsA', 'NMRMaxRegenPercentage', {disabled = disabled})\n\n    \n    \nend\n\nupdateAtronachSignMult()\nupdateTempleGuildIfFatigue()\nupdateAtronachSign()\ndisableModification()\n\nsettings.additions:subscribe(async:callback(updateTempleGuildIfFatigue))\nsettings.additions:subscribe(async:callback(updateAtronachSign))\nsettings.additions:subscribe(async:callback(updateAtronachSignMult))\nsettings.main:subscribe(async:callback(disableModification))\n\nlocal function onFrame(dt)\n\n    -- Equipped artifacts initialization on the first frame of onFrame\n    if mcmInitializerDelay < 1 then\n\n        mxRegenTimeLastCheck = settings.main:get('NMRbaseRegenTime')\n        mnRegenTimeLastCheck = settings.main:get('NMRfastRegenTime')        \n        mcmInitializerDelay = mcmInitializerDelay + 1\n        return\n    end\n    if I.UI.getMode() == 'SettingsMenu' then\n        timeToUpdateSettings = timeToUpdateSettings + 1\n    end\n\n    if timeToUpdateSettings > 40 and I.UI.getMode() == 'SettingsMenu' then\n        mxRegenTime = settings.main:get('NMRbaseRegenTime')\n        mnRegenTime = settings.main:get('NMRfastRegenTime')\n        if mxRegenTime ~= nil and mnRegenTime ~= nil then\n        if mnRegenTime > mxRegenTime and mxRegenTimeLastCheck ~= mxRegenTime then\n            settings.main:set('NMRbaseRegenTime', mnRegenTime)\n            elseif mnRegenTime > mxRegenTime and mnRegenTimeLastCheck ~= mnRegenTime then\n            settings.main:set('NMRfastRegenTime', mxRegenTime)\n        end\n        mxRegenTimeLastCheck = mxRegenTime\n        mnRegenTimeLastCheck = mnRegenTime\n        timeToUpdateSettings = 0\n        end\n    end\n\nend\n\nreturn {\n    engineHandlers = {\n        dt = dt,\n        onUpdate = onUpdate,\n        onFrame = onFrame,\n        onLoad = onLoad,\n    },\n}\n",
    "Imperial Magicka Regeneration-53923-1-1-1-1704700267\\Scripts\\imr_notifications.lua": "local self = require('openmw.self')\nlocal types = require('openmw.types')\nlocal storage = require('openmw.storage')\nlocal core = require('openmw.core')\nlocal ui = require('openmw.ui')\nlocal util = require('openmw.util')\nlocal NPC = require('openmw.types').NPC\nlocal async = require('openmw.async')\nlocal guilds = require('scripts.imr_guilds')\nlocal I = require(\"openmw.interfaces\")\nlocal ambient = require('openmw.ambient')\n\nlocal soundParams = {\n    timeOffset=0,\n    volume=21,\n    scale=false,\n    pitch=1,\n    loop=false,\n }\n\n-- Getting mod settings\nlocal settings = {\n    main = storage.playerSection('NMRSettingsA'),\n    additions = storage.playerSection('NMRSettingsB'),\n    guilds = storage.playerSection('NMRSettingsGuildsPage'),\n}\n \n--Variables\nlocal guildPopupCounter = 0\nlocal guildPopupDelay = 10\n\nlocal lastMagesGuildRank = NPC.getFactionRank(self, \"mages guild\")\nlocal lastTelvanniRank = NPC.getFactionRank(self, \"telvanni\")\nlocal lastTribunalRank = NPC.getFactionRank(self, \"temple\")\nlocal lastImperialCultRank = NPC.getFactionRank(self, \"imperial cult\")\n\n\n--Guilds ranks notifications\nlocal function onFrame(dt)\n    if settings.guilds:get('NMRGuildsMages') or settings.guilds:get('NMRGuildsTelvanni') or settings.guilds:get('NMRGuildsTemple') or settings.guilds:get('NMRGuildsImperialCult') then\n        guildPopupCounter = guildPopupCounter + dt\n        --print(guildCounter)\n        end\n        \n        if guildPopupCounter >= guildPopupDelay then\n            --Checking to Mages Guild ranks and multipliers\n            if settings.guilds:get('NMRGuildsMages') then\n                local playerMageRank = NPC.getFactionRank(self, \"mages guild\")\n                if playerMageRank > lastMagesGuildRank then\n                    if playerMageRank > 1 then\n                        for _, rankInfo in ipairs(I.IMRGUILDS.mageGuildRanks) do\n                            if playerMageRank == rankInfo.rank then\n                                ui.showMessage(\"Mages Guild: You've been promoted to \" .. rankInfo.name .. \"\\n\\nYou can now regenerate an additional \" .. rankInfo.multiplier*100 .. \"% of your total Magicka.\")\n                                if settings.guilds:get('NMRGuildsSounds') then\n                                    ambient.playSoundFile(\"Sound\\\\imr_notification_mages.mp3\", soundParams)\n                                end\n                                break  -- Stop iterating once the player's rank is found\n                            end\n                        end\n                    end\n                    lastMagesGuildRank = playerMageRank\n                end\n            end\n\n            --Checking to House Telvanni ranks and multipliers\n            if settings.guilds:get('NMRGuildsTelvanni') then\n                local playerTelvanniRank = NPC.getFactionRank(self, \"telvanni\")\n                if playerTelvanniRank > lastTelvanniRank then\n                    if playerTelvanniRank > 1 then\n                        \n                        for _, rankInfo in ipairs(I.IMRGUILDS.telvanniGuildRanks) do\n                            if playerTelvanniRank == rankInfo.rank then\n                                -- Print information based on the player's rank\n                                ui.showMessage(\"House Telvanni: You've been promoted to \" .. rankInfo.name .. \"\\n\\nYour Magicka regeneration speed is increased by \" .. rankInfo.multiplier*100 .. \"%.\")\n                                if settings.guilds:get('NMRGuildsSounds') then\n                                    ambient.playSoundFile(\"Sound\\\\imr_notification_telvanni.mp3\", soundParams)\n                                end\n                                break  -- Stop iterating once the player's rank is found\n                            end\n                        end\n                    end\n                    lastTelvanniRank = playerTelvanniRank\n                end\n            end\n            --Checking to Tribunal Temple ranks and multipliers\n            if settings.guilds:get('NMRGuildsTemple') then\n                local playerTribunalRank = NPC.getFactionRank(self, \"temple\")\n                if playerTribunalRank > lastTribunalRank and settings.additions:get('NMRFatigueMult') then\n                    if playerTribunalRank > 1 then\n                        for _, rankInfo in ipairs(I.IMRGUILDS.TempleGuildRanks) do\n                            if playerTribunalRank == rankInfo.rank then\n                                    ui.showMessage(\"Tribunal Temple: You've been promoted to \" .. rankInfo.name .. \"\\n\\nYour Fatigue penalty to Magicka regeneration is reduced by \" .. rankInfo.multiplier*100 .. \"%.\")\n                                    if settings.guilds:get('NMRGuildsSounds') then\n                                    ambient.playSoundFile(\"Sound\\\\imr_notification_temple.mp3\", soundParams)\n                                    end\n                                break  -- Stop iterating once the player's rank is found\n                            end\n                        end\n                    end\n                    lastTribunalRank = playerTribunalRank\n                end\n            end\n\n            if settings.guilds:get('NMRGuildsImperialCult') then\n                local playerImperialRank = NPC.getFactionRank(self, \"imperial cult\")\n                if playerImperialRank > lastImperialCultRank then\n                    if playerImperialRank > 1 then\n                        for _, rankInfo in ipairs(I.IMRGUILDS.ImperialCultGuildRanks) do\n                            if playerImperialRank == rankInfo.rank then\n                                    ui.showMessage(\"Imperial Cult: You've been promoted to \" .. rankInfo.name .. \"\\n\\nDivine Resilience: When your Health drops to 30%, your Magicka regenerates \" .. rankInfo.multiplier*100 .. \"% faster for 10 seconds.\")\n                                    if settings.guilds:get('NMRGuildsSounds') then\n                                        ambient.playSoundFile(\"Sound\\\\imr_notification_cult.mp3\", soundParams)\n                                    end\n                                break  -- Stop iterating once the player's rank is found\n                            end\n                        end\n                    end\n                    lastImperialCultRank = playerImperialRank\n                end\n            end\n\n            guildPopupCounter = 0\n        end\nend\n\nreturn {\n    engineHandlers = {\n        dt = dt,\n        onFrame = onFrame,\n    },\n}",
    "Imperial Magicka Regeneration-53923-1-1-1-1704700267\\Scripts\\imr_regen_util.lua": "local self = require('openmw.self')\nlocal types = require('openmw.types')\nlocal storage = require('openmw.storage')\nlocal I = require('openmw.interfaces')\nlocal core = require('openmw.core')\nlocal ui = require('openmw.ui')\nlocal util = require('openmw.util')\nlocal input = require('openmw.input')\nlocal NPC = require('openmw.types').NPC\nlocal async = require('openmw.async')\n\n\n--Settings\nlocal settings = {\n    main = storage.playerSection('NMRSettingsA'),\n    additions = storage.playerSection('NMRSettingsB'),\n    guilds = storage.playerSection('NMRSettingsGuildsPage'),\n}\n\nfunction calculateRegenAmount(maxMagicka, regenStat, tick_time, oneSecond)\n    -- Add your common calculation logic here\n    -- For example, you can include guild bonuses, fatigue, etc.\n    -- ...\n    local BASE_REGEN_TIME = settings.main:get('NMRbaseRegenTime')\n    local FAST_REGEN_TIME = settings.main:get('NMRfastRegenTime')\n\n    local regenTime = ((BASE_REGEN_TIME - FAST_REGEN_TIME) / 99) * (100 - regenStat) + FAST_REGEN_TIME\n\n        --Clamping values to be sure that they are not higher or lower than our base values\n    regenTime = math.max(FAST_REGEN_TIME, math.min(BASE_REGEN_TIME, regenTime))\n\n    local regenPercent = (tick_time / oneSecond) / regenTime\n    regenAmount = maxMagicka * regenPercent\n\n    return regenAmount, regenTime\nend\n\nfunction calculateMaxRegenAmount(maxMagicka, fortifyMagicka)\n    -- ADDING BONUS TO MAX REGENERATION % BASED ON MAGE GUILD BONUS\n    local maxRegenPercentage = settings.main:get('NMRMaxRegenPercentage') / 100\n    if settings.guilds:get('NMRGuildsMages') then\n        if I.IMRGUILDS.magesGuildBonus() > 0 then\n            maxRegenPercentage = math.min(maxRegenPercentage + I.IMRGUILDS.magesGuildBonus(), 1)\n            --print('Теперь максимальный процент регенерации составляет: ' , maxRegenPercentage)\n        end\n    end\n    maxRegenPercentage = math.min(math.max(maxRegenPercentage + I.IMRART.getArtifactBonuses().regenPercent, 0), 1)\n    --print('Max regen %: ' ..maxRegenPercentage)\n    maxMagicka = maxMagicka + fortifyMagicka\n    --Calculating max amount of magicka to regenerate based on the settings\n    maxRegenerableMagicka = maxMagicka * maxRegenPercentage\n    --print('Максимальное значение магии для регенерации: ' .. maxRegenerableMagicka)\n    return maxRegenerableMagicka\n\nend\n\nreturn {\n    interfaceName = \"IMRRegenUtil\",\n    interface = {\n        calculateRegenAmount = calculateRegenAmount,\n        calculateMaxRegenAmount = calculateMaxRegenAmount,\n    },\n}",
    "Imperial Magicka Regeneration-53923-1-1-1-1704700267\\Scripts\\imr_wait.lua": "local NPC = require('openmw.types').NPC\nlocal storage = require('openmw.storage')\nlocal types = require('openmw.types')\nlocal core = require('openmw.core')\nlocal self = require('openmw.self')\nlocal I = require('openmw.interfaces')\nlocal UI = require('openmw.interfaces').UI\n\n\nlocal settings = {\n    main = storage.playerSection('NMRSettingsA'),\n    additions = storage.playerSection('NMRSettingsB'),\n    guilds = storage.playerSection('NMRSettingsGuildsPage'),\n}\n\nlocal initialized = false\nlocal atronachMultiplier = 1\nlocal regenStat = types.Actor.stats.attributes.intelligence(self).modified\nlocal oneSecond = 1\nlocal activeEffects = types.Actor.activeEffects(self)\nlocal gameToRealTime = 0\n\nlocal fortifyMagnitude = 0\nlocal magickaCurrentFrame\nlocal magickaLastFrame\nlocal totalPotionMagicka = 0\n\nlocal isResting = false\n\nlocal fortifyMagickaEff = 0\n\n\nlocal percentageTolerance = 1\n\n                    -- Calculate the expected percentage change based on intelligence\nlocal expectedPercentageChange = 0.15 * types.Actor.stats.attributes.intelligence(self).modified\n\n                    -- Calculate the actual percentage change\nlocal actualPercentageChange = 0\nlocal percentageDifference = 0\nlocal magickaDifference = 0\n\nlocal regenAmount = 0\n\nlocal artifactMultiplier = 0\nlocal telvanniMultiplier = 0\nlocal cultAbilityTime = 0\nlocal cultAbilityMult = 0\nlocal cultAbilityInSeconds = 0\nlocal positiveBonusesWithAbility = 0\nlocal regenAmountAbil = 0\nlocal regenTimeAbil = 0\n\nlocal isInRestMode = false\n\nlocal function amIResting()\n    return isInRestMode\nend\n\nlocal function potionsCheck()\n    local restoreMagickaEff = types.Actor.activeEffects(self):getEffect(core.magic.EFFECT_TYPE.RestoreMagicka)\n    local fortifyMagickaEff = types.Actor.activeEffects(self):getEffect(core.magic.EFFECT_TYPE.FortifyMagicka)\n\n    totalPotionMagicka = 0\n    if restoreMagickaEff then\n        local potionEffects = {}\n\n        -- Iterate through active spells\n        for spellId, spellInfo in pairs(types.Actor.activeSpells(self)) do\n            --print('Active Spell '..tostring(spellId)..':')\n            \n            -- Check if the spell has effects\n            if spellInfo.effects then\n                -- Iterate through effects and extract relevant information\n                for _, effect in pairs(spellInfo.effects) do\n                    if effect.id == \"restoremagicka\" then\n                        --print('  Yes, there is an effect with ID \"restoremagicka\"')\n                        \n                        -- Check if the effect has magnitudeThisFrame and durationLeft\n                        if effect.magnitudeThisFrame and effect.durationLeft then\n                            -- Create a table with relevant information\n                            local potionEffect = {\n                                magnitude = effect.magnitudeThisFrame,\n                                durationLeft = effect.durationLeft\n                            }\n\n                            -- Add the potion effect to the table\n                            table.insert(potionEffects, potionEffect)\n                        end\n                    end\n                end\n            end\n        end\n\n        \n        for _, effect in pairs(potionEffects) do\n            if effect.durationLeft > 120 then\n            totalPotionMagicka = totalPotionMagicka + (effect.magnitude * 120)\n            --print('А магии за зелья и свитки мы за час восстановим вот столько: ' ..totalPotionMagicka)\n            else\n                --print('Осталось секунд: ' ..effect.durationLeft)\n                if effect.durationLeft > 0 then\n                    totalPotionMagicka = totalPotionMagicka + (effect.magnitude * effect.durationLeft)\n                    --print('А магии за зелья и свитки мы за час восстановим вот столько: ' ..totalPotionMagicka)\n                end\n            end\n        end\n        \n\n    end\n\n    return totalPotionMagicka\nend\n\nlocal function magnitudeCheck()\n    local fortifyMagickaEff = types.Actor.activeEffects(self):getEffect(core.magic.EFFECT_TYPE.FortifyMagicka)\n    if fortifyMagickaEff then\n        fortifyMagnitude = fortifyMagickaEff.magnitude\n    else\n        fortifyMagnitude = 0\n    end\n    return fortifyMagnitude\nend\n\nlocal function restRegenReset()\n    totalPotionMagicka = potionsCheck()\n    atronachMultiplier = 1\n    magickaLastFrame = magickaCurrentFrame\n    timeLastFrame = timeCurrentFrame\nend\n\nlocal function checkForVanillaTolerance()\n    percentageTolerance = 1\n\n    -- Calculate the expected percentage change based on intelligence\n    expectedPercentageChange = 0.15 * types.Actor.stats.attributes.intelligence(self).modified\n\n    -- Calculate the actual percentage change\n    actualPercentageChange = magickaDifference - totalPotionMagicka\n    percentageDifference = math.abs((actualPercentageChange - expectedPercentageChange) / expectedPercentageChange) * 100\n    --print('Различие в процентах: ' .. percentageDifference)\n    -- Check if the actual percentage change is within the acceptable range\n    if percentageDifference < percentageTolerance then\n        -- Your logic for handling the acceptable change\n        --print('Resting, are we?')\n        --print('Vanilla regeneration is aborted: ' .. magickaCurrentFrame .. ' - ' .. expectedPercentageChange .. ' = ' .. magickaCurrentFrame - expectedPercentageChange .. ' Preparing for IMPERIAL regeneration')\n        magickaCurrentFrame = magickaCurrentFrame - expectedPercentageChange\n        types.Actor.stats.dynamic.magicka(self).current = magickaCurrentFrame\n        isResting = true\n        --print('Установилось? ' .. tostring(isResting))\n\n        \n    else\n        -- Your logic for handling the unacceptable change\n        --print('No rest for the wicked.')\n        isResting = false\n    end\nend\n\nlocal function getAtronachMult()\n    if types.Actor.spells(self).wombburn then\n        atronachMultiplier = settings.additions:get('NMRAtronachMultiplier')\n    end\nend\n\nlocal function calculateRegenAmount()\n\nend\n\nlocal function regenerateMagicka(current, max, amount)\n    if current <= max then\n        local newValue = math.min(current + amount, max)\n        types.Actor.stats.dynamic.magicka(self).current = newValue\n        local regenType = isResting and \"до максимума\" or \"\"\n        --print(string.format('За час отдыха мы восстановили вот столько, %s: %d +%d = %d', regenType, current, amount, newValue))\n    end\nend\n\nlocal function onFrame(dt)\n    if settings.additions:get('NMRrestHandler') then\n    --print(I.UI.getMode())\n        if I.UI.getMode() == 'Rest' then\n\n\n\n            --If we have Atronach sign or modification is disabled, don't do nothing\n            if settings.main:get('NMRisActive') == false or types.Actor.spells(self).wombburn and settings.additions:get('NMRAtronachSign') then\n                --print(\"Modification is disabled or Atronach sign prevents regeneration\")\n                return\n            end\n\n            --Initialiae some variables for the first frame of UI Rest mode\n\n            if not initialized then\n                -- Assign initial values when entering 'Rest' mode\n                --print('Инициализировано')\n                magickaLastFrame = types.Actor.stats.dynamic.magicka(self).current\n                --print('Первая магия прошлого фрейма: ' .. magickaLastFrame)\n                timeLastFrame = core.getGameTime()\n                totalPotionMagicka = potionsCheck()\n                initialized = true\n                return\n            end\n\n            timeCurrentFrame = core.getGameTime()\n            --print('А потом проверяем, есть ли магия прошлого фрейма: ' .. magickaLastFrame)\n\n            --Check for a certain effect on the player\n            \n            magickaCurrentFrame = types.Actor.stats.dynamic.magicka(self).current\n            if timeLastFrame < timeCurrentFrame then\n                \n                timeDifference = timeCurrentFrame - timeLastFrame\n                --print('Time difference since the last check: ' .. timeDifference)\n                if timeDifference > 1 then\n                    isInRestMode = true\n                    local maxMagicka = types.Actor.stats.dynamic.magicka(self).base\n                    local magickaMagnitude = magnitudeCheck()\n                    --print('Total potion values ' .. totalPotionMagicka)\n                    \n                    magickaCurrentFrame = types.Actor.stats.dynamic.magicka(self).current\n\n                    local isAtMaxMagicka = magickaLastFrame >= maxMagicka + magickaMagnitude\n                    local willBeRestoredByPotions = magickaLastFrame + totalPotionMagicka >= maxMagicka + magickaMagnitude\n                    if isAtMaxMagicka or willBeRestoredByPotions then\n                        restRegenReset()\n                        local reason = isAtMaxMagicka and \"we already are at our maximum magicka\" or \"potions will restore our total magicka\"\n                        --print('No need for regeneration - ' .. reason)\n                        return\n                    end\n                    --print('Well, thats what our LAST FRAME magicka looks like: ' ..magickaLastFrame.. ' And the CURRENT VALUE: ' ..magickaCurrentFrame )\n                    \n                    --magickaCurrentFrame = magickaLastFrame\n                    \n                    magickaDifference = magickaCurrentFrame - magickaLastFrame\n                    local withoutPotions = magickaDifference - totalPotionMagicka\n                    --print('А без зелий мы восстановили вот столько: ' .. withoutPotions)\n                    --print('Вот на столько магия изменилась: ' .. magickaDifference)\n                    -- Define a percentage tolerance (e.g., 1%)\n                    \n                    --Check if we are waiting or resting based on vanilla regeneration formula\n                    checkForVanillaTolerance()\n\n                    \n                    \n                    --Checking if there's an Atronach multiplier\n                    getAtronachMult()\n                    \n                    --Checking if there's an active Fortify Magicka effect\n                    fortifyMagnitude = magnitudeCheck()\n                    \n                    if settings.additions:get('NMRIntRegen') then\n                        regenStat = types.Actor.stats.attributes.intelligence(self).modified \n                    else\n                        regenStat = types.Actor.stats.attributes.willpower(self).modified\n                    end\n\n                    local currentMagicka = types.Actor.stats.dynamic.magicka(self).current\n                    --print('Вот столько у нас сейчас магии: ' .. currentMagicka)\n                    local maxRegenerableMagicka = I.IMRRegenUtil.calculateMaxRegenAmount(maxMagicka, fortifyMagnitude)\n                    if not isResting and currentMagicka >= maxRegenerableMagicka then\n                        restRegenReset()\n                        --print('No need for regeneration - we are waiting and our magicka is equal to max possible percent')\n                        return\n                    end\n                    --print('А вот до такого значения мы можем восстановить: ' .. maxRegenerableMagicka)\n                    \n                    if settings.additions:get('NMRArtMultiplier') then\n                        artifactMultiplier = I.IMRART.getArtifactMultiplier()\n                    end\n                    if settings.guilds:get('NMRGuildsTelvanni') then\n                        telvanniMultiplier = I.IMRGUILDS.telvanniGuildBonus()\n                    end\n                    if settings.guilds:get('NMRGuildsImperialCult') then\n                        cultAbilityTime = I.IMR_ABIL_RESIL.resilienceTimeLeft()\n                        cultAbilityMult = I.IMR_ABIL_RESIL.cultAbilityMultiplier()\n                    end\n                    if cultAbilityTime > 0 then\n                        --print('Ух ты, абилка работает!')\n                        cultAbilityInSeconds = cultAbilityTime / core.getGameTimeScale()\n                        positiveBonusesWithAbility = 1 + telvanniMultiplier + artifactMultiplier + cultAbilityMult\n                        --print('Вместе с бонусами получаем такой множитель: ' ..positiveBonusesWithAbility)\n                        regenAmountAbil, regenTimeAbil = I.IMRRegenUtil.calculateRegenAmount(maxMagicka, regenStat, cultAbilityInSeconds, oneSecond)\n                        regenAmountAbil = regenAmountAbil * positiveBonusesWithAbility\n                        --print('С абилкой за ' ..cultAbilityInSeconds.. ' секунд мы восстановим вот столько: ' ..regenAmountAbil)\n                        regenAmountAbil = regenAmountAbil * atronachMultiplier\n                        if isResting then\n                            regenerateMagicka(currentMagicka, maxMagicka + fortifyMagnitude, regenAmountAbil)\n                        else\n                            regenerateMagicka(currentMagicka, maxRegenerableMagicka, regenAmountAbil)\n                        end\n                    end\n                    \n                    if cultAbilityTime > 0 then\n                        gameToRealTime = (timeDifference - cultAbilityTime) / core.getGameTimeScale()\n                        cultAbilityTime = 0\n                    else\n                        gameToRealTime = timeDifference / core.getGameTimeScale()\n                    end\n                    local regenAmount, regenTime = I.IMRRegenUtil.calculateRegenAmount(maxMagicka, regenStat, gameToRealTime, oneSecond)\n                    --print('А восстанавливать мы в час будем вот столько: ' .. regenAmount)\n                    local positiveBonuses = 1 + telvanniMultiplier + artifactMultiplier\n                    regenAmount = regenAmount * positiveBonuses\n                    --print('После учёта позитивных бонусов - вот столько: ' .. regenAmount)\n                    regenAmount = regenAmount * atronachMultiplier\n                    --print('Если у нас есть знак Атронаха, восстановим вот столько, иначе умножим на 1: ' .. regenAmount)\n                    --print('Всё ущё установлено? ' .. tostring(isResting))\n\n                    --Calculating the regen amount based on waiting or resting check\n                    if isResting then\n                        regenerateMagicka(currentMagicka, maxMagicka + fortifyMagnitude, regenAmount)\n                    else\n                        regenerateMagicka(currentMagicka, maxRegenerableMagicka, regenAmount)\n                    end\n\n                    totalPotionMagicka = potionsCheck()\n                    atronachMultiplier = 1\n                    magickaLastFrame = types.Actor.stats.dynamic.magicka(self).current\n                end\n            end\n\n            timeLastFrame = timeCurrentFrame\n            \n            \n        else\n            initialized = false\n            isInRestMode = false\n        end\n    end\n    \nend\n\n\n\nreturn {\n    engineHandlers = {\n        dt = dt,\n        onFrame = onFrame,\n    },\n    interfaceName = \"IMR_WAIT\",\n    interface = {\n        amIResting = amIResting, \n    },\n}"
  }
}