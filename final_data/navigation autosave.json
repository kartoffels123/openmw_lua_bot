{
  "folder_name": "navigation autosave",
  "lua_files": {
    "OpenMW Navigation Autosave-53979-2-0-1705131534\\scripts\\xaade\\autosave\\menu.lua": "local ui = require('openmw.ui')\nlocal menu = require(\"openmw.menu\")\nrequire('scripts.xaade.autosave.settings')\n\nlocal function try(f, catch_f)\n\tlocal status, exception = pcall(f)\n\tif not status then\n\t\tcatch_f(exception)\n\tend\nend\n\nlocal function respondToSaveRequested(data)\n\tprint('Landed at save requested event')\n\tlocal saveDir = menu.getCurrentSaveDir()\n\tlocal saveName = string.format('NavigationAutosave%s', data.saveSlot)\n\tprint('Save Requested')\n\t\n\ttry(function()\n\t\tmenu.deleteGame(saveDir, string.format('%s.omwsave', saveName))\n\tend, function(e)\n\t\tprint(string.format('delete failed. assume file %s.omwsave does not exist', saveName))\n\tend)\n\tmenu.saveGame(saveName,saveName)\nend\n\n\nreturn {\n\teventHandlers = {\n\t    omw_cflare_autosave_save = respondToSaveRequested\n\t}\n}",
    "OpenMW Navigation Autosave-53979-2-0-1705131534\\scripts\\xaade\\autosave\\player.lua": "local ui = require('openmw.ui')\nlocal util = require('openmw.util')\nlocal self = require(\"openmw.self\")\nlocal core = require('openmw.core')\nlocal settingsBase = require('scripts.xaade.autosave.settingsBase')\n\nlocal scriptVersion = 2\nlocal lastCellName = 'lastCellName'\nlocal countChanges = 0\nlocal lastCellExterior = false\nlocal lastSaveSlot = 0\nlocal validCell = false\n\n\nlocal function isSneaking()\n\n\treturn self.controls.sneak\nend\n\nlocal function updateLastValues(newCellName, newCellExterior)\n\tlastCellName = newCellName\n\tlastCellExterior = newCellExterior\n\tvalidCell = true\nend\n\nlocal function requestSave()\n\tprint('sending event')\n\tlastSaveSlot = lastSaveSlot + 1\n\tif lastSaveSlot > settingsBase.getNavigationAutosaveSetting('numberOfSaves') then\n\t\tlastSaveSlot = 1\n\tend\n\tself.type.sendMenuEvent(self, 'omw_cflare_autosave_save', { saveSlot = lastSaveSlot })\nend\n\nlocal function onUpdate(dt)\n\t\n    local c = self.cell\n\tlocal newCellName = c.name\n\tlocal newCellExterior = c.isExterior\n\tlocal cellExteriorInteriorMovement = newCellExterior ~= lastCellExterior or (newCellExterior == false and settingsBase.getNavigationAutosaveSetting('interiorSave') == true)\n\t\n\t\n\tif isSneaking() == true then\n\t\tprint('is sneaking')\n\tend\n\tif validCell and newCellName ~= lastCellName and cellExteriorInteriorMovement then\n\t\trequestSave()\n\tend\n\tupdateLastValues(newCellName, newCellExterior)\nend\n\nlocal function onSave()\n    return {\n\t\tversion = scriptVersion,\n\t\tcurrentCellName = lastCellName,\n\t\tcurrentCellExterior = lastCellExterior,\n\t\tlastSaveSlot = lastSaveSlot,\n\t}\nend\n\nlocal function onLoad(data)\n    if not data or not data.version or data.version < 1 then\n        print('Was saved with an old version of the script, initializing to default')\n        lastCellName = ''\n\t\tlastCellExterior = false\n\t\tvalidCell = false\n        return\n    end\n\tif data.version > scriptVersion then\n        error('Required update to a new version of the script')\n\tend\n\tif data.version == 1 then\n        print(string.format('Updating from version %d to %d', 1, scriptVersion))\n\t\tlastCellName = data.currentCellName\n\t\tlastCellExterior = data.currentCellExterior\n\t\tlastSaveSlot = 0\n\t\tvalidCell = true\n\t\tprint(string.format('Loaded with last cell name %s and exterior is %s', lastCellName, lastCellExterior))\n\telseif data.version == scriptVersion then\n\t\tlastCellName = data.currentCellName\n\t\tlastCellExterior = data.currentCellExterior\n\t\tlastSaveSlot = data.lastSaveSlot\n\t\tvalidCell = true\n\t\tprint(string.format('Loaded with last cell name %s and exterior is %s', lastCellName, lastCellExterior))\n\telse \n        print(string.format('Updating from version %d to %d', data.version, scriptVersion))\n        lastCellName = ''\n\t\tlastCellExterior = false\n\t\tvalidCell = false\n\tend\nend\n\nreturn {\n    engineHandlers = {\n\t\tonUpdate = onUpdate,\n\t\tonSave = onSave,\n\t\tonLoad = onLoad,\n    },\n}",
    "OpenMW Navigation Autosave-53979-2-0-1705131534\\scripts\\xaade\\autosave\\settings.lua": "local storage = require('openmw.storage')\nlocal async = require('openmw.async')\nlocal I = require('openmw.interfaces')\nlocal settingsBase = require('scripts.xaade.autosave.settingsBase')\n\nlocal omwNavigationAutosave = 'OMWNavigationAutosave'\n\nI.Settings.registerPage({\n    key = omwNavigationAutosave,\n    l10n = omwNavigationAutosave,\n    name = 'NavigationAutosave',\n    description = 'Creates autosaves when traveling between internal and external cells.',\n})\n\nlocal function floatSetting(prefix, key, name, description, default)\n    return {\n        key = key,\n        renderer = 'number',\n        name = name,\n        description = description,\n        default = default,\n    }\nend\n\nlocal function boolSetting(prefix, key, name, description, default)\n    return {\n        key = key,\n        renderer = 'checkbox',\n        name = name,\n        description = description,\n        default = default,\n    }\nend\n\n\nI.Settings.registerGroup({\n    key = settingsBase.navigationAutosaveGroup,\n    page = omwNavigationAutosave,\n    l10n = omwNavigationAutosave,\n    name = 'SaveFileCount',\n\t--description = 'The max number of saves created when autosaving',\n    permanentStorage = true,\n    order = 0,\n    settings = {\n        floatSetting('','numberOfSaves', 'Number of Saves', 'The number of saves is limited to this number. They are named NavigationAutosave and suffixed with the counter.', 3),\n        boolSetting('', 'interiorSave', 'Interior to Interior Save', 'Save when moving from one interior to another interior cell', true),\n\t\tboolSetting('', 'sneakNoSave', 'Prevent saving while sneaking', 'Prevent saving while sneaking', false),\n    },\n})\n",
    "OpenMW Navigation Autosave-53979-2-0-1705131534\\scripts\\xaade\\autosave\\settingsBase.lua": "local storage = require('openmw.storage')\n\nlocal navigationAutosaveGroup = 'SettingsOMWNavigationAutosave'\n\nlocal settingsBase = {\n    navigationAutosaveGroup = navigationAutosaveGroup,\n\tgetNavigationAutosaveSetting = function(settingsName)\n\t\treturn storage.playerSection(navigationAutosaveGroup):get(settingsName)\n\tend\n}\n\nreturn settingsBase"
  }
}