{
  "title": "Package openmw.vfs\uf0c1",
  "sections": [
    {
      "header": "Usage:",
      "content": [
        {
          "code": "local vfs = require('openmw.vfs')"
        },
        {
          "code": "local vfs = require('openmw.vfs')"
        }
      ]
    },
    {
      "header": "Typevfs",
      "content": [
        {
          "code": "vfs"
        },
        {
          "paragraph": "Check if file exists in VFS"
        },
        {
          "paragraph": "Get an iterator function to fetch the next line from file with given path."
        },
        {
          "paragraph": "Open a file"
        },
        {
          "paragraph": "Get iterator function to fetch file names with given path prefix from VFS"
        },
        {
          "paragraph": "Detect a file handle type"
        }
      ]
    },
    {
      "header": "TypeFileHandle",
      "content": [
        {
          "code": "FileHandle"
        },
        {
          "paragraph": "Close a file handle"
        },
        {
          "paragraph": "VFS path to related file"
        },
        {
          "paragraph": "Get an iterator function to fetch the next line from given file."
        },
        {
          "paragraph": "Read data from file to strings."
        },
        {
          "paragraph": "Set new position in file."
        }
      ]
    },
    {
      "header": "Typevfs",
      "content": [
        {
          "code": "vfs"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Check if file exists in VFS"
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#string fileName: \nPath to file in VFS"
        },
        {
          "code": "#string fileName"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#boolean:(true - exists, false - does not exist)"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "local exists = vfs.fileExists(\"Test\\\\test.txt\");"
        },
        {
          "code": "local exists = vfs.fileExists(\"Test\\\\test.txt\");"
        },
        {
          "paragraph": "Get an iterator function to fetch the next line from file with given path."
        },
        {
          "paragraph": "Throws an exception if file is closed or file with given path does not exist.\nCloses file automatically when it fails to read any more bytes."
        },
        {
          "paragraph": "Hint: since garbage collection works once per frame,\nyou will get the whole file in RAM if you read it in one frame.\nSo if you need to read a really large file, it is better to split reading\nbetween different frames (e.g. by keeping a current position in file\nand using a \"seek\" to read from saved position)."
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#string fileName: \nPath to file in VFS"
        },
        {
          "code": "#string fileName"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#function:Iterator function to get next line"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "for line in vfs.lines(\"Test\\\\test.txt\") do\n    print(line);\nend"
        },
        {
          "code": "for line in vfs.lines(\"Test\\\\test.txt\") do\n    print(line);\nend"
        },
        {
          "paragraph": "Open a file"
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#string fileName: \nPath to file in VFS"
        },
        {
          "code": "#string fileName"
        }
      ]
    },
    {
      "header": "Return values",
      "content": [
        {
          "paragraph": "#FileHandle:Opened file handle if a call succeeds without errors."
        },
        {
          "paragraph": "#nil, #string:nil plus the error message in case of any error."
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "f, msg = vfs.open(\"Test\\\\test.txt\");\n-- print file name or error message\nif (f == nil)\n    print(msg);\nelse\n    print(f.fileName);\nend"
        },
        {
          "code": "f, msg = vfs.open(\"Test\\\\test.txt\");\n-- print file name or error message\nif (f == nil)\n    print(msg);\nelse\n    print(f.fileName);\nend"
        },
        {
          "paragraph": "Get iterator function to fetch file names with given path prefix from VFS"
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#string path: \nPath prefix"
        },
        {
          "code": "#string path"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#function:Function to get next file name"
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "-- get all files with given prefix from VFS index\nfor fileName in vfs.pathsWithPrefix(\"Music\\\\Explore\") do\n    print(fileName);\nend"
        },
        {
          "code": "-- get all files with given prefix from VFS index\nfor fileName in vfs.pathsWithPrefix(\"Music\\\\Explore\") do\n    print(fileName);\nend"
        },
        {
          "code": "-- get some first files\nlocal getNextFile = vfs.pathsWithPrefix(\"Music\\\\Explore\");\nlocal firstFile = getNextFile();\nlocal secondFile = getNextFile();"
        },
        {
          "code": "-- get some first files\nlocal getNextFile = vfs.pathsWithPrefix(\"Music\\\\Explore\");\nlocal firstFile = getNextFile();\nlocal secondFile = getNextFile();"
        },
        {
          "paragraph": "Detect a file handle type"
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#any handle: \nObject to check"
        },
        {
          "code": "#any handle"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#string:File handle type. Can be:"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "f = vfs.open(\"Test\\\\test.txt\");\nprint(vfs.type(f));"
        },
        {
          "code": "f = vfs.open(\"Test\\\\test.txt\");\nprint(vfs.type(f));"
        }
      ]
    },
    {
      "header": "TypeFileHandle",
      "content": [
        {
          "code": "FileHandle"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Close a file handle"
        }
      ]
    },
    {
      "header": "Return values",
      "content": [
        {
          "paragraph": "#boolean:true if a call succeeds without errors."
        },
        {
          "paragraph": "#nil, #string:nil plus the error message in case of any error."
        },
        {
          "paragraph": "VFS path to related file"
        },
        {
          "paragraph": "Get an iterator function to fetch the next line from given file."
        },
        {
          "paragraph": "Throws an exception if file is closed."
        },
        {
          "paragraph": "Hint: since garbage collection works once per frame,\nyou will get the whole file in RAM if you read it in one frame.\nSo if you need to read a really large file, it is better to split reading\nbetween different frames (e.g. by keeping a current position in file\nand using a \"seek\" to read from saved position)."
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#function:Iterator function to get next line"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "f = vfs.open(\"Test\\\\test.txt\");\nfor line in f:lines() do\n    print(line);\nend"
        },
        {
          "code": "f = vfs.open(\"Test\\\\test.txt\");\nfor line in f:lines() do\n    print(line);\nend"
        },
        {
          "paragraph": "Read data from file to strings."
        },
        {
          "paragraph": "Throws an exception if file is closed, if there is too many arguments or if an invalid format encountered."
        },
        {
          "paragraph": "Hint: since garbage collection works once per frame,\nyou will get the whole file in RAM if you read it in one frame.\nSo if you need to read a really large file, it is better to split reading\nbetween different frames (e.g. by keeping a current position in file\nand using a \"seek\" to read from saved position)."
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "...: \nRead formats (up to 20 arguments, default value is one \"*l\"). Can be:"
        },
        {
          "code": "..."
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#string:One #string for every format if a call succeeds without errors. One #string for every successfully handled format, nil for first failed format."
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "-- read three numbers from file\nf = vfs.open(\"Test\\\\test.txt\");\nlocal n1, n2, n3 = f:read(\"*number\", \"*number\", \"*number\");"
        },
        {
          "code": "-- read three numbers from file\nf = vfs.open(\"Test\\\\test.txt\");\nlocal n1, n2, n3 = f:read(\"*number\", \"*number\", \"*number\");"
        },
        {
          "code": "-- read 10 bytes from file\nf = vfs.open(\"Test\\\\test.txt\");\nlocal n4 = f:read(10);"
        },
        {
          "code": "-- read 10 bytes from file\nf = vfs.open(\"Test\\\\test.txt\");\nlocal n4 = f:read(10);"
        },
        {
          "code": "-- read until end of file\nf = vfs.open(\"Test\\\\test.txt\");\nlocal n5 = f:read(\"*all\");"
        },
        {
          "code": "-- read until end of file\nf = vfs.open(\"Test\\\\test.txt\");\nlocal n5 = f:read(\"*all\");"
        },
        {
          "code": "-- read a line from file\nf = vfs.open(\"Test\\\\test.txt\");\nlocal n6 = f:read();"
        },
        {
          "code": "-- read a line from file\nf = vfs.open(\"Test\\\\test.txt\");\nlocal n6 = f:read();"
        },
        {
          "code": "-- try to read three numbers from file with \"1\" content\nf = vfs.open(\"one.txt\");\nprint(f:read(\"*number\", \"*number\", \"*number\"));\n-- prints(1, nil)"
        },
        {
          "code": "-- try to read three numbers from file with \"1\" content\nf = vfs.open(\"one.txt\");\nprint(f:read(\"*number\", \"*number\", \"*number\"));\n-- prints(1, nil)"
        },
        {
          "paragraph": "Set new position in file."
        },
        {
          "paragraph": "Throws an exception if file is closed or seek base is incorrect."
        }
      ]
    },
    {
      "header": "Parameters",
      "content": [
        {
          "paragraph": "#string whence: \nSeek base (optional, \"cur\" by default). Can be:"
        },
        {
          "code": "#string whence"
        },
        {
          "paragraph": "#number offset: \nOffset from given base (optional, 0 by default)"
        },
        {
          "code": "#number offset"
        }
      ]
    },
    {
      "header": "Return values",
      "content": [
        {
          "paragraph": "#number:new position in file if a call succeeds without errors."
        },
        {
          "paragraph": "#nil, #string:nil plus the error message in case of any error."
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "-- set pointer to beginning of file\nf = vfs.open(\"Test\\\\test.txt\");\nf:seek(\"set\");"
        },
        {
          "code": "-- set pointer to beginning of file\nf = vfs.open(\"Test\\\\test.txt\");\nf:seek(\"set\");"
        },
        {
          "code": "-- print current position in file\nf = vfs.open(\"Test\\\\test.txt\");\nprint(f:seek());"
        },
        {
          "code": "-- print current position in file\nf = vfs.open(\"Test\\\\test.txt\");\nprint(f:seek());"
        },
        {
          "code": "-- print file size\nf = vfs.open(\"Test\\\\test.txt\");\nprint(f:seek(\"end\"));"
        },
        {
          "code": "-- print file size\nf = vfs.open(\"Test\\\\test.txt\");\nprint(f:seek(\"end\"));"
        },
        {
          "paragraph": "\u00a9 Copyright 2024, OpenMW Team.Revision7d84b85d."
        },
        {
          "code": "7d84b85d"
        }
      ]
    }
  ]
}