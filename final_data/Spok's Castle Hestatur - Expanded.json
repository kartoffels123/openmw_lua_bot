{
  "folder_name": "Spok's Castle Hestatur - Expanded",
  "lua_files": {
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\cellList.lua": "return {\n    \"hestatur, service area\",\n    \"hestatur, feast hall\",\n    \"hestatur, chapel\",\n    \"hestatur, great hall\",\n    \"hestatur, guard tower\",\n    \"hestatur, the tower of glory\",\n    \"hestatur, guard tower attic\",\n    \"hestatur, library\",\n    \"hestatur, servants' rooms\",\n    \"hestatur, lord's chambers\",\n    \"hestatur, entry hall\",\n    \"hestatur, gallery\",\n    \"hestatur, guest rooms\",\n    \"hestatur, attic\",\n    \"hestatur, laboratory\",\n    \"hestatur, south wall\",\n    \"hestatur, small tower\",\n    \"hestatur, guard tower, upper floors\",\n    \"hestatur, bath\",\n    \"hestatur, basement hall\",\n    \"hestatur, east basement hallway\",\n    \"hestatur, crypt\",\n    \"hestatur, prison\",\n    \"hestatur, main tower top\",\n    \"Esm3ExteriorCell:6:26\",\n    \"Esm3ExteriorCell:5:26\",\n    \"Esm3ExteriorCell:6:25\",\n}\n",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\cleanup.lua": "local list = require(\"scripts.Hestatur.cellList\")\nlocal world = require(\"openmw.world\")\nlocal I = require(\"openmw.interfaces\")\nlocal types = require(\"openmw.types\")\nlocal core = require(\"openmw.core\")\nlocal extList = {\n\n    \"Esm3ExteriorCell:6:26\",\n    \"Esm3ExteriorCell:5:26\",\n    \"Esm3ExteriorCell:6:25\",\n}\nlocal function checkSuffixAndPrefix(suffix, mainString)\n    -- Check if the suffix ends with '*'\n    if string.sub(suffix, -1) == '*' then\n        -- Remove the '*' from the suffix for comparison\n        suffix = string.sub(suffix, 1, -2)\n    end\n\n    -- Check if the mainString starts with the modified suffix\n    if suffix == mainString then\n        return true\n    end\n    if string.sub(mainString, 1, string.len(suffix)) == suffix then\n        return true\n    else\n        return false\n    end\nend\nlocal cleanedCells = {}\nlocal initCells = {}\nlocal cleanupState = false --no need for clean up yet.\nlocal daedraList = {\n    \"winged twilight\",\n    \"scamp\",\n    \"hunger\",\n    \"golden saint\",\n    \"dremora\",\n    \"zhac_hestatur_dremora\",\n    \"zhac_hestatur_bonewalke\",\n    \"zhac_hestatur_dremgen_*\",\n   -- \"ab_dae_darkseducer\",\n    \"daedroth\"\n}\nlocal objList = {\n    \"zhac_hest_pre_*\",\n    \"zhac_forcefield_*\",\n    \"ex_dae_*\",\n    \"light_dae_*\",\n    \"zhac_hestatur_redwall\",\n    \"zhac_hestatur_daedramarker\",\n    \"ab_in_daecolumn02\",\n    \"zhac_wall_invis\",\n    \"ab_furn_6thrug*\",\n    \"ab_furn_dae*\",\n    \"sound_daedric_chant00\",\n    \"dead random male\",\n    \"dead random female\",\n}\nlocal function isCastleFree()\n    return cleanupState\nend\nlocal function listContains(list, value)\n    for index, objListItem in ipairs(list) do\n        if objListItem == value then\n            return true\n        end\n    end\n    return false\nend\nlocal function getObjInCell(cell, id)\n    for index, value in ipairs(cell:getAll()) do\n        if value.recordId == id then\n            return value\n        end\n    end\nend\nlocal magedata = {\n    {\"iniel\",\t\"sadrith mora, wolverine hall: mage's guild\"},\n    {\"erranil\",\t\"Ald-ruhn, Guild of Mages\"},\n    {\"masalinie merian\",\t\"Balmora, Guild of Mages\"},\n    {\"emelia duronia\",\t\"Caldera, Guild of Mages\"},\n    {\"flacassia fauseius\",\t\"Vivec, Guild of Mages\"}\n}\nlocal function magesSwap()\n    for index, value in ipairs(magedata) do\n        local npc = value[1]\n        local cellId = value[2]\n        local cell = world.getCellById(cellId)\n        local npcObj = getObjInCell(cell, npc)\n        if npcObj then\n            local newActor = world.createObject(npc .. \"_hest\")\n            newActor:teleport(cell, npcObj.position, npcObj.rotation)\n            npcObj:remove()\n            print('swapped')\n        end\n    end\nend\nlocal function cleanupCell(cellId)\n    local cell = world.getCellById(cellId)\n\n    for index, obj in ipairs(cell:getAll()) do\n\n            for i, objListItem in ipairs(objList) do\n                if obj.recordId == \"zhac_hestat_cube_activat\" then\n                elseif checkSuffixAndPrefix(objListItem, obj.recordId:lower()) then\n                    obj:remove()\n                else\n\n                end\n            end\n            for i, objListItem in ipairs(daedraList) do\n                if checkSuffixAndPrefix(objListItem, obj.recordId:lower()) then\n                    obj:remove()\n\n                end\n            end\n    end\n    cleanedCells[cellId] = true\nend\nlocal function onCellChange_Hest(cellId)\n    if listContains(list, cellId) then\n        if cleanupState and not cleanedCells[cellId] then\n            if listContains(extList, cellId) then\n                for index, value in ipairs(extList) do\n                    cleanupCell(value)\n                end\n            else\n                cleanupCell(cellId)\n                initCells[cellId] = true\n                core.sendGlobalEvent(\"reEnableAllLayers\", cellId)\n                core.sendGlobalEvent(\"turnCellLightsOn_Hest\", cellId)\n            end\n        elseif cleanupState and cleanedCells[cellId] and not I.Hestatur_Light.getCellLightState(cellId) == true then\n            initCells[cellId] = true\n            cleanupCell(cellId)\n            core.sendGlobalEvent(\"reEnableAllLayers\", cellId)\n            core.sendGlobalEvent(\"turnCellLightsOn_Hest\", cellId)\n        end\n        if not initCells[cellId] and not cleanupState then\n            initCells[cellId] = true\n            core.sendGlobalEvent(\"setLayerInCellToDefault\", cellId)\n            core.sendGlobalEvent(\"turnCellLightsOff_Hest\", cellId)\n        end\n    end\nend\nlocal function runCleanUp(enableLayers)\n    cleanupState = true\n    local player = world.players[1]\n    if player then\n        cleanupCell(player.cell.id)\n    end\n    for index, value in ipairs(list) do\n        -- core.sendGlobalEvent(\"turnCellLightsOn_Hest\",value)\n    end\n    if enableLayers then\n        for index, value in ipairs(list) do\n            core.sendGlobalEvent(\"reEnableAllLayers\", value)\n        end\n    end\nend\n\nreturn {\n    interfaceName = \"cleanup\",\n    interface = {\n        isCastleFree = isCastleFree,\n        cleanupCell = cleanupCell,\n    },\n    eventHandlers = {\n        runCleanUp = runCleanUp,\n        magesSwap = magesSwap,\n        onCellChange_Hest = onCellChange_Hest,\n    },\n    engineHandlers = {\n        onSave = function()\n            return { cleanedCells = cleanedCells, initCells = initCells, cleanupState = cleanupState, }\n        end,\n        onLoad = function(data)\n            if not data then\n                return\n            end\n            cleanupState = data.cleanupState\n            cleanedCells = data.cleanedCells\n            initCells = data.initCells\n        end\n\n    }\n\n}\n",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\config.lua": "local core = require(\"openmw.core\")\n\nif core.API_REVISION < 62 then\n    error(\"This mod requires OpenMW 0.49.0 or newer.\")\nend",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\daedra_c.lua": "local self = require(\"openmw.self\")\nlocal core = require(\"openmw.core\")\nlocal nearby = require(\"openmw.nearby\")\nlocal types = require(\"openmw.types\")\nlocal function playerHasSoul(soulId)\n    local player = nearby.players[1]\n    for index, value in ipairs(types.Actor.inventory(player):getAll(types.Miscellaneous)) do\n        local objSoul = types.Miscellaneous.getSoul(value)\n        if objSoul and objSoul == soulId then\n            return true\n        end\n    end\n    return false\nend\nlocal function Died()\n    if self.cell.id == \"Esm3ExteriorCell:6:25\" then\n        core.sendGlobalEvent(\"daedraDied\")\n    end\n    if self.recordId:find(\"zhac_hestatur_dremgen\") then\n\n        if not playerHasSoul(self.recordId) then\n            core.vfx.spawn(\"vfx_soul_trap\", self.position)\n            core.sendGlobalEvent(\"resurrectDaedra\", self)\n        else\n        core.sendGlobalEvent(\"generalDeath\"     )\n        end\n    end\nend\n\nreturn {\n    eventHandlers = {\n        Died = Died,\n    }\n}\n",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\daedra_g.lua": "local daedraMarkerId = \"zhac_hestatur_daedramarker\"\nlocal world = require(\"openmw.world\")\nlocal types = require(\"openmw.types\")\nlocal core = require(\"openmw.core\")\nlocal I = require(\"openmw.interfaces\")\n\nlocal config = require(\"scripts.Hestatur.config\")\nlocal daedraMarkers = {}\nlocal daedraRevision = 1\nlocal daedraList = {\n    \"winged twilight\",\n    \"scamp\",\n    \"hunger\",\n    \"golden saint\",\n    \"dremora\",\n   -- \"ab_dae_darkseducer\",\n    \"daedroth\"\n}\nlocal daedraId\nlocal barrierBroken = false\nlocal gateOpened = false\nlocal function getGuardId()\n    local randomIndex = math.random(#daedraList) -- Generate random index\n    return daedraList[randomIndex]               -- Return the element at the random index\nend\nlocal function setGuardId(id)\n    daedraId = id\n    daedraRevision = daedraRevision + 1\nend --golden saint_summon\nlocal function getGuardItems()\n    local items = {\n        \"torch_infinite_time\",\n        \"imperial cuirass_armor\",\n        \"imperial_greaves\",\n        \"imperial boots\",\n        \"imperial left gauntlet\",\n        \"imperial right gauntlet\",\n        \"imperial left pauldron\",\n        \"imperial right pauldron\",\n        \"imperial belt\",\n        \"imperial shield\",\n        \"imperial skirt_clothing\",\n        \"imperial broadsword\"\n    }\n    return items\nend\nlocal function addGuardItems(daedra)\n\nend\nlocal function getActorInCell(cell, id)\n    for index, value in ipairs(cell:getAll()) do\n        if value.id == id then\n            return value\n        end\n    end\nend\nlocal function onObjectActive(obj)\n    if obj.recordId == \"zhac_marker_delete\" then\n        obj:remove()\n        core.sendGlobalEvent(\"runCleanUp\")\n        types.Player.quests(world.players[1]).zhac_hestatur_conquer:addJournalEntry(60)\n    end\n    if I.cleanup.isCastleFree() then\n        return\n    end\n    if obj.recordId == daedraMarkerId and not daedraMarkers[obj.id] then\n        obj.enabled = false\n        local newGuard = world.createObject(getGuardId())\n        newGuard:teleport(obj.cell, obj.position, obj.rotation)\n        daedraMarkers[obj.id] = {}\n        daedraMarkers[obj.id].id = newGuard.id\n        daedraMarkers[obj.id].revision = daedraRevision\n    elseif obj.recordId == daedraMarkerId and daedraMarkers[obj.id] ~= nil and daedraMarkers[obj.id].revision ~= daedraRevision then\n        --print(daedraMarkers[obj.id].revision)\n        local obj = getActorInCell(obj.cell, daedraMarkers[obj.id].id)\n        if obj then\n            obj:remove()\n        end\n        local newGuard = world.createObject(getGuardId())\n        addGuardItems(newGuard)\n        newGuard:teleport(obj.cell, obj.position, obj.rotation)\n        daedraMarkers[obj.id] = {}\n        daedraMarkers[obj.id].id = newGuard.id\n        daedraMarkers[obj.id].revision = daedraRevision\n    elseif obj.recordId == daedraMarkerId and daedraMarkers[obj.id] ~= nil and daedraMarkers[obj.id].revision == daedraRevision then\n    elseif obj.recordId == daedraMarkerId then\n    end\nend\nlocal function onActorActive(actor)\n    for index, obj in ipairs(actor.cell:getAll(types.Activator)) do\n        if daedraMarkers[obj.id] and  obj.recordId == daedraMarkerId and daedraMarkers[obj.id].id == actor.id then\n            onObjectActive(obj)\n        end\n    end\nend\n\nlocal function onSave()\n    return { daedraMarkers = daedraMarkers, daedraRevision = daedraRevision, gateOpened = gateOpened, barrierBroken =\n    barrierBroken, }\nend\nlocal function onLoad(data)\n    if data then\n        daedraMarkers = data.daedraMarkers\n        gateOpened = data.gateOpened\n        daedraRevision = data.daedraRevision\n        barrierBroken = data.barrierBroken\n    end\nend\nlocal function getOutsideDaedra()\n    local cell1 = world.getCellById(\"Esm3ExteriorCell:6:25\")\n    local cell2 = world.getCellById(\"Esm3ExteriorCell:5:25\")\n    local count = 0\n    local ls = {}\n    for index, value in ipairs(cell1:getAll(types.Creature)) do\n        if value.position.z > 0 and not types.Actor.isDead(value) then\n            count = count + 1\n            table.insert(ls, value)\n        end\n    end\n    for index, value in ipairs(cell2:getAll(types.Creature)) do\n        if value.position.z > 0 and not types.Actor.isDead(value) then\n            count = count + 1\n            table.insert(ls, value)\n        end\n    end\n    return count, ls\nend\nlocal function getInsideDaedra()\n    local cell1 = world.getCellById(\"Esm3ExteriorCell:6:26\")\n    local count = 0\n    local ls = {}\n    for index, value in ipairs(cell1:getAll(types.Creature)) do\n        if value.position.z > 0 and not types.Actor.isDead(value) and value.position.z < 1460 then\n            count = count + 1\n            table.insert(ls, value)\n        end\n    end\n    return count, ls\nend\nlocal function openCastleGate()\n    local player = world.players[1]\n    types.Player.quests(world.players[1]).zhac_hestatur_discover:addJournalEntry(30)\n    world.mwscript.getGlobalVariables(world.players[1]).spok_ht_portpos = 11\n    local count, daedra = getInsideDaedra()\n    for index, actor in ipairs(daedra) do\n        actor:sendEvent('StartAIPackage', { type = 'Combat', target = player })\n    end\n    gateOpened = true\nend\nlocal function daedraDied()\n    if gateOpened then\n        return\n    end\n    local count, ls = getOutsideDaedra()\n    if count == 0 then\n        openCastleGate()\n    else\n        --print(count)\n    end\nend\nlocal function playerHasSoul(soulId)\n    local player = world.players[1]\n    for index, value in ipairs(types.Actor.inventory(player):getAll(types.Miscellaneous)) do\n        local objSoul = types.Miscellaneous.getSoul(value)\n        if objSoul and objSoul == soulId then\n            return true\n        end\n    end\n    return false\nend\nlocal function breakBarrier()\n    local cell = world.getCellById(\"hestatur, great hall\")\n    for index, value in ipairs(cell:getAll(types.Activator)) do\n        if value.recordId:find(\"zhac_forcefield\") then\n            value:remove()\n        end\n        if value.recordId:find(\"zhac_hestatur_redwall\") then\n            value:remove()\n        end\n    end\n    barrierBroken = true\nend\nlocal function generalDeath()\n    local soulCount = 0\n        for i = 1, 7, 1 do\n            if playerHasSoul(\"zhac_hestatur_dremgen_\" .. tostring(i)) then\n                soulCount = soulCount + 1\n            end\n        end\n        if soulCount > 6 then\n            types.Player.quests(world.players[1]).zhac_hestatur_conquer:addJournalEntry(30)\n        end\nend\nlocal function onCellChange_Hest(newId)\n    if not barrierBroken and newId == \"hestatur, great hall\" then\n        local soulCount = 0\n        for i = 1, 7, 1 do\n            if playerHasSoul(\"zhac_hestatur_dremgen_\" .. tostring(i)) then\n                soulCount = soulCount + 1\n            end\n        end\n        if soulCount > 6 then\n            breakBarrier()\n        end\n    end\nend\nlocal function resurrectDaedra(obj)\n    local newDaedra = world.createObject(obj.recordId)\n    newDaedra:teleport(obj.cell, obj.position)\n    obj:remove()\nend\nI.Activation.addHandlerForType(types.Miscellaneous, function (obj, actor)\nif obj.recordId == \"ab_misc_daesigilstone_01\" and obj.contentFile and obj.cell.id == \"hestatur, great hall\" then\n    local canFree = true\n    local cell = world.getCellById(\"hestatur, great hall\")\n    for index, value in ipairs(cell:getAll(types.Creature)) do\n        if not types.Actor.isDead(value) and value.recordId ~= \"zhac_hest_guide\" then\n            canFree = false\n        end\n    end\n    if canFree then\n      --  obj:remove()\n       -- core.sendGlobalEvent(\"runCleanUp\")\n       return true\n    else\n        \n    end\nreturn false\nend\n    \nend)\n\nreturn {\n    interfaceName = \"daedra\",\n    interface = {\n        getOutsideDaedra = getOutsideDaedra,\n    },\n    eventHandlers = {\n        resurrectDaedra = resurrectDaedra,\n        onCellChange_Hest = onCellChange_Hest,\n        breakBarrier = breakBarrier,\n        daedraDied = daedraDied,\n        openCastleGate = openCastleGate,\n        generalDeath = generalDeath,\n    },\n    engineHandlers = {\n        onObjectActive = onObjectActive,\n        onSave = onSave,\n        onLoad = onLoad,\n        onActorActive = onActorActive,\n    }\n}\n",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\daedra_p.lua": "local self = require(\"openmw.self\")\nlocal core = require(\"openmw.core\")\nlocal lastCellId\nlocal function onUpdate()\n    if self.cell.id ~= lastCellId then\n        lastCellId = self.cell.id\n        core.sendGlobalEvent(\"onCellChange_Hest\",lastCellId)\n    end\nend\n\nreturn {\n    engineHandlers = {\n        onUpdate = onUpdate\n    }\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\guards_g.lua": "local guardMarkerId = \"zhac_hestatur_guardmarker\"\nlocal world = require(\"openmw.world\")\nlocal types = require(\"openmw.types\")\nlocal guardMarkers = {}\nlocal guardRevision = 1\nlocal barrierBroken = false\nlocal guardsActive = false\nlocal guardId\nlocal function getGuardId()\n    return guardId or \"zhac_hestatur_guard_01\"\nend\nlocal function setGuardId(id)\n    guardId = id\n    guardRevision = guardRevision + 1\nend --golden saint_summon\nlocal function getGuardItems()\n    local items = {\n        \"torch_infinite_time\",\n        \"imperial cuirass_armor\",\n        \"imperial_greaves\",\n        \"imperial boots\",\n        \"imperial left gauntlet\",\n        \"imperial right gauntlet\",\n        \"imperial left pauldron\",\n        \"imperial right pauldron\",\n        \"imperial belt\",\n        \"imperial shield\",\n        \"imperial skirt_clothing\",\n        \"imperial broadsword\"\n    }\n    return items\nend\nlocal function addGuardItems(guard)\n    local items = getGuardItems()\n    for index, value in ipairs(items) do\n        local item = world.createObject(value)\n        item:moveInto(guard)\n    end\n    guard:sendEvent(\"equipItems\", items)\nend\nlocal function getObjInCell(cell, id)\n    for index, value in ipairs(cell:getAll()) do\n        if value.recordId == id then\n            return value\n        end\n    end\nend\nlocal function getActorInCell(cell, id)\n    for index, value in ipairs(cell:getAll()) do\n        if value.id == id then\n            return value\n        end\n    end\nend\nlocal function onObjectActive(obj)\n    if world.mwscript.getGlobalVariables(world.players[1]).zhac_hest_factionActive == 0 then\n            return\n    end\n    if obj.recordId == guardMarkerId then\n        --print(\"xguard not ready to spawn \" .. guardRevision)\n    end\n    if obj.recordId == guardMarkerId and not guardMarkers[obj.id] then\n        obj.enabled = false\n        local newGuard = world.createObject(getGuardId())\n        addGuardItems(newGuard)\n        newGuard:teleport(obj.cell, obj.position, obj.rotation)\n        guardMarkers[obj.id] = {}\n        guardMarkers[obj.id].id = newGuard.id\n        guardMarkers[obj.id].revision = guardRevision\n    elseif obj.recordId == guardMarkerId and guardMarkers[obj.id] ~= nil and guardMarkers[obj.id].revision ~= guardRevision then\n        --print(guardMarkers[obj.id].revision)\n        local obj = getActorInCell(obj.cell, guardMarkers[obj.id].id)\n        if obj then\n            obj:remove()\n        end\n        local newGuard = world.createObject(getGuardId())\n        addGuardItems(newGuard)\n        newGuard:teleport(obj.cell, obj.position, obj.rotation)\n        guardMarkers[obj.id] = {}\n        guardMarkers[obj.id].id = newGuard.id\n        guardMarkers[obj.id].revision = guardRevision\n    elseif obj.recordId == guardMarkerId and guardMarkers[obj.id] ~= nil and guardMarkers[obj.id].revision == guardRevision then\n        --print(\"xguard not ready to spawn \" .. guardRevision)\n    elseif obj.recordId == guardMarkerId then\n        --print(\"guard not ready to spawn \" .. guardRevision)\n    end\nend\nlocal function onActorActive(actor)\n    for index, obj in ipairs(actor.cell:getAll(types.Activator)) do\n        if obj.recordId == guardMarkerId  then\n            onObjectActive(obj)\n        end\n    end\nend\n\nlocal function onSave()\n    return { guardMarkers = guardMarkers, guardRevision = guardRevision, barrierBroken = barrierBroken, guardsActive =\n    guardsActive }\nend\nlocal function onLoad(data)\n    if data then\n        guardMarkers = data.guardMarkers\n        barrierBroken = data.barrierBroken\n        guardRevision = data.guardRevision\n        guardsActive = data.guardsActive or false\n    end\nend\nreturn {\n    eventHandlers = { setGuardId = setGuardId, onCellChange_Hest = onCellChange_Hest },\n    engineHandlers = {\n        onObjectActive = onObjectActive,\n        onSave = onSave,\n        onLoad = onLoad,\n        onActorActive = onActorActive,\n    }\n}\n",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\guards_n.lua": "",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\guests_g.lua": "\nlocal guestMarkerId = \"zhac_hestatur_guestmarker\"\nlocal world = require(\"openmw.world\")\nlocal guestMarkers = {}\nlocal guestCell = \"Hestatur, Prison\"\nlocal function onObjectActive(obj)\n    if obj.recordId == guestMarkerId and not guestMarkers[obj.id] then\n        obj.enabled = false\n        guestMarkers[obj.id] = {\n            occupant = nil, position = obj.position, rotation = obj.rotation, \n        }\n    end\nend\n\nlocal function onSave()\n    return {guestMarkers = guestMarkers}\nend\nlocal function onLoad(data)\n    if data then\n        guestMarkers = data.guestMarkers\n    end\nend\nlocal function addGuestActor(actor)\n    for key, value in pairs(guestMarkers) do\n        --print(key)\n        if not value.occupant then\n            guestMarkers[key].occupant = actor.id\n            guestMarkers[key].originalPos = actor.position\n            guestMarkers[key].originalCell = actor.cell.id\n            guestMarkers[key].originalRot = actor.rotation\n\n            actor:teleport(guestCell, guestMarkers[key].position, guestMarkers[key].rotation)\n            return\n        end\n    end\nend\nlocal function returnGuestActor(actor)\n    for key, value in pairs(guestMarkers) do\n   \n        if  value.occupant == actor.id then\n            guestMarkers[key].occupant = actor.id\n            guestMarkers[key].originalPos = actor.position\n            guestMarkers[key].originalCell = actor.cell.id\n            guestMarkers[key].originalRot = actor.rotation\n            \n            actor:teleport(world.getCellById(guestMarkers[key].originalCell),  guestMarkers[key].originalPos,  guestMarkers[key].originalRot)\n            guestMarkers[key] = nil\n            return\n        end\n    end\nend\nreturn {\n    eventHandlers = {addGuestActor = addGuestActor, returnGuestActor = returnGuestActor},\n    engineHandlers = {\n        onObjectActive = onObjectActive,\n        onSave = onSave,\n        onLoad = onLoad,\n    }\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\init.lua": "local list = require(\"scripts.Hestatur.cellList\")\nlocal core = require(\"openmw.core\")\nlocal function runInit()\n    for index, value in ipairs(list) do\n       -- core.sendGlobalEvent(\"setLayerInCellToDefault\",value)\n    end\n    for index, value in ipairs(list) do\n       -- core.sendGlobalEvent(\"turnCellLightsOff_Hest\",value)\n    end\nend\n\nlocal function onInit()\n    runInit()\nend\n\n\nreturn {\n    eventHandlers = {\n        runInit = runInit\n    },\n    engineHandlers = {\n        onInit = onInit,\n    }\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\LightToggle_g.lua": "local world = require(\"openmw.world\")\nlocal I = require(\"openmw.interfaces\")\nlocal util = require(\"openmw.util\")\nlocal core = require(\"openmw.core\")\nlocal types = require(\"openmw.types\")\nlocal async = require(\"openmw.async\")\nlocal anim = require('openmw.animation')\nlocal calendar = require('openmw_aux.calendar')\nlocal time = require('openmw_aux.time')\n\nlocal createdLightOffRecords = {}\nlocal createdLightOnRecords = {}\nlocal createdLightOffObjects = {}\nlocal createdLightOnObjects = {}\nlocal lightState = {}\nlocal originalRecordIds = {}\nlocal function getNearbyById(cell, objId)\n    for index, value in ipairs(cell:getAll(types.Light)) do\n        if value.id == objId then\n            return value\n        end\n    end\nend\nlocal function getOffRecord(recordId)\n    if createdLightOffRecords[recordId] then\n        return createdLightOffRecords[recordId]\n    end\n    local newRecordDraft = types.Light.createRecordDraft({ template = types.Light.records[recordId], isOffByDefault = true })\n    local newRecord = world.createRecord(newRecordDraft)\n    originalRecordIds[newRecord.id] = recordId\n    createdLightOffRecords[recordId] = newRecord.id\n    createdLightOnRecords[newRecord.id] = recordId\n    return newRecord.id\nend\nlocal function getOnRecord(recordId)\n    if createdLightOnRecords[recordId] then\n        return createdLightOnRecords[recordId]\n    end\n    local newRecordDraft = types.Light.createRecordDraft({ template = types.Light.records[recordId], isOffByDefault = false })\n    local newRecord = world.createRecord(newRecordDraft)\n    originalRecordIds[newRecord.id] = recordId\n    createdLightOnRecords[recordId] = newRecord.id\n    createdLightOffRecords[newRecord.id] = recordId\n    return newRecord.id\nend\nlocal function turnLightOff(obj)\n    local record = obj.type.records[obj.recordId]\n    if obj.recordId == \"light_dae_brazier00\" then\n        return\n    end\n    if record.isOffByDefault then\n        return\n    end\n    if createdLightOffObjects[obj.id] then\n        local offObj = getNearbyById(obj.cell, createdLightOffObjects[obj.id])\n        if not offObj then\n            error(\"Unable to find \" .. createdLightOffObjects[obj.id])\n        end\n        offObj.enabled = true\n        offObj:setScale(obj.scale)\n        obj.enabled = false\n    else\n        local newRecord = getOffRecord(obj.recordId)\n        local newObject = world.createObject(newRecord)\n        createdLightOffObjects[obj.id] = newObject.id\n        createdLightOnObjects[newObject.id] = obj.id\n        newObject:setScale(obj.scale)\n        newObject:teleport(obj.cell, obj.position, obj.rotation)\n        obj.enabled = false\n    end\nend\nlocal function turnLightOn(obj)\n    local record = obj.type.records[obj.recordId]\n    if not record.isOffByDefault then\n        return\n    end\n    if createdLightOnObjects[obj.id] then\n        local onObj = getNearbyById(obj.cell, createdLightOnObjects[obj.id])\n        if not onObj then\n            error(\"Unable to find \" .. createdLightOnObjects[obj.id])\n        end\n        onObj.enabled = true\n        obj.enabled = false\n    else\n        --    local newRecord = getOffRecord(obj.recordId)\n        --    local newObject = world.createObject(newRecord)\n        --     createdLightOffObjects[obj.id] = newObject.id\n        --     createdLightOnObjects[newObject.id] = obj.id\n        --     newObject:teleport(obj.cell,obj.position,obj.rotation)\n    end\nend\nlocal function turnCellLightsOff(cell)\n    if not cell.getAll then\n        cell = world.getCellById(cell)\n    end\n    lightState[cell.id] = false\n    for index, value in ipairs(cell:getAll(types.Light)) do\n        local shouldShow = I.roomLayers.objectShouldBeShown(value)\n        if not shouldShow then\n            value.enabled = false\n        else\n            turnLightOff(value)\n            \n        end\n    end\nend\nlocal function getCellLightState(cellId)\n    return lightState[cellId]\nend\nlocal function turnCellLightsOn(cell)\n    if not cell.getAll then\n        cell = world.getCellById(cell)\n    end\n    lightState[cell.id] = true\n    for index, value in ipairs(cell:getAll(types.Light)) do\n        turnLightOn(value)\n    end\nend\nlocal function getOriginalRecordId(recordId)\n    return originalRecordIds[recordId]\nend\nreturn\n{\n    interfaceName = \"Hestatur_Light\",\n    interface = {\n        turnLightOff = turnLightOff,\n        turnLightOn = turnLightOn,\n        turnCellLightsOn = turnCellLightsOn,\n        turnCellLightsOff = turnCellLightsOff,\n        getOriginalRecordId = getOriginalRecordId,\n        getCellLightState = getCellLightState,\n    },\n    engineHandlers = {\n        onSave = function()\n            return {\n                createdLightOffObjects = createdLightOffObjects,\n                createdLightOffRecords = createdLightOffRecords,\n                createdLightOnObjects = createdLightOnObjects,\n                originalRecordIds = originalRecordIds,\n                lightState = lightState,\n            }\n        end,\n        onLoad = function(data)\n            if data then\n                createdLightOffObjects = data.createdLightOffObjects\n                createdLightOffRecords = data.createdLightOffRecords\n                createdLightOnObjects = data.createdLightOnObjects\n                originalRecordIds = data.originalRecordIds\n                lightState = data.lightState or {}\n            end\n        end\n    },\n    eventHandlers = {\n        turnLightOff_Hest = turnLightOff,\n        turnLightOn_Hest = turnLightOn,\n        turnCellLightsOn_Hest = turnCellLightsOn,\n        turnCellLightsOff_Hest = turnCellLightsOff,\n    }\n}\n",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\MessageBox.lua": "local ui = require(\"openmw.ui\")\nlocal util = require(\"openmw.util\")\nlocal async = require(\"openmw.async\")\nlocal I = require(\"openmw.interfaces\")\nlocal storage = require(\"openmw.storage\")\nlocal self = require(\"openmw.self\")\n--usage: smenu = require(\"scripts.zackutils.MessageBox\")\nlocal playerSettings = storage.playerSection(\"MessageBoxData\")\nlocal winCreated\n\nlocal winName \nlocal function padString(str, length)\n    if true == true then\n        return str\n    end\n    local strLength = string.len(str)\n\n    if strLength >= length then\n        return str -- No need to pad if the string is already longer or equal to the desired length\n    end\n\n    local padding = length - strLength                   -- Calculate the number of spaces needed\n    local paddedString = str .. string.rep(\" \", padding) -- Concatenate the string with the required number of spaces\n\n    return paddedString\nend\nlocal function focusLoss()\n\nend\nlocal function textContent(text, template, color)\n    local tsize = 15\n    if not color then\n        template = I.MWUI.templates.textNormal\n        color = template.props.textColor\n    elseif color == \"red\" then\n        template = I.MWUI.templates.textNormal\n        color = util.color.rgba(5, 0, 0, 1)\n    else\n        template = I.MWUI.templates.textHeader\n        color = template.props.textColor\n        --  tsize = 20\n    end\n\n    return {\n        type = ui.TYPE.Text,\n        template = template,\n        props = {\n            text = tostring(text),\n            textSize = tsize,\n            arrange = ui.ALIGNMENT.Center,\n            align = ui.ALIGNMENT.Center,\n            textColor = color\n        }\n    }\nend\nlocal function mouseClick(mouseEvent, data)\n    if not data.props.selected then return end\n    winCreated:destroy()\n    --I.UI.setMode(nil)\n    self:sendEvent(\"ButtonClicked_Hest\",{name = winName,text = data.props.text})\nend\nlocal function mouseMove(mouseEvent,data)\n--make the button lit up when moused over\n\nend\nlocal function renderListItem(text, font, selected)\n    local resources = ui.content {\n        textContent(padString(text, 30), nil, font)\n    }\n    if not font then font = \"white\" end\n    local itemIcon = nil\n    local rowCountX = 1\n    local template = I.MWUI.templates.boxTransparent\n    if not selected then\n        template = I.MWUI.templates.padding\n    end\n    return {\n        type = ui.TYPE.Container,\n        props = {\n            size = util.vector2(30, 30 * rowCountX),\n            autoSize = true,\n            selected = selected,\n            text = text,\n        },\n        events = {\n            mousePress = async:callback(mouseClick),\n            mouseMove = async:callback(mouseMove),\n            focusLoss =  async:callback(focusLoss),\n        },\n        content = ui.content {\n            {\n                template = template,\n                alignment = ui.ALIGNMENT.Center,\n                content = resources\n            }\n        }\n    }\nend\nlocal function showMessageBox(xwinName, textLines, buttons)\n    if not buttons then\n        buttons = { \"OK\" }\n    end\n    winName = xwinName\n    local contents = {}\n    local table_contents = {} -- Table to hold the generated items\n    for index, text in ipairs(textLines) do\n        local content = {} -- Create a new table for each value of x\n\n        table.insert(content, renderListItem(text, nil, false))\n        table.insert(contents, content)\n    end\n    local buttonContent = {} -- Create a new table for each value of x\n    for index, text in ipairs(buttons) do\n        table.insert(buttonContent, renderListItem(text, nil, true))\n    end\n    if (#contents == 0) then\n        error(\"No content items\")\n    end\n\n    for index, contentx in ipairs(contents) do--Print the actual text lines\n        local item = {\n            type = ui.TYPE.Flex,\n            content = ui.content(contentx),\n            props = {\n                horizontal = true,\n                arrange = ui.ALIGNMENT.Center,\n                align = ui.ALIGNMENT.Center,\n                autoSize = true\n            }\n        }\n        table.insert(table_contents, item)\n    end\n\n    local itemx = {--This contains the buttons, so that they can be arranged horizontally at the bottom\n        type = ui.TYPE.Flex,\n        content = ui.content(buttonContent),\n        props = {\n            --size = util.vector2(450, 30),\n            horizontal = true,\n            arrange = ui.ALIGNMENT.Center,\n            align = ui.ALIGNMENT.Center,\n            autoSize = true\n        }\n    }\n    table.insert(table_contents, itemx)\n\n    local itemK = {--This includes the top text, and the botton buttons.\n        type = ui.TYPE.Flex,\n        content = ui.content(table_contents),\n        props = {\n           -- size = util.vector2(450, 300),\n            horizontal = false,\n            vertical = true,\n            arrange = ui.ALIGNMENT.Center,\n            align = ui.ALIGNMENT.Center,\n            autoSize = true\n        },\n    }\n    I.UI.setMode('Interface', { windows = {} })\n    local xui = ui.create {--This is the window itself.\n        layer = \"Windows\",\n        template = I.MWUI.templates.boxTransparent,\n        events = {\n            focusLoss = async:callback(focusLoss),\n        },\n        props = {\n            -- relativePosition = v2(0.65, 0.8),\n            anchor = util.vector2(0.5, 0.5),\n            relativePosition = util.vector2(0.5, 0.5),\n            arrange = ui.ALIGNMENT.Center,\n            align = ui.ALIGNMENT.Center,\n            autoSize = true,\n            vertical = true,\n        },\n        content = ui.content({itemK})\n    }\n    xui.layout.props.xui = xui\n    winCreated = xui\n    --I.ZU_UIManager.storeUI(\"MessageBox\", xui)\n    return xui\nend\n\nreturn { drawMenuList = drawMenuList, showMessageBox = showMessageBox }\n",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\messy_g.lua": "local world = require(\"openmw.world\")\nlocal types = require(\"openmw.types\")\nlocal core = require(\"openmw.core\")\nlocal util = require(\"openmw.util\")\nlocal blockManniq = true\nlocal function isHestatur(id)\n    if id:find(\"hestatur\" ) then\n        return true\n    end\n    return false\nend\nlocal processedCells = {}\nlocal data = {\n    [\"furn_com_r_chair_01\"] = {\n        x = 89.2,\n        zPos = -15\n    }\n}\n\nlocal function createRotation(x, y, z)\n    if (core.API_REVISION < 40) then\n        return util.vector3(x, y, z)\n    else\n        local rotate = util.transform.rotateZ(z)\n        local rotatex = util.transform.rotateX(x)\n        local rotatey = util.transform.rotateY(y)\n        rotate = rotate:__mul(rotatex)\n        rotate = rotate:__mul(rotatey)\n        return rotate\n    end\nend\n\nlocal function makeObjMessy(obj)\n    if data[obj.recordId] then\n        local z,y,x = obj.rotation:getAnglesZYX()\n        x =  math.rad(data[obj.recordId].x)\n        local pos = obj.position + util.vector3(0,0,data[obj.recordId].zPos)\n        local rot = createRotation(x,y,z)\n        obj:teleport(obj.cell,pos,rot)\n    end\nend\nlocal function onObjectActive(obj)\n    if not isHestatur(obj.cell.id) or  processedCells[obj.cell.id] then\n        return\n    end\n    for index, value in ipairs(obj.cell:getAll()) do\n        makeObjMessy(value)\n    end\n    processedCells[obj.cell.id] = true\nend\nlocal function onActorActive(obj)\n\nend\nreturn {\n    engineHandlers = {\n        onObjectActive = onObjectActive,\n        onActorActive = onActorActive,\n        onSave = function ()\n            return {processedCells = processedCells}\n        end,\n        onLoad = function (data)\n            if data then\n                processedCells = data.processedCells\n            end\n        end\n    }\n}\n",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\obj_blacklist.lua": "local blacklistItems = {[\"spok_le_rack\"] = \"spok_le_rack\",\n[\"spok_acme_daedric_bow_box\"] =\"spok_acme_daedric_bow_box\"}\nlocal world = require(\"openmw.world\")\nlocal types = require(\"openmw.types\")\nlocal blockManniq = true\nlocal function isHestatur(id)\n    if id:find(\"hestatur\" ) then\n        return true\n    end\n    return false\nend\n\nlocal function onObjectActive(obj)\n    if not isHestatur(obj.cell.id) then\n        return\n    end\n   if blacklistItems[obj.recordId] then\n    obj.enabled = false\n   end\nend\nlocal function onActorActive(obj)\n    if blockManniq and (obj.recordId == \"spok_mannequin_s\" or obj.recordId == \"spok_mannequin_w\" )then\n      --  obj.enabled = false\n    end\nend\nreturn {\n    engineHandlers = {\n        onObjectActive = onObjectActive,\n        onActorActive = onActorActive,\n    }\n}\n",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\pallet.lua": "\nlocal currentPalletCell = \"hestatur, attic\"\nlocal world = require(\"openmw.world\")\nlocal types = require(\"openmw.types\")\nlocal function onSave()\n    return{\n        currentPalletCell = currentPalletCell\n    }\nend\nlocal function onLoad(data)\n    if data then\n        currentPalletCell = data.currentPalletCell\n    end\nend\n\nlocal function movePalletToCell(newCellId)\n    local oldCell = world.getCellById(currentPalletCell)\n    local newCell = world.getCellById(newCellId)\n    if not oldCell or not newCell or oldCell == newCell then\n        return\n    end\n\n    local palletContainers = {}\n    local palletObj\n    local palletMarker\n    --print(\"going forward\")\n    for index, obj in ipairs(oldCell:getAll()) do\n        if (obj.recordId):sub(1,17) == (\"zhac_pallet_cont_\") then\n            table.insert(palletContainers, obj)\n        elseif obj.recordId == \"zhac_hestatur_pallet\" then\n            palletObj = obj\n        end\n    end\n    for index, obj in ipairs(newCell:getAll()) do\n        if obj.recordId == \"zhac_hestatur_pallet_marker\" then\n            palletMarker = obj\n            break\n        end\n    end\n    for index, cont in ipairs(palletContainers) do\n        local relativePos = cont.position - palletObj.position\n        cont:teleport(newCell, palletMarker.position + relativePos, cont.rotation)\n    end\n    palletObj:teleport(newCell, palletMarker.position, palletObj.rotation)\n    currentPalletCell = newCellId\nend\n\nreturn {\n    eventHandlers = {movePalletToCell = movePalletToCell},\n    engineHandlers = {\n        onObjectActive = onObjectActive,\n        onSave = onSave,\n        onLoad = onLoad,\n    }\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\prison_a.lua": "local self = require(\"openmw.self\")\nlocal core = require(\"openmw.core\")\nlocal nearby = require(\"openmw.nearby\")\nlocal types = require(\"openmw.types\")\nlocal function findSlot(item)\n    if (item == nil) then\n        return\n    end\n    --Finds a equipment slot for an inventory item, if it has one,\n    if item.type == types.Armor then\n        if (types.Armor.records[item.recordId].type == types.Armor.TYPE.RGauntlet) then\n            return types.Actor.EQUIPMENT_SLOT.RightGauntlet\n        elseif (types.Armor.records[item.recordId].type == types.Armor.TYPE.LGauntlet) then\n            return types.Actor.EQUIPMENT_SLOT.LeftGauntlet\n        elseif (types.Armor.records[item.recordId].type == types.Armor.TYPE.Boots) then\n            return types.Actor.EQUIPMENT_SLOT.Boots\n        elseif (types.Armor.records[item.recordId].type == types.Armor.TYPE.Cuirass) then\n            return types.Actor.EQUIPMENT_SLOT.Cuirass\n        elseif (types.Armor.records[item.recordId].type == types.Armor.TYPE.Greaves) then\n            return types.Actor.EQUIPMENT_SLOT.Greaves\n        elseif (types.Armor.records[item.recordId].type == types.Armor.TYPE.LBracer) then\n            return types.Actor.EQUIPMENT_SLOT.LeftGauntlet\n        elseif (types.Armor.records[item.recordId].type == types.Armor.TYPE.RBracer) then\n            return types.Actor.EQUIPMENT_SLOT.RightGauntlet\n        elseif (types.Armor.records[item.recordId].type == types.Armor.TYPE.RPauldron) then\n            return types.Actor.EQUIPMENT_SLOT.RightPauldron\n        elseif (types.Armor.records[item.recordId].type == types.Armor.TYPE.LPauldron) then\n            return types.Actor.EQUIPMENT_SLOT.LeftPauldron\n        elseif (types.Armor.records[item.recordId].type == types.Armor.TYPE.Helmet) then\n            return types.Actor.EQUIPMENT_SLOT.Helmet\n        elseif (types.Armor.records[item.recordId].type == types.Armor.TYPE.Shield) then\n            return types.Actor.EQUIPMENT_SLOT.CarriedLeft\n        end\n    elseif item.type == types.Clothing then\n        if (types.Clothing.records[item.recordId].type == types.Clothing.TYPE.Amulet) then\n            return types.Actor.EQUIPMENT_SLOT.Amulet\n        elseif (types.Clothing.records[item.recordId].type == types.Clothing.TYPE.Belt) then\n            return types.Actor.EQUIPMENT_SLOT.Belt\n        elseif (types.Clothing.records[item.recordId].type == types.Clothing.TYPE.LGlove) then\n            return types.Actor.EQUIPMENT_SLOT.LeftGauntlet\n        elseif (types.Clothing.records[item.recordId].type == types.Clothing.TYPE.RGlove) then\n            return types.Actor.EQUIPMENT_SLOT.RightGauntlet\n        elseif (types.Clothing.records[item.recordId].type == types.Clothing.TYPE.Ring) then\n            return types.Actor.EQUIPMENT_SLOT.RightRing\n        elseif (types.Clothing.records[item.recordId].type == types.Clothing.TYPE.Skirt) then\n            return types.Actor.EQUIPMENT_SLOT.Skirt\n        elseif (types.Clothing.records[item.recordId].type == types.Clothing.TYPE.Shirt) then\n            return types.Actor.EQUIPMENT_SLOT.Shirt\n        elseif (types.Clothing.records[item.recordId].type == types.Clothing.TYPE.Shoes) then\n            return types.Actor.EQUIPMENT_SLOT.Boots\n        elseif (types.Clothing.records[item.recordId].type == types.Clothing.TYPE.Robe) then\n            return types.Actor.EQUIPMENT_SLOT.Robe\n        elseif (types.Clothing.records[item.recordId].type == types.Clothing.TYPE.Pants) then\n            return types.Actor.EQUIPMENT_SLOT.Pants\n        end\n    elseif item.type == types.Weapon then\n        if (item.type.records[item.recordId].type == types.Weapon.TYPE.Arrow or item.type.records[item.recordId].type == types.Weapon.TYPE.Bolt) then\n            return types.Actor.EQUIPMENT_SLOT.Ammunition\n        end\n        return types.Actor.EQUIPMENT_SLOT.CarriedRight\n    elseif item.type == types.Light then\n        return types.Actor.EQUIPMENT_SLOT.CarriedLeft\n    end\n    -- ----print(\"Couldn't find slot for \" .. item.recordId)\n    return nil\nend\nlocal function equipItem(itemId)\n    local inv = types.Actor.inventory(self)\n    local item = inv:find(itemId)\nend\nlocal function Died()\n    core.sendGlobalEvent(\"onActorDiedHest\",self)\nend\nlocal function evalEquipment()\n    local equip = types.Actor.getEquipment(self)\n    for index, item in ipairs(types.Actor.inventory(self):getAll()) do\n    \n        local slot = findSlot(item)\n        if slot then\n            \n        equip[slot] = item\n        end\n    end\n    types.Actor.setEquipment(self, equip)\nend\n\nreturn {\n    eventHandlers = {\n        Died = Died,\n        evalEquipment = evalEquipment,\n    }\n}\n",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\prison_g.lua": "\nlocal prisonMarkerId = \"zhac_hestatur_prisonmarker\"\n\nlocal prisonMarkers \nlocal prisonCell = \"Hestatur, Prison\"\nlocal types = require(\"openmw.types\")\nlocal async = require(\"openmw.async\")\nlocal I = require(\"openmw.interfaces\")\nlocal world = require(\"openmw.world\")\nlocal arrestMarkerId = \"zhac_marker_arrestme\"\n\nlocal takePrisonorItems = true\nlocal function onSave()\n    return {prisonMarkers = prisonMarkers}\nend\nlocal function onLoad(data)\n    if data then\n        prisonMarkers = data.prisonMarkers\n    end\nend\nlocal function onObjectActive(obj)\n    if obj.recordId == prisonMarkerId and not prisonMarkers[obj.id] then\n        obj.enabled = false\n        prisonMarkers[obj.id] = {\n            occupant = nil, position = obj.position, rotation = obj.rotation, \n        }\n    end\nend\nlocal function buildPrisonData()\n    prisonMarkers = {}\n    local cell = world.getCellByName(prisonCell)\n    for index, value in ipairs(cell:getAll(types.Activator)) do\n        onObjectActive(value)\n    end\nend\nlocal function getObjectInCell(cell, recordId)\n    for index, value in ipairs(cell:getAll()) do\n        if value.recordId == recordId then\n            return value\n        end\n    end\nend\nlocal function imprisonActor(actor)\n    --print(\"Arresting \", actor.recordId)\n    if not prisonMarkers then\n        buildPrisonData()\n    end\n    for key, value in pairs(prisonMarkers) do\n        if not value.occupant then\n            if takePrisonorItems then\n                local cell = world.getCellByName(prisonCell)\n              local cont = getObjectInCell(cell, \"zhac_hest_prisonchest\")\n              if cont then\n                prisonMarkers[key].confisicatedItems = {}\n                for index, item in ipairs(types.Actor.inventory(actor):getAll()) do\n                    item:moveInto(cont)\n                    table.insert(prisonMarkers[key].confisicatedItems, {recordId = item.recordId, count = item.count})\n                end\n                --todo: add prisoner items to wear\n              end\n              local contOut = getObjectInCell(cell, \"zhac_hest_prison_equipm\")\n                if contOut then\n                    for index, item in ipairs(types.Actor.inventory(contOut):getAll()) do\n                        item:moveInto(actor,1)\n                    end\n                end\n            end\n            prisonMarkers[key].occupant = actor.id\n            actor:teleport(prisonCell, prisonMarkers[key].position, prisonMarkers[key].rotation)\n            return\n        end\n    end\nend\nlocal function onActorActive(actor)\n    if not prisonMarkers then\n        return\n    end\n    for key, value in pairs(prisonMarkers) do\n        if value.occupant == actor.id then\n            actor:sendEvent(\"evalEquipment\")\n            return\n        end\n    end\nend\nlocal function distanceBetweenPos(vector1, vector2)\n    --Quick way to find out the distance between two vectors.\n    --Very similar to getdistance in mwscript\n    local dx = vector2.x - vector1.x\n    local dy = vector2.y - vector1.y\n    local dz = vector2.z - vector1.z\n    return math.sqrt(dx * dx + dy * dy + dz * dz)\nend\nlocal function onActorDiedHest(actor)\n    if not prisonMarkers then\n        return\n    end\n    for key, value in pairs(prisonMarkers) do\n        if value.occupant == actor.id then\n          value.occupant = nil\n        end\n    end\nend\nlocal function sayGoodByeActor(actor)\n    ----print(world.mwscript.getGlobalVariables(world.players[1]).zhac_hest_arrestme)\n    if world.mwscript.getGlobalVariables(world.players[1]).zhac_hest_arrestme == 1 then\n        world.mwscript.getGlobalVariables(world.players[1]).zhac_hest_arrestme = 0\n        imprisonActor(actor)\n    end\nend\nlocal function npcActivation(activator, actor)\n    if not prisonMarkers then\n        return\n    end\n    local guardCount = 0\n    for key, value in pairs(activator.cell:getAll(types.NPC)) do\n        if value.recordId == \"zhac_hestatur_guard_01\" then\n            guardCount = guardCount + 1\n        end\n    end\n    if guardCount > 0 then\n        world.mwscript.getGlobalVariables(actor).zhac_hest_canarrest = 1\n    else\n        world.mwscript.getGlobalVariables(actor).zhac_hest_canarrest = 0   \n    end\n    for key, value in pairs(prisonMarkers) do\n        --print(value.occupant, activator.id)\n        if value.occupant == activator.id then\n            world.mwscript.getGlobalVariables(actor).zhac_hest_talkprison = 1\n            async:newUnsavableSimulationTimer(0.1, function()\n                world.mwscript.getGlobalVariables(actor).zhac_hest_talkprison = 0\n            end)\n            return\n        end\n    end\n\nend\nI.Activation.addHandlerForType(types.NPC, npcActivation)\n\nreturn {\n    interfaceName = \"zhac_prison\",\n    interface = {\n        imprisonActor = imprisonActor,\n        sayGoodByeActor = sayGoodByeActor,\n        getprisonMarkers = function()\n            return prisonMarkers\n        end,\n    },\n    eventHandlers = {imprisonActor = imprisonActor, sayGoodByeActor = sayGoodByeActor,\n    onActorDiedHest = onActorDiedHest,},\n    engineHandlers = {\n        onObjectActive = onObjectActive,\n        onSave = onSave,\n        onLoad = onLoad,\n        onActorActive = onActorActive,\n    }\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\roomLayers_cam.lua": "local ui = require(\"openmw.ui\")\nlocal I = require(\"openmw.interfaces\")\n\nlocal v2 = require(\"openmw.util\").vector2\nlocal v3 = require(\"openmw.util\").vector3\nlocal util = require(\"openmw.util\")\nlocal cam = require(\"openmw.interfaces\").Camera\nlocal core = require(\"openmw.core\")\nlocal self = require(\"openmw.self\")\nlocal nearby = require(\"openmw.nearby\")\nlocal types = require(\"openmw.types\")\nlocal storage = require(\"openmw.storage\")\nlocal camera = require(\"openmw.camera\")\nlocal input = require(\"openmw.input\")\nlocal ui = require(\"openmw.ui\")\nlocal async = require(\"openmw.async\")\nlocal layers = require(\"scripts.Hestatur.roomLayers_data\")\n\nlocal state = false\nlocal currentCam = 1\nlocal oldFov\nlocal function isInCamMode()\n    return state\nend\nlocal function enterCameraMode(pos, yaw, pitch, fov)\n    if state == true then\n        return\n    end\n    oldFov = camera.getFieldOfView()\n    camera.setMode(camera.MODE.Static, true)\n    camera.setStaticPosition(pos)\n    camera.setPitch(pitch)\n    camera.setYaw(yaw)\n    camera.setFieldOfView(fov)\n    state = true\nend\nlocal function exitCameraMode()\n    if not state then\n        return\n    end\n    camera.setMode(camera.MODE.FirstPerson)\n    camera.setFieldOfView(oldFov)\n    state = false\nend\nlocal function nextCamera()\n    local layerdata = layers[self.cell.id]\n    if layerdata.camPos then\n        layerdata = layerdata.camPos\n        local nextData = layerdata[currentCam + 1]\n        if not nextData then\n            currentCam = 1\n            nextData = layerdata[currentCam ]\n        else\n            currentCam = currentCam + 1\n        end\n        local data = layerdata[currentCam]\n        --print(currentCam)\n        camera.setStaticPosition(util.vector3(data.position[1], data.position[2], data.position[3]))\n        camera.setPitch(data.pitch)\n        camera.setYaw(data.yaw)\n        camera.setFieldOfView(data.fov)\n    end\nend\n\nreturn {\n    interfaceName = \"RoomLayers_Cam\",\n    interface = {\n        isInCamMode = isInCamMode,\n        enterCameraMode = enterCameraMode,\n        exitCameraMode = exitCameraMode,\n        nextCamera = nextCamera,\n    },\n    eventHandlers = {\n    },\n    engineHandlers = {\n        onSave = function()\n            if state then\n                exitCameraMode()\n            end\n        end\n    }\n}\n",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\roomLayers_data.lua": "local start =  {\n    [\"hestatur, lord's chambers\"] = {\n        \n        rugs = {\n            objects = {\n                \"furn_de_rug*\",\n                \"g_furn_rug_*\",\n                \"spok_rug*\",\n            },\n            name = \"Rugs\",\n            price = 500,\n        },\n        mannequins = {\n            objects = {\n                \"spok_mannequin_s\",\n                \"furn_velothi_altar_01\",\n            },\n            name = \"Mannequins\",\n            price = 500\n        },\n        \n        furniture = {\n            objects = {\n                \"spok_f_throne_1\",\n                \"Furn_De_r_Table_09\",\n                \"furn_de_r_table_03\",\n                \"spok_chest_1\",\n                \"spok_chest_*\",\n                \"spok_hutch_1\",\n                \"active_de_pr_bed_21\",\n                \"misc_uni_pillow_01\",\n                \"furn_de_r_table_07\",\n                \"spok_chest_5\",\n                \"active_de_pr_bed_21\",\n                \"misc_uni_pillow_01\",\n                \"furn_de_r_table_07\",\n                \"furn_de_r_table_08\",\n                \"light_com_candle_08\",\n                \"AB_o_DeRchDeskEmpty\",\n                \"spok_chest_7\",\n                \"spok_cupboard_1\",\n                \"spok_drawers_3\",\n                \"spok_table_1\",\n                \"spok_desk_1\",\n                \"spok_table_2\",\n                \"furn_de_r_table_03\",\n                \"spok_chest_s2\",\n                \"spok_chest_s1\",\n                \"furn_de_r_bench_01\",\n                \"furn_de_r_wallscreen_02\",\n                \"furn_com_r_chair_01\",\n                \"furn_glassdisplaycase_01\",\n                \"furn_com_rm_barstool\",\n                \"furn_com_rm_shelf_02\",\n                \"light_com_candle_10\",\n                \"spok_drawers_1\",\n                \"furn_com_r_table_01\",\n                \"furn_com_r_bookshelf_01\",\n                \"Furn_De_R_Bookshelf_02\",\n                \"furn_de_r_shelf_01\",\n                \"Furn_Com_Planter\",\n                \"flora_*\",\n\n            },\n            name = \"Furniture\",\n            price = 500\n        },\n    },\n\n    [\"hestatur, library\"] = {\n\n        bookshelves = {\n            objects = {\n                \"furn_com_r_bookshelf_01\",\n                \"Furn_De_R_Bookshelf_02\",\n                \"furn_de_r_shelf_01\",\n            },\n            name = \"Bookshelves\",\n            price = 1500\n        },\n        rugs = {\n            objects = {\n                \"furn_de_rug*\",\n                \"G_Furn_rug_*\",\n            },\n            name = \"Rugs\",\n            price = 500,\n        },\n        furniture = {\n            objects = {\n                \"spok_f_throne_1\",\n                \"Furn_De_r_Table_09\",\n                \"furn_de_r_table_03\",\n                \"spok_chest_1\",\n                \"spok_chest_2\",\n                \"active_de_pr_bed_21\",\n                \"misc_uni_pillow_01\",\n                \"furn_de_r_table_07\",\n                \"spok_chest_5\",\n                \"active_de_pr_bed_21\",\n                \"misc_uni_pillow_01\",\n                \"furn_de_r_table_07\",\n                \"furn_de_r_table_08\",\n                \"light_com_candle_08\",\n                \"AB_o_DeRchDeskEmpty\",\n                \"spok_chest_7\",\n                \"spok_cupboard_1\",\n                \"spok_drawers_3\",\n                \"spok_table_1\",\n                \"spok_desk_1\",\n                \"spok_table_2\",\n                \"furn_de_r_table_03\",\n                \"spok_chest_s2\",\n                \"spok_chest_s1\",\n                \"furn_de_r_bench_01\",\n                \"furn_de_r_wallscreen_02\",\n                \"furn_com_r_chair_01\",\n                \"furn_glassdisplaycase_01\",\n                \"furn_com_rm_barstool\",\n                \"furn_com_rm_shelf_02\",\n                \"light_com_candle_10\",\n                \"spok_drawers_1\",\n                \"furn_com_r_table_01\",\n            },\n            name = \"Furniture\",\n            price = 500\n        },\n    },\n    [\"hestatur, great hall\"] = {\n\n        mannequins = {\n            objects = {\n                \"spok_mannequin_s\",\n                \"furn_velothi_altar_01\",\n            },\n            name = \"Mannequins\",\n            price = 500\n        },\n        rugs = {\n            objects = {\n                \"furn_de_rug_big_05\",\n                \"furn_de_rug_02\",\n                \"Furn_de_rug_big_02\",\n                \"furn_de_rug_big_04\",\n                \"G_Furn_rug_big_08\",\n            },\n            name = \"Rugs\",\n            price = 500,\n        },\n        furniture = {\n            objects = {\n                \"Furn_De_r_Table_09\",\n                \"furn_de_r_table_03\",\n                \"spok_chest_1\",\n                \"spok_chest_2\",\n                \"active_de_pr_bed_21\",\n                \"misc_uni_pillow_01\",\n                \"furn_de_r_table_07\",\n                \"spok_chest_5\",\n                \"active_de_pr_bed_21\",\n                \"misc_uni_pillow_01\",\n                \"furn_de_r_table_07\",\n                \"light_com_candle_08\",\n                \"AB_o_DeRchDeskEmpty\",\n                \"spok_chest_7\",\n                \"spok_cupboard_1\",\n                \"Furn_De_R_Bookshelf_02\",\n                \"furn_com_r_bookshelf_01\",\n                \"spok_drawers_3\",\n                \"spok_table_1\",\n                \"spok_table_2\",\n                \"furn_de_r_table_03\",\n                \"spok_chest_s2\",\n                \"spok_chest_s1\",\n                \"furn_de_r_bench_01\",\n                \"furn_de_r_wallscreen_02\",\n                \"furn_com_r_chair_01\",\n                \"furn_glassdisplaycase_01\",\n                \"furn_com_rm_barstool\",\n                \"furn_com_rm_shelf_02\",\n                \"light_com_candle_10\",\n                \"spok_drawers_1\",\n                \"furn_com_r_table_01\",\n            },\n            name = \"Furniture\",\n            price = 500\n        },\n    },\n    [\"hestatur, laboratory\"] = {\n        camPos = {\n            {\n                position = {11.18536090850830078125, 702.06365966796875, 182.1318206787109375},\n                pitch = 0.3,\n                yaw = 3.12,\n                fov = 1.5\n            },\n            {\n                position = {-17.242824554443359375, -385.882965087890625, -42.036441802978515625},\n                pitch = 0.27,\n                yaw = 0.02,\n                fov = 1.5\n            },\n\n        },\n        planters = {\n            name = \"Planters\",\n            objects = {\n\n                \"flora_*\",\n                \"furn_planter*\",\n                \"terrain_rock_*\",\n            },\n            price = 500\n        },\n        magic_ashpit = {\n            name = \"Enchanting Ashpit\",\n            objects = {\n\n                \"spok_ht_ashpit\",\n            },\n            price = 500\n        },\n        rugs = {\n            objects = {\n                \"G_Furn_rug_big_01\",\n                \"spok_rug_round_01\",\n                \"G_Furn_rug_big_05\",\n                \"spok_rug_round_05\",\n                \"G_Furn_rug_big_08\",\n            },\n            name = \"Rugs\",\n            price = 500,\n        },\n        furniture = {\n            objects = {\n                \"furn_de_r_table_07\",\n                \"spok_chest_5\",\n                \"spok_chest_1\",\n                \"spok_chest_2\",\n                \"active_de_pr_bed_21\",\n                \"misc_uni_pillow_01\",\n                \"furn_de_r_table_07\",\n                \"spok_chest_5\",\n                \"active_de_pr_bed_21\",\n                \"misc_uni_pillow_01\",\n                \"furn_de_r_table_07\",\n                \"furn_com_r_chair_01\",\n                \"light_com_candle_08\",\n                \"AB_o_DeRchDeskEmpty\",\n                \"spok_chest_7\",\n                \"spok_cupboard_1\",\n                \"Furn_De_R_Bookshelf_02\",\n                \"furn_com_r_bookshelf_01\",\n                \"spok_drawers_3\",\n                \"spok_table_1\",\n                \"spok_table_2\",\n                \"furn_de_r_table_03\",\n                \"spok_chest_s2\",\n                \"spok_chest_s1\",\n                \"furn_de_r_bench_01\",\n                \"furn_de_r_wallscreen_02\",\n                \"furn_com_r_chair_01\",\n                \"furn_glassdisplaycase_01\",\n                \"furn_com_rm_barstool\",\n                \"furn_com_rm_shelf_02\",\n                \"light_com_candle_10\"\n            },\n            name = \"Furniture\",\n            price = 500\n        },\n        banners = {\n            objects = { \"furn_c_t_wizard_01\", \"furn_banner_temple_03_indoors\",\n                \"furn_banner_temple_01_indoors\",\n                \"furn_banner_temple_02_indoors\",\n                \"furn_de_bannerpost_02\" },\n            name = \"Wall Banners/Posters\",\n            price = 500\n        },\n        teleport = {\n            name = \"Teleport Orbs\",\n            objects = {\n                \"spok_ht_teleorb\",\n                \"zhac_hestatur_teleportbase\",\n                \"furn_museum_display_02\"\n            },\n            price = 500\n        },\n        sortContainers = {\n\n            dependsOn = \"furniture\",\n            objects = {\n                \"spok_k_*\",\n                \"spok_ht_sg_*\",\n                \"spok_ht_p*\",\n                \"spok_ht_scroll*\",\n                \"spok_ht_sorter\"\n            },\n            name = \"Sorting Containers\",\n            price = 500\n        },\n        mannequins = {\n            objects = {\n                \"spok_mannequin_s\",\n                \"furn_velothi_altar_01\",\n            },\n            name = \"Mannequins\",\n            price = 500\n        }\n    }\n}\nlocal function removeFileExtension(filename)\n    local lastDotPos = filename:match(\".*()%.\")\n\n    if lastDotPos then\n        return filename:sub(1, lastDotPos - 1)\n    else\n        return filename\n    end\nend\n\nlocal function removePath(filename)\n    local lastSlashPos = filename:match(\".*/()\")\n    \n    if lastSlashPos then\n        return filename:sub(lastSlashPos)\n    else\n        return filename\n    end\nend\n    local vfs = require(\"openmw.vfs\")\n    local files = {}\n    for fileName in vfs.pathsWithPrefix(\"scripts\\\\Hestatur\\\\layercells\") do\n        local tbl = require(removeFileExtension(fileName))\n        start[removePath(removeFileExtension(fileName))] = tbl\n    end\nreturn start",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\roomLayers_g.lua": "local world = require(\"openmw.world\")\nlocal types = require(\"openmw.types\")\nlocal async = require(\"openmw.async\")\nlocal layers = require(\"scripts.Hestatur.roomLayers_data\")\nlocal I = require(\"openmw.interfaces\")\nlocal layerState = {}\nlocal function checkSuffixAndPrefix(suffix, mainString)\n    -- Check if the suffix ends with '*'\n    if string.sub(suffix, -1) == '*' then\n        -- Remove the '*' from the suffix for comparison\n        suffix = string.sub(suffix, 1, -2)\n    end\n\n    -- Check if the mainString starts with the modified suffix\n    if string.sub(mainString, 1, string.len(suffix)) == suffix then\n        return true\n    else\n        return false\n    end\nend\nlocal function setMasterLayerState(data)\n    layerState = data\nend\nlocal function objectShouldBeShown(obj)\n    local state = true\n    if not layers[obj.cell.id] then\n        return true\n    end\n    for layerId, layer in pairs(layers[obj.cell.id]) do\n        if layer.objects then\n            local layerState = layerState[obj.cell.id][layerId]\n            local lightId = I.Hestatur_Light.getOriginalRecordId(obj.recordId)\n            for index, objId in ipairs(layer.objects) do\n                if obj.recordId == objId:lower() or (lightId and lightId == objId:lower()) then\n                    state = layerState\n                elseif (checkSuffixAndPrefix(objId, obj.recordId:lower()) or (lightId and checkSuffixAndPrefix(objId, lightId) ) ) then\n                    state = layerState\n            \n                end\n            end\n        end\n    end\n    return state\nend\nlocal function setLayerState(cell, layerId, state, layerStateData)\n    --print(layerId)\n    if not layers[cell.id] or not layers[cell.id][layerId].objects then\n        return\n    end\n    local parentLayer = layers[cell.id][layerId].dependsOn\n    if layerStateData and parentLayer and state == true then\n        if layerStateData[parentLayer] == true then\n        else\n            setLayerState(cell, parentLayer, true, layerStateData)\n        end\n    end\n    for index, objId in ipairs(layers[cell.id][layerId].objects) do\n        for index, value in ipairs(cell:getAll()) do\n            if value.recordId == objId:lower() then\n                value.enabled = state\n            elseif (checkSuffixAndPrefix(objId, value.recordId:lower())) then\n                value.enabled = state\n            end\n        end\n    end\n    if state == false then\n        for flayerId, layer in pairs(layers[cell.id]) do\n            if layer.dependsOn == layerId then\n                setLayerState(cell, flayerId, false, layerStateData)\n            end\n        end\n    end\nend\nlocal function hideLayersInCell(cellId)\n    local data = layers[cellId]\n    if not data then\n        return\n    end\n    local cell = world.getCellById(cellId)\n    for layerId, layer in pairs(data) do\n        setLayerState(cell, layerId, false)\n    end\nend\nlocal function setLayerInCellToDefault(cellId)\n    local data = layers[cellId]\n    if not data then\n        return\n    end\n    local cell = world.getCellById(cellId)\n    layerState[cell.id] = {}\n    for layerId, layer in pairs(data) do\n        local state = layer.price == nil\n        layerState[cell.id][layerId] = state\n        setLayerState(cell, layerId, state)\n    end\n    world.players[1]:sendEvent(\"updateLayerState\",layerState)\nend\nlocal function reEnableAllLayers(cellId)\n    local data = layers[cellId]\n    if not data then\n        return\n    end\n    local cell = world.getCellById(cellId)\n    layerState[cell.id] = {}\n    for layerId, layer in pairs(data) do\n        local state = true\n        layerState[cell.id][layerId] = state\n        setLayerState(cell, layerId, state)\n    end\n    world.players[1]:sendEvent(\"updateLayerState\",layerState)\nend\n\nlocal function hideLightsInCell(cellId)\n    local cell = world.getCellById(cellId)\n    for index, value in ipairs(cell:getAll(types.Light)) do\n        if value.contentFile then\n            value.enabled = false\n        end\n    end\nend\nlocal function removeGoldCount(count)\n    local player = world.players[1]\n    types.Actor.inventory(player):find(\"gold_001\"):remove(count)\nend\nlocal function getObjInCell(cell, id)\n    for index, value in ipairs(cell:getAll()) do\n        if value.recordId == id:lower() then\n            return value\n        end\n    end\nend\nreturn {\n    interfaceName = \"roomLayers\",\n    interface = {\n        objectShouldBeShown = objectShouldBeShown,\n    },\n    eventHandlers = {\n        hideLayersInCell = hideLayersInCell,\n        hideLightsInCell = hideLightsInCell,\n        removeGoldCount = removeGoldCount,\n        setMasterLayerState = setMasterLayerState,\n        setLayerState = function(data)\n            setLayerState(world.getCellById(data.cellId), data.layerId, data.state, data.layerStateData)\n        end,\n        reEnableAllLayers = reEnableAllLayers,\n        setLayerInCellToDefault = setLayerInCellToDefault,\n    },\n    engineHandlers = {\n        onSave = function()\n            return { layerState = layerState }\n        end,\n        onActivate = function(obj, act)\n            if obj.recordId == \"zhac_hestat_cube_activat\" then\n                act:sendEvent(\"showLayerConfig\")\n            elseif obj.recordId == \"zhac_hidden_button\" then\n                local state = world.mwscript.getGlobalVariables(world.players[1]).zhac_hestatur_hdoor_state\n                local door = getObjInCell(act.cell, \"In_impsmall_d_hidden_01_z\")\n                local trapDoor = getObjInCell(act.cell, \"zhac_secret_trapdoor\")\n                if state == 1 then\n                    local rot = math.floor(door.rotation:getAnglesZYX())\n                    if rot == -4 then\n                        world.mwscript.getGlobalVariables(world.players[1]).zhac_hestatur_hdoor_state = 0\n                    else\n                        world._runStandardActivationAction(door, world.players[1], true)\n                        --close the door again\n                        async:newUnsavableSimulationTimer(3, function()\n                            if math.floor(door.rotation:getAnglesZYX()) == -4 then\n                                world.mwscript.getGlobalVariables(world.players[1]).zhac_hestatur_hdoor_state = 0\n                            end\n                        end)\n                    end\n                else\n                    local rot = math.floor(door.rotation:getAnglesZYX())\n                    if rot ~= -4 then\n                        world.mwscript.getGlobalVariables(world.players[1]).zhac_hestatur_hdoor_state = 1\n                    else\n                        world.mwscript.getGlobalVariables(world.players[1]).zhac_hestatur_hdoor_state = 1\n                        world._runStandardActivationAction(door, world.players[1], true)\n                        --open the door again\n                    end\n                end\n            end\n        end,\n        onLoad = function(data)\n            if data then\n                layerState = data.layerState\n            end\n        end\n    }\n}\n",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\roomLayers_p.lua": "local ui = require(\"openmw.ui\")\nlocal I = require(\"openmw.interfaces\")\n\nlocal v2 = require(\"openmw.util\").vector2\nlocal v3 = require(\"openmw.util\").vector3\nlocal util = require(\"openmw.util\")\nlocal cam = require(\"openmw.interfaces\").Camera\nlocal core = require(\"openmw.core\")\nlocal self = require(\"openmw.self\")\nlocal nearby = require(\"openmw.nearby\")\nlocal types = require(\"openmw.types\")\nlocal storage = require(\"openmw.storage\")\nlocal camera = require(\"openmw.camera\")\nlocal input = require(\"openmw.input\")\nlocal ui = require(\"openmw.ui\")\nlocal async = require(\"openmw.async\")\nlocal messagebox = require(\"scripts.Hestatur.MessageBox\")\n\n\nlocal layers = require(\"scripts.Hestatur.roomLayers_data\")\nlocal lightState = {\n    lightsOn = 1,\n    lightsOff = 2,\n    lightsHidden = 3,\n}\nlocal myLayerName\n\nlocal renameWindow = nil\nlocal uithing = nil\n\nlocal currentLayer = nil\n\nlocal bedCount = 0\nlocal layerState = {}\nlocal layerUnlocks = {}\nlocal genModData = storage.globalSection(\"MoveObjectsCellGen\")\n\nlocal currentCategory = nil --if nil, then show the category selection level\nlocal currentSubCat = nil   --if nil, but above isn't, show subcategories.\n\nlocal CreateLayerBox = nil\nlocal ConfigLayerBox = nil\nlocal currentText = \"\"\nlocal buttonContext = \"\"\nlocal doorID = \"\"\nlocal settlementMarker = nil\n\nlocal maxLayers = 0\nlocal function textChanged(firstField)\n    currentText = (firstField)\nend\nlocal function buttonClick()\n    --print(currentText)\n\n    I.UI.setMode()\n    CreateLayerBox:destroy()\nend\n\nlocal function destroyWindow()\n    renameWindow:destory()\n    I.RoomLayers_Cam.exitCameraMode()\nend\n\nlocal allowMales = false\n\n\n\nlocal function yesText(bool)\n    if (bool == true) then\n        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nlocal function buttonClickRename()\n    --print(currentText)\n    core.sendGlobalEvent(\"renameLayerEvent\",\n        {\n            name = currentText,\n            id = settlementMarker\n        })\n    I.UI.setMode()\nend\nlocal function updateLayerUi()\n    if (ConfigLayerBox ~= nil) then\n        ConfigLayerBox = I.RoomLayers.renderTextInput(currentLayer)\n    end\nend\nlocal function ToggleTableItem(x, text)\n    local text = text.props.name\n    if (text == \"DoneButton\") then\n        ConfigLayerBox:destroy()\n        ConfigLayerBox = nil\n        I.RoomLayers_Cam.exitCameraMode()\n        I.UI.setMode()\n        return\n    end\n    if (text == \"Next Camera\") then\n\n        I.RoomLayers_Cam.nextCamera()\n        --print(\"next cam\")\n        return\n    end\n    if not layerState[self.cell.id] then\n        layerState[self.cell.id] = {}\n        layerState[self.cell.id].lights = lightState.lightsOff\n    end\n    if text == \"lights\" then\n        --print(\"lights\")\n        local state = layerState[self.cell.id].lights\n        if not layerState[self.cell.id].lights then\n            layerState[self.cell.id].lights = lightState.lightsOff\n            state = lightState.lightsOff\n        end\n        state = state + 1\n        if state == 4 then\n            state = lightState.lightsOn\n        end\n        layerState[self.cell.id].lights = state\n        --print(state)\n        if state == lightState.lightsOff then\n            core.sendGlobalEvent(\"turnCellLightsOff_Hest\", self.cell.id)\n        elseif state == lightState.lightsOn then\n            core.sendGlobalEvent(\"turnCellLightsOn_Hest\", self.cell.id)\n        elseif state == lightState.lightsHidden then\n            core.sendGlobalEvent(\"turnCellLightsOn_Hest\", self.cell.id)\n            core.sendGlobalEvent(\"hideLightsInCell\", self.cell.id)\n        end\n        updateLayerUi()\n        return\n    end\n    for layerId, layer in pairs(layers[self.cell.id]) do\n        -- --print(layerId)\n        if layerId == text and layer.objects then\n            if not layerUnlocks[self.cell.id] then\n                layerUnlocks[self.cell.id] = {}\n            end\n            if not layerUnlocks[self.cell.id][layerId] == true then\n               \n                local goldCount = types.Actor.inventory(self):countOf(\"gold_001\")\n                if goldCount < layer.price then\n                    ui.showMessage(layer.name .. \" costs \" .. tostring(layer.price) )\n                    return\n                end\n                messagebox.showMessageBox(layerId,\n                    { \"Pay \" .. tostring(layer.price) .. \" to unlock \" .. layer.name .. \"?\" },{\"Yes\",\"No\"})\n                return\n            end\n            layerState[self.cell.id][layerId] = not layerState[self.cell.id][layerId]\n            core.sendGlobalEvent(\"setLayerState\",\n                {\n                    layerId = layerId,\n                    cellId = self.cell.id,\n                    state = layerState[self.cell.id][layerId],\n                    layerStateData =\n                        layerState[self.cell.id]\n                })\n            updateLayerUi()\n        end\n    end\nend\nlocal aux_util = require('openmw_aux.util')\n\n\nlocal function RenderToggleBox(toggleName, toggleText, toggleCallback, toggleBool, overRide)\n    local booltext = overRide or \"Yes\"\n\n\n\n    if (toggleBool == false) then\n        booltext = \"No\"\n    end\n    if not toggleText then\n        toggleText = toggleName\n    end\n    return I.ZackUtilsUI_Hest.boxedTextContent(toggleText .. \": \" .. booltext, async:callback(toggleCallback), 0.8,\n        toggleName)\nend\nlocal function RenderBox(toggleName, toggleText, toggleCallback)\n    return I.ZackUtilsUI_Hest.boxedTextContent(toggleText, async:callback(toggleCallback), 0.8, toggleName)\nend\nlocal function renderTextInput(settlementId, existingText, editCallback, OKCallback, OKText)\n    local mySettle = nil\n    bedCount = 0\n    local settlerCount = 0\n    --print(\"rendering\")\n\n    myLayerName = \"Layert1\"\n    if (ConfigLayerBox ~= nil) then\n        ConfigLayerBox:destroy()\n    end\n    if (OKText == nil) then\n        OKText = \"OK\"\n    end\n    local vertical = 50\n    local horizontal = (ui.layers[1].size.x / 2) - 400\n\n    local vertical = 0\n    local horizontal = ui.layers[1].size.x / 2 - 25\n    local vertical = vertical + ui.layers[1].size.y / 2 + 100\n\n    local content = {}\n\n    local validRaceCount = 0\n    local validGender = false\n    if not layerState[self.cell.id] then\n        layerState[self.cell.id] = {}\n        layerState[self.cell.id].lights = lightState.lightsOff\n    end\n    for layerId, layer in pairs(layers[self.cell.id]) do\n        if layer.objects then\n            if layerState[self.cell.id][layerId] == nil then\n                layerState[self.cell.id][layerId] = false\n            end\n            local text = layer.name\n            table.insert(content, RenderToggleBox(layerId, text, ToggleTableItem, layerState[self.cell.id][layerId]))\n        end\n    end\n    local lightText = \"Off\"\n    if layerState[self.cell.id].lights == lightState.lightsHidden then\n        lightText = \"Hidden\"\n    elseif layerState[self.cell.id].lights == lightState.lightsOn then\n        lightText = \"On\"\n    end\n    table.insert(content, RenderToggleBox(\"lights\", \"Lights\", ToggleTableItem, true, lightText))\n\n    table.insert(content, RenderBox(\"DoneButton\", \"Done\", ToggleTableItem))\n    table.insert(content, RenderBox(\"Next Camera\", \"Next Camera\", ToggleTableItem))\n    core.sendGlobalEvent(\"setMasterLayerState\",layerState)\n    return ui.create {\n        layer = \"Windows\",\n        template = I.MWUI.templates.boxTransparentThick,\n        props = {\n            relativePosition = v2(0.5, 1),\n            anchor = v2(0.5, 1),\n            --position = v2(horizontal, vertical),\n            vertical = false,\n            relativeSize = util.vector2(0.1, 0.1),\n            arrange = ui.ALIGNMENT.Start\n        },\n        content = ui.content {\n            {\n                type = ui.TYPE.Flex,\n                content = ui.content(content),\n                props = {\n                    horizontal = false,\n                    align = ui.ALIGNMENT.Start,\n                    arrange = ui.ALIGNMENT.Start,\n                    size = util.vector2(400, 10),\n                }\n            }\n        }\n    }\nend\nlocal function showLayerConfig()\n    if not I.RoomLayers_Cam.isInCamMode() then\n        if layers[self.cell.id] and layers[self.cell.id].camPos and layers[self.cell.id].camPos[1] then\n            local data = layers[self.cell.id].camPos[1]\n\n            I.RoomLayers_Cam.enterCameraMode(util.vector3(data.position[1], data.position[2], data.position[3]), data\n            .yaw, data.pitch, data.fov)\n        end\n    end\n    ConfigLayerBox = renderTextInput(currentLayer)\n\n    I.UI.setMode('Interface', { windows = {} })\n    --Need to show data here. Allow you to config which type of settler to allow, how many to allow(Defaults to 0), and\nend\nlocal function createNewLayer(settlementMarker)\n    core.sendGlobalEvent(\"addLayerEvent\",\n        {\n            settlementId = settlementMarker.id,\n            position = nearby.findRandomPointAroundCircle(settlementMarker.position, 400)\n        })\nend\nlocal function onConsoleCommand(mode, command, selectedObject)\n    if (command == \"luasettler\" and selectedObject.recordId == \"zhac_settlement_marker\") then\n        core.sendGlobalEvent(\"addActorToLayer\", selectedObject.id)\n    end\nend\nlocal function processGreeting(data)\n    local actor = data.npc\n    local jobSiteData = data.jobSiteData\n\n    local actorRecord = actor.type.record(actor)\n    local playerRecord = self.type.record(self)\nend\n\nlocal function ButtonClicked_Hest(data)\n    local winName = data.name\n    local text = data.text\n    if text == \"No\" then\n        return\n    end\n    --print(winName,text)\n    for layerId, layer in pairs(layers[self.cell.id]) do\n        if layer.objects and winName ==  layerId then\n            layerUnlocks[self.cell.id][layerId] = true\n            layerState[self.cell.id][layerId] = true\n            core.sendGlobalEvent(\"removeGoldCount\",layer.price)\n            core.sendGlobalEvent(\"setLayerState\",\n                {\n                    layerId = layerId,\n                    cellId = self.cell.id,\n                    state = layerState[self.cell.id][layerId],\n                    layerStateData =\n                        layerState[self.cell.id]\n                })\n            updateLayerUi()\n        end\n    end\nend\nlocal lastMode\nlocal spokenActor\nreturn {\n    interfaceName = \"RoomLayers\",\n    interface = {\n        version = 1,\n        destroyWindow = destroyWindow,\n        renderTextInput = renderTextInput,\n        createNewLayer = createNewLayer,\n        showLayerConfig = showLayerConfig,\n    },\n    eventHandlers = {\n        updateLayerUi = updateLayerUi,\n        showLayerConfig = showLayerConfig,\n        ButtonClicked_Hest = ButtonClicked_Hest,\n        UiModeChanged = function(data)\n            --print(data.newMode)\n            if data.newMode == \"Dialogue\" then\n                spokenActor = data.arg\n            elseif not data.newMode and data.oldMode == \"Dialogue\" and spokenActor then\n               core.sendGlobalEvent(\"sayGoodByeActor\",spokenActor)\n               --print(\"GO TO JAIL\", spokenActor.recordId)\n               spokenActor = nil\n            end\n            lastMode = data.newMode\n        end,\n        updateLayerState = function (data)\n            layerState = data\n        end,\n        showMessageHestatur = function (msg)\n            ui.showMessage(msg)\n        end,\n        processGreeting = processGreeting,\n    },\n    engineHandlers = {\n        onFrame = onFrame,\n        onInputAction = onInputAction,\n        onSave = function ()\n            return {\n                layerState = layerState,\n                layerUnlocks = layerUnlocks\n            }\n        end,\n        onLoad = function (data)\n            if data then\n                layerState = data.layerState or {}\n                layerUnlocks = data.layerUnlocks or {}\n            end\n        end,\n        onConsoleCommand = onConsoleCommand,\n    }\n}\n",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\sorting.lua": "local util = require(\"openmw.util\")\nlocal world = require(\"openmw.world\")\nlocal types = require(\"openmw.types\")\nlocal core = require(\"openmw.core\")\nlocal storage = require(\"openmw.storage\")\nlocal I = require(\"openmw.interfaces\")\nlocal clothingMap = {\n    [types.Clothing.TYPE.Amulet] = \"zhac_hest_drawer_amulet\",\n    [types.Clothing.TYPE.Belt] = \"zhac_hest_drawer_belts\",\n    [types.Clothing.TYPE.LGlove] = \"zhac_hest_drawer_gloves\",\n    [types.Clothing.TYPE.RGlove] = \"zhac_hest_drawer_gloves\",\n    [types.Clothing.TYPE.Ring] = \"zhac_hest_drawer_rings\",\n    [types.Clothing.TYPE.Skirt] = \"zhac_hest_drawer_skirt\",\n    [types.Clothing.TYPE.Shirt] = \"zhac_hest_drawer_shirts\",\n    [types.Clothing.TYPE.Shoes] = \"zhac_hest_drawer_shoes\",\n    [types.Clothing.TYPE.Robe] = \"zhac_hest_drawer_robes\",\n    [types.Clothing.TYPE.Pants] = \"zhac_hest_drawer_pant\"\n}\nlocal function getContainerById(cell, contId)\n    for index, value in ipairs(cell:getAll(types.Container)) do\n        if value.recordId == contId then\n            return value\n        end\n    end\nend\nlocal function isEquipped(actor, item)\n    for index, value in pairs(types.Actor.getEquipment(actor)) do\n        if value == item then\n            return true\n        end\n    end\n    return false\nend\nlocal function canSortItem(item)\n    if isEquipped(world.players[1], item) then\n        return false\n    end\n    return true\nend\nlocal function sortKeys(player)\n    \n    local sorted = 0\n    local keyCont = getContainerById(world.getCellByName(\"Hestatur, Lord's Chambers\"), \"zhac_hest_cont_keys\")\n    local inv = types.Actor.inventory(player)\n    for index, value in ipairs(inv:getAll(types.Miscellaneous)) do\n        if canSortItem(value) then\n            local record = value.type.records[value.recordId]\n            if record and record.isKey then\n                sorted = sorted + value.count\n                value:moveInto(keyCont)\n            end\n        end\n    end\n    return sorted\nend\nlocal function sortClothing(player)\n    local sorted = 0\n    for key, value in pairs(clothingMap) do\n        local cont = getContainerById(world.getCellByName(\"Hestatur, Lord's Chambers\"), value)\n        local inv = types.Actor.inventory(player)\n        for index, value in ipairs(inv:getAll(types.Clothing)) do\n            if canSortItem(value) then\n                local record = value.type.records[value.recordId]\n                if record and record.type == key then\n                    sorted = sorted + value.count\n                    value:moveInto(cont)\n                end\n            end\n        end\n    end\n    return sorted\nend\nI.Activation.addHandlerForType(types.Activator, function(obj, actor)\n\n    if obj.recordId == \"spok_ht_sorter\" then\n        --print(\"done\")\n        return false\n    end\n\nend)\nlocal function runItemSort()\n    local player = world.players[1]\n    local sorted = 0\n    if player then\n        sorted = sorted +  sortKeys(player)\n        sorted = sorted +   sortClothing(player)\n    end\n    return sorted\nend\nreturn {--I.ItemSortHestatur.runItemSort()\n    interfaceName = \"ItemSortHestatur\",\n    interface = {\n        runItemSort = runItemSort\n    },\n    eventHandlers = {\n        runItemSort =runItemSort,\n    }\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\templateLayers.lua": "return {\n\n    rugs = {\n        objects = {\n            \"G_Furn_rug_big_01\",\n            \"spok_rug_*\",\n            \"G_Furn_rug_big_05\",\n            \"spok_rug_round_05\",\n            \"furn_de_rug_*\",\n            \"g_furn_rug_*\",\n            \"G_Furn_rug_big_08\",\n        },\n        name = \"Rugs\",\n        price = 500,\n    },\n    paintings = {\n        objects = {\n            \"spok_hpic_*\",\n            \n        },\n        name = \"Paintings\",\n        price = 500,\n    },\n    mannequins = {\n        objects = {\n            \"spok_mannequin_s\",\n            \"spok_mannequin_w\",\n            \"furn_velothi_altar_01\",\n        },\n        name = \"Mannequins\",\n        price = 500\n    },\n    banners = {\n        objects = { \"furn_c_t_wizard_01\",\n            \"furn_banner_temple_03_indoors\",\n            \"furn_banner_temple_01_indoors\",\n            \"furn_banner_temple_02_indoors\",\n            \"furn_de_tapestry_*\",\n            \"furn_com_tapestry_*\",\n            \"furn_c_t_*\",\n            \"furn_g_tapestry_*\",\n            \"furn_de_bannerpost_02\" },\n        name = \"Wall Banners/Posters\",\n        price = 500\n    },\n    furniture = {\n        objects = {\n            \"furn_de_r_table_07\",\n            \"furn_de_r_table_08\",\n            \"spok_chest_5\",\n            \"spok_chest_1\",\n            \"furn_com_rm_chair_03\",\n            \"spok_chest_2\",\n            \"furn_com_r_table_01\",\n            \"furn_com_rm_table_04\",\n            \"active_de_pr_bed_21\",\n            \"spok_bed_m4\",\n            \"furn_de_cushion_square_04\",\n            \"furn_de_r_bench_02\",\n            \"furn_de_r_chair_03\",\n            \"misc_uni_pillow_01\",\n            \"spok_chest_5\",\n            \"active_de_pr_bed_21\",\n            \"misc_uni_pillow_01\",\n            \"furn_de_r_table_*\",\n            \"furn_com_r_chair_01\",\n            \"light_com_candle_08\",\n            \"AB_o_DeRchDeskEmpty\",\n            \"spok_chest_7\",\n            \"spok_cupboard_1\",\n            \"Furn_De_R_Bookshelf_02\",\n            \"furn_com_r_bookshelf_01\",\n            \"spok_drawers_3\",\n            \"spok_table_1\",\n            \"spok_table_2\",\n            \"furn_de_r_table_03\",\n            \"spok_chest_s2\",\n            \"spok_chest_s1\",\n            \"furn_de_r_bench_01\",\n            \"furn_de_r_wallscreen_02\",\n            \"furn_com_r_chair_01\",\n            \"furn_glassdisplaycase_0*\",\n            \"furn_com_rm_barstool\",\n            \"furn_com_rm_shelf_02\",\n            \"light_com_candle_10\",\n            \"active_com_bunk_01\",\n            \"furn_de_p_bookshelf_01\",\n            \"active_com_bunk_01\",\n            \"spok_chest_6\",\n            \"spok_barrel_*\",\n            \"furn_firepit00\",\n            \"light_logpile\",\n            \"spok_closet_1\",\n            \"furn_de_p_*\",\n            \"spok_hutch*\",\n            \"spok_chest*\",\n            \"spok_sack*\",\n            \"spok_urn*\",\n            \"spok_drawers*\",\n            \"furn_de_p_chair_01\",\n            \"furn_de_p_table_06\",\n            \"spok_crate_1\",\n            \"furn_dwrv_stove_00\"\n        },\n        name = \"Furniture\",\n        price = 500\n    },\n}\n",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\ui.lua": "local ui = require(\"openmw.ui\")\nlocal I = require(\"openmw.interfaces\")\n\nlocal v2 = require(\"openmw.util\").vector2\nlocal util = require(\"openmw.util\")\nlocal cam = require(\"openmw.interfaces\").Camera\nlocal core = require(\"openmw.core\")\nlocal self = require(\"openmw.self\")\nlocal nearby = require(\"openmw.nearby\")\nlocal types = require(\"openmw.types\")\nlocal Camera = require(\"openmw.camera\")\nlocal input = require(\"openmw.input\")\nlocal storage = require(\"openmw.storage\")\nlocal ui = require(\"openmw.ui\")\nlocal async = require(\"openmw.async\")\nlocal I = require(\"openmw.interfaces\")\nlocal vfs = require('openmw.vfs')\n\n\nlocal v2 = require(\"openmw.util\").vector2\nlocal util = require(\"openmw.util\")\nlocal cam = require(\"openmw.interfaces\").Camera\nlocal core = require(\"openmw.core\")\nlocal self = require(\"openmw.self\")\nlocal nearby = require(\"openmw.nearby\")\nlocal types = require(\"openmw.types\")\nlocal Camera = require(\"openmw.camera\")\nlocal input = require(\"openmw.input\")\nlocal storage = require(\"openmw.storage\")\nlocal acti = require(\"openmw.interfaces\").Activation\nlocal playerSelected\nlocal iconsize = 4\n--local calculateTextScale() = 0.8\nlocal Actor = require(\"openmw.types\").Actor\n\n\nlocal function imageContent(resource, size)\n    if (size == nil) then\n        size = iconsize\n    end\n    return {\n        type = ui.TYPE.Image,\n        props = {\n            resource = resource,\n            size = util.vector2(ui.layers[1].size.y / size, ui.layers[1].size.y / size),\n            relativeSize = util.vector2(0.2, 0.2)\n        }\n    }\nend\n\n\n\nlocal function lerp(x, x1, x2, y1, y2)\n    return y1 + (x - x1) * ((y2 - y1) / (x2 - x1))\nend\n\nlocal function calculateTextScale()\n    local screenSize = ui.layers[1].size\n    local width = screenSize.x\n    local scale = lerp(width, 1280, 2560, 1.3, 1.8)\n    local textScaleSetting =1\n    return scale * textScaleSetting\nend\nlocal function textContent(text, template, color)\n    if (template == nil) then\n        template = I.MWUI.templates.textHeader\n    else\n        if (color ~= nil) then\n            template.props.textColor = color\n        end\n    end\n    return {\n        type = ui.TYPE.Text,\n        template = template,\n        props = {\n            text = tostring(text),\n            textSize = 20 * calculateTextScale(),\n            arrange = ui.ALIGNMENT.Start,\n            align = ui.ALIGNMENT.Start\n        }\n    }\nend\nlocal function textContentLeft(text)\n    return {\n        type = ui.TYPE.Text,\n        template = I.MWUI.templates.textNormal,\n        props = {\n            relativePosition = v2(0.5, 0.5),\n            text = tostring(text),\n            textSize = 10 * calculateTextScale(),\n            arrange = ui.ALIGNMENT.Start,\n            align = ui.ALIGNMENT.Start\n        }\n    }\nend\nlocal function paddedTextContent(text)\n    return {\n        type = ui.TYPE.Container,\n        content = ui.content {\n            {\n                template = I.MWUI.templates.padding,\n                props = {\n                    anchor = util.vector2(0, -0.5)\n                },\n                content = ui.content {\n                    {\n                        type = ui.TYPE.Text,\n                        template = I.MWUI.templates.textNormal,\n                        props = {\n                            text = text,\n                            textSize = 10 * calculateTextScale(),\n                            arrange = ui.ALIGNMENT.Center\n                        }\n                    }\n                }\n            }\n        }\n    }\nend\nlocal function renderItemBoxed(item, bold)\n    return {\n        type = ui.TYPE.Container,\n        props = {\n            --  anchor = util.vector2(-1,0),\n            align = ui.ALIGNMENT.Center,\n            relativePosition = util.vector2(1, 0.5),\n            arrange = ui.ALIGNMENT.Center,\n        },\n        content = ui.content {\n            {\n                template = I.MWUI.templates.borders,\n                alignment = ui.ALIGNMENT.Center,\n                content = ui.content {\n                    {\n                        type = ui.TYPE.Text,\n                        template = I.MWUI.templates.textHeader,\n                        props = {\n                            text = item,\n                            textSize = 10 * calculateTextScale(),\n                            relativePosition = v2(0.5, 0.5),\n                            arrange = ui.ALIGNMENT.Center,\n                            align = ui.ALIGNMENT.Center,\n                        }\n                    }\n                }\n            }\n        }\n    }\nend\nlocal function renderItemBold(item, bold)\n    return {\n        type = ui.TYPE.Container,\n        props = {\n            --  anchor = util.vector2(-1,0),\n            align = ui.ALIGNMENT.Center,\n            relativePosition = util.vector2(1, 0.5),\n            arrange = ui.ALIGNMENT.Center,\n        },\n        content = ui.content {\n            {\n                template = I.MWUI.templates.padding,\n                alignment = ui.ALIGNMENT.Center,\n                content = ui.content {\n                    {\n                        type = ui.TYPE.Text,\n                        template = I.MWUI.templates.textHeader,\n                        props = {\n                            text = item,\n                            textSize = 10 * calculateTextScale(),\n                            relativePosition = v2(0.5, 0.5),\n                            arrange = ui.ALIGNMENT.Center,\n                            align = ui.ALIGNMENT.Center,\n                        }\n                    }\n                }\n            }\n        }\n    }\nend\nlocal function renderTextInput(textLines, existingText, editCallback, OKCallback, OKText)\n    if (OKText == nil) then\n        OKText = \"OK\"\n    end\n    --print(\"render\")\n    local vertical = 50\n    local horizontal = (ui.layers[1].size.x / 2) - 400\n\n    local vertical = 0\n    local horizontal = ui.layers[1].size.x / 2 - 25\n    local vertical = vertical + ui.layers[1].size.y / 2 + 100\n\n    local content = {}\n    for _, text in ipairs(textLines) do\n        table.insert(content, I.ZackUtilsUI_AA.textContent(text))\n    end\n    local textEdit = I.ZackUtilsUI_AA.boxedTextEditContent(existingText, async:callback(editCallback))\n    local okButton = I.ZackUtilsUI_AA.boxedTextContent(OKText, async:callback(OKCallback))\n    table.insert(content, textEdit)\n    table.insert(content, okButton)\n\n    return ui.create {\n        layer = \"Windows\",\n        template = I.MWUI.templates.boxTransparentThick,\n        props = {\n            relativePosition = util.vector2(0.5, 0.5),\n            anchor = util.vector2(0.5, 0.5),\n            vertical = false,\n            relativeSize = util.vector2(0.1, 0.1),\n            arrange = ui.ALIGNMENT.Center\n        },\n        content = ui.content {\n            {\n                type = ui.TYPE.Flex,\n                content = ui.content(content),\n                props = {\n                    horizontal = false,\n                    align = ui.ALIGNMENT.Center,\n                    arrange = ui.ALIGNMENT.Center,\n                    size = util.vector2(400, 10),\n                }\n            }\n        }\n    }\nend\nlocal function renderItem(item, bold)\n    return {\n        type = ui.TYPE.Container,\n        content = ui.content {\n            {\n                template = I.MWUI.templates.padding,\n                alignment = ui.ALIGNMENT.Center,\n                content = ui.content {\n                    {\n                        type = ui.TYPE.Text,\n                        template = I.MWUI.templates.textNormal,\n                        props = {\n                            text = item,\n                            textSize = 10 * calculateTextScale(),\n                            arrange = ui.ALIGNMENT.Center\n                        }\n                    }\n                }\n            }\n        }\n    }\nend\nlocal function renderItemBBoxed(item, bold)\n    return {\n        type = ui.TYPE.Container,\n        content = ui.content {\n            {\n                template = I.MWUI.templates.padding,\n                alignment = ui.ALIGNMENT.Center,\n                content = ui.content {\n                    {\n                        type = ui.TYPE.Text,\n                        template = I.MWUI.templates.textNormal,\n                        props = {\n                            text = item,\n                            textSize = 10 * calculateTextScale(),\n                            arrange = ui.ALIGNMENT.Center\n                        }\n                    }\n                }\n            }\n        }\n    }\nend\nlocal function renderItemChoiceReal(itemList, selectedItem, horizontal, vertical, align, anchor)\n    local content = {}\n    for _, item in ipairs(itemList) do\n        if (item == selectedItem) then\n            local itemLayout = renderItemBold(item)\n            itemLayout.template = I.MWUI.templates.padding\n            table.insert(content, itemLayout)\n        else\n            local itemLayout = renderItem(item)\n            itemLayout.template = I.MWUI.templates.padding\n            table.insert(content, itemLayout)\n        end\n    end\n    table.insert(content, renderItemBoxed(\"OK\"))\n    return ui.create {\n        layer = \"HUD\",\n        template = I.MWUI.templates.boxTransparent,\n        props = {\n            -- relativePosition = v2(0.65, 0.8),\n            anchor = anchor,\n            relativePosition = v2(horizontal, vertical),\n            arrange = align,\n            align = align,\n        },\n        content = ui.content {\n            {\n                type = ui.TYPE.Flex,\n                content = ui.content(content),\n                props = {\n                    vertical = true,\n                    arrange = align,\n                    align = align,\n                }\n            }\n        }\n    }\nend\nlocal RecordStorage = storage.globalSection(\"RecordStorage\")\nlocal function convertStringToTable(inputString)\n    local dataTable = {}\n    local entryCount = 0\n\n    for entry in string.gmatch(inputString, \"([^|]+)\") do\n        local itemID, count = string.match(entry, \"(.-);(.+)\")\n        if not itemID then\n            return\n        end\n        local createdRecords = RecordStorage:get(\"createdRecords\")\n\n        if createdRecords[itemID] then itemID = createdRecords[itemID] end\n        count = tonumber(count)\n\n        local carriedCount = types.Actor.inventory(self):countOf(itemID)\n        local dataEntry = {\n            itemID = itemID,\n            count = count,\n            carried = carriedCount >= count\n        }\n        if (dataEntry.itemID ~= nil) then\n            table.insert(dataTable, dataEntry)\n            entryCount = entryCount + 1\n            --   --print(itemID)\n        end\n    end\n\n    -- Handle single item case\n    if entryCount == 0 then\n        local itemID, count = string.match(inputString, \"(.-);(.+)\")\n        local createdRecords = RecordStorage:get(\"createdRecords\")\n\n        if createdRecords[itemID] then itemID = createdRecords[itemID] end\n        count = tonumber(count)\n\n        local carriedCount = types.Actor.inventory(self):countOf(itemID)\n        local dataEntry = {\n            itemID = itemID,\n            count = count,\n            carried = carriedCount >= count\n        }\n\n        table.insert(dataTable, dataEntry)\n    end\n\n    return dataTable\nend\nlocal auxUi = require('openmw_aux.ui')\nlocal function renderIcon(icon, text, red)\n    local iconsize = 32\n    local template = auxUi.deepLayoutCopy(I.MWUI.templates.textHeader)\n    local color = nil\n    if (red) then\n        color = ui.CONSOLE_COLOR.Error\n    end\n    template.textSize = 2\n    local iconResource = ui.texture({ path = icon })\n    return {\n        type = ui.TYPE.Container,\n        props = {\n            size = util.vector2(iconsize, iconsize)\n        },\n        content = ui.content {\n            {\n                template = I.MWUI.templates.padding,\n                alignment = ui.ALIGNMENT.Center,\n                content = ui.content {\n                    imageContent(iconResource, iconsize),\n                    textContent(tostring(text), template, color)\n                }\n            }\n        }\n    }\nend\nlocal function renderObjectRequirements(tableItem, horizontal, vertical, size)\n    if not tableItem then return end\n\n\n    if not tableItem.itemRequired then return end\n\n    if (tableItem.itemRequired == nil or tableItem.itemRequired == \"\" or tableItem.itemRequired == \" \") then\n        ----print(\"Item not found\" .. tableItem.Static_ID)\n        return\n    else\n    end\n    local data = convertStringToTable(tableItem.itemRequired)\n    if not data then return end\n    local content = {}\n    local createdRecords = RecordStorage:get(\"createdRecords\")\n    for index, dataob in ipairs(data) do\n        local obRecord = nil\n        local itemID = dataob.itemID\n        if createdRecords[itemID] then itemID = createdRecords[itemID] end\n        obRecord = types.Miscellaneous.record(itemID)\n        --  local resource = ui.texture { -- texture in the top left corner of the atlas\n        -- path = obRecord.icon\n        -- }\n        local carriedCount = types.Actor.inventory(self):countOf(dataob.itemID)\n\n        local itemLayout = renderIcon(obRecord.icon, dataob.count, carriedCount < dataob.count)\n        table.insert(content, itemLayout)\n    end\n    return ui.create {\n        layer = \"HUD\",\n        template = I.MWUI.templates.boxTransparent,\n        props = {\n            -- relativePosition = v2(0.65, 0.8),\n            anchor = util.vector2(0.5, 0.5),\n            relativePosition = v2(horizontal, vertical),\n            arrange = ui.ALIGNMENT.Center,\n            align = ui.ALIGNMENT.Center,\n            vertical = false,\n            horizontal = true\n        },\n        content = ui.content {\n            {\n                type = ui.TYPE.Flex,\n                content = ui.content(content),\n                props = {\n                    vertical = false,\n                    horizontal = true,\n                    arrange = ui.ALIGNMENT.Center,\n                    align = ui.ALIGNMENT.Center,\n                }\n            }\n        }\n    }\nend\nlocal function renderItemChoice(itemList, horizontal, vertical, align, anchor)\n    local content = {}\n    for _, item in ipairs(itemList) do\n        local itemLayout = renderItem(item)\n        itemLayout.template = I.MWUI.templates.padding\n        table.insert(content, itemLayout)\n    end\n    return ui.create {\n        layer = \"HUD\",\n        template = I.MWUI.templates.boxTransparent,\n        props = {\n            -- relativePosition = v2(0.65, 0.8),\n            anchor = anchor,\n            relativePosition = v2(horizontal, vertical),\n            arrange = align,\n            align = align,\n        },\n        content = ui.content {\n            {\n                type = ui.TYPE.Flex,\n                content = ui.content(content),\n                props = {\n                    vertical = true,\n                    arrange = align,\n                    align = align,\n                }\n            }\n        }\n    }\nend\nlocal scale = 1.2\n\nlocal function renderTextWithBox(tableItem, horizontal, vertical, size)\n    if (size == nil) then\n        size = 8 * scale\n    else\n        size = size * scale\n    end\n\n\n    local content = {}\n    local itemLayout = renderItemBold(tableItem.Name)\n    table.insert(content, itemLayout)\n    local resource\n    if vfs.fileExists('textures/ashlanderarchitect/' .. tableItem.Static_ID .. \".jpg\") then\n        resource = ui.texture { -- texture in the top left corner of the atlas\n            path = 'textures/ashlanderarchitect/' .. tableItem.Static_ID .. \".jpg\"\n        }\n    elseif vfs.fileExists('textures/ashlanderarchitect/' .. tableItem.Texture_Name .. \".jpg\") then\n        resource = ui.texture { -- texture in the top left corner of the atlas\n            path = 'textures/ashlanderarchitect/' .. tableItem.Texture_Name .. \".jpg\"\n        }\n    elseif vfs.fileExists('textures/ashlanderarchitect/' .. tableItem.Texture_Name .. \".png\") then\n        resource = ui.texture { -- texture in the top left corner of the atlas\n            path = 'textures/ashlanderarchitect/' .. tableItem.Texture_Name .. \".png\"\n        }\n    else\n        resource = ui.texture { -- texture in the top left corner of the atlas\n            path = 'textures/ashlanderarchitect/' .. \"cs-icon\" .. \".png\"\n        }\n\n    end\n    table.insert(content, imageContent(resource, size))\n    return ui.create {\n        layer = \"HUD\",\n        template = I.MWUI.templates.boxTransparent,\n        props = {\n            -- relativePosition = v2(0.65, 0.8),\n            --  anchor = v2(-1, -2),\n            anchor = util.vector2(0.5, 0.5),\n            relativePosition = v2(horizontal, vertical),\n            arrange = ui.ALIGNMENT.Center,\n            align = ui.ALIGNMENT.Center,\n        },\n        content = ui.content(content)\n    }\nend\n\nlocal function boxedTextContent(text, callback, textScale, name)\n    if textScale == nil then\n        textScale = 1\n    end\n    return {\n        type = ui.TYPE.Container,\n        content = ui.content {\n            {\n                template = I.MWUI.templates.box,\n                props = {\n                    anchor = util.vector2(0, -0.5)\n                },\n                content = ui.content {\n                    {\n                        type = ui.TYPE.Text,\n                        template = I.MWUI.templates.textNormal,\n                        events = { mouseClick = callback },\n                        props = {\n                            text = text,\n                            textSize = (15 * calculateTextScale()) * textScale,\n                            align = ui.ALIGNMENT.Center,\n                            name = name,\n                        }\n                    }\n                }\n            }\n        }\n    }\nend\nlocal function boxedTextEditContent(text, callback, isMultiline)\n    local multiLine = false\n    local height = 30\n    if isMultiline then\n        multiLine = true\n        height = 200\n    end\n    return {\n        type = ui.TYPE.Container,\n        content = ui.content {\n            {\n                template = I.MWUI.templates.box,\n                props = {\n                    anchor = util.vector2(0, -0.5),\n                    size = util.vector2(400, 10),\n                },\n                content = ui.content {\n                    {\n                        type = ui.TYPE.TextEdit,\n                        template = I.MWUI.templates.textEditLine,\n                        events = { textChanged = callback },\n                        props = {\n                            text = text,\n                            size = util.vector2(1400, height),\n                            textSize = 15 * calculateTextScale(),\n                            align = ui.ALIGNMENT.Center,\n                            multiline = multiLine,\n                        }\n                    }\n                }\n            }\n        }\n    }\nend\nreturn {\n    interfaceName = \"ZackUtilsUI_Hest\",\n    interface = {\n        version = 1,\n        imageContent = imageContent,\n        textContent = textContent,\n        textContentLeft = textContentLeft,\n        paddedTextContent = paddedTextContent,\n        boxedTextContent = boxedTextContent,\n        hoverOne = hoverOne,\n        hoverTwo = hoverTwo,\n        hoverNone = hoverNone,\n        boxedTextEditContent = boxedTextEditContent,\n        renderItemChoice = renderItemChoice,\n        renderTextWithBox = renderTextWithBox,\n        renderTextInput = renderTextInput,\n        renderTravelOptions = renderTravelOptions,\n        renderItemChoiceReal = renderItemChoiceReal,\n        renderObjectRequirements = renderObjectRequirements,\n    },\n}\n",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\vaultdoor.lua": "local world = require(\"openmw.world\")\nlocal I = require(\"openmw.interfaces\")\nlocal util = require(\"openmw.util\")\nlocal core = require(\"openmw.core\")\nlocal types = require(\"openmw.types\")\nlocal async = require(\"openmw.async\")\nlocal anim = require('openmw.animation')\nlocal doorClosing = false\n\nlocal doorOpening = false\n\nlocal playerIsInVault = false\nlocal checkForExit = false\nlocal cutsceneState = 0\nlocal openDelay = 2\nlocal closeDelay = 5\nlocal keyId = \"gold_001\"\nlocal doorButton = \"zhac_imp_button\"\nlocal doorStateVar = \"zhac_hest_vdoorstate\"\nlocal vaultDoorId = \"zhac_hest_vdoor_door\"\nlocal openSoundStage = 0\n\nlocal HESTATUR_VAULT = \"Hestatur\"\nlocal lightBlocker2 = \"zhac_vault_lightblocker1\"\nlocal lightBlocker1 = \"zhac_vault_lightblocker2\"\nlocal ENTRANCE = HESTATUR_VAULT .. \", Treasury Vault\"\nlocal doorObj\nlocal function getObjByID(id, cell)\n    if not cell then\n        cell = world.players[1].cell\n    end\n    for index, value in ipairs(cell:getAll()) do\n        if value.recordId == id then\n            return value\n        end\n    end\nend\nlocal function setLightBlockersEnabled(state, cell)\n    if not cell then\n        cell = world.players[1].cell\n    end\n    for index, value in ipairs(cell:getAll()) do\n        if value.recordId == lightBlocker2 or value.recordId == lightBlocker1 then\n            value.enabled = state\n        end\n    end\nend\nlocal function openDoor()\n    if doorOpening then\n        return\n    end\n    doorOpening = true\n\n    setLightBlockersEnabled(false)\n    core.sound.playSound3d(\"SothaDoorOpen\", doorObj, { volume = 3 })\n\n    async:newUnsavableSimulationTimer(openDelay, function()\n        world.mwscript.getGlobalVariables(world.players[1])[doorStateVar] = 1\n        async:newUnsavableSimulationTimer(0.5, function()\n            core.sound.playSound3d(\"Door Stone Open\", doorObj, { volume = 5 })\n        end\n        )\n    end\n    )\n    checkForExit = true\n    openSoundStage = 0\nend\nlocal function closeDoor()\n    if doorClosing then\n        return\n    end\n    local completion = anim.getCurrentTime(doorObj, \"death1\")\n    if completion and completion > 12 then --already closed\n        return\n    end\n    world.mwscript.getGlobalVariables(world.players[1])[doorStateVar] = 0\n    doorClosing = true\n    openSoundStage = 0\nend\nlocal function finishDoorClose()\n    if world.mwscript.getGlobalVariables(world.players[1])[doorStateVar] ~= 0 then\n        world.mwscript.getGlobalVariables(world.players[1])[doorStateVar] = 0\n    end\n    core.sound.playSound3d(\"AB_Thunderclap0\", doorObj, { volume = 3 })\n    doorClosing = false\n    -- I.TeleportBlocker.setDoorOpen(false)\n\n    setLightBlockersEnabled(true)\nend\nlocal function autoClose()\n    async:newUnsavableSimulationTimer(closeDelay, function()\n        closeDoor()\n    end)\nend\nlocal secsPassed = 0\nlocal function onUpdate(dt)\n    if not doorObj then\n        for index, value in ipairs(world.players[1].cell:getAll(types.Activator)) do\n            if value.recordId == vaultDoorId then\n                doorObj = value\n            end\n        end\n    end\n    if doorClosing then\n        local completion = anim.getCurrentTime(doorObj, \"death1\")\n        if completion and completion > 12 then\n            finishDoorClose()\n        elseif completion then\n            if openSoundStage == 0 and completion > 7.4 then\n                core.sound.playSound3d(\"AB_SteamHammerStrike\", doorObj, { volume = 5 })\n                openSoundStage = 1\n            elseif openSoundStage == 1 and completion > 8 then\n                core.sound.playSound3d(\"AB_SteamHammerStrike\", doorObj, { volume = 5 })\n                openSoundStage = 2\n            elseif openSoundStage == 2 and completion > 9 then\n                core.sound.playSound3d(\"AB_SteamHammerStrike\", doorObj, { volume = 5 })\n                openSoundStage = 3\n            end\n        end\n    end\n    if doorOpening then\n        local completion = anim.getCurrentTime(doorObj, \"death2\")\n        if completion then\n            if completion > 6.6 then\n                doorOpening = false\n            else\n                if openSoundStage == 0 and completion > 2.1 then\n                    core.sound.playSound3d(\"AB_SteamHammerStrike\", doorObj, { volume = 5 })\n                    openSoundStage = 1\n                elseif openSoundStage == 1 and completion > 3.4 then\n                    core.sound.playSound3d(\"AB_SteamHammerStrike\", doorObj, { volume = 5 })\n                    openSoundStage = 2\n                elseif openSoundStage == 2 and completion > 3.9 then\n                    core.sound.playSound3d(\"AB_SteamHammerStrike\", doorObj, { volume = 5 })\n                    openSoundStage = 3\n                elseif openSoundStage == 3 and completion > 4.6 then\n                    core.sound.playSound3d(\"AB_SteamHammerStrike\", doorObj, { volume = 5 })\n                    openSoundStage = 4\n                end\n            end\n        end\n    end\nend\nlocal function isMusuemItem(item)\n    local record = item.type.records[item.recordId]\n    local musuemRecord = item.type.records[item.recordId .. \"_x\"]\n    local isMuseumId = string.sub(item.recordId, -2) == \"_x\"\n    local nonMusuemRecord = item.type.records[string.sub(item.recordId, 1, -3)]\n\n    if record and musuemRecord then\n        return true\n    elseif isMuseumId and nonMusuemRecord then\n        return true\n    else\n        return false\n    end\nend\n\nlocal function runCheckForGold(player)\n    local count = types.Actor.inventory(player):countOf(\"gold_001\")\n    return count > 100000\nend\nlocal function runCheckForMusuem(player)\n    local objs = player.cell:getAll()\n    local validMusuemItems = 0\n    for index, npc in ipairs(objs) do\n        if isMusuemItem(npc) then\n            validMusuemItems = validMusuemItems + 1\n        end\n    end\n    for index, npc in ipairs(objs) do\n        if isMusuemItem(npc) then\n            validMusuemItems = validMusuemItems + 1\n        end\n    end\n    return validMusuemItems > 4\nend\nlocal function runCheckForKeys(player)\n    local keyCount = 0\n    for index, value in ipairs(types.Actor.inventory(player):getAll(types.Miscellaneous)) do\n        local record = types.Miscellaneous.records[value.recordId]\n        if record and record.isKey then\n            keyCount = keyCount + 1\n        end\n    end\n    return keyCount > 24\nend\nlocal function isEquipped(actor, item)\n    for index, value in pairs(types.Actor.getEquipment(actor)) do\n        if value == item then\n            return true\n        end\n    end\n    return false\nend\nlocal function runCheckForArmor(player)\n    local npcs = player.cell:getAll(types.NPC)\n    local validArmorSets = 0\n    for index, npc in ipairs(npcs) do\n        if npc ~= player then\n            local inventory = types.Actor.inventory(npc)\n            local totalValue = 0\n            for index, item in ipairs(inventory:getAll(types.Armor)) do\n                if isEquipped(npc, item) then\n                    local value = types.Armor.records[item.recordId].value\n                    validArmorSets = validArmorSets + 1\n                    totalValue = totalValue + value\n                end\n            end\n            if totalValue > 20000 then\n                validArmorSets = validArmorSets + 1\n            elseif totalValue > 0 then\n                --print(\"value\", totalValue)\n            end\n        end\n    end\n    return validArmorSets > 3\nend\n\n--zhac_carryingitems\nI.Activation.addHandlerForType(types.Activator, function(obj, actor)\n    if obj.recordId == doorButton then --or obj.recordId == \"ab_furn_shrinemephala_a\" then\n        local itemCount = types.Actor.inventory(actor):countOf(keyId)\n        local isVaultUnLocked = I.Vault_Lock.isVaultLocked()\n        if itemCount < 1 then\n            if actor.type == types.Player then\n                actor:sendEvent(\"showMessageHestatur\", \"Only the lord of Hestatur may control the vault.\")\n            end\n            return false\n        elseif not isVaultUnLocked then\n            if actor.type == types.Player then\n                actor:sendEvent(\"showMessageHestatur\", \"There are still some locks engaged, the door will not move.\")\n            end\n            return false\n        end\n        --print(isVaultUnLocked)\n        if world.mwscript.getGlobalVariables(actor)[doorStateVar] == 0 then\n            openDoor()\n        else\n            closeDoor()\n        end\n        --print(\"opening\")\n        return false\n    elseif obj.recordId == \"zhac_hestatur_vlock_01\" then\n        local canOpen = runCheckForGold(actor)\n        if canOpen then\n            world.mwscript.getGlobalVariables(actor).zhac_hest_vdoor1_state = 1\n        end\n    elseif obj.recordId == \"zhac_hestatur_vlock_02\" then\n        local canOpen = runCheckForArmor(actor)\n        if canOpen then\n            world.mwscript.getGlobalVariables(actor).zhac_hest_vdoor2_state = 1\n        end\n    elseif obj.recordId == \"zhac_hestatur_vlock_03\" then\n        local canOpen = runCheckForMusuem(actor)\n        if canOpen then\n            world.mwscript.getGlobalVariables(actor).zhac_hest_vdoor3_state = 1\n        end\n    elseif obj.recordId == \"zhac_hestatur_vlock_04\" then\n        local canOpen = runCheckForKeys(actor)\n        if canOpen then\n            world.mwscript.getGlobalVariables(actor).zhac_hest_vdoor4_state = 1\n        end\n    end\nend)\nlocal function onItemActive(item)\n    if item.recordId == \"zhac_vault_exitmarker\" then\n        item:remove()\n        async:newUnsavableSimulationTimer(openDelay, function()\n            openDoor()\n        end)\n    end\nend\nlocal function onCellChanged(data)\n    if doorClosing or doorOpening then\n        finishDoorClose()\n    end\nend\n\nreturn\n{\n    interfaceName = \"Hestatur_Vault\",\n    interface = {\n        openDoor = openDoor,\n        closeDoor = closeDoor,\n        autoClose = autoClose,\n    },\n    engineHandlers = {\n        onUpdate = onUpdate,\n        onPlayerAdded = onPlayerAdded,\n        onItemActive = onItemActive,\n    },\n    eventHandlers = {\n        goToVault = goToVault,\n        StartCutscene1 = StartCutscene1,\n        firstApproach = firstApproach,\n        checkInWhenDone = checkInWhenDone,\n        MV_onCellChange = onCellChanged,\n        skipIntroQuest = skipIntroQuest,\n    }\n}\n",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\vault_unlock.lua": "local world = require(\"openmw.world\")\nlocal I = require(\"openmw.interfaces\")\nlocal util = require(\"openmw.util\")\nlocal core = require(\"openmw.core\")\nlocal types = require(\"openmw.types\")\nlocal async = require(\"openmw.async\")\nlocal anim = require('openmw.animation')\nlocal lock1Unlocked = false\nlocal lock2Unlocked = false\nlocal lock3Unlocked = false\nlocal lock4Unlocked = false\n\nlocal vaultUnlocked = false\n\nlocal messageVault1 = \"The vault will only allow in, the Lord of Hestatur who posesses 100,000 septims.\"\nlocal messageVault2 = \"The vault will only allow in, the Lord of Hestatur who displays 4 suits of armor in this room, with great value.\"\nlocal messageVault3 = \"The vault will only allow in, the Lord of Hestatur who displays 10 artifacts, that would be displayed in a musuem.\"\nlocal messageVault3 = \"The vault will only allow in, the Lord of Hestatur who posesses 25 keys.\"\n\nlocal function checkForRing(actor)\n    local item = types.Actor.inventory():countOf(\"spok_ht_ring\")\nend\nlocal function displayPlayerMessage(plr)\n    \nend\n\nlocal function checkForVaultLock()\n    lock1Unlocked =  world.mwscript.getGlobalVariables(world.players[1]).zhac_hest_vdoor1_state == 1\n    lock2Unlocked =  world.mwscript.getGlobalVariables(world.players[1]).zhac_hest_vdoor2_state == 1\n    lock3Unlocked =  world.mwscript.getGlobalVariables(world.players[1]).zhac_hest_vdoor3_state == 1\n    lock4Unlocked =  world.mwscript.getGlobalVariables(world.players[1]).zhac_hest_vdoor4_state == 1\n    local locked = true\n    if not lock1Unlocked or not lock2Unlocked or not lock3Unlocked or not lock4Unlocked then\n        locked = false\n    end\n    return locked\nend\n\nreturn {\n    interfaceName = \"Vault_Lock\",\n    interface = {\n        isVaultLocked = function ()\n            return checkForVaultLock()\n        end\n    },\n    engineHandlers = {\n        onSave = function ()\n            return {\n                vaultUnlocked = vaultUnlocked,\n                lock1Unlocked = lock1Unlocked,\n                lock2Unlocked = lock2Unlocked,\n                lock3Unlocked = lock3Unlocked,\n                lock4Unlocked = lock4Unlocked,\n\n            }\n        end,\n        onLoad = function (data)\n            if not data then\n                return\n            end\n            vaultUnlocked = data.vaultUnlocked\n            lock1Unlocked = data.lock1Unlocked\n            lock2Unlocked = data.lock2Unlocked\n            lock3Unlocked = data.lock3Unlocked\n            lock4Unlocked = data.lock4Unlocked\n        end\n    }\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\LayerCells\\hestatur, attic.lua": "local templateLayers = require(\"scripts.Hestatur.templateLayers\")\n\nreturn {\n    camPos = {\n        {\n            position = {11.18536090850830078125, 702.06365966796875, 182.1318206787109375},\n            pitch = 0.3,\n            yaw = 3.12,\n            fov = 1.5\n        },\n        {\n            position = {-17.242824554443359375, -385.882965087890625, -42.036441802978515625},\n            pitch = 0.27,\n            yaw = 0.02,\n            fov = 1.5\n        },\n\n    },\n    rugs =templateLayers.rugs,\n    furniture = {\n        objects = {\n            \"furn_de_r_table_07\",\n            \"spok_chest_5\",\n            \"spok_chest_1\",\n            \"spok_chest_2\",\n            \"active_de_pr_bed_21\",\n            \"misc_uni_pillow_01\",\n            \"furn_de_r_table_07\",\n            \"spok_chest_5\",\n            \"active_de_pr_bed_21\",\n            \"misc_uni_pillow_01\",\n            \"furn_de_r_table_*\",\n            \"furn_com_r_chair_01\",\n            \"light_com_candle_08\",\n            \"AB_o_DeRchDeskEmpty\",\n            \"spok_chest_7\",\n            \"spok_cupboard_1\",\n            \"Furn_De_R_Bookshelf_02\",\n            \"furn_com_r_bookshelf_01\",\n            \"spok_drawers_3\",\n            \"spok_table_1\",\n            \"spok_table_2\",\n            \"furn_de_r_table_03\",\n            \"spok_chest_s2\",\n            \"spok_chest_s1\",\n            \"furn_de_r_bench_01\",\n            \"furn_de_r_wallscreen_02\",\n            \"furn_com_r_chair_01\",\n            \"furn_glassdisplaycase_01\",\n            \"furn_com_rm_barstool\",\n            \"furn_com_rm_shelf_02\",\n            \"light_com_candle_10\"\n        },\n        name = \"Furniture\",\n        price = 500\n    },\n    banners = {\n        objects = { \"furn_c_t_wizard_01\", \"furn_banner_temple_03_indoors\",\n            \"furn_banner_temple_01_indoors\",\n            \"furn_banner_temple_02_indoors\",\n            \"furn_de_bannerpost_02\" },\n        name = \"Wall Banners/Posters\",\n        price = 500\n    },\n    teleport = {\n        name = \"Teleport Orbs\",\n        objects = {\n            \"spok_ht_teleorb\",\n            \"zhac_hestatur_teleportbase\"\n        },\n        price = 500\n    },\n    sortContainers = {\n\n        dependsOn = \"furniture\",\n        objects = {\n            \"spok_k_*\",\n            \"spok_ht_sg_*\",\n            \"spok_ht_p*\",\n            \"spok_ht_scroll*\",\n            \"spok_ht_sorter\"\n        },\n        name = \"Sorting Containers\",\n        price = 500\n    },\n    mannequins = templateLayers.mannequins\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\LayerCells\\hestatur, basement hall.lua": "local templateLayers = require(\"scripts.Hestatur.templateLayers\")\n\nreturn {\n    camPos = {  },\n    rugs =templateLayers.rugs,\n    furniture = templateLayers.furniture,\n    mannequins = templateLayers.mannequins,\n    banners = templateLayers.banners,\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\LayerCells\\hestatur, bath.lua": "local templateLayers = require(\"scripts.Hestatur.templateLayers\")\n\nreturn {\n    camPos = {  },\n    rugs =templateLayers.rugs,\n    furniture = templateLayers.furniture,\n    mannequins = templateLayers.mannequins,\n    banners = templateLayers.banners,\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\LayerCells\\hestatur, chapel.lua": "local templateLayers = require(\"scripts.Hestatur.templateLayers\")\n\nreturn {\n    camPos = {\n        {\n            position = {11.18536090850830078125, 702.06365966796875, 182.1318206787109375},\n            pitch = 0.3,\n            yaw = 3.12,\n            fov = 1.5\n        },\n        {\n            position = {-17.242824554443359375, -385.882965087890625, -42.036441802978515625},\n            pitch = 0.27,\n            yaw = 0.02,\n            fov = 1.5\n        },\n\n    },\n    paintings = templateLayers.paintings,\n    rugs =templateLayers.rugs,\n    furniture = {\n        objects = {\n            \"furn_de_r_table_07\",\n            \"spok_chest_5\",\n            \"spok_chest_1\",\n            \"spok_chest_2\",\n            \"active_de_pr_bed_21\",\n            \"misc_uni_pillow_01\",\n            \"furn_de_r_table_07\",\n            \"spok_chest_5\",\n            \"active_de_pr_bed_21\",\n            \"misc_uni_pillow_01\",\n            \"furn_de_r_table_*\",\n            \"furn_com_r_chair_01\",\n            \"light_com_candle_08\",\n            \"AB_o_DeRchDeskEmpty\",\n            \"spok_chest_7\",\n            \"spok_cupboard_1\",\n            \"Furn_De_R_Bookshelf_02\",\n            \"furn_com_r_bookshelf_01\",\n            \"spok_drawers_3\",\n            \"spok_table_1\",\n            \"spok_table_2\",\n            \"furn_de_r_table_03\",\n            \"spok_chest_s2\",\n            \"spok_chest_s1\",\n            \"furn_de_r_bench_01\",\n            \"furn_de_r_wallscreen_02\",\n            \"furn_com_r_chair_01\",\n            \"furn_glassdisplaycase_01\",\n            \"furn_com_rm_barstool\",\n            \"furn_com_rm_shelf_02\",\n            \"light_com_candle_10\"\n        },\n        name = \"Furniture\",\n        price = 500\n    },\n    banners = templateLayers.banners,\n    mannequins = templateLayers.mannequins\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\LayerCells\\hestatur, east basement hallway.lua": "local templateLayers = require(\"scripts.Hestatur.templateLayers\")\n\nreturn {\n    camPos = {\n\n    },\n    rugs =templateLayers.rugs,\n    banners = templateLayers.banners,\n    furniture = templateLayers.furniture,\n    mannequins = templateLayers.mannequins,\n    paintings = templateLayers.paintings,\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\LayerCells\\hestatur, entry hall.lua": "local templateLayers = require(\"scripts.Hestatur.templateLayers\")\n\nreturn {\n    camPos = {\n    },\n    rugs =templateLayers.rugs,\n    furniture = templateLayers.furniture,\n    banners = templateLayers.banners,\n    mannequins = templateLayers.mannequins,\n    paintings = templateLayers.paintings,\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\LayerCells\\hestatur, feast hall.lua": "local templateLayers = require(\"scripts.Hestatur.templateLayers\")\n\nreturn {\n    camPos = {\n        {\n            position = {11.18536090850830078125, 702.06365966796875, 182.1318206787109375},\n            pitch = 0.3,\n            yaw = 3.12,\n            fov = 1.5\n        },\n        {\n            position = {-17.242824554443359375, -385.882965087890625, -42.036441802978515625},\n            pitch = 0.27,\n            yaw = 0.02,\n            fov = 1.5\n        },\n\n    },\n    rugs =templateLayers.rugs,\n    paintings = templateLayers.paintings,\n    music = {\nobjects = {\n    \"spok_dgl_gong_01\",\n    \"spok_dgl_marimba_01\",\n    \"spok_dgl_drum*\",\n    \"misc_mallet_01\",\n    \"spok_dgl_harpsichord_01\",\n    \"spok_dgl_harp_01\",\n    \"misc_music_*\",\n}\n,\nname = \"Musical Items\",\nprice = 1500\n    },\n   \n    furniture = templateLayers.furniture,\n    banners = templateLayers.banners,\n    mannequins = templateLayers.mannequins\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\LayerCells\\hestatur, gallery.lua": "local templateLayers = require(\"scripts.Hestatur.templateLayers\")\n\nreturn {\n    camPos = {\n        {\n            position = {11.18536090850830078125, 702.06365966796875, 182.1318206787109375},\n            pitch = 0.3,\n            yaw = 3.12,\n            fov = 1.5\n        },\n        {\n            position = {-17.242824554443359375, -385.882965087890625, -42.036441802978515625},\n            pitch = 0.27,\n            yaw = 0.02,\n            fov = 1.5\n        },\n\n    },\n    rugs =templateLayers.rugs,\n    furniture = templateLayers.furniture,\n    banners = templateLayers.banners,\n    mannequins = templateLayers.mannequins\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\LayerCells\\hestatur, guest rooms.lua": "local templateLayers = require(\"scripts.Hestatur.templateLayers\")\n\nreturn {\n    camPos = {\n        {\n            position = {11.18536090850830078125, 702.06365966796875, 182.1318206787109375},\n            pitch = 0.3,\n            yaw = 3.12,\n            fov = 1.5\n        },\n        {\n            position = {-17.242824554443359375, -385.882965087890625, -42.036441802978515625},\n            pitch = 0.27,\n            yaw = 0.02,\n            fov = 1.5\n        },\n\n    },\n    banners = templateLayers.banners,\n    rugs =templateLayers.rugs,\n    furniture = {\n        objects = {\n            \"furn_de_r_table_07\",\n            \"spok_chest_5\",\n            \"spok_chest_1\",\n            \"spok_chest_2\",\n            \"active_de_pr_bed_21\",\n            \"misc_uni_pillow_01\",\n            \"furn_de_r_table_07\",\n            \"spok_chest_5\",\n            \"active_de_pr_bed_21\",\n            \"misc_uni_pillow_01\",\n            \"furn_de_r_table_*\",\n            \"furn_com_r_chair_01\",\n            \"light_com_candle_08\",\n            \"AB_o_DeRchDeskEmpty\",\n            \"spok_chest_7\",\n            \"spok_cupboard_1\",\n            \"Furn_De_R_Bookshelf_02\",\n            \"furn_com_r_bookshelf_01\",\n            \"spok_drawers_3\",\n            \"spok_table_1\",\n            \"spok_table_2\",\n            \"furn_de_r_table_03\",\n            \"spok_chest_s2\",\n            \"spok_chest_s1\",\n            \"furn_de_r_bench_01\",\n            \"furn_de_r_wallscreen_02\",\n            \"furn_com_r_chair_01\",\n            \"furn_glassdisplaycase_01\",\n            \"furn_com_rm_barstool\",\n            \"furn_com_rm_shelf_02\",\n            \"light_com_candle_10\"\n        },\n        name = \"Furniture\",\n        price = 500\n    },\n    paintings = templateLayers.paintings,\n    teleport = {\n        name = \"Teleport Orbs\",\n        objects = {\n            \"spok_ht_teleorb\",\n            \"zhac_hestatur_teleportbase\"\n        },\n        price = 500\n    },\n    sortContainers = {\n\n        dependsOn = \"furniture\",\n        objects = {\n            \"spok_k_*\",\n            \"spok_ht_sg_*\",\n            \"spok_ht_p*\",\n            \"spok_ht_scroll*\",\n            \"spok_ht_sorter\"\n        },\n        name = \"Sorting Containers\",\n        price = 500\n    },\n    mannequins = templateLayers.mannequins\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\LayerCells\\hestatur, service area.lua": "local templateLayers = require(\"scripts.Hestatur.templateLayers\")\n\nreturn {\n    camPos = {\n\n    },\n    rugs =templateLayers.rugs,\n    paintings = templateLayers.paintings,\n    furniture = templateLayers.furniture,\n    mannequins = templateLayers.mannequins,\n    banners = templateLayers.banners,\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\LayerCells\\hestatur, south wall.lua": "local templateLayers = require(\"scripts.Hestatur.templateLayers\")\n\nreturn {\n    camPos = {  },\n    rugs =templateLayers.rugs,\n    furniture = templateLayers.furniture,\n    banners = templateLayers.banners,\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\LayerCells\\hestatur, treasury vault.lua": "local templateLayers = require(\"scripts.Hestatur.templateLayers\")\n\nreturn {\n    camPos = {  },\n    rugs =templateLayers.rugs,\n    furniture = templateLayers.furniture,\n    banners = templateLayers.banners,\n}",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\sortData\\spokDatak.lua": "local scrollData = {\n    -- Table 1 entries\n    { item = \"misc_soulgem_grand\", container = \"spok_ht_sg_grand\" },\n    { item = \"misc_soulgem_common\", container = \"spok_ht_sg_common\" },\n    { item = \"misc_soulgem_greater\", container = \"spok_ht_sg_greater\" },\n    { item = \"misc_soulgem_petty\", container = \"spok_ht_sg_petty\" },\n    { item = \"misc_soulgem_lesser\", container = \"spok_ht_sg_lesser\" },\n    { item = \"sc_almsiviintervention\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_alvusiaswarping\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_argentglow\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_balefulsuffering\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_blackdeath\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_blackdespair\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_blackfate\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_blackmind\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_blackscorn\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_blacksloth\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_blackstorm\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_blackweakness\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_bloodfire\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_bloodthief\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_brevasavertedeyes\", container = \"spok_ht_scrolls_i\" },\n    { item = \"sc_celerity\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_corruptarcanix\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_cureblight_ranged\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_daerirsmiracle\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_dawnsprite\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_daydenespanacea\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_daynarsairybubble\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_dedresmasterfuleye\", container = \"spok_ht_scrolls_i\" },\n    { item = \"sc_didalasknack\", container = \"spok_ht_scrolls_c\" },\n    { item = \"sc_divineintervention\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_drathissoulrot\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_drathiswinterguest\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_ekashslocksplitter\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_elementalburstfire\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_elementalburstfrost\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_elementalburstshock\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_elevramssty\", container = \"spok_ht_scrolls_i\" },\n    { item = \"sc_fadersleadenflesh\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_feldramstrepidation\", container = \"spok_ht_scrolls_i\" },\n    { item = \"sc_fiercelyroastthyenemy_unique\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_fifthbarrier\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_firstbarrier\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_flamebane\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_flameguard\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_fourthbarrier\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_fphyggisgemfeeder\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_frostbane\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_frostguard\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_galmsesseal\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_gamblersprayer\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_golnaraseyemaze\", container = \"spok_ht_scrolls_i\" },\n    { item = \"sc_gonarsgoad\", container = \"spok_ht_scrolls_i\" },\n    { item = \"sc_greaterdomination\", container = \"spok_ht_scrolls_c\" },\n    { item = \"sc_greydeath\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_greydespair\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_greyfate\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_greymind\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_greyscorn\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_greysloth\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_greyweakness\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_healing\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_heartwise\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_hellfire\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_icarianflight\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_illneasbreath\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_inaschastening\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_inasismysticfinger\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_insight\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_invisibility\", container = \"spok_ht_scrolls_i\" },\n\n    -- Table 2 entries\n    { item = \"sc_chridittepanacea\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_bodily_restoration\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_savagetyranny\", container = \"spok_ht_scrolls_c\" },\n    { item = \"sc_hiddenkiller\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_chappy_sniper_test\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_leaguestep\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_lesserdomination\", container = \"spok_ht_scrolls_c\" },\n    { item = \"sc_llirosglowingeye\", container = \"spok_ht_scrolls_i\" },\n    { item = \"sc_lordmhasvengeance\", container = \"spok_ht_scrolls_c\" },\n    { item = \"sc_mageseye\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_mageweal\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_manarape\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_mark\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_messengerscroll\", container = \"spok_ht_scrolls_c\" },\n    { item = \"sc_mindfeeder\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_mondensinstigator\", container = \"spok_ht_scrolls_i\" },\n    { item = \"sc_nerusislockjaw\", container = \"spok_ht_scrolls_i\" },\n    { item = \"sc_ninthbarrier\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_oathfast\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_ondusisunhinging\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_princeovsbrightball\", container = \"spok_ht_scrolls_i\" },\n    { item = \"sc_psychicprison\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_purityofbody\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_radiyasicymask\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_radrenesspellbreaker\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_reddeath\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_reddespair\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_redfate\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_redmind\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_redscorn\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_redsloth\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_redweakness\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_restoration\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_reynosbeastfinder\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_reynosfins\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_salensvivication\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_savagemight\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_secondbarrier\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_selisfieryward\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_selynsmistslippers\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_sertisesporphyry\", container = \"spok_ht_scrolls_i\" },\n    { item = \"sc_shockbane\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_shockguard\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_sixthbarrier\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_stormward\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_summondaedroth_hto\", container = \"spok_ht_scrolls_c\" },\n    { item = \"sc_summonflameatronach\", container = \"spok_ht_scrolls_c\" },\n    { item = \"sc_summonfrostatronach\", container = \"spok_ht_scrolls_c\" },\n    { item = \"sc_summongoldensaint\", container = \"spok_ht_scrolls_c\" },\n    { item = \"sc_summonskeletalservant\", container = \"spok_ht_scrolls_c\" },\n    { item = \"sc_supremedomination\", container = \"spok_ht_scrolls_c\" },\n    { item = \"sc_taldamsscorcher\", container = \"spok_ht_scrolls_d\" },\n    { item = \"sc_telvinscourage\", container = \"spok_ht_scrolls_i\" },\n    { item = \"sc_tendilstrembling\", container = \"spok_ht_scrolls_i\" },\n    { item = \"sc_tevilspeace\", container = \"spok_ht_scrolls_i\" },\n    { item = \"sc_tevralshawkshaw\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_thirdbarrier\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_tinurshoptoad\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_toususabidingbeast\", container = \"spok_ht_scrolls_i\" },\n    { item = \"sc_tranasasspellmire\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_tranasasspelltrap\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_tranasasspelltwist\", container = \"spok_ht_scrolls_m\" },\n    { item = \"sc_ulmjuicedasfeather\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_uthshandofheaven\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_vaerminaspromise\", container = \"spok_ht_scrolls_i\" },\n    { item = \"sc_vigor\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_vitality\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_warriorsblessing\", container = \"spok_ht_scrolls_r\" },\n    { item = \"sc_windform\", container = \"spok_ht_scrolls_a\" },\n    { item = \"sc_windwalker\", container = \"spok_ht_scrolls_a\" },\n}\n\nlocal ingredient_container_pairs = {\n    { item = \"ingred_alit_hide_01\", container = \"spok_k_alit_hide\" },\n    { item = \"ingred_bc_ampoule_pod\", container = \"spok_k_ampoule_pod\" },\n    { item = \"ingred_ash_salts_01\", container = \"spok_k_ash_salts\" },\n    { item = \"ingred_ash_yam_01\", container = \"spok_k_ash_yam\" },\n    { item = \"ingred_bittergreen_petals_01\", container = \"spok_k_bittergreen\" },\n    { item = \"ingred_black_anther_01\", container = \"spok_k_black_anther\" },\n    { item = \"ingred_black_lichen_01\", container = \"spok_k_black_lichen\" },\n    { item = \"ingred_bloat_01\", container = \"spok_k_bloat\" },\n    { item = \"ingred_bonemeal_01\", container = \"spok_k_bonemeal\" },\n    { item = \"ingred_bread_01\", container = \"spok_k_bread\" },\n    { item = \"ingred_bc_bungler's_bane\", container = \"spok_k_bunglers_bane\" },\n    { item = \"ingred_chokeweed_01\", container = \"spok_k_chokeweed\" },\n    { item = \"ingred_bc_coda_flower\", container = \"spok_k_coda_flower\" },\n    { item = \"ingred_comberry_01\", container = \"spok_k_comberry\" },\n    { item = \"ingred_corkbulb_root_01\", container = \"spok_k_corkbulb_root\" },\n    { item = \"ingred_6th_corprusmeat_01\", container = \"spok_k_corprus_meat\" },\n    { item = \"ingred_6th_corprusmeat_02\", container = \"spok_k_corprus_meat\" },\n    { item = \"ingred_6th_corprusmeat_03\", container = \"spok_k_corprus_meat\" },\n    { item = \"ingred_6th_corprusmeat_04\", container = \"spok_k_corprus_meat\" },\n    { item = \"ingred_6th_corprusmeat_05\", container = \"spok_k_corprus_meat\" },\n    { item = \"ingred_6th_corprusmeat_06\", container = \"spok_k_corprus_meat\" },\n    { item = \"ingred_6th_corprusmeat_07\", container = \"spok_k_corprus_meat\" },\n    { item = \"ingred_corprus_weepings_01\", container = \"spok_k_corprus_weepings\" },\n    { item = \"ingred_crab_meat_01\", container = \"spok_k_crab_meat\" },\n    { item = \"ingred_daedra_skin_01\", container = \"spok_k_daedra_skin\" },\n    { item = \"ingred_daedras_heart_01\", container = \"spok_k_daedras_heart\" },\n    { item = \"ingred_diamond_01\", container = \"spok_k_diamond\" },\n    { item = \"ingred_dreugh_wax_01\", container = \"spok_k_dreugh_wax\" },\n    { item = \"ingred_ectoplasm_01\", container = \"spok_k_ectoplasm\" },\n    { item = \"ingred_emerald_01\", container = \"spok_k_emerald\" },\n    { item = \"ingred_fire_petal_01\", container = \"spok_k_fire_petals\" },\n    { item = \"ingred_fire_salts_01\", container = \"spok_k_fire_salts\" },\n    { item = \"ingred_frost_salts_01\", container = \"spok_k_frost_salts\" },\n    { item = \"ingred_ghoul_heart_01\", container = \"spok_k_ghoul_heart\" },\n    { item = \"ingred_gold_kanet_01\", container = \"spok_k_gold_kanet\" },\n    { item = \"ingred_gravedust_01\", container = \"spok_k_gravedust\" },\n    { item = \"ingred_green_lichen_01\", container = \"spok_k_green_lichen\" },\n    { item = \"ingred_guar_hide_01\", container = \"spok_k_guar_hide\" },\n    { item = \"ingred_hackle-lo_leaf_01\", container = \"spok_k_hackle_lo\" },\n    { item = \"ingred_heather_01\", container = \"spok_k_heather\" },\n    { item = \"ingred_hound_meat_01\", container = \"spok_k_hound_meat\" },\n    { item = \"ingred_human_meat_01\", container = \"spok_k_human_flesh\" },\n    { item = \"ingred_bc_hypha_facia\", container = \"spok_k_hypha_facia\" },\n    { item = \"ingred_kagouti_hide_01\", container = \"spok_k_kagouti_hide\" },\n    { item = \"ingred_kresh_fiber_01\", container = \"spok_k_kresh_fiber\" },\n    { item = \"ingred_kwama_cuttle_01\", container = \"spok_k_kwama_cuttle\" },\n    { item = \"food_kwama_egg_02\", container = \"spok_k_large_kwama_egg\" },\n    { item = \"ingred_russula_01\", container = \"spok_k_luminous_russula\" },\n    { item = \"ingred_marshmerrow_01\", container = \"spok_k_marshmerrow\" },\n    { item = \"ingred_scrib_jelly_02\", container = \"spok_k_scrib_jelly\" },\n    { item = \"ingred_moon_sugar_01\", container = \"spok_k_moon_sugar\" },\n    { item = \"ingred_muck_01\", container = \"spok_k_muck\" },\n    { item = \"ingred_netch_leather_01\", container = \"spok_k_netch_leather\" },\n    { item = \"ingred_pearl_01\", container = \"spok_k_pearl\" },\n    { item = \"poison_goop00\", container = \"spok_k_poison\" },\n    { item = \"ingred_racer_plumes_01\", container = \"spok_k_racer_plumes\" },\n    { item = \"ingred_rat_meat_01\", container = \"spok_k_rat_meat\" },\n    { item = \"ingred_raw_ebony_01\", container = \"spok_k_raw_ebony\" },\n    { item = \"ingred_raw_glass_01\", container = \"spok_k_raw_glass\" },\n    { item = \"ingred_red_lichen_01\", container = \"spok_k_red_lichen\" },\n    { item = \"ingred_resin_01\", container = \"spok_k_resin\" },\n    { item = \"ingred_gold_kanet_unique\", container = \"spok_k_gold_kanet\" },\n    { item = \"ingred_roobrush_01\", container = \"spok_k_roobrush\" },\n    { item = \"ingred_ruby_01\", container = \"spok_k_ruby\" },\n    { item = \"ingred_saltrice_01\", container = \"spok_k_saltrice\" },\n    { item = \"ingred_scales_01\", container = \"spok_k_scales\" },\n    { item = \"ingred_scamp_skin_01\", container = \"spok_k_scamp_skin\" },\n    { item = \"ingred_scathecraw_01\", container = \"spok_k_scathecraw\" },\n    { item = \"ingred_scrap_metal_01\", container = \"spok_k_scrap_metal\" },\n    { item = \"ingred_scrib_jelly_01\", container = \"spok_k_scrib_jelly\" },\n    { item = \"ingred_scrib_jerky_01\", container = \"spok_k_scrib_jerky\" },\n    { item = \"ingred_scuttle_01\", container = \"spok_k_scuttle\" },\n    { item = \"ingred_shalk_resin_01\", container = \"spok_k_shalk_resin\" },\n    { item = \"ingred_sload_soap_01\", container = \"spok_k_sload_soap\" },\n    { item = \"food_kwama_egg_01\", container = \"spok_k_small_kwama_egg\" },\n    { item = \"ingred_bc_spore_pod\", container = \"spok_k_spore_pod\" },\n    { item = \"ingred_stoneflower_petals_01\", container = \"spok_k_stoneflower\" },\n    { item = \"ingred_trama_root_01\", container = \"spok_k_trama_root\" },\n    { item = \"ingred_vampire_dust_01\", container = \"spok_k_vampire_dust\" },\n    { item = \"ingred_coprinus_01\", container = \"spok_k_violet_coprinus\" },\n    { item = \"ingred_void_salts_01\", container = \"spok_k_void_salts\" },\n    { item = \"ingred_wickwheat_01\", container = \"spok_k_wickwheat\" },\n    { item = \"ingred_willow_anther_01\", container = \"spok_k_willow_anther\" },  \n      -- Tribunal (Mournhold) ingredients\n    { item = \"ingred_adamantium_ore_01\", container = \"spok_k_adamantium_ore\" },\n    { item = \"ingred_durzog_meat_01\", container = \"spok_k_durzog_meat\" },\n    { item = \"ingred_golden_sedge_01\", container = \"spok_k_golden_sedge\" },\n    { item = \"ingred_horn_lily_bulb_01\", container = \"spok_k_horn_lily_bulb\" },\n    { item = \"ingred_lloramor_spines_01\", container = \"spok_k_lloramor_spines\" },\n    { item = \"ingred_meadow_rye_01\", container = \"spok_k_meadow_rye\" },\n    { item = \"ingred_nirthfly_stalks_01\", container = \"spok_k_nirthfly_stalks\" },\n    { item = \"ingred_noble_sedge_01\", container = \"spok_k_noble_sedge\" },\n    { item = \"ingred_scrib_cabbage_01\", container = \"spok_k_scrib_cabbage\" },\n    { item = \"ingred_sweetpulp_01\", container = \"spok_k_sweetpulp\" },\n    { item = \"ingred_timsa-come-by_01\", container = \"spok_k_timsa_come_by\" },\n\n    -- Bloodmoon (Solstheim) ingredients\n    { item = \"ingred_bear_pelt\", container = \"spok_k_bear_pelt\" },\n    { item = \"ingred_boar_leather\", container = \"spok_k_bristleback\" },\n    { item = \"ingred_eyeball\", container = \"spok_k_grahl_eyeball\" },\n    { item = \"ingred_gravetar_01\", container = \"spok_k_gravetar\" },\n    { item = \"ingred_heartwood_01\", container = \"spok_k_heartwood\" },\n    { item = \"ingred_holly_01\", container = \"spok_k_holly_berries\" },\n    { item = \"ingred_horker_tusk_01\", container = \"spok_k_horker_tusk\" },\n    { item = \"ingred_raw_Stalhrim_01\", container = \"spok_k_raw_stalhrim\" },\n    { item = \"ingred_belladonna_01\", container = \"spok_k_ripened_belladon\" },\n    { item = \"ingred_snowbear_pelt_unique\", container = \"spok_k_snow_bear_pelt\" },\n    { item = \"ingred_snowwolf_pelt_unique\", container = \"spok_k_snow_wolf_pelt\" },\n    { item = \"ingred_belladonna_02\", container = \"spok_k_unripened_bella\" },\n    { item = \"ingred_wolf_pelt\", container = \"spok_k_wolf_pelt\" },\n    { item = \"ingred_wolfsbane_01\", container = \"spok_k_wolfsbane_petals\" }\n\n}\n\nlocal potionLs = {\n    -- Bargain HFM\n    { item = \"p_fortify_fatigue_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_fortify_health_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_fortify_magicka_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_restore_fatigue_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_restore_health_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_restore_magicka_b\", container = \"spok_ht_pb_all\" },\n    \n    -- Cheap HFM\n    { item = \"p_fortify_fatigue_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_fortify_health_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_fortify_magicka_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_restore_fatigue_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_restore_health_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_restore_magicka_c\", container = \"spok_ht_pc_all\" },\n    \n    -- Standard HFM\n    { item = \"p_fortify_fatigue_s\", container = \"spok_ht_ps_hfm\" },\n    { item = \"p_fortify_health_s\", container = \"spok_ht_ps_hfm\" },\n    { item = \"p_fortify_magicka_s\", container = \"spok_ht_ps_hfm\" },\n    { item = \"p_restore_fatigue_s\", container = \"spok_ht_ps_hfm\" },\n    { item = \"p_restore_health_s\", container = \"spok_ht_ps_hfm\" },\n    { item = \"p_restore_magicka_s\", container = \"spok_ht_ps_hfm\" },\n    \n    -- Quality HFM\n    { item = \"p_fortify_fatigue_q\", container = \"spok_ht_pq_hfm\" },\n    { item = \"p_fortify_health_q\", container = \"spok_ht_pq_hfm\" },\n    { item = \"p_fortify_magicka_q\", container = \"spok_ht_pq_hfm\" },\n    { item = \"p_restore_fatigue_q\", container = \"spok_ht_pq_hfm\" },\n    { item = \"p_restore_health_q\", container = \"spok_ht_pq_hfm\" },\n    { item = \"p_restore_magicka_q\", container = \"spok_ht_pq_hfm\" },\n    \n    -- Exclusive HFM\n    { item = \"p_fortify_fatigue_e\", container = \"spok_ht_pe_hfm\" },\n    { item = \"p_fortify_health_e\", container = \"spok_ht_pe_hfm\" },\n    { item = \"p_fortify_magicka_e\", container = \"spok_ht_pe_hfm\" },\n    { item = \"p_restore_fatigue_e\", container = \"spok_ht_pe_hfm\" },\n    { item = \"p_restore_health_e\", container = \"spok_ht_pe_hfm\" },\n    { item = \"p_restore_magicka_e\", container = \"spok_ht_pe_hfm\" },\n    \n    -- Bargain Attributes\n    { item = \"p_fortify_agility_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_fortify_endurance_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_fortify_intelligence_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_fortify_luck_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_fortify_personality_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_fortify_speed_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_fortify_strength_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_fortify_willpower_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_restore_agility_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_restore_endurance_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_restore_intelligence_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_restore_luck_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_restore_personality_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_restore_speed_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_restore_strength_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_restore_willpower_b\", container = \"spok_ht_pb_all\" },\n    \n    -- Cheap Attributes\n    { item = \"p_fortify_agility_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_fortify_endurance_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_fortify_intelligence_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_fortify_luck_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_fortify_personality_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_fortify_speed_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_fortify_strength_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_fortify_willpower_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_restore_agility_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_restore_endurance_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_restore_intelligence_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_restore_luck_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_restore_personality_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_restore_speed_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_restore_strength_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_restore_willpower_c\", container = \"spok_ht_pc_all\" },\n    \n    -- Standard Attributes\n    { item = \"p_fortify_agility_s\", container = \"spok_ht_ps_attr\" },\n    { item = \"p_fortify_endurance_s\", container = \"spok_ht_ps_attr\" },\n    { item = \"p_fortify_intelligence_s\", container = \"spok_ht_ps_attr\" },\n    { item = \"p_fortify_luck_s\", container = \"spok_ht_ps_attr\" },\n    { item = \"p_fortify_personality_s\", container = \"spok_ht_ps_attr\" },\n    { item = \"p_fortify_speed_s\", container = \"spok_ht_ps_attr\" },\n    { item = \"p_fortify_strength_s\", container = \"spok_ht_ps_attr\" },\n    { item = \"p_fortify_willpower_s\", container = \"spok_ht_ps_attr\" },\n    { item = \"p_restore_agility_s\", container = \"spok_ht_ps_attr\" },\n    { item = \"p_restore_endurance_s\", container = \"spok_ht_ps_attr\" },\n    { item = \"p_restore_intelligence_s\", container = \"spok_ht_ps_attr\" },\n    { item = \"p_restore_luck_s\", container = \"spok_ht_ps_attr\" },\n    { item = \"p_restore_personality_s\", container = \"spok_ht_ps_attr\" },\n    { item = \"p_restore_speed_s\", container = \"spok_ht_ps_attr\" },\n    { item = \"p_restore_strength_s\", container = \"spok_ht_ps_attr\" },\n    { item = \"p_restore_willpower_s\", container = \"spok_ht_ps_attr\" },\n    \n    -- Quality Attributes\n    { item = \"p_fortify_agility_q\", container = \"spok_ht_pq_attr\" },\n    { item = \"p_fortify_endurance_q\", container = \"spok_ht_pq_attr\" },\n    { item = \"p_fortify_intelligence_q\", container = \"spok_ht_pq_attr\" },\n    { item = \"p_fortify_luck_q\", container = \"spok_ht_pq_attr\" },\n    { item = \"p_fortify_personality_q\", container = \"spok_ht_pq_attr\" },\n    { item = \"p_fortify_speed_q\", container = \"spok_ht_pq_attr\" },\n    { item = \"p_fortify_strength_q\", container = \"spok_ht_pq_attr\" },\n    { item = \"p_fortify_willpower_q\", container = \"spok_ht_pq_attr\" },\n    { item = \"p_restore_agility_q\", container = \"spok_ht_pq_attr\" },\n    { item = \"p_restore_endurance_q\", container = \"spok_ht_pq_attr\" },\n    { item = \"p_restore_intelligence_q\", container = \"spok_ht_pq_attr\" },\n    { item = \"p_restore_luck_q\", container = \"spok_ht_pq_attr\" },\n    { item = \"p_restore_personality_q\", container = \"spok_ht_pq_attr\" },\n    { item = \"p_restore_speed_q\", container = \"spok_ht_pq_attr\" },\n    { item = \"p_restore_strength_q\", container = \"spok_ht_pq_attr\" },\n    { item = \"p_restore_willpower_q\", container = \"spok_ht_pq_attr\" },\n\n    { item = \"p_fortify_agility_e\", container = \"spok_ht_pe_attr\" },\n    { item = \"p_fortify_endurance_e\", container = \"spok_ht_pe_attr\" },\n    { item = \"p_fortify_intelligence_e\", container = \"spok_ht_pe_attr\" },\n    { item = \"p_fortify_luck_e\", container = \"spok_ht_pe_attr\" },\n    { item = \"p_fortify_personality_e\", container = \"spok_ht_pe_attr\" },\n    { item = \"p_fortify_speed_e\", container = \"spok_ht_pe_attr\" },\n    { item = \"p_fortify_strength_e\", container = \"spok_ht_pe_attr\" },\n    { item = \"p_fortify_willpower_e\", container = \"spok_ht_pe_attr\" },\n    { item = \"p_restore_agility_e\", container = \"spok_ht_pe_attr\" },\n    { item = \"p_restore_endurance_e\", container = \"spok_ht_pe_attr\" },\n    { item = \"p_restore_intelligence_e\", container = \"spok_ht_pe_attr\" },\n    { item = \"p_restore_luck_e\", container = \"spok_ht_pe_attr\" },\n    { item = \"p_restore_personality_e\", container = \"spok_ht_pe_attr\" },\n    { item = \"p_restore_speed_e\", container = \"spok_ht_pe_attr\" },\n    { item = \"p_restore_strength_e\", container = \"spok_ht_pe_attr\" },\n    { item = \"p_restore_willpower_e\", container = \"spok_ht_pe_attr\" },\n\n    -- Flying\n    { item = \"p_levitation_b\", container = \"spok_ht_px_fly\" },\n    { item = \"p_levitation_c\", container = \"spok_ht_px_fly\" },\n    { item = \"p_levitation_s\", container = \"spok_ht_px_fly\" },\n    { item = \"p_levitation_q\", container = \"spok_ht_px_fly\" },\n    { item = \"p_levitation_e\", container = \"spok_ht_px_fly\" },\n\n    -- Cure\n    { item = \"p_cure_blight_s\", container = \"spok_ht_px_cure\" },\n    { item = \"p_cure_common_s\", container = \"spok_ht_px_cure\" },\n    { item = \"p_cure_paralyzation_s\", container = \"spok_ht_px_cure\" },\n    { item = \"p_cure_poison_s\", container = \"spok_ht_px_cure\" },\n\n    -- Water\n    { item = \"p_water_breathing_s\", container = \"spok_ht_px_water\" },\n    { item = \"p_water_walking_s\", container = \"spok_ht_px_water\" },\n\n    -- Common etc\n    { item = \"p_almsivi_intervention_s\", container = \"spok_ht_px_etc\" },\n    { item = \"p_detect_creatures_s\", container = \"spok_ht_px_etc\" },\n    { item = \"p_detect_enchantment_s\", container = \"spok_ht_px_etc\" },\n    { item = \"p_detect_key_s\", container = \"spok_ht_px_etc\" },\n    { item = \"p_dispel_s\", container = \"spok_ht_px_etc\" },\n    { item = \"p_mark_s\", container = \"spok_ht_px_etc\" },\n    { item = \"p_recall_s\", container = \"spok_ht_px_etc\" },\n    { item = \"p_slowfall_s\", container = \"spok_ht_px_etc\" },\n    { item = \"p_telekinesis_s\", container = \"spok_ht_px_etc\" },\n\n    -- Fire Resistance\n    { item = \"p_fire_resistance_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_fire_resistance_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_fire_resistance_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_fire_resistance_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_fire_resistance_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Fire Shield\n    { item = \"p_fire_shield_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_fire_shield_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_fire_shield_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_fire_shield_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_fire_shield_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Frost Resistance\n    { item = \"p_frost_resistance_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_frost_resistance_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_frost_resistance_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_frost_resistance_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_frost_resistance_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Frost Shield\n    { item = \"p_frost_shield_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_frost_shield_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_frost_shield_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_frost_shield_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_frost_shield_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Shock Resistance\n    { item = \"p_shock_resistance_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_shock_resistance_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_shock_resistance_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_shock_resistance_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_shock_resistance_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Lightning Shield\n    { item = \"p_lightning shield_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_lightning shield_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_lightning shield_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_lightning shield_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_lightning shield_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Disease Resistance\n    { item = \"p_disease_resistance_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_disease_resistance_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_disease_resistance_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_disease_resistance_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_disease_resistance_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Magicka Resistance\n    { item = \"p_magicka_resistance_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_magicka_resistance_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_magicka_resistance_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_magicka_resistance_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_magicka_resistance_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Poison Resistance\n    { item = \"p_poison_resistance_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_poison_resistance_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_poison_resistance_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_poison_resistance_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_poison_resistance_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Quality Drain Attributes and Single Extras\n    { item = \"p_fortify_attack_e\", container = \"spok_ht_pe_etc\" },\n    { item = \"p_drain_agility_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_drain_endurance_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_drain_intelligence_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_drain_luck_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_drain_magicka_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_drain_personality_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_drain_speed_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_drain_strength_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_drain willpower_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_burden_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_burden_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_burden_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_burden_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_burden_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Chameleon\n    { item = \"p_chameleon_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_chameleon_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_chameleon_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_chameleon_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_chameleon_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Invisibility\n    { item = \"p_invisibility_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_invisibility_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_invisibility_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_invisibility_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_invisibility_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Jump\n    { item = \"p_jump_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_jump_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_jump_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_jump_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_jump_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Light\n    { item = \"p_light_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_light_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_light_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_light_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_light_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Night-Eye\n    { item = \"p_night-eye_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_night-eye_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_night-eye_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_night-eye_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_night-eye_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Paralyze\n    { item = \"p_paralyze_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_paralyze_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_paralyze_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_paralyze_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_paralyze_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Reflect\n    { item = \"p_reflection_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_reflection_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_reflection_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_reflection_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_reflection_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Silence\n    { item = \"p_silence_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_silence_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_silence_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_silence_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_silence_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Spell Absorption\n    { item = \"p_spell_absorption_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_spell_absorption_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_spell_absorption_s\", container = \"spok_ht_ps_etc\" },\n    { item = \"p_spell_absorption_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_spell_absorption_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Feather\n    { item = \"p_feather_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_feather_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_feather_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_feather_e\", container = \"spok_ht_pe_etc\" },\n\n    -- Swift Swim\n    { item = \"p_swift_swim_b\", container = \"spok_ht_pb_all\" },\n    { item = \"p_swift_swim_c\", container = \"spok_ht_pc_all\" },\n    { item = \"p_swift_swim_q\", container = \"spok_ht_pq_etc\" },\n    { item = \"p_swift_swim_e\", container = \"spok_ht_pe_etc\" },\n\n\n}\nreturn { scrollData = scrollData, ingredient_container_pairs = ingredient_container_pairs, potionLs = potionLs }",
    "Spok's Castle Hestatur - Expanded-55054-1-0-1722570395\\scripts\\Hestatur\\util\\sorter.lua": "local util = require(\"openmw.util\")\nlocal world = require(\"openmw.world\")\nlocal types = require(\"openmw.types\")\nlocal core = require(\"openmw.core\")\nlocal storage = require(\"openmw.storage\")\nlocal I = require(\"openmw.interfaces\")\nlocal sorterData = {}\nlocal messageEventName = \"showMessageHestatur\"\n\nlocal hestaturData = require(\"scripts.Hestatur.sortData.spokDatak\")\nif core.API_REVISION == 29 then \n  return\n    end\nlocal sortType = { sortByContName = 0, SortByPartialName = 1, sortByRecordFilter = 2 }\nlocal function registerSortingCategory(catName, cell)\n    sorterData[catName] = { cell = cell, sorts = {} }\nend\nlocal function getPlayerInv()\n    return types.Actor.inventory(world.players[1])\nend\nlocal function registerSortByContainerName(catName, typeFilter)\n    if not sorterData[catName] then\n        error(\"Missing Sorting Category\")\n    end\n    table.insert(sorterData[catName].sorts, { type = sortType.sortByContName, typeFilter = typeFilter })\nend\nlocal function getNameContainer(cell, contName)\n    for index, value in ipairs(cell:getAll(types.Container)) do\n        if value.recordId == contName then\n            return value\n        end\n    end\nend\nlocal function registerSortByPartialName(catName, typeFilter, nameFilter, targetContainer)\n    if not sorterData[catName] then\n        error(\"Missing Sorting Category\")\n    end\n    table.insert(sorterData[catName].sorts,\n        {\n            type = sortType.SortByPartialName,\n            typeFilter = typeFilter,\n            nameFilter = nameFilter,\n            targetContainer = targetContainer\n        })\nend\nlocal function registerSortByRecordFilter(catName, typeFilter, recordField, recordValue, targetContainer, invert)\n    if not sorterData[catName] then\n        error(\"Missing Sorting Category\")\n    end\n    table.insert(sorterData[catName].sorts,\n        {\n            type = sortType.sortByRecordFilter,\n            typeFilter = typeFilter,\n            recordField = recordField,\n            recordValue = recordValue,\n            targetContainer = targetContainer,\n            invert = invert\n        })\nend\nlocal function stringContains(mainString, subString)\n    return string.find(mainString, subString, 1, true) ~= nil\nend\nlocal function registerSortActivator(catName, actId)\n    sorterData[catName].activatorName = actId:lower()\nend\nlocal function isNotEquipped(item)\n    for index, value in pairs(types.Actor.getEquipment(world.players[1])) do\n        if value == item then\n            return false\n        end\n    end\n    return true\nend\nlocal function findContainerByName(catCell, containerName)\n    for _, cont in ipairs(catCell:getAll(types.Container)) do\n        local contName = cont.type.record(cont).name:lower()\n        if contName == containerName then\n            return cont\n        end\n    end\nend\nlocal function findContainerById(catCell, containerName)\n    for _, cont in ipairs(catCell:getAll(types.Container)) do\n        local contId = cont.recordId\n        if contId == containerName then\n            return cont\n        end\n    end\nend\n\nlocal function moveItemsToContainer(items, targetContainer)\n    local sortCount = 0\n    for _, plrItem in ipairs(items) do\n        if isNotEquipped(plrItem) then\n            sortCount = sortCount + plrItem.count\n            plrItem:moveInto(types.Container.content(targetContainer))\n        end\n    end\n    return sortCount\nend\nlocal function sortManually(itemId,containerId)\n    local sortCount = 0\n    local itemLs = types.Actor.inventory(world.players[1]):findAll(itemId)\n    local cell = world.getCellById(\"hestatur, laboratory\")\n    local container =findContainerById(cell,containerId)\n    if itemLs and container then\n        for index, item in ipairs(itemLs) do\n            sortCount = sortCount + item.count\n        item:moveInto(types.Container.content(container))\n        end\n    end\n    return sortCount\nend\nlocal function runSort(catName,num)\n    local sortCount = num or 0\n    local catCell = world.getCellByName(sorterData[catName].cell)\n\n    for _, value in ipairs(sorterData[catName].sorts) do\n        if value.type == sortType.sortByContName then\n            for _, plrItem in ipairs(getPlayerInv():getAll(value.typeFilter)) do\n                local itemName = plrItem.type.record(plrItem).name:lower()\n                local targetContainer = findContainerByName(catCell, itemName)\n                if targetContainer then\n                    sortCount = sortCount + moveItemsToContainer({ plrItem }, targetContainer)\n                end\n            end\n        elseif value.type == sortType.SortByPartialName then\n            local targetContainer = getNameContainer(catCell, value.targetContainer)\n            if not targetContainer then\n                error(\"Container not found!\")\n            end\n            local items = {}\n            for _, plrItem in ipairs(getPlayerInv():getAll(value.typeFilter)) do\n                local itemName = plrItem.type.record(plrItem).name:lower()\n                if stringContains(itemName, value.nameFilter:lower()) then\n                    table.insert(items, plrItem)\n                end\n            end\n            sortCount = sortCount + moveItemsToContainer(items, targetContainer)\n        elseif value.type == sortType.sortByRecordFilter then\n            local targetContainer = getNameContainer(catCell, value.targetContainer)\n            if not targetContainer then\n                error(\"Container not found!\")\n            end\n            local items = {}\n            for _, plrItem in ipairs(getPlayerInv():getAll(value.typeFilter)) do\n                local recordValue\n                if value.recordField == \"soul\" then\n                    recordValue = types.Miscellaneous.getSoul(plrItem)\n                else\n                    recordValue = plrItem.type.record(plrItem)[value.recordField]\n                end\n                if (recordValue == value.recordValue and not value.invert) or (recordValue ~= value.recordValue and value.invert) then\n                    table.insert(items, plrItem)\n                end\n            end\n            sortCount = sortCount + moveItemsToContainer(items, targetContainer)\n        end\n    end\n    sortCount = sortCount + I.ItemSortHestatur.runItemSort()\n    if sortCount == 0 then\n        world.players[1]:sendEvent(messageEventName, string.format(\"You have no sortable items\", sortCount))\n    elseif sortCount == 1 then\n        world.players[1]:sendEvent(messageEventName, string.format(\"You sort %g item\", sortCount))\n    else\n        world.players[1]:sendEvent(messageEventName, string.format(\"You sort %g items\", sortCount))\n    end\nend\nlocal function exampleUse()\n    local catName = \"HestaturIngred\"\n    registerSortingCategory(catName, \"Hestatur, Laboratory\")\n    registerSortByContainerName(catName, types.Ingredient)\n    registerSortActivator(catName, \"spok_ht_sorter\")\n    catName = \"HestaturMisc\"\n    registerSortingCategory(catName, \"Hestatur, Laboratory\")\n    registerSortByRecordFilter(catName, types.Clothing, \"type\", types.Clothing.TYPE.Ring, \"aa_rings\")\n    registerSortByRecordFilter(catName, types.Clothing, \"type\", types.Clothing.TYPE.Amulet, \"aa_amulets\")\n    registerSortByRecordFilter(catName, types.Book, \"enchant\", \"\", \"aa_chest_scrolls\", true)\n    registerSortByPartialName(catName, types.Clothing, \"Expensive\", \"Hestatur_clothing_exp\")\n    registerSortByPartialName(catName, types.Clothing, \"Extravagant\", \"Hestatur_clothing_extrav\")\n    registerSortByPartialName(catName, types.Clothing, \"Common\", \"Hestatur_clothing_com\")\n    registerSortByPartialName(catName, types.Clothing, \"Imperial\", \"Hestatur_clothing_com\")\n    registerSortByPartialName(catName, types.Clothing, \"Exquisite\", \"Hestatur_clothing_exq\")\n\n    registerSortByPartialName(catName, types.Miscellaneous, \"Cloth\", \"zhac_Hestatur_sort_sewing\")\n    registerSortByPartialName(catName, types.Miscellaneous, \"Shears\", \"zhac_Hestatur_sort_sewing\")\n    registerSortByPartialName(catName, types.Miscellaneous, \"Spool\", \"zhac_Hestatur_sort_sewing\")\n\n    registerSortByPartialName(catName, types.Miscellaneous, \"Jug\", \"zhac_Hestatur_sort_drinki\")\n    registerSortByPartialName(catName, types.Miscellaneous, \"Bottle\", \"zhac_Hestatur_sort_drinki\")\n    registerSortByPartialName(catName, types.Miscellaneous, \"Goblet\", \"zhac_Hestatur_sort_drinki\")\n\n    registerSortByRecordFilter(catName, types.Miscellaneous, \"soul\", nil, \"zhac_Hestatur_sort_fsoul\", true)\n    registerSortByPartialName(catName, types.Miscellaneous, \"Soul Gem\", \"zhac_Hestatur_sort_esoul\")\n    registerSortByPartialName(catName, types.Miscellaneous, \"Azura's Star\", \"zhac_Hestatur_sort_esoul\")\n\n    registerSortByPartialName(catName, types.Potion, \"Bargain\", \"spok_ht_pb_all\")\n    registerSortByPartialName(catName, types.Potion, \"Cheap\", \"spok_ht_pc_all\")\n    registerSortByPartialName(catName, types.Potion, \"Standard\", \"spok_ht_ps_etc\")\n    registerSortByPartialName(catName, types.Potion, \"Quality\", \"spok_ht_pq_etc\")\n    registerSortByPartialName(catName, types.Potion, \"Exclusive\", \"spok_ht_pe_etc\")\n\n    registerSortByRecordFilter(catName, types.Miscellaneous, \"isKey\", true, \"zhac_hest_cont_keys\")\n    registerSortByPartialName(catName, types.Miscellaneous, \"key\", \"zhac_hest_cont_keys\")\n\n--    registerSortActivator(catName, \"aaaa_sorter1\")\n\n    -- I.ZUtilsSorter_Hestatur.registerSortingCategory(catName, \"Hestatur, Laboratory\")\n    --I.ZUtilsSorter_Hestatur.registerSortByContainerName(catName, types.Ingredient)\n    -- I.ZUtilsSorter_Hestatur.registerSortActivator(catName, \"aaaa_sorter2\")\nend\nexampleUse()\nlocal function onActivate(object, Actor)\n    local isSorter = false\n    if object.recordId  == \"spok_ht_sorter\" then\n        isSorter = true\n    end\n    local sortCount = 0\n    if isSorter then\n    for index, value in ipairs(hestaturData.ingredient_container_pairs) do\n        sortCount = sortCount + sortManually(value.item,value.container)\n    end\n    for index, value in ipairs(hestaturData.scrollData) do\n        sortCount = sortCount +  sortManually(value.item,value.container)\n    end\n    for index, value in ipairs(hestaturData.potionLs) do\n        sortCount = sortCount +   sortManually(value.item,value.container)\n    end\nend\n    for index, sort in pairs(sorterData) do\n        if sort.activatorName == object.recordId then\n            runSort(index,sortCount)\n        end\n    end\n    if isSorter then\n        return false\n    end\nend\nreturn {\n    interfaceName = \"ZUtilsSorter_Hestatur\",\n    interface = {\n        version = 1,\n        getLocIndex = getLocIndex,\n        registerSortingCategory = registerSortingCategory,\n        registerSortByContainerName = registerSortByContainerName,\n        registerSortByRecordFilter = registerSortByRecordFilter,\n        runSort = runSort,\n        registerSortActivator = registerSortActivator,\n    },\n    eventHandlers = {\n    },\n    engineHandlers = {\n        onActivate = onActivate\n    }\n}\n"
  }
}