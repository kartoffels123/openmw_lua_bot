{
  "folder_name": "(OpenMW 0.49) trav's OpenMW Books Enhanced",
  "lua_files": {
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\data_for_openmw_books_enhanced\\0100_vanilla_book.lua": "local types = require('openmw.types')\nlocal util = require('openmw.util')\n\nlocal DocumentData = {\n    name = \"VanillaBook\",\n    shouldApplyTo = function(gameObject)\n        return gameObject.type == types.Book and not types.Book.records[gameObject.recordId].isScroll\n    end,\n    texture = {\n        path = \"textures/Tx_menubook.dds\",\n        width = 705,\n        height = 390,\n        colorable = true,\n    },\n    pagesTextArrangement = {\n        page1 = {\n            textArea = {\n                width = 220,\n                height = 333,\n                posTopLeftCornerX = 110,\n                posTopLeftCornerY = 16,\n                isScrollableVertically = false,\n            },\n            pageNumber = {\n                posCenterX = 110 + (220 / 2),\n                posCenterY = 16 + 333 + 15,\n            }\n        },\n        page2 = {\n            textArea = {\n                posTopLeftCornerX = 375,\n                posTopLeftCornerY = 16,\n            },\n            pageNumber = {\n                posCenterX = 375 + (220 / 2),\n                posCenterY = 16 + 333 + 15,\n            }\n        },\n    },\n    takeButton = {\n        posCenterX = (110 + (220 / 2)) - 71,\n        posCenterY = 16 + 333 + 15,\n    },\n    prevButton = {\n        posCenterX = (110 + (220 / 2)) + 71,\n        posCenterY = 16 + 333 + 15,\n    },\n    nextButton = {\n        posCenterX = (375 + (220 / 2)) - 71,\n        posCenterY = 16 + 333 + 15,\n    },\n    closeButton = {\n        posCenterX = (375 + (220 / 2)) + 71,\n        posCenterY = 16 + 333 + 15,\n    },\n    getUiColoring = function(gameObject)\n        local colorsMatchingModel = {\n            [\"meshes\\\\m\\\\text_folio_02.nif\"] = util.color.rgb(131 / 255, 100 / 255, 133 / 255),\n            [\"meshes\\\\m\\\\text_folio_open_02.nif\"] = util.color.rgb(131 / 255, 100 / 255, 133 / 255),\n            [\"meshes\\\\m\\\\text_folio_03.nif\"] = util.color.rgb(97 / 255, 123 / 255, 105 / 255),\n            [\"meshes\\\\m\\\\text_folio_open_03.nif\"] = util.color.rgb(97 / 255, 123 / 255, 105 / 255),\n            [\"meshes\\\\m\\\\text_folio_04.nif\"] = util.color.rgb(142 / 255, 107 / 255, 85 / 255),\n            [\"meshes\\\\m\\\\text_folio_open_04.nif\"] = util.color.rgb(142 / 255, 107 / 255, 85 / 255),\n            [\"meshes\\\\m\\\\text_octavo_01.nif\"] = util.color.rgb(143 / 255, 102 / 255, 44 / 255),\n            [\"meshes\\\\m\\\\text_octavo_02.nif\"] = util.color.rgb(108 / 255, 96 / 255, 110 / 255),\n            [\"meshes\\\\m\\\\text_octavo_03.nif\"] = util.color.rgb(160 / 255, 48 / 255, 60 / 255),\n            [\"meshes\\\\m\\\\text_octavo_04.nif\"] = util.color.rgb(175 / 255, 148 / 255, 98 / 255),\n            [\"meshes\\\\m\\\\text_octavo_05.nif\"] = util.color.rgb(140 / 255, 65 / 255, 30 / 255),\n            [\"meshes\\\\m\\\\text_octavo_06.nif\"] = util.color.rgb(81 / 255, 89 / 255, 53 / 255),\n            [\"meshes\\\\m\\\\text_octavo_07.nif\"] = util.color.rgb(94 / 255, 30 / 255, 27 / 255),\n            [\"meshes\\\\m\\\\text_octavo_08.nif\"] = util.color.rgb(17 / 255, 92 / 255, 90 / 255),\n            [\"meshes\\\\m\\\\text_octavo_open_01.nif\"] = util.color.rgb(143 / 255, 75 / 255, 44 / 255),\n            [\"meshes\\\\m\\\\text_octavo_open_02.nif\"] = util.color.rgb(108 / 255, 96 / 255, 110 / 255),\n            [\"meshes\\\\m\\\\text_octavo_open_03.nif\"] = util.color.rgb(161 / 255, 29 / 255, 36 / 255),\n            [\"meshes\\\\m\\\\text_octavo_open_04.nif\"] = util.color.rgb(175 / 255, 148 / 255, 98 / 255),\n            [\"meshes\\\\m\\\\text_octavo_open_05.nif\"] = util.color.rgb(140 / 255, 65 / 255, 30 / 255),\n            [\"meshes\\\\m\\\\text_octavo_open_06.nif\"] = util.color.rgb(81 / 255, 89 / 255, 53 / 255),\n            [\"meshes\\\\m\\\\text_octavo_open_07.nif\"] = util.color.rgb(94 / 255, 30 / 255, 27 / 255),\n            [\"meshes\\\\m\\\\text_octavo_open_08.nif\"] = util.color.rgb(17 / 255, 92 / 255, 90 / 255),\n            [\"meshes\\\\m\\\\text_quarto_01.nif\"] = util.color.rgb(114 / 255, 94 / 255, 79 / 255),\n            [\"meshes\\\\m\\\\text_quarto_02.nif\"] = util.color.rgb(66 / 255, 64 / 255, 48 / 255),\n            [\"meshes\\\\m\\\\text_quarto_03.nif\"] = util.color.rgb(89 / 255, 83 / 255, 62 / 255),\n            [\"meshes\\\\m\\\\text_quarto_04.nif\"] = util.color.rgb(123 / 255, 111 / 255, 65 / 255),\n            [\"meshes\\\\m\\\\text_quarto_open_01.nif\"] = util.color.rgb(114 / 255, 94 / 255, 79 / 255),\n            [\"meshes\\\\m\\\\text_quarto_open_02.nif\"] = util.color.rgb(66 / 255, 64 / 255, 48 / 255),\n            [\"meshes\\\\m\\\\text_quarto_open_03.nif\"] = util.color.rgb(89 / 255, 83 / 255, 62 / 255),\n            [\"meshes\\\\m\\\\text_quarto_open_04.nif\"] = util.color.rgb(123 / 255, 111 / 255, 65 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_bl01_vr.nif\"] = util.color.rgb(37 / 255, 186 / 255, 154 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_brown_telv.nif\"] = util.color.rgb(142 / 255, 56 / 255, 30 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_burned_01.nif\"] = util.color.rgb(77 / 255, 66 / 255, 50 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_01_aa.nif\"] = util.color.rgb(67 / 255, 19 / 255, 22 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_01_sth.nif\"] = util.color.rgb(90 / 255, 100 / 255, 75 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_02_sth.nif\"] = util.color.rgb(181 / 255, 139 / 255, 95 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_03_sth.nif\"] = util.color.rgb(212 / 255, 153 / 255, 104 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_02_aa.nif\"] = util.color.rgb(110 / 255, 122 / 255, 44 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_03_aa.nif\"] = util.color.rgb(213 / 255, 187 / 255, 153 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_04_aa.nif\"] = util.color.rgb(202 / 255, 183 / 255, 195 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_05_aa.nif\"] = util.color.rgb(173 / 255, 82 / 255, 100 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_06_aa.nif\"] = util.color.rgb(151 / 255, 117 / 255, 148 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_i01_ay.nif\"] = util.color.rgb(99 / 255, 88 / 255, 83 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_i02_ay.nif\"] = util.color.rgb(185 / 255, 64 / 255, 75 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_i03_ay.nif\"] = util.color.rgb(165 / 255, 100 / 255, 71 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_i04_ay.nif\"] = util.color.rgb(140 / 255, 60 / 255, 66 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_i05_ay.nif\"] = util.color.rgb(169 / 255, 127 / 255, 66 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_i06_ay.nif\"] = util.color.rgb(127 / 255, 109 / 255, 79 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_i07_ay.nif\"] = util.color.rgb(130 / 255, 109 / 255, 72 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_i08_ay.nif\"] = util.color.rgb(145 / 255, 75 / 255, 38 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_i09_ay.nif\"] = util.color.rgb(108 / 255, 132 / 255, 160 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_i11_ay.nif\"] = util.color.rgb(108 / 255, 87 / 255, 74 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_i12_ay.nif\"] = util.color.rgb(119 / 255, 87 / 255, 72 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_i14_ay.nif\"] = util.color.rgb(200 / 255, 122 / 255, 82 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_i15_ay.nif\"] = util.color.rgb(254 / 255, 240 / 255, 172 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed_i16_ay.nif\"] = util.color.rgb(208 / 255, 142 / 255, 131 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed01_aa.nif\"] = util.color.rgb(67 / 255, 19 / 255, 22 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed01_sth.nif\"] = util.color.rgb(90 / 255, 100 / 255, 75 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed02_sth.nif\"] = util.color.rgb(181 / 255, 139 / 255, 95 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed03_sth.nif\"] = util.color.rgb(212 / 255, 153 / 255, 104 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed02_aa.nif\"] = util.color.rgb(110 / 255, 122 / 255, 44 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed03_aa.nif\"] = util.color.rgb(213 / 255, 187 / 255, 153 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed04_aa.nif\"] = util.color.rgb(202 / 255, 183 / 255, 195 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed05_aa.nif\"] = util.color.rgb(173 / 255, 82 / 255, 100 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closed06_aa.nif\"] = util.color.rgb(151 / 255, 117 / 255, 148 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closedi01_ay.nif\"] = util.color.rgb(99 / 255, 88 / 255, 83 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closedi02_ay.nif\"] = util.color.rgb(185 / 255, 64 / 255, 75 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closedi03_ay.nif\"] = util.color.rgb(165 / 255, 100 / 255, 71 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closedi04_ay.nif\"] = util.color.rgb(140 / 255, 60 / 255, 66 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closedi05_ay.nif\"] = util.color.rgb(169 / 255, 127 / 255, 66 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closedi06_ay.nif\"] = util.color.rgb(127 / 255, 109 / 255, 79 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closedi07_ay.nif\"] = util.color.rgb(130 / 255, 109 / 255, 72 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closedi08_ay.nif\"] = util.color.rgb(145 / 255, 75 / 255, 38 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closedi09_ay.nif\"] = util.color.rgb(108 / 255, 132 / 255, 160 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closedi11_ay.nif\"] = util.color.rgb(108 / 255, 87 / 255, 74 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closedi12_ay.nif\"] = util.color.rgb(119 / 255, 87 / 255, 72 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closedi14_ay.nif\"] = util.color.rgb(200 / 255, 122 / 255, 82 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closedi15_ay.nif\"] = util.color.rgb(254 / 255, 240 / 255, 172 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_closedi16_ay.nif\"] = util.color.rgb(208 / 255, 142 / 255, 131 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_dwrv_uni00.nif\"] = util.color.rgb(153 / 255, 107 / 255, 25 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_eastquarant.nif\"] = util.color.rgb(151 / 255, 95 / 255, 70 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_exovel01_aa.nif\"] = util.color.rgb(135 / 255, 66 / 255, 38 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_grey_dres.nif\"] = util.color.rgb(155 / 255, 155 / 255, 155 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_mystworm.nif\"] = util.color.rgb(86 / 255, 81 / 255, 97 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_notebk_01.nif\"] = util.color.rgb(73 / 255, 78 / 255, 28 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_notebk_02.nif\"] = util.color.rgb(90 / 255, 83 / 255, 47 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_notebk_03.nif\"] = util.color.rgb(202 / 255, 89 / 255, 114 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_notebk_04.nif\"] = util.color.rgb(63 / 255, 61 / 255, 56 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_notebk_05.nif\"] = util.color.rgb(96 / 255, 66 / 255, 48 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_notebk_o_01.nif\"] = util.color.rgb(63 / 255, 61 / 255, 56 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_notebk_o_02.nif\"] = util.color.rgb(73 / 255, 78 / 255, 28 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_octavo_01_c.nif\"] = util.color.rgb(101 / 255, 65 / 255, 67 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_octavo_01_o.nif\"] = util.color.rgb(101 / 255, 65 / 255, 67 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_octavo_02_o.nif\"] = util.color.rgb(213 / 255, 211 / 255, 205 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_octavo_02_c.nif\"] = util.color.rgb(213 / 255, 211 / 255, 205 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_octavo_03_c.nif\"] = util.color.rgb(119 / 255, 75 / 255, 93 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_octavo_03_o.nif\"] = util.color.rgb(119 / 255, 75 / 255, 93 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_octavo_04_o.nif\"] = util.color.rgb(78 / 255, 103 / 255, 121 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_octavo_04_c.nif\"] = util.color.rgb(78 / 255, 103 / 255, 121 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_oghma_infium.nif\"] = util.color.rgb(51 / 255, 34 / 255, 17 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_open02_aa.nif\"] = util.color.rgb(107 / 255, 96 / 255, 118 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_open_i07.nif\"] = util.color.rgb(81 / 255, 99 / 255, 123 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_sakapunika_c.nif\"] = util.color.rgb(104 / 255, 53 / 255, 29 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_sithis_daedr.nif\"] = util.color.rgb(103 / 255, 90 / 255, 86 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_theperyiton_c.nif\"] = util.color.rgb(141 / 255, 78 / 255, 37 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_theperyiton_o.nif\"] = util.color.rgb(141 / 255, 78 / 255, 37 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_tomebk_01.nif\"] = util.color.rgb(182 / 255, 79 / 255, 59 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_tomebk_02.nif\"] = util.color.rgb(56 / 255, 63 / 255, 56 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_tomebk_03.nif\"] = util.color.rgb(147 / 255, 66 / 255, 34 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_tomebk_04.nif\"] = util.color.rgb(115 / 255, 79 / 255, 48 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_tomebk_05.nif\"] = util.color.rgb(88 / 255, 75 / 255, 16 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_tomebk_06.nif\"] = util.color.rgb(215 / 255, 171 / 255, 65 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_tomebk_o_01.nif\"] = util.color.rgb(182 / 255, 79 / 255, 59 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_tomebk_o_02.nif\"] = util.color.rgb(56 / 255, 63 / 255, 56 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_tomebk_o_03.nif\"] = util.color.rgb(147 / 255, 66 / 255, 34 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_tomebk_o_04.nif\"] = util.color.rgb(115 / 255, 79 / 255, 48 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_tomebk_o_05.nif\"] = util.color.rgb(88 / 255, 75 / 255, 16 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_tomebk_o_06.nif\"] = util.color.rgb(215 / 255, 171 / 255, 65 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_veloth_o.nif\"] = util.color.rgb(89 / 255, 108 / 255, 142 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_white_ind.nif\"] = util.color.rgb(248 / 255, 226 / 255, 187 / 255),\n            [\"meshes\\\\tr\\\\m\\\\tr_book_ruined_04.nif\"] = util.color.rgb(76 / 255, 41 / 255, 22 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_basic_01.nif\"] = util.color.rgb(106 / 255, 75 / 255, 59 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_basic_02.nif\"] = util.color.rgb(194 / 255, 176 / 255, 120 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_basic_03.nif\"] = util.color.rgb(145 / 255, 73 / 255, 40 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_basic_04.nif\"] = util.color.rgb(100 / 255, 80 / 255, 60 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_basic_05.nif\"] = util.color.rgb(83 / 255, 75 / 255, 71 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_basic_06.nif\"] = util.color.rgb(89 / 255, 77 / 255, 77 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_basic_07.nif\"] = util.color.rgb(65 / 255, 65 / 255, 65 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_basic_08.nif\"] = util.color.rgb(70 / 255, 48 / 255, 45 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_basic_09.nif\"] = util.color.rgb(70 / 255, 48 / 255, 45 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_basic_10.nif\"] = util.color.rgb(110 / 255, 33 / 255, 38 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_basic_11.nif\"] = util.color.rgb(123 / 255, 77 / 255, 58 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_basic_12.nif\"] = util.color.rgb(89 / 255, 38 / 255, 48 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_basic_13.nif\"] = util.color.rgb(118 / 255, 75 / 255, 57 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_basic_14.nif\"] = util.color.rgb(116 / 255, 83 / 255, 64 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_basic_15.nif\"] = util.color.rgb(72 / 255, 58 / 255, 47 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_saga_01.nif\"] = util.color.rgb(75 / 255, 91 / 255, 78 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_saga_02.nif\"] = util.color.rgb(79 / 255, 75 / 255, 79 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_saga_03.nif\"] = util.color.rgb(161 / 255, 95 / 255, 72 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_saga_04.nif\"] = util.color.rgb(96 / 255, 47 / 255, 57 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_saga_05.nif\"] = util.color.rgb(131 / 255, 89 / 255, 90 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_book_saga_06.nif\"] = util.color.rgb(60 / 255, 64 / 255, 66 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_misc_dbook_01.nif\"] = util.color.rgb(98 / 255, 88 / 255, 69 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_misc_dbook_02.nif\"] = util.color.rgb(104 / 255, 116 / 255, 81 / 255),\n            [\"meshes\\\\sky\\\\m\\\\sky_misc_dbook_03.nif\"] = util.color.rgb(106 / 255, 80 / 255, 42 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_01.nif\"] = util.color.rgb(154 / 255, 2 / 255, 0 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_02.nif\"] = util.color.rgb(125 / 255, 79 / 255, 75 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_03.nif\"] = util.color.rgb(46 / 255, 73 / 255, 135 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_04.nif\"] = util.color.rgb(199 / 255, 186 / 255, 132 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_05.nif\"] = util.color.rgb(113 / 255, 72 / 255, 41 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_06.nif\"] = util.color.rgb(103 / 255, 71 / 255, 34 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_07.nif\"] = util.color.rgb(77 / 255, 84 / 255, 40 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_08.nif\"] = util.color.rgb(138 / 255, 100 / 255, 52 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_09.nif\"] = util.color.rgb(129 / 255, 40 / 255, 8 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_10.nif\"] = util.color.rgb(103 / 255, 79 / 255, 63 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_11.nif\"] = util.color.rgb(134 / 255, 50 / 255, 35 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_12.nif\"] = util.color.rgb(181 / 255, 69 / 255, 47 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_13.nif\"] = util.color.rgb(124 / 255, 68 / 255, 51 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_14.nif\"] = util.color.rgb(168 / 255, 42 / 255, 42 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_15.nif\"] = util.color.rgb(182 / 255, 117 / 255, 64 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_16.nif\"] = util.color.rgb(124 / 255, 134 / 255, 118 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_17.nif\"] = util.color.rgb(105 / 255, 94 / 255, 85 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_18.nif\"] = util.color.rgb(112 / 255, 109 / 255, 69 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_19.nif\"] = util.color.rgb(157 / 255, 117 / 255, 47 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_20.nif\"] = util.color.rgb(128 / 255, 84 / 255, 48 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_21.nif\"] = util.color.rgb(125 / 255, 80 / 255, 68 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_22.nif\"] = util.color.rgb(30 / 255, 84 / 255, 42 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_23.nif\"] = util.color.rgb(91 / 255, 86 / 255, 78 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_24.nif\"] = util.color.rgb(202 / 255, 122 / 255, 69 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_25.nif\"] = util.color.rgb(144 / 255, 60 / 255, 41 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_26.nif\"] = util.color.rgb(43 / 255, 24 / 255, 20 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_27.nif\"] = util.color.rgb(174 / 255, 57 / 255, 58 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_28.nif\"] = util.color.rgb(98 / 255, 37 / 255, 29 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_29.nif\"] = util.color.rgb(141 / 255, 101 / 255, 68 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_30.nif\"] = util.color.rgb(71 / 255, 41 / 255, 23 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_34.nif\"] = util.color.rgb(106 / 255, 44 / 255, 27 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_35.nif\"] = util.color.rgb(128 / 255, 92 / 255, 62 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_36.nif\"] = util.color.rgb(83 / 255, 35 / 255, 20 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_37.nif\"] = util.color.rgb(115 / 255, 98 / 255, 99 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_38.nif\"] = util.color.rgb(139 / 255, 69 / 255, 39 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_39.nif\"] = util.color.rgb(153 / 255, 89 / 255, 60 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_01_open.nif\"] = util.color.rgb(154 / 255, 2 / 255, 0 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_02_open.nif\"] = util.color.rgb(125 / 255, 79 / 255, 75 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_03_open.nif\"] = util.color.rgb(46 / 255, 73 / 255, 135 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_04_open.nif\"] = util.color.rgb(199 / 255, 186 / 255, 132 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_05_open.nif\"] = util.color.rgb(113 / 255, 72 / 255, 41 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_06_open.nif\"] = util.color.rgb(103 / 255, 71 / 255, 34 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_07_open.nif\"] = util.color.rgb(77 / 255, 84 / 255, 40 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_08_open.nif\"] = util.color.rgb(138 / 255, 100 / 255, 52 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_09_open.nif\"] = util.color.rgb(129 / 255, 40 / 255, 8 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_10_open.nif\"] = util.color.rgb(103 / 255, 79 / 255, 63 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_11_open.nif\"] = util.color.rgb(134 / 255, 50 / 255, 35 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_12_open.nif\"] = util.color.rgb(181 / 255, 69 / 255, 47 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_13_open.nif\"] = util.color.rgb(124 / 255, 68 / 255, 51 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_14_open.nif\"] = util.color.rgb(168 / 255, 42 / 255, 42 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_15_open.nif\"] = util.color.rgb(182 / 255, 117 / 255, 64 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_16_open.nif\"] = util.color.rgb(124 / 255, 134 / 255, 118 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_17_open.nif\"] = util.color.rgb(105 / 255, 94 / 255, 85 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_18_open.nif\"] = util.color.rgb(112 / 255, 109 / 255, 69 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_19_open.nif\"] = util.color.rgb(157 / 255, 117 / 255, 47 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_20_open.nif\"] = util.color.rgb(128 / 255, 84 / 255, 48 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_21_open.nif\"] = util.color.rgb(125 / 255, 80 / 255, 68 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_22_open.nif\"] = util.color.rgb(30 / 255, 84 / 255, 42 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_23_open.nif\"] = util.color.rgb(91 / 255, 86 / 255, 78 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_24_open.nif\"] = util.color.rgb(202 / 255, 122 / 255, 69 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_25_open.nif\"] = util.color.rgb(144 / 255, 60 / 255, 41 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_26_open.nif\"] = util.color.rgb(43 / 255, 24 / 255, 20 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_27_open.nif\"] = util.color.rgb(174 / 255, 57 / 255, 58 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_28_open.nif\"] = util.color.rgb(98 / 255, 37 / 255, 29 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_29_open.nif\"] = util.color.rgb(141 / 255, 101 / 255, 68 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_30_open.nif\"] = util.color.rgb(71 / 255, 41 / 255, 23 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_34_open.nif\"] = util.color.rgb(106 / 255, 44 / 255, 27 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_35_open.nif\"] = util.color.rgb(128 / 255, 92 / 255, 62 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_36_open.nif\"] = util.color.rgb(83 / 255, 35 / 255, 20 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_37_open.nif\"] = util.color.rgb(115 / 255, 98 / 255, 99 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_38_open.nif\"] = util.color.rgb(139 / 255, 69 / 255, 39 / 255),\n            [\"meshes\\\\pc\\\\m\\\\pc_bk_book_39_open.nif\"] = util.color.rgb(153 / 255, 89 / 255, 60 / 255),\n            [\"meshes\\\\hr\\\\m\\\\mr_bk_01.nif\"] = util.color.rgb(43 / 255, 27 / 255, 20 / 255),\n            [\"meshes\\\\hr\\\\m\\\\mr_bk_02.nif\"] = util.color.rgb(80 / 255, 68 / 255, 51 / 255),\n            [\"meshes\\\\hr\\\\m\\\\mr_bk_03.nif\"] = util.color.rgb(81 / 255, 35 / 255, 25 / 255),\n            [\"meshes\\\\hr\\\\m\\\\mr_bk_04-open.nif\"] = util.color.rgb(60 / 255, 0 / 255, 0 / 255),\n            [\"meshes\\\\hr\\\\m\\\\mr_bk_04.nif\"] = util.color.rgb(60 / 255, 0 / 255, 0 / 255),\n            [\"meshes\\\\hr\\\\m\\\\mr_bk_05.nif\"] = util.color.rgb(57 / 255, 12 / 255, 16 / 255),\n            [\"meshes\\\\hr\\\\m\\\\mr_bk_06.nif\"] = util.color.rgb(154 / 255, 133 / 255, 97 / 255),\n            [\"meshes\\\\hr\\\\m\\\\mr_bk_06b.nif\"] = util.color.rgb(154 / 255, 133 / 255, 97 / 255),\n            [\"meshes\\\\hr\\\\m\\\\mr_bk_07.nif\"] = util.color.rgb(100 / 255, 69 / 255, 36 / 255),\n            [\"meshes\\\\hr\\\\m\\\\mr_bk_08.nif\"] = util.color.rgb(66 / 255, 60 / 255, 97 / 255),\n            [\"meshes\\\\hr\\\\m\\\\mr_bk_09.nif\"] = util.color.rgb(224 / 255, 158 / 255, 70 / 255),\n            [\"meshes\\\\hr\\\\m\\\\mr_bk_10.nif\"] = util.color.rgb(182 / 255, 129 / 255, 72 / 255),\n            [\"meshes\\\\hr\\\\m\\\\mr_bk_11.nif\"] = util.color.rgb(107 / 255, 87 / 255, 39 / 255),\n            [\"meshes\\\\hr\\\\m\\\\mr_bk_12-open.nif\"] = util.color.rgb(73 / 255, 42 / 255, 38 / 255),\n            [\"meshes\\\\hr\\\\m\\\\mr_bk_12.nif\"] = util.color.rgb(73 / 255, 42 / 255, 38 / 255),\n            [\"meshes\\\\hr\\\\m\\\\mr_bk_13.nif\"] = util.color.rgb(167 / 255, 142 / 255, 102 / 255),\n            [\"meshes\\\\hr\\\\m\\\\hr_bk_ahyptr.nif\"] = util.color.rgb(207 / 255, 144 / 255, 87 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_folio_01.nif\"] = util.color.rgb(92 / 255, 61 / 255, 14 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_folio_open_01.nif\"] = util.color.rgb(92 / 255, 61 / 255, 14 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_quarto_01.nif\"] = util.color.rgb(45 / 255, 52 / 255, 21 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_octavo_11.nif\"] = util.color.rgb(71 / 255, 50 / 255, 74 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_octavo_10.nif\"] = util.color.rgb(93 / 255, 21 / 255, 13 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_octavo_09.nif\"] = util.color.rgb(60 / 255, 135 / 255, 118 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_octavo_08.nif\"] = util.color.rgb(49 / 255, 57 / 255, 82 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_octavo_07.nif\"] = util.color.rgb(141 / 255, 64 / 255, 51 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_octavo_06.nif\"] = util.color.rgb(84 / 255, 49 / 255, 39 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_octavo_05.nif\"] = util.color.rgb(106 / 255, 62 / 255, 49 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_octavo_04.nif\"] = util.color.rgb(109 / 255, 57 / 255, 50 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_octavo_03.nif\"] = util.color.rgb(140 / 255, 70 / 255, 47 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_octavo_02.nif\"] = util.color.rgb(59 / 255, 78 / 255, 43 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_octavo_01.nif\"] = util.color.rgb(61 / 255, 104 / 255, 103 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_journal_03_o.nif\"] = util.color.rgb(141 / 255, 106 / 255, 73 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_journal_03.nif\"] = util.color.rgb(141 / 255, 106 / 255, 73 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_journal_02.nif\"] = util.color.rgb(68 / 255, 39 / 255, 36 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_journal_02_o.nif\"] = util.color.rgb(68 / 255, 39 / 255, 36 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_journal_01.nif\"] = util.color.rgb(107 / 255, 50 / 255, 37 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_journal_01_o.nif\"] = util.color.rgb(107 / 255, 50 / 255, 37 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_folio_02.nif\"] = util.color.rgb(65 / 255, 43 / 255, 32 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\ab_folio_02_o.nif\"] = util.color.rgb(65 / 255, 43 / 255, 32 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\bk_ruined_quarto.nif\"] = util.color.rgb(50 / 255, 26 / 255, 14 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\bk_ruined_octavo02.nif\"] = util.color.rgb(54 / 255, 54 / 255, 49 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\bk_ruined_octavo01.nif\"] = util.color.rgb(64 / 255, 27 / 255, 20 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\bk_ruined_folio.nif\"] = util.color.rgb(48 / 255, 59 / 255, 68 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_alchb.nif\"] = util.color.rgb(89 / 255, 12 / 255, 15 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_alchc.nif\"] = util.color.rgb(89 / 255, 12 / 255, 15 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_alchco.nif\"] = util.color.rgb(99 / 255, 18 / 255, 16 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_alchv2.nif\"] = util.color.rgb(99 / 255, 18 / 255, 16 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_alchv3.nif\"] = util.color.rgb(99 / 255, 18 / 255, 16 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_alchv4.nif\"] = util.color.rgb(99 / 255, 18 / 255, 16 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_alchv5.nif\"] = util.color.rgb(99 / 255, 18 / 255, 16 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_alvdblt.nif\"] = util.color.rgb(112 / 255, 74 / 255, 45 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_alvdcom.nif\"] = util.color.rgb(112 / 255, 74 / 255, 45 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_bards.nif\"] = util.color.rgb(110 / 255, 42 / 255, 36 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_bloat.nif\"] = util.color.rgb(138 / 255, 34 / 255, 25 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_bretons.nif\"] = util.color.rgb(175 / 255, 29 / 255, 28 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_brews.nif\"] = util.color.rgb(198 / 255, 139 / 255, 85 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_cl.nif\"] = util.color.rgb(170 / 255, 154 / 255, 121 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_dae_alphab.nif\"] = util.color.rgb(80 / 255, 63 / 255, 46 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_dae.nif\"] = util.color.rgb(70 / 255, 93 / 255, 95 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_daeshrines.nif\"] = util.color.rgb(170 / 255, 136 / 255, 82 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_danger.nif\"] = util.color.rgb(124 / 255, 2 / 255, 0 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_dibella.nif\"] = util.color.rgb(70 / 255, 93 / 255, 95 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_dweruins.nif\"] = util.color.rgb(70 / 255, 83 / 255, 116 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_faunav.nif\"] = util.color.rgb(60 / 255, 43 / 255, 28 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_flora_com.nif\"] = util.color.rgb(226 / 255, 221 / 255, 194 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_flora_como.nif\"] = util.color.rgb(226 / 255, 221 / 255, 194 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_flora_m.nif\"] = util.color.rgb(36 / 255, 36 / 255, 30 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_flora_s.nif\"] = util.color.rgb(36 / 255, 45 / 255, 45 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_flora_v1.nif\"] = util.color.rgb(226 / 255, 221 / 255, 194 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_flora_v2.nif\"] = util.color.rgb(226 / 255, 221 / 255, 194 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_flora_v3.nif\"] = util.color.rgb(226 / 255, 221 / 255, 194 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_flora_v4.nif\"] = util.color.rgb(226 / 255, 221 / 255, 194 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_flora_v5.nif\"] = util.color.rgb(226 / 255, 221 / 255, 194 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_flora_v6.nif\"] = util.color.rgb(226 / 255, 221 / 255, 194 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_guars.nif\"] = util.color.rgb(67 / 255, 71 / 255, 67 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_huntgs.nif\"] = util.color.rgb(68 / 255, 66 / 255, 37 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_impegg.nif\"] = util.color.rgb(88 / 255, 71 / 255, 43 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_insults.nif\"] = util.color.rgb(202 / 255, 103 / 255, 73 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_jr.nif\"] = util.color.rgb(115 / 255, 45 / 255, 32 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_maps.nif\"] = util.color.rgb(115 / 255, 45 / 255, 32 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_minerals.nif\"] = util.color.rgb(70 / 255, 55 / 255, 40 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_nordsongs.nif\"] = util.color.rgb(38 / 255, 76 / 255, 47 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_orcs.nif\"] = util.color.rgb(52 / 255, 77 / 255, 16 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_sayings.nif\"] = util.color.rgb(59 / 255, 70 / 255, 65 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_secrets.nif\"] = util.color.rgb(65 / 255, 69 / 255, 57 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_smith_av1.nif\"] = util.color.rgb(44 / 255, 60 / 255, 70 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_smith_av2.nif\"] = util.color.rgb(44 / 255, 60 / 255, 70 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_smith_av3.nif\"] = util.color.rgb(44 / 255, 60 / 255, 70 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_smithing.nif\"] = util.color.rgb(136 / 255, 95 / 255, 57 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_strongh.nif\"] = util.color.rgb(108 / 255, 94 / 255, 48 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_tombs.nif\"] = util.color.rgb(141 / 255, 94 / 255, 57 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_vge.nif\"] = util.color.rgb(42 / 255, 46 / 255, 26 / 255),\n            [\"meshes\\\\oaab\\\\m\\\\text_bov_whiteguar.nif\"] = util.color.rgb(47 / 255, 45 / 255, 72 / 255),\n        }\n        return colorsMatchingModel[string.lower(types.Book.records[gameObject.recordId].model)]\n    end,\n}\nreturn DocumentData\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\data_for_openmw_books_enhanced\\0200_vanilla_scroll.lua": "local types = require('openmw.types')\n\nlocal DocumentData = {\n    name = \"VanillaScroll\",\n    shouldApplyTo = function(gameObject)\n        return gameObject.type == types.Book and types.Book.records[gameObject.recordId].isScroll\n    end,\n    texture = {\n        path = \"textures/scroll.dds\",\n        width = 512,\n        height = 372,\n        colorable = false,\n    },\n    pagesTextArrangement = {\n        page1 = {\n            textArea = {\n                width = 420,\n                height = 235,\n                posTopLeftCornerX = 50,\n                posTopLeftCornerY = 84,\n                isScrollableVertically = true,\n            },\n            pageNumber = {\n                posCenterX = 50 + (420 / 2),\n                posCenterY = 84 + 235 + 15,\n            }\n        },\n        page2 = nil,\n    },\n    takeButton = {\n        posCenterX = 35,\n        posCenterY = 22,\n    },\n    prevButton = {\n        posCenterX = (50 + (420 / 2)) - 71,\n        posCenterY = 84 + 235 + 15,\n    },\n    nextButton = {\n        posCenterX = (50 + (420 / 2)) + 71,\n        posCenterY = 84 + 235 + 15,\n    },\n    closeButton = {\n        posCenterX = 479,\n        posCenterY = 25,\n    },\n\n}\nreturn DocumentData\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\data_for_openmw_books_enhanced\\0201_newspaper_commontongue.lua": "local types = require('openmw.types')\nlocal util = require('openmw.util')\nlocal ui = require('openmw.ui')\n\nlocal DocumentData = {\n    name = \"MournholdCommonTongue\",\n    shouldApplyTo = function(gameObject)\n        return (string.match(gameObject.recordId, \"bk_commontongue\"))\n    end,\n    texture = {\n        path = \"textures/openmw_books_enhanced/tx_travbook_newspaper.dds\",\n        width = 256,\n        height = 400,\n        colorable = false,\n    },\n    pagesTextArrangement = {\n        page1 = {\n            textArea = {\n                width = (256 - (2 * 6)),\n                height = (350 - 30),\n                posTopLeftCornerX = 6,\n                posTopLeftCornerY = 50 + 6,\n                isScrollableVertically = false,\n            },\n            pageNumber = {\n                posCenterX = 256 / 2,\n                posCenterY = 400 - 13,\n            }\n        },\n        page2 = nil,\n    },\n    takeButton = {\n        posCenterX = 35,\n        posCenterY = 20,\n    },\n    prevButton = {\n        posCenterX = 40,\n        posCenterY = 400 - 13,\n    },\n    nextButton = {\n        posCenterX = 256 - 40,\n        posCenterY = 400 - 13,\n    },\n    closeButton = {\n        posCenterX = 256 - 35,\n        posCenterY = 20,\n    },\n    modifyTextBeforeApplying = function(text)\n        return string.gsub(\n            text,\n            \"THE COMMON TONGUE<BR>\",\n            \"\"\n        )\n    end,\n    additionalWidgetsInDocumentUi = {\n        {\n            type = ui.TYPE.Text,\n            name = \"CustomWidget001\",\n            props = {\n                multiline = false,\n                wordWrap = false,\n                autoSize = true,\n                size = util.vector2(207, 100),\n                position = util.vector2(256 / 2, 35),\n                anchor = util.vector2(0.5, 0.0),\n                textAlignH = ui.ALIGNMENT.Center,\n                textAlignV = ui.ALIGNMENT.Center,\n                textSize = 25,\n                text = \"THE COMMON TONGUE\",\n                visible = true,\n            },\n        },\n        {\n            type = ui.TYPE.Text,\n            name = \"CustomWidget001b\",\n            props = {\n                multiline = false,\n                wordWrap = false,\n                autoSize = true,\n                size = util.vector2(207, 100),\n                position = util.vector2(256 / 2, 35),\n                anchor = util.vector2(0.5, 0.0),\n                textAlignH = ui.ALIGNMENT.Center,\n                textAlignV = ui.ALIGNMENT.Center,\n                textSize = 25,\n                text = \"THE COMMON TONGUE\",\n                visible = true,\n            },\n        },\n        {\n            type = ui.TYPE.Image,\n            name = \"CustomWidget002\",\n            props = {\n                size = util.vector2((256 - (2 * 10)), 1),\n                position = util.vector2(256 / 2, 35 + 15),\n                anchor = util.vector2(0.5, 0.0),\n                resource = ui.texture { path = \"white\" },\n                color = util.color.rgb(0, 0, 0),\n                visible = true,\n            },\n        }\n    },\n}\nreturn DocumentData\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\data_for_openmw_books_enhanced\\0300_tr_news_bellman.lua": "local types = require('openmw.types')\nlocal util = require('openmw.util')\nlocal ui = require('openmw.ui')\n\nlocal DocumentData = {\n    name = \"TrEbonheartBellman\",\n    shouldApplyTo = function(gameObject)\n        return types.Book.records[gameObject.recordId].model == \"meshes\\\\tr\\\\m\\\\tr_note_oe_news.nif\"\n            and (string.match(gameObject.recordId, \"t_news_bellman\") or string.match(gameObject.recordId, \"t_note_oe_newspaper\"))\n    end,\n    texture = {\n        path = \"textures/openmw_books_enhanced/tx_travbook_newspaper.dds\",\n        width = 256,\n        height = 400,\n        colorable = false,\n    },\n    pagesTextArrangement = {\n        page1 = {\n            textArea = {\n                width = (256 - (2 * 6)),\n                height = (300 - 30),\n                posTopLeftCornerX = 6,\n                posTopLeftCornerY = 100 + 6,\n                isScrollableVertically = false,\n            },\n            pageNumber = {\n                posCenterX = 256 / 2,\n                posCenterY = 400 - 13,\n            }\n        },\n        page2 = nil,\n    },\n    takeButton = {\n        posCenterX = 35,\n        posCenterY = 22,\n    },\n    prevButton = {\n        posCenterX = 40,\n        posCenterY = 400 - 13,\n    },\n    nextButton = {\n        posCenterX = 256 - 40,\n        posCenterY = 400 - 13,\n    },\n    closeButton = {\n        posCenterX = 256 - 35,\n        posCenterY = 22,\n    },\n    modifyTextBeforeApplying = function(text)\n        return string.gsub(\n            text,\n            \"<IMG SRC=\\\"TR\\\\TR_bellman_512_256%.dds\\\" WIDTH=\\\"290\\\" HEIGHT=\\\"140\\\"><BR>\",\n            \"\"\n        )\n    end,\n    additionalWidgetsInDocumentUi = {\n        {\n            type = ui.TYPE.Image,\n            name = \"CustomWidget001\",\n            props = {\n                size = util.vector2(207, 100),\n                position = util.vector2(256 / 2, 6),\n                anchor = util.vector2(0.5, 0.0),\n                resource = ui.texture { path = \"bookart\\\\TR\\\\TR_bellman_512_256.dds\" },\n                visible = true,\n            },\n        }\n    },\n}\nreturn DocumentData\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\data_for_openmw_books_enhanced\\0301_tr_palm_leaf_manuscript.lua": "local types = require('openmw.types')\n\nlocal DocumentData = {\n    name = \"TrPalmLeafManuscript\",\n    shouldApplyTo = function(gameObject)\n        local palmModels = {\n            \"meshes\\\\pi\\\\m\\\\pi_sc_palm_01.nif\",\n            \"meshes\\\\pi\\\\m\\\\pi_sc_palm_blank_01.nif\",\n            \"meshes\\\\pi\\\\m\\\\pi_sc_palm_closed_01.nif\",\n        }\n        local searchedModel = types.Book.records[gameObject.recordId].model\n        for _, model in pairs(palmModels) do\n            if searchedModel == model then\n                return true\n            end\n        end\n        return false\n    end,\n    texture = {\n        path = \"textures/openmw_books_enhanced/tx_travbook_palmleafmanuscript.dds\",\n        width = 716,\n        height = 358,\n        colorable = false,\n    },\n    pagesTextArrangement = {\n        page1 = {\n            textArea = {\n                width = 284,\n                height = 62,\n                posTopLeftCornerX = 58,\n                posTopLeftCornerY = 147,\n                isScrollableVertically = false,\n            },\n            pageNumber = {\n                posCenterX = 41,\n                posCenterY = 155,\n            }\n        },\n        page2 = {\n            textArea = {\n                posTopLeftCornerX = 376,\n                posTopLeftCornerY = 147,\n            },\n            pageNumber = {\n                posCenterX = 676,\n                posCenterY = 202,\n            }\n        },\n    },\n    takeButton = {\n        posCenterX = 86,\n        posCenterY = 218,\n    },\n    prevButton = {\n        posCenterX = (58 + (284 / 2)) + 71,\n        posCenterY = 218,\n    },\n    nextButton = {\n        posCenterX = (376 + (284 / 2)) - 71,\n        posCenterY = 218,\n    },\n    closeButton = {\n        posCenterX = 630,\n        posCenterY = 218,\n    },\n}\nreturn DocumentData\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\data_for_openmw_books_enhanced\\0302_tr_card.lua": "local types = require('openmw.types')\n\nlocal DocumentData = {\n    name = \"TrCard\",\n    shouldApplyTo = function(gameObject)\n        return types.Book.records[gameObject.recordId].model == \"meshes\\\\pc\\\\m\\\\pc_misc_card_07.nif\"\n    end,\n    texture = {\n        path = \"textures/openmw_books_enhanced/tx_travbook_card.dds\",\n        width = 360,\n        height = 360,\n        colorable = false,\n    },\n    pagesTextArrangement = {\n        page1 = {\n            textArea = {\n                width = 265,\n                height = 154,\n                posTopLeftCornerX = 53,\n                posTopLeftCornerY = 103,\n                isScrollableVertically = true,\n            },\n            pageNumber = {\n                posCenterX = 53 + (254 / 2),\n                posCenterY = 103 + 154 + 10,\n            }\n        },\n        page2 = nil,\n    },\n    takeButton = {\n        posCenterX = 53 + 20,\n        posCenterY = 103 + 154 + 9,\n    },\n    prevButton = {\n        posCenterX = (53 + (254 / 2)) - 71,\n        posCenterY = 103 + 154 + 9,\n    },\n    nextButton = {\n        posCenterX = (53 + (254 / 2)) + 71,\n        posCenterY = 103 + 154 + 9,\n    },\n    closeButton = {\n        posCenterX = 53 + 254 - 20,\n        posCenterY = 103 + 154 + 9,\n    },\n\n}\nreturn DocumentData\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\data_for_openmw_books_enhanced\\0303_tr_news_echo.lua": "local types = require('openmw.types')\nlocal util = require('openmw.util')\nlocal ui = require('openmw.ui')\n\nlocal DocumentData = {\n    name = \"TrCanyonEcho\",\n    shouldApplyTo = function(gameObject)\n        return types.Book.records[gameObject.recordId].model == \"meshes\\\\tr\\\\m\\\\tr_note_oe_news.nif\"\n            and (string.match(gameObject.recordId, \"t_news_echo\"))\n    end,\n    texture = {\n        path = \"textures/openmw_books_enhanced/tx_travbook_newspaper.dds\",\n        width = 256,\n        height = 400,\n        colorable = false,\n    },\n    pagesTextArrangement = {\n        page1 = {\n            textArea = {\n                width = (256 - (2 * 6)),\n                height = (300 - 30),\n                posTopLeftCornerX = 6,\n                posTopLeftCornerY = 100 + 6,\n                isScrollableVertically = false,\n            },\n            pageNumber = {\n                posCenterX = 256 / 2,\n                posCenterY = 400 - 13,\n            }\n        },\n        page2 = nil,\n    },\n    takeButton = {\n        posCenterX = 35,\n        posCenterY = 20,\n    },\n    prevButton = {\n        posCenterX = 40,\n        posCenterY = 400 - 13,\n    },\n    nextButton = {\n        posCenterX = 256 - 40,\n        posCenterY = 400 - 13,\n    },\n    closeButton = {\n        posCenterX = 256 - 35,\n        posCenterY = 20,\n    },\n    modifyTextBeforeApplying = function(text)\n        return string.gsub(\n            text,\n            \"<IMG SRC=\\\"TR\\\\tr_echo_512_256%.dds\\\" WIDTH=\\\"348\\\" HEIGHT=\\\"168\\\"><BR>\",\n            \"\"\n        )\n    end,\n    additionalWidgetsInDocumentUi = {\n        {\n            type = ui.TYPE.Image,\n            name = \"CustomWidget001\",\n            props = {\n                size = util.vector2(207, 100),\n                position = util.vector2(256 / 2, 15),\n                anchor = util.vector2(0.5, 0.0),\n                resource = ui.texture { path = \"bookart\\\\TR\\\\TR_echo_512_256.dds\" },\n                visible = true,\n            },\n        }\n    },\n}\nreturn DocumentData\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\book.lua": "local self = require('openmw.self')\nlocal types = require('openmw.types')\n\n-- for activating books in the worldspace\nlocal function onActivated(activatingActor)\n    if types.Book.objectIsInstance(self.object) then\n        activatingActor:sendEvent('openmwBooksEnhancedBookActivated', { activatedBookObject = self.object })\n    end\nend\n\nreturn\n{\n    engineHandlers = { onActivated = onActivated }\n}\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\global.lua": "local I = require('openmw.interfaces')\nlocal types = require('openmw.types')\nlocal world = require('openmw.world')\nlocal core = require('openmw.core')\nlocal util = require('openmw.util')\n\n-- for activating books in your inventory\nI.ItemUsage.addHandlerForType(types.Book, function(bookObject, activatingActor)\n    activatingActor:sendEvent('openmwBooksEnhancedBookActivated', { activatedBookObject = bookObject })\n    return true\nend)\n\nlocal function takeItemIntoPlayerInventory(data)\n    -- Hacky way of triggering a stealing ingame, courtesy of @zackhasacat\n    if data.isStolen then\n        local idOfTempItem = \"misc_com_bottle_13\"\n        local bounty = math.max(1, types.Book.records[data.bookObject.recordId].value)\n        local tempStolenObjectToTriggerCrime = world.createObject(\n            idOfTempItem,\n            bounty)\n        tempStolenObjectToTriggerCrime.enabled = true\n        tempStolenObjectToTriggerCrime.owner.recordId = data.bookObject.owner.recordId\n        tempStolenObjectToTriggerCrime.owner.factionId = data.bookObject.owner.factionId\n        tempStolenObjectToTriggerCrime.owner.factionRank = data.bookObject.owner.factionRank\n        tempStolenObjectToTriggerCrime:teleport(data.player.cell, data.player.position)\n\n        world._runStandardActivationAction(tempStolenObjectToTriggerCrime, data.player)\n\n        data.player:sendEvent(\n            'openmwBooksEnhancedRemoveTempStolenItem',\n            { player = data.player, tempStolenItemId = idOfTempItem, amountToRemove = bounty })\n    end\n    data.bookObject:moveInto(types.Player.inventory(data.player))\nend\n\nlocal function removeTempObjectsUsedToTriggerCrime(data)\n    while data.amountToRemove > 0 do\n        local tempItemToRemove = types.Player.inventory(data.player):find(data.tempStolenItemId)\n        if tempItemToRemove then\n            tempItemToRemove:remove(1)\n        end\n        data.amountToRemove = data.amountToRemove - 1\n    end\nend\n\n\nreturn {\n    eventHandlers = {\n        openmwBooksEnhancedBookTaken = takeItemIntoPlayerInventory,\n        openmwBooksEnhancedBookStolenSoRemoveTempObjectsNowThatTickHasPassed = removeTempObjectsUsedToTriggerCrime,\n    }\n}\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\player.lua": "local I = require('openmw.interfaces')\nlocal book_window = require('scripts.openmw_books_enhanced.window.book_window')\nlocal callback_creator = require('scripts.openmw_books_enhanced.outside_manipulators.callback_creator')\nlocal nonmouse_controller = require('scripts.openmw_books_enhanced.outside_manipulators.nonmouse_controller')\nlocal mousewheel = require(\"scripts.openmw_books_enhanced.outside_manipulators.mousewheel_handler\")\nlocal post_opening_actions = require(\"scripts.openmw_books_enhanced.outside_manipulators.post_opening_actions\")\nlocal style_chooser = require('scripts.openmw_books_enhanced.ui_layout.style_chooser')\nlocal book_interface_overrides = require('scripts.openmw_books_enhanced.outside_manipulators.book_interface_overrides')\nlocal read_status_checker = require('scripts.openmw_books_enhanced.outside_manipulators.read_status_checker')\nlocal text_parser = require('scripts.openmw_books_enhanced.wording.text_parser')\nlocal item_taker = require(\"scripts.openmw_books_enhanced.outside_manipulators.item_taker\")\n\nlocal documentWindow = nil\nlocal savedDataForThisMod = {}\n\nlocal function updateDocumentWindowInPlayerScript()\n    if documentWindow == nil then\n        return\n    end\n    documentWindow:update()\nend\n\nlocal function destroyDocumentWindow()\n    if documentWindow then\n        documentWindow:destroy()\n        documentWindow = nil\n    end\nend\n\nlocal function disableVanillaDocumentWindows()\n    local replacedWindows = { \"Book\", \"Scroll\" }\n    for _, windowName in pairs(replacedWindows) do\n        I.UI.registerWindow(\n            windowName,\n            function()\n                --when switching from journal to document\n                if documentWindow and documentWindow.layout and documentWindow.layout.props and not documentWindow.layout.props.visible then\n                    documentWindow.layout.props.visible = true\n                    updateDocumentWindowInPlayerScript()\n                    return\n                end\n\n                documentWindow = book_interface_overrides.createWindowForSituationsWhenBookDidntLoadDueToQuickKeyUsage()\n            end,\n            function()\n                if documentWindow == nil then\n                    return\n                end\n\n                --when switching from document to journal\n                if I.UI.getMode() == \"Journal\" then\n                    documentWindow.layout.props.visible = false\n                    updateDocumentWindowInPlayerScript()\n                    return\n                end\n\n                destroyDocumentWindow()\n            end\n        )\n    end\nend\n\nlocal function onBookOpened(data)\n    destroyDocumentWindow()\n    if book_interface_overrides.wasBookUiOverridenBySomething() then\n        return\n    end\n\n    local chosenDocumentWindowStyle = style_chooser.chooseDocumentWindowStyle(data.activatedBookObject)\n    documentWindow = book_window.createBookWindow(data.activatedBookObject, chosenDocumentWindowStyle)\n    callback_creator.applyWindowCallbacks(data.activatedBookObject, documentWindow)\n    text_parser.applyBookObjectTextToWindow(data.activatedBookObject, documentWindow, chosenDocumentWindowStyle)\n    nonmouse_controller.initiateNonMouseControls(documentWindow)\n    post_opening_actions.applyPostOpeningActions(data.activatedBookObject, savedDataForThisMod)\nend\n\nreturn {\n    engineHandlers = {\n        onActive = function()\n            disableVanillaDocumentWindows()\n        end,\n        onFrame = function()\n            read_status_checker.runReadStatusCheckerOnPointedItem(savedDataForThisMod)\n        end,\n        onLoad = function(savedData)\n            if savedData ~= nil then\n                savedDataForThisMod = savedData\n            end\n        end,\n        onSave = function()\n            return savedDataForThisMod\n        end,\n        onMouseWheel = function(x, y)\n            if documentWindow == nil\n                or documentWindow.layout == nil\n                or (documentWindow.layout.props ~= nil and not documentWindow.layout.props.visible)\n                or x == 0\n            then\n                return\n            end\n            mousewheel.manipulateDocumentWindowBasedOnMouseWheelTurn(documentWindow, x)\n            updateDocumentWindowInPlayerScript()\n        end,\n        onKeyPress = function(key)\n            if documentWindow == nil or documentWindow.layout == nil or documentWindow.layout.props == nil or not documentWindow.layout.props.visible then return end\n            nonmouse_controller.allowReactingToInputs()\n        end,\n        onKeyRelease = function(key)\n            if documentWindow == nil or documentWindow.layout == nil or documentWindow.layout.props == nil or not documentWindow.layout.props.visible then return end\n            nonmouse_controller.reactToKeyboardKey(documentWindow, key)\n        end,\n\n        onControllerButtonPress = function(controllerButton)\n            if documentWindow == nil or documentWindow.layout == nil or documentWindow.layout.props == nil or not documentWindow.layout.props.visible then return end\n            nonmouse_controller.allowReactingToInputs()\n        end,\n        onControllerButtonRelease = function(controllerButton)\n            if documentWindow == nil or documentWindow.layout == nil or documentWindow.layout.props == nil or not documentWindow.layout.props.visible then return end\n            nonmouse_controller.reactToControllerKey(documentWindow, controllerButton)\n        end,\n    },\n    eventHandlers = {\n        openmwBooksEnhancedBookActivated = onBookOpened,\n        openmwBooksEnhancedRemoveTempStolenItem = item_taker.handleCrimeHackCleanup,\n    },\n}\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\settings.lua": "local storage = require('openmw.storage')\nlocal constants = require(\"scripts.openmw_books_enhanced.ui_layout.ui_constants\")\nlocal I = require('openmw.interfaces')\nlocal async = require('openmw.async')\nlocal constants = require(\"scripts.openmw_books_enhanced.ui_layout.ui_constants\")\n\nlocal l10nKey = 'openmw_books_enhanced'\nlocal settingsPageKey = \"SettingsTravOpenmwBooksEnhancedMainPage\"\n\nlocal S = {}\n\nlocal settingToStorage = {}\n\nfunction S.subscribeForChangesIn(settingKey, callbackOnSettingsChange)\n    settingToStorage[settingKey]:subscribe(callbackOnSettingsChange)\nend\n\nlocal function floatSetting(settingKey, default, min, storageForThisSetting)\n    S[settingKey] = function() return storageForThisSetting:get(settingKey) end\n    settingToStorage[settingKey] = storageForThisSetting\n    return {\n        key = settingKey,\n        renderer = 'number',\n        name = settingKey,\n        description = settingKey .. 'Description',\n        default = default,\n        argument =\n        {\n            disabled = false,\n            min = min,\n            integer = false\n        },\n    }\nend\n\nlocal function boolSetting(settingKey, default, storageForThisSetting)\n    S[settingKey] = function() return storageForThisSetting:get(settingKey) end\n    settingToStorage[settingKey] = storageForThisSetting\n    return {\n        key = settingKey,\n        renderer = 'checkbox',\n        name = settingKey,\n        description = settingKey .. 'Description',\n        default = default\n    }\nend\n\nlocal function selectSetting(settingKey, default, listOfValues, storageForThisSetting)\n    S[settingKey] = function() return storageForThisSetting:get(settingKey) end\n    settingToStorage[settingKey] = storageForThisSetting\n    return {\n        key = settingKey,\n        renderer = \"select\",\n        name = settingKey,\n        description = settingKey .. 'Description',\n        default = default,\n        argument = {\n            l10n = l10nKey,\n            items = listOfValues\n        },\n    }\nend\n\nlocal function colorSetting(settingKey, default, storageForThisSetting)\n    S[settingKey] = function() return storageForThisSetting:get(settingKey) end\n    settingToStorage[settingKey] = storageForThisSetting\n    return {\n        key = settingKey,\n        renderer = 'color',\n        name = settingKey,\n        description = settingKey .. 'Description',\n        default = default,\n    }\nend\n\nI.Settings.registerPage({\n    key = settingsPageKey,\n    l10n = l10nKey,\n    name = 'TravOpenmwBooksEnhancedModName',\n    description = settingsPageKey .. \"Description\",\n})\n\nlocal documentWindowSettingsKey = \"SettingsTravOpenmwBooksEnhanced_01Window\"\nlocal storageDocumentWindowSettings = storage.playerSection(documentWindowSettingsKey)\nI.Settings.registerGroup({\n    key = documentWindowSettingsKey,\n    page = settingsPageKey,\n    l10n = l10nKey,\n    name = 'SettingsTravOpenmwBooksEnhanced_DocumentWindowSettings',\n    permanentStorage = true,\n    settings = {\n        boolSetting('SettingsTravOpenmwBooksEnhanced_useRecommendedResolutionMultipliers', true,\n            storageDocumentWindowSettings),\n        floatSetting(\n            'SettingsTravOpenmwBooksEnhanced_documentWindowWidthMultiplier',\n            constants.documentWindowWidthMultiplier,\n            0.9,\n            storageDocumentWindowSettings),\n        floatSetting(\n            'SettingsTravOpenmwBooksEnhanced_documentWindowHeightMultiplier',\n            constants.documentWindowHeightMultiplier,\n            0.9,\n            storageDocumentWindowSettings),\n        floatSetting(\n            'SettingsTravOpenmwBooksEnhanced_scrollbarWidth',\n            constants.scrollbarWidth,\n            4.0,\n            storageDocumentWindowSettings),\n        floatSetting(\n            'SettingsTravOpenmwBooksEnhanced_scrollRatio',\n            3.0,\n            1.0,\n            storageDocumentWindowSettings),\n    },\n})\n\nlocal textSettingsKey = \"SettingsTravOpenmwBooksEnhanced_02Text\"\nlocal storageTextSettings = storage.playerSection(textSettingsKey)\nI.Settings.registerGroup({\n    key = textSettingsKey,\n    page = settingsPageKey,\n    l10n = l10nKey,\n    name = 'SettingsTravOpenmwBooksEnhanced_TextSettings',\n    permanentStorage = true,\n    settings = {\n        floatSetting(\n            'SettingsTravOpenmwBooksEnhanced_textDocumentNormalSize',\n            constants.textDocumentNormalSize,\n            10,\n            storageTextSettings),\n        floatSetting(\n            'SettingsTravOpenmwBooksEnhanced_textDocumentPageNumberSize',\n            constants.textDocumentPageNumberSize,\n            10,\n            storageTextSettings),\n        floatSetting(\n            'SettingsTravOpenmwBooksEnhanced_textDocumentButtonSize',\n            constants.textDocumentButtonSize,\n            10,\n            storageTextSettings),\n        selectSetting(\n            'SettingsTravOpenmwBooksEnhanced_daedricDisplay',\n            \"SettingsTravOpenmwBooksEnhanced_daedricDisplay_normalDaedric\",\n            {\n                \"SettingsTravOpenmwBooksEnhanced_daedricDisplay_normalDaedric\",\n                \"SettingsTravOpenmwBooksEnhanced_daedricDisplay_battlespireFont\"\n            },\n            storageTextSettings),\n    },\n})\n\nlocal imageSettingsKey = \"SettingsTravOpenmwBooksEnhanced_03Image\"\nlocal storageImageSettings = storage.playerSection(imageSettingsKey)\n\nlocal function updateWhenExpandImageToWidthIsSet()\n    local isImageFitToPageWidthEnabled = storageImageSettings:get(\n        'SettingsTravOpenmwBooksEnhanced_expandImageToWidth')\n    I.Settings.updateRendererArgument(imageSettingsKey, 'SettingsTravOpenmwBooksEnhanced_imageSizeMult',\n        { disabled = isImageFitToPageWidthEnabled })\nend\n\nI.Settings.registerGroup({\n    key = imageSettingsKey,\n    page = settingsPageKey,\n    l10n = l10nKey,\n    name = 'SettingsTravOpenmwBooksEnhanced_ImageSettings',\n    permanentStorage = true,\n    settings = {\n        boolSetting(\n            'SettingsTravOpenmwBooksEnhanced_colorBookcover',\n            true,\n            storageImageSettings),\n        boolSetting(\n            'SettingsTravOpenmwBooksEnhanced_expandImageToWidth',\n            false,\n            storageImageSettings),\n        floatSetting(\n            'SettingsTravOpenmwBooksEnhanced_imageSizeMult',\n            1.85,\n            0.9,\n            storageImageSettings),\n    },\n})\n\nlocal readStatusSettingsKey = \"SettingsTravOpenmwBooksEnhanced_040BookReadStatus\"\nlocal storageReadStatusSettings = storage.playerSection(readStatusSettingsKey)\n\nlocal function updateWhenReadStatusIsToggled()\n    local isReadStatusDisabled = not storageReadStatusSettings:get(\n        'SettingsTravOpenmwBooksEnhanced_enableReadStatusDetector')\n    I.Settings.updateRendererArgument(\n        readStatusSettingsKey,\n        'SettingsTravOpenmwBooksEnhanced_readStatusIndicatorSize',\n        { disabled = isReadStatusDisabled })\n    I.Settings.updateRendererArgument(\n        readStatusSettingsKey,\n        'SettingsTravOpenmwBooksEnhanced_readStatusIndicatorColor',\n        { disabled = isReadStatusDisabled })\n    I.Settings.updateRendererArgument(\n        readStatusSettingsKey,\n        'SettingsTravOpenmwBooksEnhanced_readStatusIndicatorPosX',\n        { disabled = isReadStatusDisabled })\n    I.Settings.updateRendererArgument(\n        readStatusSettingsKey,\n        'SettingsTravOpenmwBooksEnhanced_readStatusIndicatorPosY',\n        { disabled = isReadStatusDisabled })\nend\n\nI.Settings.registerGroup({\n    key = readStatusSettingsKey,\n    page = settingsPageKey,\n    l10n = l10nKey,\n    name = 'SettingsTravOpenmwBooksEnhanced_ReadStatusSettings',\n    permanentStorage = true,\n    settings = {\n        boolSetting(\n            'SettingsTravOpenmwBooksEnhanced_enableReadStatusDetector',\n            true,\n            storageReadStatusSettings),\n        floatSetting(\n            'SettingsTravOpenmwBooksEnhanced_readStatusIndicatorSize',\n            32,\n            10,\n            storageReadStatusSettings),\n        colorSetting(\n            'SettingsTravOpenmwBooksEnhanced_readStatusIndicatorColor',\n            constants.paperLikeColor,\n            storageReadStatusSettings),\n        floatSetting(\n            'SettingsTravOpenmwBooksEnhanced_readStatusIndicatorPosX',\n            0.505,\n            0,\n            storageReadStatusSettings),\n        floatSetting(\n            'SettingsTravOpenmwBooksEnhanced_readStatusIndicatorPosY',\n            0.505,\n            0,\n            storageReadStatusSettings),\n    },\n})\n\nlocal miscSettingsKey = \"SettingsTravOpenmwBooksEnhanced_04Misc\"\nlocal storageMiscSettings = storage.playerSection(miscSettingsKey)\n\nI.Settings.registerGroup({\n    key = miscSettingsKey,\n    page = settingsPageKey,\n    l10n = l10nKey,\n    name = 'SettingsTravOpenmwBooksEnhanced_MiscSettings',\n    permanentStorage = true,\n    settings = {\n        boolSetting(\n            'SettingsTravOpenmwBooksEnhanced_equipEnchantments',\n            true,\n            storageMiscSettings),\n    },\n})\n\nstorageImageSettings:subscribe(async:callback(updateWhenExpandImageToWidthIsSet))\nstorageReadStatusSettings:subscribe(async:callback(updateWhenReadStatusIsToggled))\n\nreturn S\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\outside_manipulators\\book_interface_overrides.lua": "local util = require('openmw.util')\nlocal I = require('openmw.interfaces')\nlocal ui = require('openmw.ui')\nlocal l10n = require('openmw.core').l10n(\"openmw_books_enhanced\")\nlocal constants = require(\"scripts.openmw_books_enhanced.ui_layout.ui_constants\")\nlocal content_name = require(\"scripts.openmw_books_enhanced.window.content_element_names\")\n\nlocal UN = {}\n\nfunction UN.createWindowForSituationsWhenBookDidntLoadDueToQuickKeyUsage()\n    return ui.create({\n        layer = 'Windows',\n        name = content_name.unsupportedWarning,\n        template = I.MWUI.templates.boxSolid,\n        props = {\n            relativePosition = util.vector2(0.5, 0.5),\n            anchor = util.vector2(0.5, 0.5),\n        },\n        content = ui.content({\n            {\n                type = ui.TYPE.Text,\n                props = {\n                    size = util.vector2(\n                        ui.screenSize().x / 2,\n                        ui.screenSize().y / 4\n                    ),\n                    textAlignH = ui.ALIGNMENT.Center,\n                    textAlignV = ui.ALIGNMENT.Center,\n                    autoSize = false,\n                    wordWrap = true,\n                    multiline = true,\n                    textSize = constants.textDocumentNormalSize,\n                    textColor = constants.paperLikeColor,\n                    text = \"[\" .. l10n(\"TravOpenmwBooksEnhancedModName\") ..\n                        \"]\\n\\n\" .. l10n(\"TravOpenmwBooksEnhancedQuickKeysUnsupported\")\n                }\n            }\n        })\n    })\nend\n\nfunction UN.wasBookUiOverridenBySomething()\n    for _, activeUiMode in pairs(I.UI.modes) do\n        if activeUiMode == I.UI.MODE.Book or activeUiMode == I.UI.MODE.Scroll then\n            return false\n        end\n    end\n    return true\nend\n\nreturn UN\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\outside_manipulators\\callback_creator.lua": "local content_name = require(\"scripts.openmw_books_enhanced.window.content_element_names\")\nlocal readable_space_shifter = require(\"scripts.openmw_books_enhanced.outside_manipulators.readable_space_shifter\")\nlocal item_taker = require(\"scripts.openmw_books_enhanced.outside_manipulators.item_taker\")\nlocal I = require('openmw.interfaces')\nlocal ambient = require('openmw.ambient')\nlocal async = require('openmw.async')\nlocal self = require('openmw.self')\n\nlocal function applyWindowUpdateCallback(widget, documentWindow)\n    if widget.userData == nil then\n        widget.userData = {}\n    end\n    widget.userData.callUpdateWindow = function()\n        if documentWindow == nil then\n            return\n        end\n        documentWindow:update()\n    end\nend\n\nlocal function closeBookOrScroll(documentWindow)\n    if I.UI.getMode() == \"Scroll\" then\n        I.UI.removeMode(\"Scroll\")\n    else\n        I.UI.removeMode(\"Book\")\n    end\n    if documentWindow then\n        documentWindow:destroy()\n        documentWindow = nil\n    end\nend\n\nlocal function applyCloseButtonCallbacks(documentWindow)\n    if documentWindow.layout.content:indexOf(content_name.closeButton) ~= nil then\n        applyWindowUpdateCallback(documentWindow.layout.content[content_name.closeButton], documentWindow)\n        documentWindow.layout.content[content_name.closeButton].userData.onClicking = function()\n            closeBookOrScroll(documentWindow)\n        end\n    end\nend\n\nlocal function applyTakeButtonCallbacks(activatedBookObject, documentWindow)\n    if documentWindow.layout.content:indexOf(content_name.takeButton) ~= nil then\n        if activatedBookObject.parentContainer == self.object then\n            documentWindow.layout.content[content_name.takeButton].props.visible = false\n            return\n        end\n\n        applyWindowUpdateCallback(documentWindow.layout.content[content_name.takeButton], documentWindow)\n        documentWindow.layout.content[content_name.takeButton].userData.onClicking = function()\n            item_taker.takeItem(activatedBookObject)\n            closeBookOrScroll(documentWindow)\n        end\n    end\nend\n\nlocal function applyPrevButtonCallbacks(documentWindow)\n    if documentWindow.layout.content:indexOf(content_name.prevButton) ~= nil then\n        applyWindowUpdateCallback(documentWindow.layout.content[content_name.prevButton], documentWindow)\n        documentWindow.layout.content[content_name.prevButton].userData.onClicking = function()\n            readable_space_shifter.shiftToPrevPage(documentWindow)\n        end\n    end\nend\n\nlocal function applyNextButtonCallbacks(documentWindow)\n    if documentWindow.layout.content:indexOf(content_name.nextButton) ~= nil then\n        applyWindowUpdateCallback(documentWindow.layout.content[content_name.nextButton], documentWindow)\n        documentWindow.layout.content[content_name.nextButton].userData.onClicking = function()\n            readable_space_shifter.shiftToNextPage(documentWindow)\n        end\n    end\nend\n\nlocal function applyScrollUpCallback(documentWindow)\n    if documentWindow.layout.content:indexOf(content_name.leftPage.pageScrollbarUpButton_BORDER) ~= nil then\n        applyWindowUpdateCallback(\n            documentWindow.layout.content[content_name.leftPage.pageScrollbarUpButton_BORDER].content\n            [content_name.leftPage.pageScrollbarUpButton],\n            documentWindow)\n\n        documentWindow.layout.content[content_name.leftPage.pageScrollbarUpButton_BORDER].content\n        [content_name.leftPage.pageScrollbarUpButton].events =\n        {\n            mouseClick = async:callback(function(e, thisObject)\n                ambient.playSound(\"menu click\")\n                readable_space_shifter.shiftSpaceUp(documentWindow)\n                thisObject.userData.callUpdateWindow()\n            end)\n        }\n    end\nend\n\nlocal function applyScrollDownCallback(documentWindow)\n    if documentWindow.layout.content:indexOf(content_name.leftPage.pageScrollbarDownButton_BORDER) ~= nil then\n        applyWindowUpdateCallback(\n            documentWindow.layout.content[content_name.leftPage.pageScrollbarDownButton_BORDER].content\n            [content_name.leftPage.pageScrollbarDownButton],\n            documentWindow)\n\n        documentWindow.layout.content[content_name.leftPage.pageScrollbarDownButton_BORDER].content\n        [content_name.leftPage.pageScrollbarDownButton].events =\n        {\n            mouseClick = async:callback(function(e, thisObject)\n                ambient.playSound(\"menu click\")\n                readable_space_shifter.shiftSpaceDown(documentWindow)\n                thisObject.userData.callUpdateWindow()\n            end)\n        }\n    end\nend\n\nlocal X = {}\n\nfunction X.applyWindowCallbacks(activatedBookObject, documentWindow)\n    if documentWindow == nil or documentWindow.layout == nil or documentWindow.layout.content == nil then\n        return\n    end\n\n    applyCloseButtonCallbacks(documentWindow)\n    applyTakeButtonCallbacks(activatedBookObject, documentWindow)\n    applyPrevButtonCallbacks(documentWindow)\n    applyNextButtonCallbacks(documentWindow)\n    applyScrollUpCallback(documentWindow)\n    applyScrollDownCallback(documentWindow)\nend\n\nreturn X\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\outside_manipulators\\item_taker.lua": "local core = require('openmw.core')\nlocal types = require('openmw.types')\nlocal ui = require('openmw.ui')\nlocal self = require('openmw.self')\n\nlocal IT = {}\n\nfunction IT.takeItem(activatedBookObject)\n    if not activatedBookObject.enabled then\n        return\n    end\n\n    local isStolen =\n        activatedBookObject.owner.recordId\n        or\n        (activatedBookObject.owner.factionId and types.NPC.getFactionRank(self, activatedBookObject.owner.factionId) == 0)\n        or\n        (activatedBookObject.owner.factionId and types.NPC.getFactionRank(self, activatedBookObject.owner.factionId) < activatedBookObject.owner.factionRank)\n\n    core.sendGlobalEvent(\n        \"openmwBooksEnhancedBookTaken\",\n        { player = self, bookObject = activatedBookObject, isStolen = isStolen })\nend\n\nfunction IT.handleCrimeHackCleanup(data)\n    core.sendGlobalEvent(\n        \"openmwBooksEnhancedBookStolenSoRemoveTempObjectsNowThatTickHasPassed\",\n        data)\nend\n\nreturn IT\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\outside_manipulators\\mousewheel_handler.lua": "local readable_space_shifter = require(\"scripts.openmw_books_enhanced.outside_manipulators.readable_space_shifter\")\nlocal content_name = require(\"scripts.openmw_books_enhanced.window.content_element_names\")\n\nlocal MW = {}\n\nfunction MW.manipulateDocumentWindowBasedOnMouseWheelTurn(documentWindow, x)\n    if x > 0 then --up\n        if documentWindow.layout.content:indexOf(content_name.leftPage.pageScrollbarDownButton_BORDER) ~= nil then\n            readable_space_shifter.shiftSpaceUp(documentWindow)\n        else\n            readable_space_shifter.shiftToPrevPage(documentWindow)\n        end\n    elseif x < 0 then -- down\n        if documentWindow.layout.content:indexOf(content_name.leftPage.pageScrollbarDownButton_BORDER) ~= nil then\n            readable_space_shifter.shiftSpaceDown(documentWindow)\n        else\n            readable_space_shifter.shiftToNextPage(documentWindow)\n        end\n    end\nend\n\nreturn MW\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\outside_manipulators\\nonmouse_controller.lua": "local content_name = require(\"scripts.openmw_books_enhanced.window.content_element_names\")\nlocal mousewheel = require(\"scripts.openmw_books_enhanced.outside_manipulators.mousewheel_handler\")\nlocal input = require('openmw.input')\n\nlocal currentHighlightedObject = nil\nlocal shouldIgnoreButtonReleases = true\n\nlocal function updateDocumentWindowInKeyboardControllerScript(documentWindow)\n    if documentWindow == nil then\n        return\n    end\n    documentWindow:update()\nend\n\nlocal function isButtonHidden(documentWindow, buttonName)\n    return documentWindow.layout.content:indexOf(buttonName) == nil\n        or documentWindow.layout.content[buttonName].props == nil\n        or documentWindow.layout.content[buttonName].props.visible == false\nend\n\nlocal function setUnderline(documentWindow)\n    if documentWindow == nil or documentWindow.layout == nil or documentWindow.layout.props == nil or not documentWindow.layout.props.visible then\n        return\n    end\n    local function setUnderlineInButton(buttonName)\n        if documentWindow.layout.content:indexOf(buttonName) ~= nil then\n            documentWindow.layout.content[buttonName].content[content_name.controlUnderline].props.visible =\n                (currentHighlightedObject == buttonName)\n        end\n    end\n    local underLineVisualSetters = {\n        [content_name.closeButton] = function()\n            setUnderlineInButton(content_name.closeButton)\n        end,\n        [content_name.prevButton] = function()\n            setUnderlineInButton(content_name.prevButton)\n        end,\n        [content_name.nextButton] = function()\n            setUnderlineInButton(content_name.nextButton)\n        end,\n        [content_name.takeButton] = function()\n            setUnderlineInButton(content_name.takeButton)\n        end,\n    }\n    for _, setUnderlineVisual in pairs(underLineVisualSetters) do\n        setUnderlineVisual()\n    end\nend\n\nlocal function shiftHighlightedObjectBy(documentWindow, nextObject)\n    if nextObject[currentHighlightedObject] == nil then return end\n\n    currentHighlightedObject = nextObject[currentHighlightedObject]\n    while isButtonHidden(documentWindow, currentHighlightedObject) do\n        currentHighlightedObject = nextObject[currentHighlightedObject]\n    end\n    setUnderline(documentWindow)\n    updateDocumentWindowInKeyboardControllerScript(documentWindow)\nend\n\nlocal function executeCurrentHighlightedObject(documentWindow)\n    if currentHighlightedObject == nil then\n        return\n    end\n    local objectExecutors = {\n        [content_name.closeButton] = function(documentWindow)\n            documentWindow.layout.content[content_name.closeButton].userData.onClicking()\n        end,\n        [content_name.nextButton] = function(documentWindow)\n            documentWindow.layout.content[content_name.nextButton].userData.onClicking()\n            if not documentWindow.layout.content[content_name.nextButton].props.visible then\n                shiftHighlightedObjectBy(\n                    documentWindow,\n                    {\n                        [content_name.nextButton] = content_name.prevButton\n                    })\n            end\n        end,\n        [content_name.prevButton] = function(documentWindow)\n            documentWindow.layout.content[content_name.prevButton].userData.onClicking()\n            if not documentWindow.layout.content[content_name.prevButton].props.visible then\n                shiftHighlightedObjectBy(\n                    documentWindow,\n                    {\n                        [content_name.prevButton] = content_name.nextButton\n                    })\n            end\n        end,\n        [content_name.takeButton] = function(documentWindow)\n            documentWindow.layout.content[content_name.takeButton].userData.onClicking()\n        end,\n    }\n    if objectExecutors[currentHighlightedObject] ~= nil and not isButtonHidden(documentWindow, currentHighlightedObject) then\n        objectExecutors[currentHighlightedObject](documentWindow)\n    end\nend\n\nlocal function shiftHighlightedObjectToTheLeft(documentWindow)\n    shiftHighlightedObjectBy(\n        documentWindow,\n        {\n            [content_name.closeButton] = content_name.nextButton,\n            [content_name.nextButton] = content_name.prevButton,\n            [content_name.prevButton] = content_name.takeButton,\n            [content_name.takeButton] = content_name.closeButton,\n        })\nend\n\nlocal function shiftHighlightedObjectToTheRight(documentWindow)\n    shiftHighlightedObjectBy(\n        documentWindow,\n        {\n            [content_name.closeButton] = content_name.takeButton,\n            [content_name.takeButton] = content_name.prevButton,\n            [content_name.prevButton] = content_name.nextButton,\n            [content_name.nextButton] = content_name.closeButton,\n        })\nend\n\nlocal K = {}\n\nfunction K.allowReactingToInputs()\n    shouldIgnoreButtonReleases = false\nend\n\nfunction K.initiateNonMouseControls(documentWindow)\n    currentHighlightedObject = content_name.closeButton\n    shouldIgnoreButtonReleases = true\n    -- setUnderline(documentWindow)\nend\n\nlocal INPUT = {\n    ACTIVATE = 100,\n    LEFT = 200,\n    RIGHT = 300,\n    UP = 400,\n    DOWN = 500,\n}\n\nlocal function reactToInput(documentWindow, input)\n    if documentWindow == nil or documentWindow.layout == nil or documentWindow.layout.props == nil or not documentWindow.layout.props.visible then\n        return\n    end\n    if shouldIgnoreButtonReleases then\n        return\n    end\n    if input == INPUT.ACTIVATE then\n        executeCurrentHighlightedObject(documentWindow)\n        updateDocumentWindowInKeyboardControllerScript(documentWindow)\n    elseif input == INPUT.LEFT then\n        shiftHighlightedObjectToTheLeft(documentWindow)\n    elseif input == INPUT.RIGHT then\n        shiftHighlightedObjectToTheRight(documentWindow)\n    elseif input == INPUT.UP then\n        mousewheel.manipulateDocumentWindowBasedOnMouseWheelTurn(documentWindow, 1)\n        updateDocumentWindowInKeyboardControllerScript(documentWindow)\n    elseif input == INPUT.DOWN then\n        mousewheel.manipulateDocumentWindowBasedOnMouseWheelTurn(documentWindow, -1)\n        updateDocumentWindowInKeyboardControllerScript(documentWindow)\n    end\nend\n\nfunction K.reactToKeyboardKey(documentWindow, keyboardKey)\n    if documentWindow == nil or documentWindow.layout == nil or documentWindow.layout.props == nil or not documentWindow.layout.props.visible then\n        return\n    end\n    if keyboardKey.code == input.KEY.E or keyboardKey.code == input.KEY.Enter then\n        reactToInput(documentWindow, INPUT.ACTIVATE)\n    elseif keyboardKey.code == input.KEY.A or keyboardKey.code == input.KEY.LeftArrow then\n        reactToInput(documentWindow, INPUT.LEFT)\n    elseif keyboardKey.code == input.KEY.D or keyboardKey.code == input.KEY.RightArrow then\n        reactToInput(documentWindow, INPUT.RIGHT)\n    elseif keyboardKey.code == input.KEY.W or keyboardKey.code == input.KEY.UpArrow then\n        reactToInput(documentWindow, INPUT.UP)\n    elseif keyboardKey.code == input.KEY.S or keyboardKey.code == input.KEY.DownArrow then\n        reactToInput(documentWindow, INPUT.DOWN)\n    end\nend\n\nfunction K.reactToControllerKey(documentWindow, controllerKey) --TODO buggy\n    if documentWindow == nil or documentWindow.layout == nil or documentWindow.layout.props == nil or not documentWindow.layout.props.visible then\n        return\n    end\n    if controllerKey == input.CONTROLLER_BUTTON.A then\n        reactToInput(documentWindow, INPUT.ACTIVATE)\n    elseif controllerKey == input.CONTROLLER_BUTTON.DPadLeft then\n        reactToInput(documentWindow, INPUT.LEFT)\n    elseif controllerKey == input.CONTROLLER_BUTTON.DPadRight then\n        reactToInput(documentWindow, INPUT.RIGHT)\n    elseif controllerKey == input.CONTROLLER_BUTTON.DPadUp or controllerKey == input.CONTROLLER_BUTTON.LeftShoulder then\n        reactToInput(documentWindow, INPUT.UP)\n    elseif controllerKey == input.CONTROLLER_BUTTON.DPadDown or controllerKey == input.CONTROLLER_BUTTON.RightShoulder then\n        reactToInput(documentWindow, INPUT.DOWN)\n    end\nend\n\nreturn K\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\outside_manipulators\\page_setter.lua": "local content_name = require(\"scripts.openmw_books_enhanced.window.content_element_names\")\nlocal templates = require(\"scripts.openmw_books_enhanced.ui_layout.ui_templates\")\nlocal util = require('openmw.util')\nlocal ui = require('openmw.ui')\n\nlocal function makePage(documentWindow, pageNumber, contentName)\n    local linesForPage = {}\n    local accumulatedLineWidth = 0\n    local accumulatedLineHeight = 0\n    for _, line in pairs(documentWindow.layout.userData.lines) do\n        if line.userData.page == pageNumber then\n            table.insert(linesForPage, line)\n            accumulatedLineWidth = math.max(accumulatedLineWidth, line.userData.width)\n            accumulatedLineHeight = accumulatedLineHeight + line.userData.height\n        end\n    end\n    return {\n        name = contentName.pageReadableSpaceInside,\n        template = templates.journalPageText,\n        props = {\n            position = util.vector2(0, 0),\n        },\n        userData = {\n            width = accumulatedLineWidth,\n            height = accumulatedLineHeight,\n        },\n        content = ui.content(linesForPage)\n    }\nend\n\nlocal PS = {}\n\nfunction PS.setPages(documentWindow)\n    documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content = ui.content({\n        makePage(documentWindow, documentWindow.layout.userData.currentPageNumber, content_name.leftPage)\n    })\n\n    if documentWindow.layout.content:indexOf(content_name.leftPageNumber) ~= nil then\n        documentWindow.layout.content[content_name.leftPageNumber].props.text =\n            tostring(documentWindow.layout.userData.currentPageNumber)\n    end\n\n    if documentWindow.layout.content:indexOf(content_name.rightPageNumber) ~= nil then\n        documentWindow.layout.content[content_name.rightPageNumber].props.text =\n            tostring(documentWindow.layout.userData.currentPageNumber + 1)\n    end\n\n    if documentWindow.layout.content:indexOf(content_name.rightPage.pageReadableSpace) ~= nil then\n        if documentWindow.layout.userData.lines\n            and #documentWindow.layout.userData.lines > 0\n            and documentWindow.layout.userData.currentPageNumber + 1 <= documentWindow.layout.userData.lines[#documentWindow.layout.userData.lines].userData.page then\n            documentWindow.layout.content[content_name.rightPage.pageReadableSpace].content = ui.content({\n                makePage(documentWindow, documentWindow.layout.userData.currentPageNumber + 1, content_name.rightPage)\n            })\n        else\n            documentWindow.layout.content[content_name.rightPage.pageReadableSpace].content = ui.content({})\n        end\n    end\n\n    if documentWindow.layout.content:indexOf(content_name.prevButton) ~= nil then\n        documentWindow.layout.content[content_name.prevButton].props.visible = (documentWindow.layout.userData.currentPageNumber ~= 1)\n    end\n    if documentWindow.layout.content:indexOf(content_name.nextButton) ~= nil then\n        local numberOfPages = 0\n        if documentWindow.layout.userData.lines and #documentWindow.layout.userData.lines > 0 then\n            numberOfPages = documentWindow.layout.userData.lines[#documentWindow.layout.userData.lines].userData.page\n        end\n        local shouldShowNextButton = (documentWindow.layout.userData.currentPageNumber < numberOfPages)\n        if documentWindow.layout.content:indexOf(content_name.rightPageNumber) ~= nil and numberOfPages % 2 == 0 then\n            shouldShowNextButton = (documentWindow.layout.userData.currentPageNumber + 1 < numberOfPages)\n        end\n        documentWindow.layout.content[content_name.nextButton].props.visible = shouldShowNextButton\n    end\n    if documentWindow.layout.content:indexOf(content_name.leftPage.pageScrollbarDownButton_BORDER) ~= nil then\n        local boundaryHeight = documentWindow.layout.content[content_name.leftPage.pageReadableSpace].props.size.y\n        local readableHeight = documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content\n            [content_name.leftPage.pageReadableSpaceInside].userData.height\n\n        local shouldShowScrolling = (readableHeight >= boundaryHeight)\n        documentWindow.layout.content[content_name.leftPage.pageScrollbarUpButton_BORDER].props.visible =\n            shouldShowScrolling\n        documentWindow.layout.content[content_name.leftPage.pageScrollbarElevator_BORDER].props.visible =\n            shouldShowScrolling\n        documentWindow.layout.content[content_name.leftPage.pageScrollbarDownButton_BORDER].props.visible =\n            shouldShowScrolling\n    end\nend\n\nreturn PS\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\outside_manipulators\\post_opening_actions.lua": "local types = require('openmw.types')\nlocal self = require('openmw.self')\nlocal settings = require(\"scripts.openmw_books_enhanced.settings\")\n\nlocal M = {}\n\nlocal function tryEquippingMagicSpellInBook(activatedBookObject)\n    if not settings.SettingsTravOpenmwBooksEnhanced_equipEnchantments() then\n        return\n    end\n\n    local bookRecord = types.Book.records[activatedBookObject.recordId]\n    if not bookRecord or not bookRecord.enchant or bookRecord.enchant == \"\" then\n        return\n    end\n\n    types.Actor.setSelectedEnchantedItem(self, activatedBookObject)\nend\n\nlocal function recordReadStatusForThisItemRecord(activatedBookObject, savedDataForThisMod)\n    if not activatedBookObject\n        or not activatedBookObject.recordId\n        or not savedDataForThisMod then\n        return\n    end\n\n    if not savedDataForThisMod.alreadyReadTexts then\n        savedDataForThisMod.alreadyReadTexts = {}\n    end\n\n    savedDataForThisMod.alreadyReadTexts[activatedBookObject.recordId] = true\nend\n\nfunction M.applyPostOpeningActions(activatedBookObject, savedDataForThisMod)\n    tryEquippingMagicSpellInBook(activatedBookObject)\n    recordReadStatusForThisItemRecord(activatedBookObject, savedDataForThisMod)\nend\n\nreturn M\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\outside_manipulators\\readable_space_shifter.lua": "local content_name = require(\"scripts.openmw_books_enhanced.window.content_element_names\")\nlocal settings = require(\"scripts.openmw_books_enhanced.settings\")\nlocal page_setter = require(\"scripts.openmw_books_enhanced.outside_manipulators.page_setter\")\nlocal util = require('openmw.util')\nlocal ambient = require('openmw.ambient')\n\nlocal RSS = {}\n\nfunction RSS.shiftSpaceUp(documentWindow)\n    if\n        documentWindow == nil\n        or documentWindow.layout == nil\n        or documentWindow.layout.content == nil\n        or documentWindow.layout.content[content_name.leftPage.pageReadableSpace] == nil\n        or documentWindow.layout.content[content_name.leftPage.pageReadableSpace].props == nil\n        or documentWindow.layout.content[content_name.leftPage.pageReadableSpace].props.size == nil\n        or documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content == nil\n        or documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content[content_name.leftPage.pageReadableSpaceInside] == nil\n        or documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content[content_name.leftPage.pageReadableSpaceInside].userData == nil\n        or documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content[content_name.leftPage.pageReadableSpaceInside].props == nil\n        or documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content[content_name.leftPage.pageReadableSpaceInside].props.position == nil\n    then\n        return\n    end\n\n    local boundaryHeight = documentWindow.layout.content[content_name.leftPage.pageReadableSpace].props.size.y\n    local readableHeight = documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content\n        [content_name.leftPage.pageReadableSpaceInside].userData.height\n    local currentYPosition = documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content\n        [content_name.leftPage.pageReadableSpaceInside].props.position.y\n    local limit = 0\n\n    if currentYPosition >= limit or readableHeight <= boundaryHeight then\n        return\n    end\n\n    local amountToShiftBy = settings.SettingsTravOpenmwBooksEnhanced_scrollRatio() *\n        settings.SettingsTravOpenmwBooksEnhanced_textDocumentNormalSize()\n\n    documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content\n    [content_name.leftPage.pageReadableSpaceInside].props.position = util.vector2(0, currentYPosition + amountToShiftBy)\nend\n\nfunction RSS.shiftSpaceDown(documentWindow)\n    if\n        documentWindow == nil\n        or documentWindow.layout == nil\n        or documentWindow.layout.content == nil\n        or documentWindow.layout.content[content_name.leftPage.pageReadableSpace] == nil\n        or documentWindow.layout.content[content_name.leftPage.pageReadableSpace].props == nil\n        or documentWindow.layout.content[content_name.leftPage.pageReadableSpace].props.size == nil\n        or documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content == nil\n        or documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content[content_name.leftPage.pageReadableSpaceInside] == nil\n        or documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content[content_name.leftPage.pageReadableSpaceInside].userData == nil\n        or documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content[content_name.leftPage.pageReadableSpaceInside].props == nil\n        or documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content[content_name.leftPage.pageReadableSpaceInside].props.position == nil\n    then\n        return\n    end\n\n    local boundaryHeight = documentWindow.layout.content[content_name.leftPage.pageReadableSpace].props.size.y\n    local readableHeight = documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content\n        [content_name.leftPage.pageReadableSpaceInside].userData.height\n    local currentYPosition = documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content\n        [content_name.leftPage.pageReadableSpaceInside].props.position.y\n    local limit = -(readableHeight - boundaryHeight)\n\n    if currentYPosition <= limit or readableHeight <= boundaryHeight then\n        return\n    end\n\n    local amountToShiftBy = settings.SettingsTravOpenmwBooksEnhanced_scrollRatio() *\n        settings.SettingsTravOpenmwBooksEnhanced_textDocumentNormalSize()\n\n    documentWindow.layout.content[content_name.leftPage.pageReadableSpace].content\n    [content_name.leftPage.pageReadableSpaceInside].props.position = util.vector2(0, currentYPosition - amountToShiftBy)\nend\n\nfunction RSS.shiftToNextPage(documentWindow)\n    if\n        documentWindow == nil\n        or documentWindow.layout == nil\n        or documentWindow.layout.userData == nil\n        or documentWindow.layout.userData.lines == nil\n        or #documentWindow.layout.userData.lines < 1\n        or documentWindow.layout.userData.currentPageNumber == nil\n    then\n        return\n    end\n\n    local numberOfPages =\n        documentWindow.layout.userData.lines[#documentWindow.layout.userData.lines].userData.page\n\n    local newPageNumber = documentWindow.layout.userData.currentPageNumber\n    if documentWindow.layout.content:indexOf(content_name.rightPageNumber) ~= nil then\n        if numberOfPages % 2 == 0 then\n            numberOfPages = numberOfPages - 1\n        end\n        newPageNumber = math.min(\n            numberOfPages,\n            documentWindow.layout.userData.currentPageNumber + 2\n        )\n    else\n        newPageNumber = math.min(\n            numberOfPages,\n            documentWindow.layout.userData.currentPageNumber + 1\n        )\n    end\n\n    if newPageNumber ~= documentWindow.layout.userData.currentPageNumber then\n        documentWindow.layout.userData.currentPageNumber = newPageNumber\n        page_setter.setPages(documentWindow)\n        ambient.playSound(\"book page2\")\n    end\nend\n\nfunction RSS.shiftToPrevPage(documentWindow)\n    if\n        documentWindow == nil\n        or documentWindow.layout == nil\n        or documentWindow.layout.userData == nil\n        or documentWindow.layout.userData.currentPageNumber == nil\n    then\n        return\n    end\n\n    local newPageNumber = documentWindow.layout.userData.currentPageNumber\n    if documentWindow.layout.content:indexOf(content_name.rightPageNumber) ~= nil then\n        newPageNumber = math.max(\n            1,\n            documentWindow.layout.userData.currentPageNumber - 2)\n    else\n        newPageNumber = math.max(\n            1,\n            documentWindow.layout.userData.currentPageNumber - 1)\n    end\n\n    if newPageNumber ~= documentWindow.layout.userData.currentPageNumber then\n        documentWindow.layout.userData.currentPageNumber = newPageNumber\n        page_setter.setPages(documentWindow)\n        ambient.playSound(\"book page\")\n    end\nend\n\nreturn RSS\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\outside_manipulators\\read_status_checker.lua": "local settings = require(\"scripts.openmw_books_enhanced.settings\")\nlocal I = require('openmw.interfaces')\nlocal core = require('openmw.core')\nlocal util = require('openmw.util')\nlocal types = require('openmw.types')\nlocal nearby = require('openmw.nearby')\nlocal self = require('openmw.self')\nlocal ui = require('openmw.ui')\nlocal storage = require('openmw.storage')\nlocal camera = require('openmw.camera')\n\nlocal currentlyInspectedBookItemRecordId = nil\n\nlocal tooltipForReadStatus = nil\n\nlocal ownlysReadStorageName = \"ReadBooksOwnlysQuickLoot\"\nlocal function isOwnlysReadBookStorageAvailable()\n    for storageKey, _ in pairs(storage.allPlayerSections()) do\n        if storageKey == ownlysReadStorageName then\n            return true\n        end\n    end\n    return false\nend\nlocal isOwnlysStorageAvailable = isOwnlysReadBookStorageAvailable()\n\nlocal RSS = {}\n\nlocal function destroyTooltip()\n    if tooltipForReadStatus then\n        tooltipForReadStatus:destroy()\n        tooltipForReadStatus = nil\n    end\nend\n\nlocal function destroyTooltipAndRecord()\n    if not currentlyInspectedBookItemRecordId then return end\n    destroyTooltip()\n    currentlyInspectedBookItemRecordId = nil\nend\n\nlocal function isItemAlreadyRead(itemRecordId, savedDataForThisMod)\n    if savedDataForThisMod\n        and savedDataForThisMod.alreadyReadTexts\n        and (savedDataForThisMod.alreadyReadTexts[itemRecordId] ~= nil) then\n        return true\n    elseif isOwnlysStorageAvailable then\n        local ownlysBookSection = storage.playerSection(ownlysReadStorageName)\n        return ownlysBookSection:get(itemRecordId)\n    end\n    return false\nend\n\nlocal function createTooltipSpace()\n    local iconSize = settings.SettingsTravOpenmwBooksEnhanced_readStatusIndicatorSize()\n    local posX = settings.SettingsTravOpenmwBooksEnhanced_readStatusIndicatorPosX()\n    local posY = settings.SettingsTravOpenmwBooksEnhanced_readStatusIndicatorPosY()\n    local color = settings.SettingsTravOpenmwBooksEnhanced_readStatusIndicatorColor()\n\n    local result = ui.create(\n        {\n            layer = 'HUD',\n            type = ui.TYPE.Image,\n            props = {\n                visible = true,\n                relativePosition = util.vector2(posX, posY),\n                size = util.vector2(iconSize, iconSize),\n                resource = ui.texture { path = 'textures/openmw_books_enhanced/tx_travbook_readIndicator.dds' },\n                color = color,\n            },\n        })\n\n    return result\nend\n\nfunction RSS.runReadStatusCheckerOnPointedItem(savedDataForThisMod)\n    if I.UI.getMode()\n        or not settings.SettingsTravOpenmwBooksEnhanced_enableReadStatusDetector()\n        or not ((savedDataForThisMod and savedDataForThisMod.alreadyReadTexts) or isOwnlysStorageAvailable) then\n        destroyTooltipAndRecord()\n        return\n    end\n\n    local cameraPos = camera.getPosition()\n    local iMaxActivateDist = core.getGMST(\"iMaxActivateDist\") + 0.1\n    local activationDistance = iMaxActivateDist + camera.getThirdPersonDistance();\n    local telekinesis = types.Actor.activeEffects(self):getEffect(core.magic.EFFECT_TYPE.Telekinesis);\n    if telekinesis then\n        activationDistance = activationDistance + (telekinesis.magnitude * 22);\n    end\n    activationDistance = activationDistance + 0.1\n    local res = nearby.castRenderingRay(\n        cameraPos,\n        cameraPos + camera.viewportToWorldVector(util.vector2(0.5, 0.5)) * activationDistance,\n        { ignore = self })\n\n    if not res.hitObject then\n        destroyTooltipAndRecord()\n        return\n    end\n\n    if res.hitObject.recordId == currentlyInspectedBookItemRecordId then\n        return\n    end\n\n    if not types.Book.objectIsInstance(res.hitObject)\n        or not isItemAlreadyRead(res.hitObject.recordId, savedDataForThisMod) then\n        destroyTooltipAndRecord()\n        return\n    end\n\n    currentlyInspectedBookItemRecordId = res.hitObject.recordId\n\n    destroyTooltip()\n    tooltipForReadStatus = createTooltipSpace()\n    tooltipForReadStatus:update()\nend\n\nreturn RSS\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\ui_layout\\daedric_text_creator.lua": "local settings = require(\"scripts.openmw_books_enhanced.settings\")\nlocal constants = require(\"scripts.openmw_books_enhanced.ui_layout.ui_constants\")\nlocal util = require('openmw.util')\nlocal ui = require('openmw.ui')\nlocal vfs = require('openmw.vfs')\n\n-- function courtesy of @pwn - thanks!\nlocal function readFont(file)\n    local temp = file:reverse()\n    local fileNameLength = temp:find(\"/\") - 1\n    local path = file:sub(1, -fileNameLength - 1)\n    local maxHeight = 0\n    local minYOffset = 99999\n    local lines = {}\n    for line in vfs.lines(file) do\n        table.insert(lines, line)\n    end\n\n    local glyphData = {}\n    for i = 2, #lines do\n        if i < 5 or lines[i]:sub(1, 4) == \"char\" then\n            glyphData[i] = {}\n            for a in lines[i]:gmatch(\"%S+\") do\n                local delimiterPos = a:find(\"=\")\n                if delimiterPos then\n                    glyphData[i][a:sub(1, delimiterPos - 1)] = a:sub(delimiterPos + 1, #a)\n                end\n            end\n        end\n    end\n\n    local glyphFile = path .. glyphData[3].file:sub(2, -2)\n    local lineHeight = glyphData[2].lineHeight\n    local glyphs = {}\n    for i = 5, #glyphData do\n        minYOffset = math.min(minYOffset, tonumber(glyphData[i].yoffset))\n    end\n    for i = 5, #glyphData do\n        glyphData[i].yoffset = tonumber(glyphData[i].yoffset) --minYOffset\n        maxHeight = math.max(maxHeight, tonumber(glyphData[i].height) + tonumber(glyphData[i].yoffset))\n    end\n    local minXOffset = 0\n    local maxXOffset = 0\n    local minYOffset = 0\n    local maxYOffset = 0\n    for i = 5, #glyphData do\n        local character = string.char(tonumber(glyphData[i].id))\n        glyphs[character] = {\n            xadvance = tonumber(glyphData[i].xadvance),\n            xoffset  = tonumber(glyphData[i].xoffset),\n            yoffset  = tonumber(glyphData[i].yoffset),\n            height   = tonumber(glyphData[i].height),\n            width    = tonumber(glyphData[i].width),\n            texture  = ui.texture {\n                path = glyphFile,\n                offset = util.vector2(tonumber(glyphData[i].x), tonumber(glyphData[i].y)),\n                size = util.vector2(tonumber(glyphData[i].width), tonumber(glyphData[i].height))\n            }\n        }\n        minXOffset = math.min(minXOffset, glyphs[character].xoffset)\n        maxXOffset = math.max(maxXOffset, glyphs[character].xoffset)\n        minYOffset = math.min(minYOffset, glyphs[character].yoffset)\n        maxYOffset = math.max(maxYOffset, glyphs[character].yoffset)\n    end\n    return {\n        glyphs = glyphs,\n        lineHeight = lineHeight,\n        base = glyphData[2].base,\n        maxYOffset = math.abs(minYOffset) + math.abs(maxYOffset),\n        starterXOffset = math.abs(minXOffset),\n        starterYOffset = math.abs(minYOffset),\n    }\nend\n\nlocal demonicLettersFontData = readFont(\"textures/openmw_books_enhanced/font_faces/512/DemonicLetters.fnt\")\nlocal pentagramFontData = readFont(\"textures/openmw_books_enhanced/font_faces/512/PentaGramMalefissent.fnt\")\n\nlocal D = {}\n\nfunction D.makeDaedricPhraseContents(text, formattingSettings)\n    local resultPhraseContents = {}\n    local resultWidth = 0\n    local resultHeight = 0\n\n    local currentCharacterStep = 1\n    local letterSize = settings.SettingsTravOpenmwBooksEnhanced_textDocumentNormalSize()\n\n    local textColor = constants.fontColorJournalNormalText\n    if formattingSettings and formattingSettings.newFontColor then\n        textColor = util.color.hex(formattingSettings.newFontColor)\n    end\n\n    local rescaleMultiplier = 1.1\n    local fontData = demonicLettersFontData\n    if settings.SettingsTravOpenmwBooksEnhanced_daedricDisplay() == \"SettingsTravOpenmwBooksEnhanced_daedricDisplay_battlespireFont\" then\n        fontData = pentagramFontData\n        rescaleMultiplier = 1.3 --because it's a bit small\n    end\n\n    rescaleMultiplier = rescaleMultiplier * (letterSize / fontData.base)\n\n    while currentCharacterStep <= #text do\n        local thisCharacter = string.sub(text, currentCharacterStep, currentCharacterStep)\n        if fontData.glyphs[thisCharacter] then\n            local glyphData = fontData.glyphs[thisCharacter]\n\n            local thisGlyph = {\n                type = ui.TYPE.Image,\n                props = {\n                    visible = true,\n                    -- resource = constants.whiteTexture,\n                    -- color = util.color.rgb(math.random(), math.random(), math.random()),\n                    size = util.vector2(\n                        math.max(\n                            glyphData.xadvance,\n                            fontData.starterXOffset + glyphData.xoffset + glyphData.width),\n                        fontData.maxYOffset + glyphData.height\n                    ),\n                },\n                userData = {\n                    width = glyphData.xadvance,\n                    height = fontData.maxYOffset + glyphData.height,\n                },\n                content = ui.content({\n                    {\n                        type = ui.TYPE.Image,\n                        props = {\n                            resource = glyphData.texture,\n                            visible = true,\n                            position = util.vector2(\n                                fontData.starterXOffset + glyphData.xoffset,\n                                fontData.starterYOffset + glyphData.yoffset\n                            ),\n                            size = util.vector2(glyphData.width, glyphData.height),\n                            color = textColor,\n                        },\n                    }\n                })\n            }\n\n            thisGlyph.userData.width = thisGlyph.userData.width * rescaleMultiplier\n            thisGlyph.userData.height = thisGlyph.userData.height * rescaleMultiplier\n            thisGlyph.props.size = thisGlyph.props.size * rescaleMultiplier\n            thisGlyph.content[1].props.size = thisGlyph.content[1].props.size * rescaleMultiplier\n            thisGlyph.content[1].props.position = thisGlyph.content[1].props.position * rescaleMultiplier\n\n            resultWidth = resultWidth + thisGlyph.userData.width\n            resultHeight = math.max(resultHeight, thisGlyph.userData.height)\n            table.insert(resultPhraseContents, thisGlyph)\n        end\n        currentCharacterStep = currentCharacterStep + 1\n    end\n\n    return {\n        content = resultPhraseContents,\n        width = resultWidth,\n        height = resultHeight,\n    }\nend\n\nreturn D\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\ui_layout\\style_chooser.lua": "local I = require('openmw.interfaces')\nlocal vfs = require('openmw.vfs')\nlocal l10n = require('openmw.core').l10n(\"openmw_books_enhanced\")\n\nlocal function isStyleTemplateCorrect(styleTemplate)\n    return styleTemplate\n        and styleTemplate.shouldApplyTo\n        and styleTemplate.texture\n        and styleTemplate.texture.path\n        and styleTemplate.texture.width\n        and styleTemplate.texture.height\n        and styleTemplate.pagesTextArrangement\n        and styleTemplate.pagesTextArrangement.page1\n        and styleTemplate.pagesTextArrangement.page1.textArea\n        and styleTemplate.pagesTextArrangement.page1.textArea.width\n        and styleTemplate.pagesTextArrangement.page1.textArea.height\n        and styleTemplate.pagesTextArrangement.page1.textArea.posTopLeftCornerX\n        and styleTemplate.pagesTextArrangement.page1.textArea.posTopLeftCornerY\n        and styleTemplate.pagesTextArrangement.page1.pageNumber\n        and styleTemplate.pagesTextArrangement.page1.pageNumber.posCenterX\n        and styleTemplate.pagesTextArrangement.page1.pageNumber.posCenterY\n        and (\n            styleTemplate.pagesTextArrangement.page2 == nil\n            or (\n                styleTemplate.pagesTextArrangement.page2\n                and styleTemplate.pagesTextArrangement.page2.textArea\n                and (styleTemplate.pagesTextArrangement.page2.textArea.isScrollableVertically == nil)\n                and (\n                    styleTemplate.pagesTextArrangement.page2.textArea.width == nil\n                    or styleTemplate.pagesTextArrangement.page2.textArea.width == styleTemplate.pagesTextArrangement.page1.textArea.width\n                )\n                and (\n                    styleTemplate.pagesTextArrangement.page2.textArea.height == nil\n                    or styleTemplate.pagesTextArrangement.page2.textArea.height == styleTemplate.pagesTextArrangement.page1.textArea.height\n                )\n                and styleTemplate.pagesTextArrangement.page2.textArea.posTopLeftCornerX\n                and styleTemplate.pagesTextArrangement.page2.textArea.posTopLeftCornerY\n                and styleTemplate.pagesTextArrangement.page2.pageNumber\n                and styleTemplate.pagesTextArrangement.page2.pageNumber.posCenterX\n                and styleTemplate.pagesTextArrangement.page2.pageNumber.posCenterY\n            )\n        )\n        and styleTemplate.takeButton\n        and styleTemplate.takeButton.posCenterX\n        and styleTemplate.takeButton.posCenterY\n        and (\n            styleTemplate.pagesTextArrangement.page1.textArea.isScrollableVertically\n            or\n            (\n                styleTemplate.prevButton\n                and styleTemplate.prevButton.posCenterX\n                and styleTemplate.prevButton.posCenterY\n                and styleTemplate.nextButton\n                and styleTemplate.nextButton.posCenterX\n                and styleTemplate.nextButton.posCenterY\n            )\n        )\n        and styleTemplate.closeButton\n        and styleTemplate.closeButton.posCenterX\n        and styleTemplate.closeButton.posCenterY\nend\n\nlocal S = {}\n\nfunction S.chooseDocumentWindowStyle(activatedBookObject)\n    local possibleTemplates = {}\n\n    local expectedDirectoryPath = \"scripts/data_for_openmw_books_enhanced\"\n\n    for file in vfs.pathsWithPrefix(expectedDirectoryPath) do\n        if string.match(file, \".*%.lua\") then\n            file = file.gsub(file, \".lua\", \"\")\n            local styleTemplate = require(file)\n\n            if type(styleTemplate) == 'table' then\n                if not isStyleTemplateCorrect(styleTemplate) then\n                    print(\n                        l10n(\"SettingsTravOpenmwBooksEnhanced_Warning\"),\n                        file,\n                        l10n(\"SettingsTravOpenmwBooksEnhanced_Warning_InvalidLuaStyleTable\"))\n                elseif styleTemplate.shouldApplyTo(activatedBookObject) then\n                    table.insert(possibleTemplates, styleTemplate)\n                end\n            else\n                print(\n                    l10n(\"SettingsTravOpenmwBooksEnhanced_Warning\"),\n                    file,\n                    l10n(\"SettingsTravOpenmwBooksEnhanced_Warning_InvalidLuaStyleTable\"))\n            end\n        end\n    end\n\n    if #possibleTemplates > 0 then\n        return possibleTemplates[#possibleTemplates] -- returning last match (is that good? we'll see)\n    else\n        print(\n            l10n(\"SettingsTravOpenmwBooksEnhanced_Warning\"),\n            activatedBookObject,\n            l10n(\"SettingsTravOpenmwBooksEnhanced_Warning_MatchingStyleNotFound\"))\n        return require('scripts.data_for_openmw_books_enhanced.0100_vanilla_book')\n    end\nend\n\nreturn S\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\ui_layout\\ui_clickable.lua": "local ui = require('openmw.ui')\nlocal templates = require(\"scripts.openmw_books_enhanced.ui_layout.ui_templates\")\nlocal async = require('openmw.async')\nlocal content_name = require(\"scripts.openmw_books_enhanced.window.content_element_names\")\n\nlocal CL = {}\n\nfunction CL.createFocusableWidget(updateJournalWindow)\n    return {\n        userData = {\n            isFocused = false,\n            rightClickCallback = nil,\n            callUpdateWindow = updateJournalWindow,\n        },\n        events = {\n            focusGain = async:callback(function(e, thisObject)\n                if thisObject.userData.textColorOver ~= nil then\n                    thisObject.props.textColor = thisObject.userData.textColorOver\n                end\n                thisObject.userData.isFocused = true\n                if thisObject.userData.callUpdateWindow ~= nil then\n                    thisObject.userData.callUpdateWindow()\n                end\n            end),\n            focusLoss = async:callback(function(e, thisObject)\n                if thisObject.userData.textColorIdle ~= nil then\n                    thisObject.props.textColor = thisObject.userData.textColorIdle\n                end\n                thisObject.userData.isFocused = false\n                if (thisObject.userData.callUpdateWindow ~= nil) and (thisObject.userData.isFocused) and (not thisObject.userData.isPressed) then\n                    thisObject.userData.callUpdateWindow()\n                end\n            end),\n        },\n        content = ui.content(\n            {\n                {\n                    name = content_name.controlUnderline,\n                    template = templates.journalButtonUnderline,\n                    props = {\n                        visible = false\n                    }\n                }\n            })\n    }\nend\n\nfunction CL.createClickableWidget(onClickCallback, updateJournalWindow)\n    local result = CL.createFocusableWidget(updateJournalWindow)\n    result.userData.isPressed = false\n    result.userData.onClicking = onClickCallback\n    result.events.mousePress = async:callback(function(e, thisObject)\n        thisObject.props.textColor = thisObject.userData.textColorPressed\n        thisObject.userData.isPressed = true\n        if thisObject.userData.callUpdateWindow ~= nil then\n            thisObject.userData.callUpdateWindow()\n        end\n    end)\n    result.events.mouseRelease = async:callback(function(e, thisObject)\n        if thisObject.userData.isFocused then\n            if thisObject.userData.textColorOver ~= nil then\n                thisObject.props.textColor = thisObject.userData.textColorOver\n            end\n        else\n            if thisObject.userData.textColorIdle ~= nil then\n                thisObject.props.textColor = thisObject.userData.textColorIdle\n            end\n        end\n        thisObject.userData.isPressed = false\n        thisObject.userData.onClicking(thisObject)\n        if thisObject.userData.callUpdateWindow ~= nil then\n            thisObject.userData.callUpdateWindow()\n        end\n    end)\n    return result\nend\n\nreturn CL\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\ui_layout\\ui_constants.lua": "local openmwConstants = require('scripts.omw.mwui.constants')\nlocal util = require('openmw.util')\nlocal ui = require('openmw.ui')\nlocal core = require('openmw.core')\n\nlocal function getColorFromGameSettings(colorTag)\n    local result = core.getGMST(colorTag)\n    local rgb = {}\n    for color in string.gmatch(result, '(%d+)') do\n        table.insert(rgb, tonumber(color))\n    end\n    if #rgb ~= 3 then\n        print(\"UNEXPECTED COLOR: rgb of size=\", #rgb)\n        return util.color.rgb(1, 1, 1)\n    end\n    return util.color.rgb(rgb[1] / 255, rgb[2] / 255, rgb[3] / 255)\nend\n\nlocal C = {\n    documentWindowWidthMultiplier = 2.01,\n    documentWindowHeightMultiplier = 2.01,\n    textDocumentNormalSize = openmwConstants.textNormalSize + 10,\n    textDocumentButtonSize = openmwConstants.textNormalSize + 11,\n    paperLikeColor = getColorFromGameSettings(\"FontColor_color_normal\"),\n    fontColorJournalNormalText = getColorFromGameSettings(\"FontColor_color_background\"),\n    fontColorJournalButtonIdle = util.color.rgb(60 / 255, 24 / 255, 4 / 255),\n    fontColorJournalButtonOver = util.color.rgb(127 / 255, 52 / 255, 8 / 255),\n    fontColorJournalButtonShadow = util.color.rgb(234 / 255, 210 / 255, 175 / 255),\n    fontColorJournalButtonPressed = util.color.rgb(255 / 255, 255 / 255, 189 / 255),\n    whiteTexture = ui.texture { path = 'white' },\n    scrollbarWidth = 5,\n}\n\nC.textDocumentPageNumberSize = C.textDocumentNormalSize\nC.textJournalPageNumberColor = C.fontColorJournalNormalText\n\n\nreturn C\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\ui_layout\\ui_templates.lua": "local constants = require(\"scripts.openmw_books_enhanced.ui_layout.ui_constants\")\nlocal ui = require('openmw.ui')\nlocal util = require('openmw.util')\n\nlocal T = {\n    journalPageText = {\n        type = ui.TYPE.Flex,\n        props = {\n            size = util.vector2(0, 0),\n            horizontal = false,\n            relativeSize = util.vector2(1.0, 1.0)\n        }\n    },\n    journalTextNormal = {\n        type = ui.TYPE.Text,\n        props = {\n            textSize = constants.textDocumentNormalSize,\n            textColor = constants.fontColorJournalNormalText\n        }\n    },\n    journalPageNumberText = {\n        type = ui.TYPE.Text,\n        props = {\n            multiline = false,\n            wordWrap = false,\n            autoSize = true,\n            anchor = util.vector2(0.5, 0.5),\n            textAlignH = ui.ALIGNMENT.Center,\n            textAlignV = ui.ALIGNMENT.Center,\n            textSize = constants.textDocumentPageNumberSize,\n            textColor = constants.textJournalPageNumberColor\n        }\n    },\n    journalTextButtonIdle = {\n        type = ui.TYPE.Text,\n        props = {\n            multiline = false,\n            wordWrap = false,\n            autoSize = true,\n            anchor = util.vector2(0.5, 0.5),\n            textAlignH = ui.ALIGNMENT.Center,\n            textAlignV = ui.ALIGNMENT.Center,\n            textSize = constants.textDocumentButtonSize,\n            textColor = constants.fontColorJournalButtonIdle,\n            textShadow = true,\n            textShadowColor = constants.fontColorJournalButtonShadow,\n        }\n    },\n    journalButtonUnderline = {\n        type = ui.TYPE.Image,\n        props = {\n            size = util.vector2(0, 1),\n            relativeSize = util.vector2(1, 0),\n            relativePosition = util.vector2(0, 0.9),\n            resource = constants.whiteTexture,\n            color = constants.fontColorJournalButtonIdle\n        }\n    },\n    journalTextDaedricContainer = {\n        type = ui.TYPE.Flex,\n        props = {\n            autoSize = true,\n            horizontal = true,\n        },\n    },\n}\n\nreturn T\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\ui_layout\\ui_text.lua": "local templates = require(\"scripts.openmw_books_enhanced.ui_layout.ui_templates\")\nlocal settings = require(\"scripts.openmw_books_enhanced.settings\")\nlocal daedric_text_creator = require(\"scripts.openmw_books_enhanced.ui_layout.daedric_text_creator\")\nlocal ui = require('openmw.ui')\n\nlocal TXT = {}\n\nfunction TXT.createNormalTextWidget(text)\n    return {\n        template = templates.journalTextNormal,\n        props = {\n            text = text,\n            textSize = settings.SettingsTravOpenmwBooksEnhanced_textDocumentNormalSize()\n        },\n        userData = {},\n    }\nend\n\nfunction TXT.createDaedricTextWidget(text, formattingSettings)\n    local daedricTextResults = daedric_text_creator.makeDaedricPhraseContents(text, formattingSettings)\n\n    return {\n        template = templates.journalTextDaedricContainer,\n        props = {\n            text = text,\n        },\n        userData = {\n            width = daedricTextResults.width,\n            height = daedricTextResults.height,\n        },\n        content = ui.content(daedricTextResults.content)\n    }\nend\n\nreturn TXT\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\window\\book_button.lua": "local constants = require(\"scripts.openmw_books_enhanced.ui_layout.ui_constants\")\nlocal ui_clickable = require(\"scripts.openmw_books_enhanced.ui_layout.ui_clickable\")\nlocal templates = require(\"scripts.openmw_books_enhanced.ui_layout.ui_templates\")\n\nlocal JB = {}\n\nfunction JB.createJournalButton(onClickCallback, updateJournalWindow)\n    local result = ui_clickable.createClickableWidget(onClickCallback, updateJournalWindow)\n    result.template = templates.journalTextButtonIdle\n    result.userData.textColorIdle = constants.fontColorJournalButtonIdle\n    result.userData.textColorOver = constants.fontColorJournalButtonOver\n    result.userData.textColorPressed = constants.fontColorJournalButtonPressed\n\n    return result\nend\n\nreturn JB\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\window\\book_readable.lua": "local I = require('openmw.interfaces')\nlocal ui = require('openmw.ui')\nlocal util = require('openmw.util')\nlocal settings = require(\"scripts.openmw_books_enhanced.settings\")\n\nlocal scrollbarPadding = 2\n\nlocal function createScrollingWidget(direction, scrollbarWidth, pos, contentNameBorder, contentNameButton)\n    return {\n        name = contentNameBorder,\n        template = I.MWUI.templates.box,\n        props = {\n            position = pos,\n        },\n        content = ui.content({\n            {\n                name = contentNameButton,\n                type = ui.TYPE.Image,\n                props = {\n                    resource = ui.texture { path = 'textures/omw_menu_scroll_' .. direction .. '.dds' },\n                    size = util.vector2(1, 1) * scrollbarWidth,\n                },\n            },\n        }),\n    }\nend\n\nlocal function createScrollElevatorWidget(pos, siz, content_name)\n    return {\n        name = content_name.pageScrollbarElevator_BORDER,\n        template = I.MWUI.templates.box,\n        props = {\n            position = pos,\n        },\n        content = ui.content({\n            {\n                name = content_name.pageScrollbarElevator,\n                type = ui.TYPE.Image,\n                props = {\n                    resource = ui.texture { path = 'textures/omw_menu_scroll_center_v.dds' },\n                    size = siz,\n                },\n            },\n        }),\n    }\nend\n\nlocal BR = {}\n\nfunction BR.addReadableSpace(bookWindow, documentWindowPageData, content_name)\n    local readableSpace =\n    {\n        name = content_name.pageReadableSpace,\n        type = ui.TYPE.Image,\n        props = {\n            size = util.vector2(\n                documentWindowPageData.textArea.width,\n                documentWindowPageData.textArea.height\n            ),\n            position = util.vector2(\n                documentWindowPageData.textArea.posTopLeftCornerX,\n                documentWindowPageData.textArea.posTopLeftCornerY\n            ),\n            -- resource = ui.texture { path = 'white' },\n            -- color = util.color.rgb(234 / 255, 210 / 255, 175 / 255),\n        },\n    }\n\n\n    local shouldAddScrollbar = (documentWindowPageData.textArea and documentWindowPageData.textArea.isScrollableVertically)\n    if shouldAddScrollbar then\n        local scrollbarWidth = settings.SettingsTravOpenmwBooksEnhanced_scrollbarWidth()\n        local newReadableSpaceWidth = documentWindowPageData.textArea.width - scrollbarWidth - (2 * scrollbarPadding)\n        readableSpace.props.size = util.vector2(\n            newReadableSpaceWidth,\n            documentWindowPageData.textArea.height\n        )\n\n        table.insert(\n            bookWindow.content,\n            createScrollingWidget(\n                \"up\",\n                scrollbarWidth,\n                util.vector2(\n                    documentWindowPageData.textArea.posTopLeftCornerX + newReadableSpaceWidth + scrollbarPadding,\n                    documentWindowPageData.textArea.posTopLeftCornerY\n                ),\n                content_name.pageScrollbarUpButton_BORDER,\n                content_name.pageScrollbarUpButton))\n        table.insert(\n            bookWindow.content,\n            createScrollElevatorWidget(\n                util.vector2(\n                    documentWindowPageData.textArea.posTopLeftCornerX + newReadableSpaceWidth + scrollbarPadding,\n                    documentWindowPageData.textArea.posTopLeftCornerY + scrollbarWidth + (2 * scrollbarPadding)\n                ),\n                util.vector2(\n                    scrollbarWidth,\n                    documentWindowPageData.textArea.height - (2 * scrollbarWidth) - (6 * scrollbarPadding)\n                ),\n                content_name))\n        table.insert(\n            bookWindow.content,\n            createScrollingWidget(\n                \"down\",\n                scrollbarWidth,\n                util.vector2(\n                    documentWindowPageData.textArea.posTopLeftCornerX + newReadableSpaceWidth + scrollbarPadding,\n                    documentWindowPageData.textArea.posTopLeftCornerY + documentWindowPageData.textArea.height -\n                    (scrollbarWidth + (2 * scrollbarPadding))\n                ),\n                content_name.pageScrollbarDownButton_BORDER,\n                content_name.pageScrollbarDownButton))\n    end\n\n    table.insert(bookWindow.content, readableSpace)\nend\n\nreturn BR\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\window\\book_window.lua": "local ui = require('openmw.ui')\nlocal util = require('openmw.util')\nlocal vfs = require('openmw.vfs')\nlocal l10n = require('openmw.core').l10n(\"openmw_books_enhanced\")\nlocal templates = require(\"scripts.openmw_books_enhanced.ui_layout.ui_templates\")\nlocal window_sizer = require('scripts.openmw_books_enhanced.window.window_sizer')\nlocal book_button = require('scripts.openmw_books_enhanced.window.book_button')\nlocal book_readable = require('scripts.openmw_books_enhanced.window.book_readable')\nlocal content_name = require(\"scripts.openmw_books_enhanced.window.content_element_names\")\nlocal settings = require(\"scripts.openmw_books_enhanced.settings\")\n\nlocal function deepCopy(orig)\n    local copy\n    if type(orig) == 'table' then\n        copy = {}\n        for originalKey, originalValue in next, orig, nil do\n            copy[deepCopy(originalKey)] = deepCopy(originalValue)\n        end\n    else\n        copy = orig\n    end\n    return copy\nend\n\nlocal function addLeftPageTextBox(bookWindow, documentWindowData)\n    book_readable.addReadableSpace(\n        bookWindow,\n        documentWindowData.pagesTextArrangement.page1,\n        content_name.leftPage)\nend\n\nlocal function addRightPageTextBox(bookWindow, documentWindowData)\n    if documentWindowData.pagesTextArrangement.page2 ~= nil then\n        documentWindowData.pagesTextArrangement.page2.textArea.width =\n            documentWindowData.pagesTextArrangement.page1.textArea.width\n        documentWindowData.pagesTextArrangement.page2.textArea.height =\n            documentWindowData.pagesTextArrangement.page1.textArea.height\n        book_readable.addReadableSpace(\n            bookWindow,\n            documentWindowData.pagesTextArrangement.page2,\n            content_name.rightPage)\n    end\nend\n\nlocal function createPageNumberLeft(documentWindowData)\n    return {\n        name = content_name.leftPageNumber,\n        template = templates.journalPageNumberText,\n        props = {\n            text = \"123\",\n            position = util.vector2(\n                documentWindowData.pagesTextArrangement.page1.pageNumber.posCenterX,\n                documentWindowData.pagesTextArrangement.page1.pageNumber.posCenterY\n            ),\n        }\n    }\nend\n\nlocal function createPageNumberRight(documentWindowData)\n    return {\n        name = content_name.rightPageNumber,\n        template = templates.journalPageNumberText,\n        props = {\n            text = \"456\",\n            position = util.vector2(\n                documentWindowData.pagesTextArrangement.page2.pageNumber.posCenterX,\n                documentWindowData.pagesTextArrangement.page2.pageNumber.posCenterY\n            ),\n        }\n    }\nend\n\nlocal function createTakeButton(documentWindowData)\n    local result = book_button.createJournalButton()\n    result.name = content_name.takeButton\n    result.props = {\n        position = util.vector2(\n            documentWindowData.takeButton.posCenterX,\n            documentWindowData.takeButton.posCenterY\n        ),\n        text = l10n(\"Take\")\n    }\n    return result\nend\n\nlocal function createPrevButton(documentWindowData)\n    local result = book_button.createJournalButton()\n    result.name = content_name.prevButton\n    result.props = {\n        position = util.vector2(\n            documentWindowData.prevButton.posCenterX,\n            documentWindowData.prevButton.posCenterY\n        ),\n        text = l10n(\"Prev\")\n    }\n    return result\nend\n\nlocal function createNextButton(documentWindowData)\n    local result = book_button.createJournalButton()\n    result.name = content_name.nextButton\n    result.props = {\n        position = util.vector2(\n            documentWindowData.nextButton.posCenterX,\n            documentWindowData.nextButton.posCenterY\n        ),\n        text = l10n(\"Next\")\n    }\n    return result\nend\n\nlocal function createCloseButton(documentWindowData)\n    local result = book_button.createJournalButton()\n    result.name = content_name.closeButton\n    result.props = {\n        position = util.vector2(\n            documentWindowData.closeButton.posCenterX,\n            documentWindowData.closeButton.posCenterY\n        ),\n        text = l10n(\"Close\")\n    }\n    return result\nend\n\nlocal function addLeftPageNumber(bookWindow, documentWindowData)\n    if documentWindowData.pagesTextArrangement.page1.textArea.isScrollableVertically then\n        return\n    end\n\n    table.insert(bookWindow.content, createPageNumberLeft(documentWindowData))\nend\n\nlocal function addRightPageNumber(bookWindow, documentWindowData)\n    if documentWindowData.pagesTextArrangement.page2 == nil then\n        return\n    end\n\n    table.insert(bookWindow.content, createPageNumberRight(documentWindowData))\nend\n\nlocal function addPrevButton(bookWindow, documentWindowData)\n    if documentWindowData.pagesTextArrangement.page1.textArea.isScrollableVertically then\n        return\n    end\n\n    table.insert(bookWindow.content, createPrevButton(documentWindowData))\nend\n\nlocal function addNextButton(bookWindow, documentWindowData)\n    if documentWindowData.pagesTextArrangement.page1.textArea.isScrollableVertically then\n        return\n    end\n\n    table.insert(bookWindow.content, createNextButton(documentWindowData))\nend\n\nlocal function applyDocumentTexture(bookWindow, documentWindowData, activatedBookObject)\n    if not settings.SettingsTravOpenmwBooksEnhanced_colorBookcover()\n        or not documentWindowData.texture.colorable\n        or not documentWindowData.getUiColoring then\n        bookWindow.props.resource = ui.texture({ path = documentWindowData.texture.path })\n        return\n    end\n\n    local colorableTexturePath =\n        string.sub(documentWindowData.texture.path, 1, #documentWindowData.texture.path - 4) .. \"_colorable.dds\"\n    local nonColorableTexturePath =\n        string.sub(documentWindowData.texture.path, 1, #documentWindowData.texture.path - 4) .. \"_nonColorable.dds\"\n\n    if not vfs.fileExists(colorableTexturePath) or not vfs.fileExists(nonColorableTexturePath) then\n        bookWindow.props.resource = ui.texture({ path = documentWindowData.texture.path })\n        return\n    end\n\n    local usedColor = documentWindowData.getUiColoring(activatedBookObject)\n    if not usedColor then\n        bookWindow.props.resource = ui.texture({ path = documentWindowData.texture.path })\n        return\n    end\n\n    table.insert(bookWindow.content, {\n        name = content_name.documentTextureColorable,\n        type = ui.TYPE.Image,\n        props = {\n            relativeSize = util.vector2(1, 1),\n            resource = ui.texture { path = colorableTexturePath },\n            visible = true,\n            color = usedColor,\n        },\n    })\n    table.insert(bookWindow.content, {\n        name = content_name.documentTextureNonColorable,\n        type = ui.TYPE.Image,\n        props = {\n            relativeSize = util.vector2(1, 1),\n            resource = ui.texture { path = nonColorableTexturePath },\n            visible = true,\n        },\n    })\nend\n\nlocal J = {}\n\nfunction J.createBookWindow(activatedBookObject, documentWindowData)\n    local bookWindow = {\n        layer = 'Windows',\n        type = ui.TYPE.Image,\n        props = {\n            size = util.vector2(documentWindowData.texture.width, documentWindowData.texture.height),\n            relativePosition = util.vector2(0.5, 0.5),\n            anchor = util.vector2(0.5, 0.5),\n            visible = true,\n        },\n        content = {},\n    }\n\n    applyDocumentTexture(bookWindow, documentWindowData, activatedBookObject)\n\n    if documentWindowData.additionalWidgetsInDocumentUi then\n        for _, widget in pairs(documentWindowData.additionalWidgetsInDocumentUi) do\n            table.insert(bookWindow.content, deepCopy(widget))\n        end\n    end\n\n    table.insert(bookWindow.content, createTakeButton(documentWindowData))\n    table.insert(bookWindow.content, createCloseButton(documentWindowData))\n    addLeftPageTextBox(bookWindow, documentWindowData)\n    addRightPageTextBox(bookWindow, documentWindowData)\n    addLeftPageNumber(bookWindow, documentWindowData)\n    addRightPageNumber(bookWindow, documentWindowData)\n    addPrevButton(bookWindow, documentWindowData)\n    addNextButton(bookWindow, documentWindowData)\n\n    bookWindow.content = ui.content(bookWindow.content)\n    local uiVal = ui.create(bookWindow)\n\n    window_sizer.resizeDocumentWindowForUserSettings(uiVal.layout, documentWindowData)\n\n    return uiVal\nend\n\nreturn J\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\window\\content_element_names.lua": "local IDX = {\n    leftPageNumber = \"openmw_books_enhanced_BOOK_leftPageNumber\",\n    rightPageNumber = \"openmw_books_enhanced_BOOK_rightPageNumber\",\n    takeButton = \"openmw_books_enhanced_BOOK_takeButton\",\n    prevButton = \"openmw_books_enhanced_BOOK_prevButton\",\n    nextButton = \"openmw_books_enhanced_BOOK_nextButton\",\n    closeButton = \"openmw_books_enhanced_BOOK_closeButton\",\n    documentTextureColorable = \"openmw_books_enhanced_BOOK_documentTextureColorable\",\n    documentTextureNonColorable = \"openmw_books_enhanced_BOOK_documentTextureNonColorable\",\n    leftPage = {\n        pageReadableSpace = \"openmw_books_enhanced_BOOK_pageReadableSpace_L\",\n        pageReadableSpaceInside = \"openmw_books_enhanced_BOOK_pageReadableSpace_Inside_L\",\n        pageScrollbarUpButton_BORDER = \"openmw_books_enhanced_BOOK_pageScrollbarUpButton_BORDER_L\",\n        pageScrollbarElevator_BORDER = \"openmw_books_enhanced_BOOK_pageScrollbarElevator_BORDER_L\",\n        pageScrollbarDownButton_BORDER = \"openmw_books_enhanced_BOOK_pageScrollbarDownButton_BORDER_L\",\n        pageScrollbarUpButton = \"openmw_books_enhanced_BOOK_pageScrollbarUpButton_L\",\n        pageScrollbarElevator = \"openmw_books_enhanced_BOOK_pageScrollbarElevator_L\",\n        pageScrollbarDownButton = \"openmw_books_enhanced_BOOK_pageScrollbarDownButton_L\",\n    },\n    rightPage = {\n        pageReadableSpace = \"openmw_books_enhanced_BOOK_pageReadableSpace_R\",\n        pageReadableSpaceInside = \"openmw_books_enhanced_BOOK_pageReadableSpace_Inside_R\",\n        pageScrollbarUpButton_BORDER = \"openmw_books_enhanced_BOOK_pageScrollbarUpButton_BORDER_R\",\n        pageScrollbarElevator_BORDER = \"openmw_books_enhanced_BOOK_pageScrollbarElevator_BORDER_R\",\n        pageScrollbarDownButton_BORDER = \"openmw_books_enhanced_BOOK_pageScrollbarDownButton_BORDER_R\",\n        pageScrollbarUpButton = \"openmw_books_enhanced_BOOK_pageScrollbarUpButton_R\",\n        pageScrollbarElevator = \"openmw_books_enhanced_BOOK_pageScrollbarElevator_R\",\n        pageScrollbarDownButton = \"openmw_books_enhanced_BOOK_pageScrollbarDownButton_R\",\n    },\n    controlUnderline = \"openmw_books_enhanced_BOOK_underline\",\n    unsupportedWarning = \"openmw_books_enhanced_BOOK_unsupportedWarning\",\n}\n\nreturn IDX\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\window\\page_text_arrangement.lua": "local ui = require('openmw.ui')\nlocal util = require('openmw.util')\nlocal ui_text = require(\"scripts.openmw_books_enhanced.ui_layout.ui_text\")\nlocal settings = require(\"scripts.openmw_books_enhanced.settings\")\nlocal content_name = require(\"scripts.openmw_books_enhanced.window.content_element_names\")\nlocal PhraseType = require(\"scripts.openmw_books_enhanced.wording.phrase_type\")\n\nlocal function tryResizingImage(imageWidget, pageSize)\n    local function multiplyImageSizeBy(mult)\n        imageWidget.props.size = imageWidget.props.size * mult\n        imageWidget.userData.width = imageWidget.props.size.x\n        imageWidget.userData.height = imageWidget.props.size.y\n    end\n\n    if not settings.SettingsTravOpenmwBooksEnhanced_expandImageToWidth() then\n        local resizeMultiplier = settings.SettingsTravOpenmwBooksEnhanced_imageSizeMult()\n        multiplyImageSizeBy(resizeMultiplier)\n        return\n    end\n    local resizeMultiplier = pageSize.x / imageWidget.props.size.x\n    multiplyImageSizeBy(resizeMultiplier)\nend\n\nlocal function makeLineWidget(line, pureTextHeight, alignment)\n    local lineWidth = 0.0\n    local lineHeight = 0.0\n    for _, phrase in pairs(line) do\n        if phrase.userData ~= nil or phrase.userData.width ~= nil then\n            if phrase.userData.height == nil then\n                phrase.userData.height = pureTextHeight\n            end\n            lineWidth = lineWidth + phrase.userData.width\n            lineHeight = math.max(lineHeight, phrase.userData.height)\n        end\n    end\n    return {\n        type = ui.TYPE.Flex,\n        props = {\n            size = util.vector2(0, 0),\n            horizontal = true,\n            relativeSize = util.vector2(1.0, 1.0),\n            align = alignment,\n        },\n        userData = {\n            width = lineWidth,\n            height = lineHeight,\n        },\n        content = ui.content(line)\n    }\nend\n\nlocal function insertPhraseIntoLine(currentLine, phrase)\n    table.insert(currentLine, phrase)\nend\n\nlocal function insertGatheredWhitespaces(currentLine, encounteredWhitespaces)\n    for _, whitespace in pairs(encounteredWhitespaces) do\n        table.insert(currentLine, whitespace)\n    end\nend\n\nlocal function insertPreparedLine(lines, currentLine, pureTextHeight, alignment)\n    if #currentLine <= 0 then\n        return\n    end\n    table.insert(lines, makeLineWidget(currentLine, pureTextHeight, alignment))\nend\n\nlocal function shortenTooLongPhrases(splitPhrases, lineWidthLimit)\n    local cutAtPercentage = 0.5\n\n    local indicesOfPhrasesWhichAreLongerThanLineWidthLimit = {}\n    local idxForCuttingPhrases = 1\n    while idxForCuttingPhrases <= #splitPhrases do\n        if splitPhrases[idxForCuttingPhrases].userData.type ~= PhraseType.IMAGE and splitPhrases[idxForCuttingPhrases].userData.width > lineWidthLimit then\n            -- print(\"LONG PHRASE\", \"phraseWidth:\" .. splitPhrases[idxForCuttingPhrases].userData.width,\n            --     \"lineLimit:\" .. lineWidthLimit,\n            --     \">>\" .. splitPhrases[idxForCuttingPhrases].props.text .. \"<<\")\n            table.insert(indicesOfPhrasesWhichAreLongerThanLineWidthLimit, idxForCuttingPhrases)\n        end\n        idxForCuttingPhrases = idxForCuttingPhrases + 1\n    end\n    if #indicesOfPhrasesWhichAreLongerThanLineWidthLimit < 1 then\n        return splitPhrases\n    end\n\n    local result = {}\n\n    idxForCuttingPhrases = 1\n    local idxOfGatheredIndices = 1\n    while idxForCuttingPhrases <= #splitPhrases do\n        if idxForCuttingPhrases == indicesOfPhrasesWhichAreLongerThanLineWidthLimit[idxOfGatheredIndices] then\n            local longPhrase = splitPhrases[idxForCuttingPhrases]\n            local newWidth = math.ceil(longPhrase.userData.width * cutAtPercentage)\n            local numberOfGlyphs = 0\n            for currentCharacterStep, thisCharacterByte in utf8.codes(longPhrase.props.text) do\n                numberOfGlyphs = numberOfGlyphs + 1\n            end\n            local halvedNumberOfGlyphs = math.ceil(numberOfGlyphs * cutAtPercentage) + 1\n            -- print(\"new width:\", newWidth, \"text length:\", numberOfGlyphs, \">>\" .. longPhrase.props.text .. \"<<\")\n\n            numberOfGlyphs = 0\n            local startForSecondHalf = 1\n            for currentCharacterStep, _ in utf8.codes(longPhrase.props.text) do\n                numberOfGlyphs = numberOfGlyphs + 1\n                if halvedNumberOfGlyphs == numberOfGlyphs then\n                    local firstHalf = {\n                        template = longPhrase.template,\n                        props = {\n                            text = string.sub(longPhrase.props.text, 1, currentCharacterStep - 1),\n                            textSize = longPhrase.props.textSize\n                        },\n                        userData = longPhrase.userData,\n                    }\n                    firstHalf.userData.width = newWidth\n                    if longPhrase.content then\n                        firstHalf.content = {}\n                        for idx = 1, halvedNumberOfGlyphs, 1 do\n                            table.insert(firstHalf.content, longPhrase.content[idx])\n                        end\n                        firstHalf.content = ui.content(firstHalf.content)\n                    end\n                    table.insert(result, firstHalf)\n                    startForSecondHalf = currentCharacterStep\n                end\n            end\n            local secondHalf = {\n                template = longPhrase.template,\n                props = {\n                    text = string.sub(longPhrase.props.text, startForSecondHalf, #longPhrase.props.text),\n                    textSize = longPhrase.props.textSize\n                },\n                userData = longPhrase.userData,\n            }\n            secondHalf.userData.width = newWidth\n            if longPhrase.content then\n                secondHalf.content = {}\n                for idx = halvedNumberOfGlyphs + 1, #longPhrase.content, 1 do\n                    table.insert(secondHalf.content, longPhrase.content[idx])\n                end\n                secondHalf.content = ui.content(secondHalf.content)\n            end\n            table.insert(result, secondHalf)\n\n            idxOfGatheredIndices = idxOfGatheredIndices + 1\n        else\n            table.insert(result, splitPhrases[idxForCuttingPhrases])\n        end\n        idxForCuttingPhrases = idxForCuttingPhrases + 1\n    end\n\n    return result\nend\n\nlocal function createLines(documentWindow, splitPhrases)\n    local pureTextHeight = settings.SettingsTravOpenmwBooksEnhanced_textDocumentNormalSize()\n\n    local lines = {}\n    local lineWidthLimit = documentWindow.layout.content[content_name.leftPage.pageReadableSpace].props.size.x\n\n    splitPhrases = shortenTooLongPhrases(splitPhrases, lineWidthLimit)\n\n    local currentLine = {}\n    local lineWidthSoFar = 0\n    local encounteredWhitespaces = {}\n    local currentAlignment = ui.ALIGNMENT.Start\n    for idx, phrase in ipairs(splitPhrases) do\n        if phrase.userData.type == PhraseType.ALIGN_LEFT then\n            currentAlignment = ui.ALIGNMENT.Start\n        elseif phrase.userData.type == PhraseType.ALIGN_CENTER then\n            currentAlignment = ui.ALIGNMENT.Center\n        elseif phrase.userData.type == PhraseType.ALIGN_RIGHT then\n            currentAlignment = ui.ALIGNMENT.End\n        elseif phrase.userData.type == PhraseType.DOUBLE_NEWLINE then\n            insertPreparedLine(lines, currentLine, pureTextHeight, currentAlignment)\n            encounteredWhitespaces = {}\n            currentLine = {}\n            lineWidthSoFar = 0\n            insertPhraseIntoLine(currentLine, phrase)\n            insertPreparedLine(lines, currentLine, pureTextHeight, currentAlignment)\n            lines[#lines].userData.isDoubleNewline = true\n            currentLine = {}\n        elseif phrase.userData.type == PhraseType.NEWLINE then\n            insertPreparedLine(lines, currentLine, pureTextHeight, currentAlignment)\n            encounteredWhitespaces = {}\n            currentLine = {}\n            lineWidthSoFar = 0\n        elseif phrase.userData.type == PhraseType.WHITESPACE then\n            table.insert(encounteredWhitespaces, phrase)\n        elseif phrase.userData.type == PhraseType.PUNCTUATION and #encounteredWhitespaces == 0 then\n            insertPhraseIntoLine(currentLine, phrase)\n            lineWidthSoFar = lineWidthSoFar + 0 + phrase.userData.width\n        else\n            local widthOfWhitespacesBeforeThisPhrase = 0\n            for _, whitespace in pairs(encounteredWhitespaces) do\n                widthOfWhitespacesBeforeThisPhrase = widthOfWhitespacesBeforeThisPhrase + whitespace.userData.width\n            end\n            local wouldThisPhraseFitIntoTheLine =\n                ((lineWidthSoFar + widthOfWhitespacesBeforeThisPhrase + phrase.userData.width) < lineWidthLimit)\n            if wouldThisPhraseFitIntoTheLine then\n                insertGatheredWhitespaces(currentLine, encounteredWhitespaces)\n                if phrase.userData.height and phrase.userData.type == PhraseType.IMAGE then\n                    tryResizingImage(\n                        phrase,\n                        documentWindow.layout.content[content_name.leftPage.pageReadableSpace].props.size)\n                end\n                insertPhraseIntoLine(currentLine, phrase)\n                lineWidthSoFar = lineWidthSoFar + widthOfWhitespacesBeforeThisPhrase + phrase.userData.width\n            else\n                insertPreparedLine(lines, currentLine, pureTextHeight, currentAlignment)\n                currentLine = {}\n                lineWidthSoFar = 0\n                if phrase.userData.height and phrase.userData.type == PhraseType.IMAGE then\n                    tryResizingImage(\n                        phrase,\n                        documentWindow.layout.content[content_name.leftPage.pageReadableSpace].props.size)\n                end\n                insertPhraseIntoLine(currentLine, phrase)\n                lineWidthSoFar = lineWidthSoFar + phrase.userData.width\n            end\n            encounteredWhitespaces = {}\n        end\n    end\n    if #currentLine > 0 then\n        insertPreparedLine(lines, currentLine, pureTextHeight, currentAlignment)\n    end\n    return lines\nend\n\nPT = {}\n\nfunction PT.createLinesSplitIntoPages(documentWindow, splitPhrases)\n    local lines = createLines(documentWindow, splitPhrases)\n    local shouldSplitIntoPages = (documentWindow.layout.content:indexOf(content_name.leftPage.pageScrollbarDownButton_BORDER) == nil)\n\n    local currentPage = 1\n    local pageHeightLimit = documentWindow.layout.content[content_name.leftPage.pageReadableSpace].props.size.y\n    local pageHeightSoFar = 0\n    for _, line in pairs(lines) do\n        if shouldSplitIntoPages and pageHeightSoFar + line.userData.height > pageHeightLimit then\n            currentPage = currentPage + 1\n            if line.userData.isDoubleNewline then\n                line.userData.shouldBeRemovedBecauseItsEmptyAndStartsANewPage = true\n            end\n            pageHeightSoFar = 0\n        end\n        pageHeightSoFar = pageHeightSoFar + line.userData.height\n        line.userData.page = currentPage\n    end\n\n    local result = {}\n    for _, line in pairs(lines) do\n        if not line.userData.shouldBeRemovedBecauseItsEmptyAndStartsANewPage then\n            table.insert(result, line)\n        end\n    end\n    return result\nend\n\nreturn PT\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\window\\window_sizer.lua": "local ui = require('openmw.ui')\nlocal util = require('openmw.util')\nlocal settings = require(\"scripts.openmw_books_enhanced.settings\")\nlocal content_name = require(\"scripts.openmw_books_enhanced.window.content_element_names\")\n\nlocal constantToDistinguishFromJournalEnhanced = 0.95\n\nlocal resolutionToRecommendedSizeMultiplier = {\n    [\"(1980, 1080)\"] = 2.5,\n    [\"(1920, 1080)\"] = 2.5,\n    [\"(1768, 992)\"] = 2.5,\n    [\"(1680, 1050)\"] = 2.5,\n    [\"(1600, 1024)\"] = 2.5,\n    [\"(1600, 900)\"] = 2.125,\n    [\"(1440, 1080)\"] = 2.5,\n    [\"(1440, 900)\"] = 2.125,\n    [\"(1366, 768)\"] = 1.875,\n    [\"(1360, 768)\"] = 1.875,\n    [\"(1280, 1024)\"] = 2.125,\n    [\"(1280, 960)\"] = 2.125,\n    [\"(1280, 800)\"] = 1.875,\n    [\"(1280, 768)\"] = 1.875,\n    [\"(1280, 720)\"] = 1.75,\n    [\"(1176, 664)\"] = 1.625,\n    [\"(1152, 864)\"] = 1.875,\n    [\"(1024, 768)\"] = 1.6875,\n    [\"(800, 600)\"] = 1.375,\n    [\"(720, 576)\"] = 1.25,\n    [\"(720, 480)\"] = 1.1875,\n    [\"(640, 480)\"] = 1.125,\n}\n\nlocal function calculateResizeMultiplierWithFallbackValue(fallbackValue)\n    local result = fallbackValue\n\n    if settings.SettingsTravOpenmwBooksEnhanced_useRecommendedResolutionMultipliers() then\n        local possibleMultiplier = resolutionToRecommendedSizeMultiplier[tostring(ui.screenSize())]\n        if possibleMultiplier ~= nil then\n            result = possibleMultiplier * constantToDistinguishFromJournalEnhanced\n        end\n    end\n\n    return result\nend\n\nlocal function calculateWidthMultiplier()\n    local widthMultiplier = settings.SettingsTravOpenmwBooksEnhanced_documentWindowWidthMultiplier()\n    return calculateResizeMultiplierWithFallbackValue(widthMultiplier)\nend\n\nlocal function calculateHeightMultiplier()\n    local heightMultiplier = settings.SettingsTravOpenmwBooksEnhanced_documentWindowHeightMultiplier()\n    return calculateResizeMultiplierWithFallbackValue(heightMultiplier)\nend\n\nlocal function applyNewSizes(documentWindow, documentWindowData, widthMultiplier, heightMultiplier)\n    documentWindow.props.size = util.vector2(\n        documentWindow.props.size.x * widthMultiplier,\n        documentWindow.props.size.y * heightMultiplier\n    )\n\n    local function changeSize(element)\n        element.props.size = util.vector2(\n            element.props.size.x * widthMultiplier,\n            element.props.size.y * heightMultiplier\n        )\n    end\n\n    local elementsNeedingResizing = {\n        content_name.leftPage.pageReadableSpace,\n    }\n    if documentWindowData.pagesTextArrangement.page2 then\n        table.insert(elementsNeedingResizing, content_name.rightPage.pageReadableSpace)\n    end\n    for _, elementName in pairs(elementsNeedingResizing) do\n        changeSize(documentWindow.content[elementName])\n    end\n\n    if documentWindowData.pagesTextArrangement.page1.textArea.isScrollableVertically then\n        changeSize(documentWindow.content[content_name.leftPage.pageScrollbarUpButton_BORDER].content\n            [content_name.leftPage.pageScrollbarUpButton])\n        changeSize(documentWindow.content[content_name.leftPage.pageScrollbarElevator_BORDER].content\n            [content_name.leftPage.pageScrollbarElevator])\n        changeSize(documentWindow.content[content_name.leftPage.pageScrollbarDownButton_BORDER].content\n            [content_name.leftPage.pageScrollbarDownButton])\n    end\n\n    if documentWindowData.additionalWidgetsInDocumentUi then\n        for _, value in pairs(documentWindowData.additionalWidgetsInDocumentUi) do\n            changeSize(documentWindow.content[value.name])\n        end\n    end\nend\n\nlocal function applyNewPositions(documentWindow, documentWindowData, widthMultiplier, heightMultiplier)\n    local elementsNeedingRepositioning = {\n        content_name.leftPage.pageReadableSpace,\n        content_name.leftPageNumber,\n        content_name.takeButton,\n        content_name.prevButton,\n        content_name.nextButton,\n        content_name.closeButton,\n    }\n    if documentWindowData.pagesTextArrangement.page1.textArea.isScrollableVertically then\n        table.insert(elementsNeedingRepositioning, content_name.leftPage.pageScrollbarUpButton_BORDER)\n        table.insert(elementsNeedingRepositioning, content_name.leftPage.pageScrollbarElevator_BORDER)\n        table.insert(elementsNeedingRepositioning, content_name.leftPage.pageScrollbarDownButton_BORDER)\n    end\n    if documentWindowData.pagesTextArrangement.page2 then\n        table.insert(elementsNeedingRepositioning, content_name.rightPage.pageReadableSpace)\n        table.insert(elementsNeedingRepositioning, content_name.rightPageNumber)\n    end\n    for _, elementName in pairs(elementsNeedingRepositioning) do\n        if documentWindow.content:indexOf(elementName) and documentWindow.content[elementName].props then\n            documentWindow.content[elementName].props.position = util.vector2(\n                documentWindow.content[elementName].props.position.x * widthMultiplier,\n                documentWindow.content[elementName].props.position.y * heightMultiplier\n            )\n        end\n    end\n\n    if documentWindowData.additionalWidgetsInDocumentUi then\n        for _, value in pairs(documentWindowData.additionalWidgetsInDocumentUi) do\n            documentWindow.content[value.name].props.position = util.vector2(\n                documentWindow.content[value.name].props.position.x * widthMultiplier,\n                documentWindow.content[value.name].props.position.y * heightMultiplier\n            )\n        end\n    end\nend\n\nlocal function applyNewFontSizes(documentWindow, documentWindowData)\n    local buttonSize = settings.SettingsTravOpenmwBooksEnhanced_textDocumentButtonSize()\n    local pageNumberSize = settings.SettingsTravOpenmwBooksEnhanced_textDocumentPageNumberSize()\n\n    local elementsNeedingFontSizeChange = {\n        [content_name.takeButton] = buttonSize,\n        [content_name.prevButton] = buttonSize,\n        [content_name.nextButton] = buttonSize,\n        [content_name.closeButton] = buttonSize,\n        [content_name.leftPageNumber] = pageNumberSize,\n    }\n    if documentWindowData.pagesTextArrangement.page2 then\n        elementsNeedingFontSizeChange[content_name.rightPageNumber] = pageNumberSize\n    end\n\n    for elementName, elementValue in pairs(elementsNeedingFontSizeChange) do\n        if documentWindow.content:indexOf(elementName) and documentWindow.content[elementName].props then\n            documentWindow.content[elementName].props.textSize = elementValue\n        end\n    end\nend\n\nlocal WS = {}\n\nfunction WS.resizeDocumentWindowForUserSettings(documentWindow, documentWindowData)\n    applyNewFontSizes(documentWindow, documentWindowData)\n\n    local widthMultiplier = calculateWidthMultiplier()\n    local heightMultiplier = calculateHeightMultiplier()\n\n    applyNewSizes(documentWindow, documentWindowData, widthMultiplier, heightMultiplier)\n    applyNewPositions(documentWindow, documentWindowData, widthMultiplier, heightMultiplier)\nend\n\nreturn WS\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\wording\\character_sizing.lua": "local settings = require(\"scripts.openmw_books_enhanced.settings\")\n\n-- Notes on how I generated the `characterSizeFactorsRelevantToFontSize` table:\n-- I used opentype.js to access the font used by the game and get the \"advanceWidth\".\n-- ( by the way see https://www.imagemagick.org/Usage/text/#font_info )\n-- Then (see previous version of this code) I took the '%' symbol as base and\n-- and assumed 789 advanceWidth is 0.82. Here's the code I used:\n-- ###############################################################\n-- <!DOCTYPE html>\n-- <html lang=\"en\">\n-- <title>opentype.js font inspector</title>\n-- <script src=\"https://opentype.js.org/dist/opentype.js\"></script>\n-- <script>\n-- //MysticCards.ttf placed in the same folder as this html\n-- const font = opentype.load('MysticCards.ttf').then(data => {\n--     for (const key in data.glyphs.glyphs) {\n--         if (Object.hasOwnProperty.call(data.glyphs.glyphs, key)) {\n--             const glyph = data.glyphs.glyphs[key];\n--             let stringOut = \"['\"\n--             stringOut += String.fromCharCode(glyph.unicode)\n--             stringOut += \"'] = {\"\n--             stringOut += \"width = \"\n--             stringOut += (glyph.advanceWidth * (0.82 / 789))\n--             stringOut += \" }\"\n--             console.log(stringOut)\n--         }\n--     }\n-- })\n-- </script>\n-- </html>\n-- ###############################################################\n-- Oh and I had to set up a small server to load this html. I know next to nothing\n-- about these things so I just googled around and combined few stack overflow hints.\n-- Sorry for not pointing to relevant posts, I lost them. But here's the python script:\n-- ###############################################################\n-- #!/usr/bin/env python3\n-- from http.server import HTTPServer, SimpleHTTPRequestHandler, test\n-- import sys\n-- class CORSRequestHandler (SimpleHTTPRequestHandler):\n--     def end_headers (self):\n--         self.send_header('Access-Control-Allow-Origin', '*')\n--         SimpleHTTPRequestHandler.end_headers(self)\n-- class MyHTTPServer(HTTPServer):\n--     allowed_hosts = (('127.0.0.1', 80),)\n--     def do_GET(self):\n--         if self.client_address not in allowed_hosts:\n--             self.send_response(401, 'request not allowed')\n--         else:\n--             super(MyHTTPServer, self).do_Get()\n-- if __name__ == '__main__':\n--     test(CORSRequestHandler, HTTPServer, port=int(sys.argv[1]) if len(sys.argv) > 1 else 8000)\n-- ###############################################################\nlocal characterSizeFactorsRelevantToFontSize = {\n    [''] = { width = 0.0 },\n    ['�'] = { width = 0.38869455006337134 },\n    ['\\n'] = { width = 0.020785804816223066 },\n    ['\\r'] = { width = 0.020785804816223066 },\n    [' '] = { width = 0.4520912547528517 },\n    ['!'] = { width = 0.23695817490494298 },\n    ['\"'] = { width = 0.3938910012674271 },\n    ['#'] = { width = 0.6048669201520912 },\n    ['$'] = { width = 0.5809632446134347 },\n    ['%'] = { width = 0.82 },\n    ['&'] = { width = 0.7825855513307984 },\n    ['\\''] = { width = 0.19122940430925223 },\n    ['('] = { width = 0.4177946768060837 },\n    [')'] = { width = 0.4177946768060837 },\n    ['*'] = { width = 0.521723700887199 },\n    ['+'] = { width = 0.6069455006337136 },\n    [','] = { width = 0.2826869455006337 },\n    ['-'] = { width = 0.3741444866920152 },\n    ['.'] = { width = 0.25358681875792144 },\n    ['/'] = { width = 0.3627122940430925 },\n    ['0'] = { width = 0.5300380228136882 },\n    ['1'] = { width = 0.5300380228136882 },\n    ['2'] = { width = 0.5300380228136882 },\n    ['3'] = { width = 0.5300380228136882 },\n    ['4'] = { width = 0.5300380228136882 },\n    ['5'] = { width = 0.5300380228136882 },\n    ['6'] = { width = 0.5300380228136882 },\n    ['7'] = { width = 0.5300380228136882 },\n    ['8'] = { width = 0.5300380228136882 },\n    ['9'] = { width = 0.5300380228136882 },\n    [':'] = { width = 0.26397972116603297 },\n    [';'] = { width = 0.29307984790874525 },\n    ['<'] = { width = 0.6485171102661597 },\n    ['='] = { width = 0.6350063371356147 },\n    ['>'] = { width = 0.6485171102661597 },\n    ['?'] = { width = 0.42195183776932826 },\n    ['@'] = { width = 0.8937896070975919 },\n    ['A'] = { width = 0.7753105196451204 },\n    ['B'] = { width = 0.76595690747782 },\n    ['C'] = { width = 0.7243852978453739 },\n    ['D'] = { width = 0.7649176172370089 },\n    ['E'] = { width = 0.7462103929024081 },\n    ['F'] = { width = 0.5768060836501901 },\n    ['G'] = { width = 0.8251964512040557 },\n    ['H'] = { width = 0.8158428390367554 },\n    ['I'] = { width = 0.5352344740177439 },\n    ['J'] = { width = 0.4791128010139417 },\n    ['K'] = { width = 0.7420532319391635 },\n    ['L'] = { width = 0.7617997465145754 },\n    ['M'] = { width = 0.9395183776932826 },\n    ['N'] = { width = 0.9977186311787072 },\n    ['O'] = { width = 0.9031432192648923 },\n    ['P'] = { width = 0.8137642585551331 },\n    ['Q'] = { width = 0.9031432192648923 },\n    ['R'] = { width = 0.9010646387832699 },\n    ['S'] = { width = 0.7129531051964512 },\n    ['T'] = { width = 0.7566032953105196 },\n    ['U'] = { width = 0.8179214195183777 },\n    ['V'] = { width = 0.7472496831432193 },\n    ['W'] = { width = 1.2274017743979722 },\n    ['X'] = { width = 0.7025602027883396 },\n    ['Y'] = { width = 0.6713814955640051 },\n    ['Z'] = { width = 0.7025602027883396 },\n    ['['] = { width = 0.3543979721166033 },\n    ['\\\\'] = { width = 0.392851711026616 },\n    [']'] = { width = 0.3543979721166033 },\n    ['^'] = { width = 0.4988593155893536 },\n    ['_'] = { width = 0.5705703422053232 },\n    ['`'] = { width = 0.2161723700887199 },\n    ['a'] = { width = 0.5123700887198986 },\n    ['b'] = { width = 0.5539416983523447 },\n    ['c'] = { width = 0.45105196451204055 },\n    ['d'] = { width = 0.5809632446134347 },\n    ['e'] = { width = 0.454169835234474 },\n    ['f'] = { width = 0.3564765525982256 },\n    ['g'] = { width = 0.5684917617237009 },\n    ['h'] = { width = 0.6131812420785805 },\n    ['i'] = { width = 0.35335868187579217 },\n    ['j'] = { width = 0.34504435994930294 },\n    ['k'] = { width = 0.5684917617237009 },\n    ['l'] = { width = 0.2899619771863118 },\n    ['m'] = { width = 0.8594930291508238 },\n    ['n'] = { width = 0.5934347275031686 },\n    ['o'] = { width = 0.5373130544993663 },\n    ['p'] = { width = 0.5549809885931559 },\n    ['q'] = { width = 0.6246134347275032 },\n    ['r'] = { width = 0.48846641318124207 },\n    ['s'] = { width = 0.43754119138149555 },\n    ['t'] = { width = 0.4572877059569075 },\n    ['u'] = { width = 0.5352344740177439 },\n    ['v'] = { width = 0.5466666666666666 },\n    ['w'] = { width = 0.8989860583016477 },\n    ['x'] = { width = 0.5830418250950571 },\n    ['y'] = { width = 0.5497845373891002 },\n    ['z'] = { width = 0.5508238276299113 },\n    ['{'] = { width = 0.3918124207858048 },\n    ['|'] = { width = 0.3097084917617237 },\n    ['}'] = { width = 0.42299112801013944 },\n    ['~'] = { width = 0.5716096324461344 },\n    ['¡'] = { width = 0.25566539923954373 },\n    ['¨'] = { width = 0.2722940430925222 },\n    ['­'] = { width = 0.3668694550063371 },\n    ['¯'] = { width = 0.3668694550063371 },\n    ['°'] = { width = 0.32425855513307983 },\n    ['±'] = { width = 0.6069455006337136 },\n    ['´'] = { width = 0.2161723700887199 },\n    ['¸'] = { width = 0.5300380228136882 },\n    ['¿'] = { width = 0.3377693282636248 },\n    ['À'] = { width = 0.7753105196451204 },\n    ['Á'] = { width = 0.7753105196451204 },\n    ['Â'] = { width = 0.7753105196451204 },\n    ['Ã'] = { width = 0.7753105196451204 },\n    ['Ä'] = { width = 0.7753105196451204 },\n    ['Å'] = { width = 0.7753105196451204 },\n    ['Æ'] = { width = 1.0528010139416983 },\n    ['Ç'] = { width = 0.7243852978453739 },\n    ['È'] = { width = 0.7462103929024081 },\n    ['É'] = { width = 0.7462103929024081 },\n    ['Ê'] = { width = 0.7462103929024081 },\n    ['Ë'] = { width = 0.7462103929024081 },\n    ['Ì'] = { width = 0.5352344740177439 },\n    ['Í'] = { width = 0.5352344740177439 },\n    ['Î'] = { width = 0.5352344740177439 },\n    ['Ï'] = { width = 0.5352344740177439 },\n    ['Ð'] = { width = 0.7649176172370089 },\n    ['Ñ'] = { width = 0.9977186311787072 },\n    ['Ò'] = { width = 0.9031432192648923 },\n    ['Ó'] = { width = 0.9031432192648923 },\n    ['Ô'] = { width = 0.9031432192648923 },\n    ['Õ'] = { width = 0.9031432192648923 },\n    ['Ö'] = { width = 0.9031432192648923 },\n    ['×'] = { width = 0.5830418250950571 },\n    ['Ø'] = { width = 0.7763498098859316 },\n    ['Ù'] = { width = 0.8179214195183777 },\n    ['Ú'] = { width = 0.8179214195183777 },\n    ['Û'] = { width = 0.8179214195183777 },\n    ['Ü'] = { width = 0.8179214195183777 },\n    ['Ý'] = { width = 0.6713814955640051 },\n    ['Þ'] = { width = 0.5996704689480354 },\n    ['ß'] = { width = 0.5903168567807351 },\n    ['à'] = { width = 0.5123700887198986 },\n    ['á'] = { width = 0.5123700887198986 },\n    ['â'] = { width = 0.5123700887198986 },\n    ['ã'] = { width = 0.5123700887198986 },\n    ['ä'] = { width = 0.5123700887198986 },\n    ['å'] = { width = 0.5123700887198986 },\n    ['æ'] = { width = 0.7462103929024081 },\n    ['ç'] = { width = 0.4344233206590621 },\n    ['è'] = { width = 0.454169835234474 },\n    ['é'] = { width = 0.454169835234474 },\n    ['ê'] = { width = 0.454169835234474 },\n    ['ë'] = { width = 0.454169835234474 },\n    ['ì'] = { width = 0.32217997465145753 },\n    ['í'] = { width = 0.32217997465145753 },\n    ['î'] = { width = 0.32217997465145753 },\n    ['ï'] = { width = 0.32217997465145753 },\n    ['ð'] = { width = 0.5414702154626109 },\n    ['ñ'] = { width = 0.5934347275031686 },\n    ['ò'] = { width = 0.5373130544993663 },\n    ['ó'] = { width = 0.5373130544993663 },\n    ['ô'] = { width = 0.5373130544993663 },\n    ['õ'] = { width = 0.5373130544993663 },\n    ['ö'] = { width = 0.5373130544993663 },\n    ['÷'] = { width = 0.3699873257287706 },\n    ['ø'] = { width = 0.5269201520912548 },\n    ['ù'] = { width = 0.5352344740177439 },\n    ['ú'] = { width = 0.5352344740177439 },\n    ['û'] = { width = 0.5352344740177439 },\n    ['ü'] = { width = 0.5352344740177439 },\n    ['ý'] = { width = 0.5497845373891002 },\n    ['þ'] = { width = 0.5560202788339671 },\n    ['ÿ'] = { width = 0.5497845373891002 },\n    ['Ā'] = { width = 0.7753105196451204 },\n    ['ā'] = { width = 0.5123700887198986 },\n    ['Ă'] = { width = 0.7753105196451204 },\n    ['ă'] = { width = 0.5123700887198986 },\n    ['Ą'] = { width = 0.7753105196451204 },\n    ['ą'] = { width = 0.5061343472750317 },\n    ['Ć'] = { width = 0.7243852978453739 },\n    ['ć'] = { width = 0.45105196451204055 },\n    ['Ĉ'] = { width = 0.7243852978453739 },\n    ['ĉ'] = { width = 0.45105196451204055 },\n    ['Ċ'] = { width = 0.7243852978453739 },\n    ['ċ'] = { width = 0.45105196451204055 },\n    ['Č'] = { width = 0.7243852978453739 },\n    ['č'] = { width = 0.45105196451204055 },\n    ['Ď'] = { width = 0.7649176172370089 },\n    ['ď'] = { width = 0.6474778200253486 },\n    ['Đ'] = { width = 0.7649176172370089 },\n    ['đ'] = { width = 0.5809632446134347 },\n    ['Ē'] = { width = 0.7462103929024081 },\n    ['ē'] = { width = 0.454169835234474 },\n    ['Ĕ'] = { width = 0.7462103929024081 },\n    ['ĕ'] = { width = 0.454169835234474 },\n    ['Ė'] = { width = 0.7462103929024081 },\n    ['ė'] = { width = 0.454169835234474 },\n    ['Ę'] = { width = 0.7462103929024081 },\n    ['ę'] = { width = 0.454169835234474 },\n    ['Ě'] = { width = 0.7462103929024081 },\n    ['ě'] = { width = 0.454169835234474 },\n    ['Ĝ'] = { width = 0.8251964512040557 },\n    ['ĝ'] = { width = 0.5684917617237009 },\n    ['Ğ'] = { width = 0.8251964512040557 },\n    ['ğ'] = { width = 0.5684917617237009 },\n    ['Ġ'] = { width = 0.8251964512040557 },\n    ['ġ'] = { width = 0.5684917617237009 },\n    ['Ģ'] = { width = 0.8251964512040557 },\n    ['ģ'] = { width = 0.5684917617237009 },\n    ['Ĥ'] = { width = 0.8158428390367554 },\n    ['ĥ'] = { width = 0.6131812420785805 },\n    ['Ħ'] = { width = 0.8158428390367554 },\n    ['ħ'] = { width = 0.6131812420785805 },\n    ['Ĩ'] = { width = 0.5352344740177439 },\n    ['ĩ'] = { width = 0.5404309252217997 },\n    ['Ī'] = { width = 0.5352344740177439 },\n    ['ī'] = { width = 0.33257287705956906 },\n    ['Ĭ'] = { width = 0.5352344740177439 },\n    ['ĭ'] = { width = 0.38245880861850445 },\n    ['Į'] = { width = 0.5352344740177439 },\n    ['į'] = { width = 0.35335868187579217 },\n    ['İ'] = { width = 0.5352344740177439 },\n    ['ı'] = { width = 0.32217997465145753 },\n    ['Ĳ'] = { width = 0.8491001267427123 },\n    ['ĳ'] = { width = 0.4822306717363752 },\n    ['Ĵ'] = { width = 0.4791128010139417 },\n    ['ĵ'] = { width = 0.4323447401774398 },\n    ['Ķ'] = { width = 0.7420532319391635 },\n    ['ķ'] = { width = 0.5684917617237009 },\n    ['ĸ'] = { width = 0.47495564005069707 },\n    ['Ĺ'] = { width = 0.7617997465145754 },\n    ['ĺ'] = { width = 0.2899619771863118 },\n    ['Ļ'] = { width = 0.7617997465145754 },\n    ['ļ'] = { width = 0.2899619771863118 },\n    ['Ľ'] = { width = 0.7617997465145754 },\n    ['ľ'] = { width = 0.3772623574144487 },\n    ['Ŀ'] = { width = 0.7617997465145754 },\n    ['ŀ'] = { width = 0.3855766793409379 },\n    ['Ł'] = { width = 0.7617997465145754 },\n    ['ł'] = { width = 0.2899619771863118 },\n    ['Ń'] = { width = 0.9977186311787072 },\n    ['ń'] = { width = 0.5934347275031686 },\n    ['Ņ'] = { width = 0.9977186311787072 },\n    ['ņ'] = { width = 0.5934347275031686 },\n    ['Ň'] = { width = 0.9977186311787072 },\n    ['ň'] = { width = 0.5934347275031686 },\n    ['ŉ'] = { width = 0.7056780735107732 },\n    ['Ŋ'] = { width = 0.5560202788339671 },\n    ['ŋ'] = { width = 0.5560202788339671 },\n    ['Ō'] = { width = 0.9031432192648923 },\n    ['ō'] = { width = 0.5373130544993663 },\n    ['Ŏ'] = { width = 0.9031432192648923 },\n    ['ŏ'] = { width = 0.5373130544993663 },\n    ['Ő'] = { width = 0.9031432192648923 },\n    ['ő'] = { width = 0.5373130544993663 },\n    ['Œ'] = { width = 1.1203548795944234 },\n    ['œ'] = { width = 0.6921673003802281 },\n    ['Ŕ'] = { width = 0.9010646387832699 },\n    ['ŕ'] = { width = 0.48846641318124207 },\n    ['Ŗ'] = { width = 0.9010646387832699 },\n    ['ŗ'] = { width = 0.48846641318124207 },\n    ['Ř'] = { width = 0.9187325728770596 },\n    ['ř'] = { width = 0.5050950570342205 },\n    ['Ś'] = { width = 0.7129531051964512 },\n    ['ś'] = { width = 0.43754119138149555 },\n    ['Ŝ'] = { width = 0.7129531051964512 },\n    ['ŝ'] = { width = 0.43754119138149555 },\n    ['Ş'] = { width = 0.7129531051964512 },\n    ['ş'] = { width = 0.43754119138149555 },\n    ['Š'] = { width = 0.7129531051964512 },\n    ['š'] = { width = 0.43754119138149555 },\n    ['Ţ'] = { width = 0.7566032953105196 },\n    ['ţ'] = { width = 0.4572877059569075 },\n    ['Ť'] = { width = 0.7566032953105196 },\n    ['ť'] = { width = 0.4427376425855513 },\n    ['Ŧ'] = { width = 0.7566032953105196 },\n    ['ŧ'] = { width = 0.4572877059569075 },\n    ['Ũ'] = { width = 0.8179214195183777 },\n    ['ũ'] = { width = 0.5352344740177439 },\n    ['Ū'] = { width = 0.8179214195183777 },\n    ['ū'] = { width = 0.5352344740177439 },\n    ['Ŭ'] = { width = 0.8179214195183777 },\n    ['ŭ'] = { width = 0.5352344740177439 },\n    ['Ů'] = { width = 0.8179214195183777 },\n    ['ů'] = { width = 0.5352344740177439 },\n    ['Ű'] = { width = 0.8179214195183777 },\n    ['ű'] = { width = 0.5352344740177439 },\n    ['Ų'] = { width = 0.8179214195183777 },\n    ['ų'] = { width = 0.5352344740177439 },\n    ['Ŵ'] = { width = 1.2274017743979722 },\n    ['ŵ'] = { width = 0.8989860583016477 },\n    ['Ŷ'] = { width = 0.6713814955640051 },\n    ['ŷ'] = { width = 0.5497845373891002 },\n    ['Ÿ'] = { width = 0.6713814955640051 },\n    ['Ź'] = { width = 0.7025602027883396 },\n    ['ź'] = { width = 0.5508238276299113 },\n    ['Ż'] = { width = 0.7025602027883396 },\n    ['ż'] = { width = 0.5508238276299113 },\n    ['Ž'] = { width = 0.7025602027883396 },\n    ['ž'] = { width = 0.5508238276299113 },\n    ['ˇ'] = { width = 0.4988593155893536 },\n    ['ˈ'] = { width = 1.064233206590621 },\n    ['˘'] = { width = 0.4177946768060837 },\n    ['˛'] = { width = 0.45105196451204055 },\n    ['Ё'] = { width = 0.7462103929024081 },\n    ['А'] = { width = 0.7753105196451204 },\n    ['Б'] = { width = 0.7888212927756654 },\n    ['В'] = { width = 0.76595690747782 },\n    ['Г'] = { width = 0.6350063371356147 },\n    ['Д'] = { width = 0.7898605830164765 },\n    ['Е'] = { width = 0.7462103929024081 },\n    ['Ж'] = { width = 1.0538403041825095 },\n    ['З'] = { width = 0.7326996197718632 },\n    ['И'] = { width = 0.8179214195183777 },\n    ['Й'] = { width = 0.8179214195183777 },\n    ['К'] = { width = 0.7420532319391635 },\n    ['Л'] = { width = 0.8387072243346008 },\n    ['М'] = { width = 0.9395183776932826 },\n    ['Н'] = { width = 0.8158428390367554 },\n    ['О'] = { width = 0.9031432192648923 },\n    ['П'] = { width = 0.8096070975918884 },\n    ['Р'] = { width = 0.8137642585551331 },\n    ['С'] = { width = 0.7243852978453739 },\n    ['Т'] = { width = 0.7566032953105196 },\n    ['У'] = { width = 0.6121419518377693 },\n    ['Ф'] = { width = 1.022661596958175 },\n    ['Х'] = { width = 0.7025602027883396 },\n    ['Ц'] = { width = 0.758681875792142 },\n    ['Ч'] = { width = 0.7981749049429658 },\n    ['Ш'] = { width = 1.0070722433460075 },\n    ['Щ'] = { width = 1.0559188846641319 },\n    ['Ъ'] = { width = 0.8179214195183777 },\n    ['Ы'] = { width = 1.1868694550063372 },\n    ['Ь'] = { width = 0.7877820025348542 },\n    ['Э'] = { width = 0.7576425855513308 },\n    ['Ю'] = { width = 1.0559188846641319 },\n    ['Я'] = { width = 0.9021039290240811 },\n    ['а'] = { width = 0.5123700887198986 },\n    ['б'] = { width = 0.5165272496831432 },\n    ['в'] = { width = 0.48742712294043095 },\n    ['г'] = { width = 0.42610899873257285 },\n    ['д'] = { width = 0.4926235741444867 },\n    ['е'] = { width = 0.454169835234474 },\n    ['ж'] = { width = 0.6994423320659062 },\n    ['з'] = { width = 0.4572877059569075 },\n    ['и'] = { width = 0.5560202788339671 },\n    ['й'] = { width = 0.5560202788339671 },\n    ['к'] = { width = 0.47495564005069707 },\n    ['л'] = { width = 0.5799239543726236 },\n    ['м'] = { width = 0.650595690747782 },\n    ['н'] = { width = 0.5238022813688213 },\n    ['о'] = { width = 0.5373130544993663 },\n    ['п'] = { width = 0.5508238276299113 },\n    ['р'] = { width = 0.5549809885931559 },\n    ['с'] = { width = 0.45105196451204055 },\n    ['т'] = { width = 0.8251964512040557 },\n    ['у'] = { width = 0.5497845373891002 },\n    ['ф'] = { width = 0.7212674271229405 },\n    ['х'] = { width = 0.5830418250950571 },\n    ['ц'] = { width = 0.5435487959442332 },\n    ['ч'] = { width = 0.48638783269961977 },\n    ['ш'] = { width = 0.8730038022813689 },\n    ['щ'] = { width = 0.8989860583016477 },\n    ['ъ'] = { width = 0.5653738910012674 },\n    ['ы'] = { width = 0.6807351077313054 },\n    ['ь'] = { width = 0.48015209125475283 },\n    ['э'] = { width = 0.46664131812420784 },\n    ['ю'] = { width = 0.7378960709759189 },\n    ['я'] = { width = 0.49158428390367553 },\n    ['ё'] = { width = 0.454169835234474 },\n    ['ẞ'] = { width = 0.677617237008872 },\n    ['‐'] = { width = 0.3263371356147022 },\n    ['‑'] = { width = 0.3263371356147022 },\n    ['‒'] = { width = 0.42506970849176173 },\n    ['–'] = { width = 0.42403041825095056 },\n    ['—'] = { width = 0.6495564005069708 },\n    ['‘'] = { width = 0.17875792141951838 },\n    ['’'] = { width = 0.17875792141951838 },\n    ['“'] = { width = 0.352319391634981 },\n    ['”'] = { width = 0.352319391634981 },\n    ['․'] = { width = 0.26605830164765526 },\n    ['‥'] = { width = 0.48846641318124207 },\n    ['…'] = { width = 0.7223067173637516 },\n}\n\nlocal CZ = {}\n\nfunction CZ.calculateWidth(text)\n    local fontSize = settings.SettingsTravOpenmwBooksEnhanced_textDocumentNormalSize()\n    local width = 0.0\n    for i = 1, #text do\n        local char = string.sub(text, i, i)\n        local addition = 0.0\n        if characterSizeFactorsRelevantToFontSize[char] ~= nil then\n            addition = (fontSize * characterSizeFactorsRelevantToFontSize[char].width)\n        else\n            addition = fontSize\n        end\n        width = width + addition\n    end\n\n    return width\nend\n\nfunction CZ.createCharacterSizingTools()\n    local fontSize = settings.SettingsTravOpenmwBooksEnhanced_textDocumentNormalSize()\n    local charTable = {}\n    for key, value in pairs(characterSizeFactorsRelevantToFontSize) do\n        charTable[key] = (fontSize * value.width)\n    end\n    local result = {\n        fontSize = fontSize,\n        characterSize = charTable,\n        hashedPhraseSizes = {},\n    }\n    result.getSize = function(text)\n        if result.hashedPhraseSizes[text] then\n            return result.hashedPhraseSizes[text]\n        end\n\n        local width = 0.0\n\n        for _, thisCharacterByte in utf8.codes(text) do\n            local char = utf8.char(thisCharacterByte)\n            local addition = 0.0\n            if result.characterSize[char] ~= nil then\n                addition = result.characterSize[char]\n            else\n                addition = result.fontSize\n            end\n            width = width + addition\n        end\n\n        result.hashedPhraseSizes[text] = width\n\n        return width\n    end\n    return result\nend\n\nreturn CZ\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\wording\\html_tag_parsing.lua": "local phrase = require(\"scripts.openmw_books_enhanced.wording.phrase\")\nlocal PhraseType = require(\"scripts.openmw_books_enhanced.wording.phrase_type\")\nlocal html_tag_setting = require(\"scripts.openmw_books_enhanced.wording.html_tag_setting\")\nlocal ui = require('openmw.ui')\nlocal vfs = require('openmw.vfs')\nlocal util = require('openmw.util')\nlocal l10n = require('openmw.core').l10n(\"openmw_books_enhanced\")\n\nlocal possibleTag = {\n    P = 100,\n    B = 200,\n    END_B = 250,\n    BR = 300,\n    FONT = 400,\n    END_FONT = 450,\n    DIV = 500,\n    END_DIV = 550,\n    IMG = 600,\n}\n\nlocal alignmentToPhraseType = {\n    [\"left\"] = PhraseType.ALIGN_LEFT,\n    [\"right\"] = PhraseType.ALIGN_RIGHT,\n    [\"center\"] = PhraseType.ALIGN_CENTER,\n}\n\nlocal function establishImageTexturePath(imageTexture)\n    local candidates = {\n        \"bookart/\" .. imageTexture,\n        \"bookart/\" .. string.sub(imageTexture, 1, #imageTexture - 4) .. \"_377_253.tga\",\n        \"bookart/\" .. string.sub(imageTexture, 1, #imageTexture - 4) .. \".dds\",\n        \"bookart/\" .. string.sub(imageTexture, 1, #imageTexture - 4) .. \"_377_253.dds\",\n    }\n    for _, candidate in pairs(candidates) do\n        if vfs.fileExists(candidate) then\n            return candidate\n        end\n    end\n\n    print(\n        l10n(\"SettingsTravOpenmwBooksEnhanced_Warning\"),\n        \"IMG\",\n        imageTexture)\n    return \"bookart/\" .. imageTexture\nend\n\nlocal function findTagBeginning(lowercaseTextCopy, textStartingPosition)\n    local currentCharacterStep = textStartingPosition\n\n    local thisCharacterByte = string.byte(lowercaseTextCopy.s, currentCharacterStep, currentCharacterStep)\n    if thisCharacterByte ~= string.byte(\"<\") then\n        return nil\n    end\n    currentCharacterStep = currentCharacterStep + 1\n\n    local expectingNext = nil\n    while currentCharacterStep <= #lowercaseTextCopy.s do\n        thisCharacterByte = string.byte(lowercaseTextCopy.s, currentCharacterStep, currentCharacterStep)\n        if thisCharacterByte == string.byte(\" \") or thisCharacterByte == string.byte(\"\\t\") then\n            currentCharacterStep = currentCharacterStep + 1\n        elseif expectingNext then\n            return expectingNext[thisCharacterByte]\n        elseif thisCharacterByte == string.byte(\"p\") then\n            return possibleTag.P\n        elseif thisCharacterByte == string.byte(\"f\") then\n            return possibleTag.FONT\n        elseif thisCharacterByte == string.byte(\"d\") then\n            return possibleTag.DIV\n        elseif thisCharacterByte == string.byte(\"i\") then\n            return possibleTag.IMG\n        elseif thisCharacterByte == string.byte(\"b\") then\n            expectingNext = {\n                [string.byte(\"r\")] = possibleTag.BR,\n                [string.byte(\">\")] = possibleTag.B,\n            }\n            currentCharacterStep = currentCharacterStep + 1\n        elseif thisCharacterByte == string.byte(\"/\") then\n            expectingNext = {\n                [string.byte(\"f\")] = possibleTag.END_FONT,\n                [string.byte(\"d\")] = possibleTag.END_DIV,\n                [string.byte(\"b\")] = possibleTag.END_B,\n            }\n            currentCharacterStep = currentCharacterStep + 1\n        end\n    end\nend\n\nlocal H = {}\n\nfunction H.parseTag(lowercaseTextCopy, textStartingPosition)\n    local newWidgets = {}\n    local numberOfCharactersToSkipBy = nil\n    local newFontColor = nil\n    local newFontFace = nil\n    local newTextSize = nil\n\n    local foundTag = findTagBeginning(lowercaseTextCopy, textStartingPosition)\n\n    if (foundTag == possibleTag.P) then\n        local paragraphMatch = string.match(lowercaseTextCopy.s, \"^<%s*p%s*>\", textStartingPosition)\n        if paragraphMatch then\n            table.insert(newWidgets, phrase.createPhrase(\"\", PhraseType.DOUBLE_NEWLINE))\n            numberOfCharactersToSkipBy = #paragraphMatch\n        else\n            foundTag = false\n        end\n    elseif (foundTag == possibleTag.BR) then\n        local doubleNewlineMatch = string.match(lowercaseTextCopy.s, \"^<%s*br%s*>%s*<%s*br%s*>\", textStartingPosition)\n        if doubleNewlineMatch then\n            table.insert(newWidgets, phrase.createPhrase(\"\", PhraseType.DOUBLE_NEWLINE))\n            numberOfCharactersToSkipBy = #doubleNewlineMatch\n        else\n            local newlineMatch = string.match(lowercaseTextCopy.s, \"^<%s*br%s*>\", textStartingPosition)\n            if newlineMatch then\n                table.insert(newWidgets, phrase.createPhrase(\"\", PhraseType.NEWLINE))\n                numberOfCharactersToSkipBy = #newlineMatch\n            else\n                foundTag = false\n            end\n        end\n    elseif (foundTag == possibleTag.FONT) then\n        local patternsForFont = {\n            '^(<%s*font%s+color%s*=%s*[\\'\"](%x%x%x%x%x%x)[\\'\"]%s+face%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s+size%s*=%s*[\\'\"](%d+)[\\'\"]%s*>)',\n            '^(<%s*font%s+color%s*=%s*[\\'\"](%x%x%x%x%x%x)[\\'\"]%s+size%s*=%s*[\\'\"](%d+)[\\'\"]%s+face%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s*>)',\n            '^(<%s*font%s+face%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s+color%s*=%s*[\\'\"](%x%x%x%x%x%x)[\\'\"]%s+size%s*=%s*[\\'\"](%d+)[\\'\"]%s*>)',\n            '^(<%s*font%s+face%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s+size%s*=%s*[\\'\"](%d+)[\\'\"]%s+color%s*=%s*[\\'\"](%x%x%x%x%x%x)[\\'\"]%s*>)',\n            '^(<%s*font%s+size%s*=%s*[\\'\"](%d+)[\\'\"]%s+face%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s+color%s*=%s*[\\'\"](%x%x%x%x%x%x)[\\'\"]%s*>)',\n            '^(<%s*font%s+size%s*=%s*[\\'\"](%d+)[\\'\"]%s+color%s*=%s*[\\'\"](%x%x%x%x%x%x)[\\'\"]%s+face%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s*>)',\n            '^(<%s*font%s+face%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s+size%s*=%s*[\\'\"](%d+)[\\'\"]%s*>)',\n            '^(<%s*font%s+size%s*=%s*[\\'\"](%d+)[\\'\"]%s+face%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s*>)',\n            '^(<%s*font%s+face%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s+color%s*=%s*[\\'\"](%x%x%x%x%x%x)[\\'\"]%s*>)',\n            '^(<%s*font%s+color%s*=%s*[\\'\"](%x%x%x%x%x%x)[\\'\"]%s+face%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s*>)',\n            '^(<%s*font%s+size%s*=%s*[\\'\"](%d+)[\\'\"]%s+color%s*=%s*[\\'\"](%x%x%x%x%x%x)[\\'\"]%s*>)',\n            '^(<%s*font%s+color%s*=%s*[\\'\"](%x%x%x%x%x%x)[\\'\"]%s+size%s*=%s*[\\'\"](%d+)[\\'\"]%s*>)',\n            '^(<%s*font%s+face%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s*>)',\n            '^(<%s*font%s+size%s*=%s*[\\'\"](%d+)[\\'\"]%s*>)',\n            '^(<%s*font%s+color%s*=%s*[\\'\"](%x%x%x%x%x%x)[\\'\"]%s*>)',\n            '^(<%s*font%s*>)',\n        }\n        local foundFontMatch = false\n        local fontMatch = nil\n        for _, pattern in pairs(patternsForFont) do\n            fontMatch = string.match(lowercaseTextCopy.s, pattern, textStartingPosition)\n            if fontMatch then\n                foundFontMatch = true\n                break\n            end\n        end\n        if foundFontMatch then\n            local possibleNewColor = { string.match(fontMatch, 'color%s*=%s*[\\'\"](%x%x%x%x%x%x)[\\'\"]') }\n            if #possibleNewColor > 0 then\n                newFontColor = possibleNewColor[1]\n            end\n\n            local possibleNewFontFace = { string.match(fontMatch, 'face%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]') }\n            if #possibleNewFontFace > 0 then\n                newFontFace = possibleNewFontFace[1]\n            end\n\n            local possibleNewTextSize = { string.match(fontMatch, 'size%s*=%s*[\\'\"](%d+)[\\'\"]') }\n            if #possibleNewTextSize > 0 then\n                newTextSize = possibleNewTextSize[1]\n            end\n\n            numberOfCharactersToSkipBy = #(fontMatch)\n        else\n            foundTag = false\n        end\n    elseif (foundTag == possibleTag.END_FONT) then\n        local fontEndMatch = string.match(lowercaseTextCopy.s, \"^<%s*/%s*font%s*>\", textStartingPosition)\n        if fontEndMatch then\n            newFontColor = html_tag_setting.RESETSETTING\n            newFontFace = html_tag_setting.RESETSETTING\n            newTextSize = html_tag_setting.RESETSETTING\n            numberOfCharactersToSkipBy = #fontEndMatch\n        else\n            foundTag = false\n        end\n    elseif (foundTag == possibleTag.DIV) then\n        local divMatch = {\n            string.match(\n                lowercaseTextCopy.s,\n                '^(<%s*div%s+align%s*=%s*\"([cntrlefigh]+)\"%s*>)',\n                textStartingPosition)\n        }\n        if #divMatch > 0 then\n            local newAlignment = alignmentToPhraseType[divMatch[2]]\n            if newAlignment then\n                table.insert(newWidgets, phrase.createPhrase(\"\", newAlignment))\n            else\n                table.insert(newWidgets, phrase.createPhrase(\"\", PhraseType.ALIGN_LEFT))\n            end\n            numberOfCharactersToSkipBy = #(divMatch[1])\n        else\n            divMatch = string.match(\n                lowercaseTextCopy.s,\n                \"^<%s*div%s*>\",\n                textStartingPosition)\n            if divMatch then\n                numberOfCharactersToSkipBy = #divMatch\n            else\n                foundTag = false\n            end\n        end\n    elseif (foundTag == possibleTag.END_DIV) then\n        local divEndMatch = string.match(lowercaseTextCopy.s, \"^<%s*/%s*div%s*>\", textStartingPosition)\n        if divEndMatch then\n            table.insert(newWidgets, phrase.createPhrase(\"\", PhraseType.ALIGN_LEFT))\n            numberOfCharactersToSkipBy = #divEndMatch\n        else\n            foundTag = false\n        end\n    elseif (foundTag == possibleTag.IMG) then\n        local patternsForImage = {\n            ['^(<%s*img%s+src%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s+width%s*=%s*[\\'\"](%d+)[\\'\"]%s+height%s*=%s*[\\'\"](%d+)[\\'\"]%s*>)'] = { src = 1, width = 2, height = 3 },\n            ['^(<%s*img%s+src%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s+height%s*=%s*[\\'\"](%d+)[\\'\"]%s+width%s*=%s*[\\'\"](%d+)[\\'\"]%s*>)'] = { src = 1, width = 3, height = 2 },\n            ['^(<%s*img%s+width%s*=%s*[\\'\"](%d+)[\\'\"]%s+src%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s+height%s*=%s*[\\'\"](%d+)[\\'\"]%s*>)'] = { src = 2, width = 1, height = 3 },\n            ['^(<%s*img%s+width%s*=%s*[\\'\"](%d+)[\\'\"]%s+height%s*=%s*[\\'\"](%d+)[\\'\"]%s+src%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s*>)'] = { src = 3, width = 1, height = 2 },\n            ['^(<%s*img%s+height%s*=%s*[\\'\"](%d+)[\\'\"]%s+width%s*=%s*[\\'\"](%d+)[\\'\"]%s+src%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s*>)'] = { src = 3, width = 2, height = 1 },\n            ['^(<%s*img%s+height%s*=%s*[\\'\"](%d+)[\\'\"]%s+src%s*=%s*[\\'\"]([^\\'\">]+)[\\'\"]%s+width%s*=%s*[\\'\"](%d+)[\\'\"]%s*>)'] = { src = 2, width = 3, height = 1 },\n        }\n        local foundImageMatch = false\n        local usedImageOrdering = nil\n        local imageMatch = nil\n        for pattern, ordering in pairs(patternsForImage) do\n            if foundImageMatch then\n                break\n            end\n            imageMatch = { string.match(lowercaseTextCopy.s, pattern, textStartingPosition) }\n            usedImageOrdering = ordering\n            foundImageMatch = (#imageMatch > 0)\n        end\n        if foundImageMatch then\n            local width = tonumber(imageMatch[usedImageOrdering.width + 1])\n            local height = tonumber(imageMatch[usedImageOrdering.height + 1])\n            local imageTexture = imageMatch[usedImageOrdering.src + 1]\n            table.insert(newWidgets, {\n                type = ui.TYPE.Image,\n                props = {\n                    size = util.vector2(width, height),\n                    resource = ui.texture { path = establishImageTexturePath(imageTexture) },\n                },\n                userData = {\n                    type = PhraseType.IMAGE,\n                    width = width,\n                    height = height,\n                },\n            })\n            numberOfCharactersToSkipBy = #(imageMatch[1])\n        else\n            foundTag = false\n        end\n    elseif (foundTag == possibleTag.B or foundTag == possibleTag.END_B) then\n        local boldMatch = string.match(lowercaseTextCopy.s, \"^<%s*/?%s*b%s*>\", textStartingPosition)\n        if boldMatch then\n            numberOfCharactersToSkipBy = #boldMatch\n        else\n            foundTag = false\n        end\n    end\n\n    if foundTag then\n        return {\n            newWidgets = newWidgets,\n            numberOfCharactersToSkipBy = numberOfCharactersToSkipBy,\n            newFontColor = newFontColor,\n            newFontFace = newFontFace,\n            newTextSize = newTextSize,\n        }\n    else\n        print(\n            l10n(\"SettingsTravOpenmwBooksEnhanced_Warning\"),\n            \"TAG\",\n            string.sub(lowercaseTextCopy.s, textStartingPosition, textStartingPosition + 50))\n        return nil\n    end\nend\n\nreturn H\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\wording\\html_tag_setting.lua": "local S = {}\n\nS.RESETSETTING = \"TRAV_PHRASE_resetSettingToken\"\n\nreturn S\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\wording\\phrase.lua": "local ui_text = require(\"scripts.openmw_books_enhanced.ui_layout.ui_text\")\nlocal html_tag_setting = require(\"scripts.openmw_books_enhanced.wording.html_tag_setting\")\nlocal util = require('openmw.util')\n\nlocal K = {}\n\nfunction K.createPhrase(text, phraseType, formattingSettings, characterSizingTable)\n    local result = nil\n    if formattingSettings and formattingSettings.newFontFace == \"daedric\" then\n        result = ui_text.createDaedricTextWidget(text, formattingSettings)\n    else\n        result = ui_text.createNormalTextWidget(text)\n        if characterSizingTable then\n            result.userData.width = characterSizingTable.getSize(text)\n        else\n            result.userData.width = 0\n        end\n        if formattingSettings then\n            if formattingSettings.newFontColor and formattingSettings.newFontColor ~= html_tag_setting.RESETSETTING then\n                result.props.textColor = util.color.hex(formattingSettings.newFontColor)\n            end\n            if formattingSettings.newTextSize and formattingSettings.newTextSize ~= html_tag_setting.RESETSETTING then\n                -- probably won't touch it\n            end\n        end\n    end\n    result.userData.type = phraseType\n    return result\nend\n\nreturn K\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\wording\\phrase_splitting.lua": "local PhraseType = require(\"scripts.openmw_books_enhanced.wording.phrase_type\")\nlocal html_tag_parsing = require(\"scripts.openmw_books_enhanced.wording.html_tag_parsing\")\nlocal phrase = require(\"scripts.openmw_books_enhanced.wording.phrase\")\nlocal character_sizing = require(\"scripts.openmw_books_enhanced.wording.character_sizing\")\n\nlocal function addPhraseToTable(targetTable, text, phraseType, formattingSettings, characterSizingTable)\n    table.insert(targetTable, phrase.createPhrase(text, phraseType, formattingSettings, characterSizingTable))\nend\n\nlocal PUNCTUATION = \"%.%?!,;\\\"”“’‘‥…，、。？！；「」﹁﹂『』《》〈〉\"\nlocal PATTERN_FOR_WORD_END = \"^[\" .. PUNCTUATION .. \"%s]\"\nlocal PATTERN_FOR_WHITESPACE = \"^[\\t ]\"\nlocal PATTERN_FOR_PUNCTUATION = \"^[\" .. PUNCTUATION .. \"]\"\nlocal PATTERN_FOR_NEWLINE = \"^[\\n\\r]\"\nlocal PATTERN_FOR_TAG_START = string.byte(\"<\")\n\nlocal WSP = {}\n\nlocal function debugPrint(debugType, currentCharacterStep, thisCharacterByte, bookRecord, nextStepLength,\n                          phraseStart, lengthOfCurrentCharacter)\n    if true then --set to false to show debug\n        return\n    end\n    if debugType == \"DEBUG1\" then\n        print(\":: \", \"currentCharacterStep:\", currentCharacterStep, \"thisCharacterByte:\", thisCharacterByte, \">>\",\n            utf8.char(thisCharacterByte), \"<<\")\n    elseif debugType == \"DEBUG2\" then\n        print(\"--:: \",\n            \"this step \" .. currentCharacterStep .. \" skipped! \" .. nextStepLength .. \" skipping steps left\")\n    elseif debugType == \"DEBUG3\" then\n        print(\"\", \"+++\", \"thisCharacterByte:\" .. thisCharacterByte .. \" at \" ..\n            currentCharacterStep .. \" starts a tag!\", \">>\",\n            utf8.char(thisCharacterByte), \"<<\")\n    elseif debugType == \"DEBUG4\" then\n        debugPrint(\"++:: \", \"PATTERN_FOR_WORD_END\",\n            \"added pre-phrase PhraseType.NORMAL_TEXT\",\n            \">>\" .. string.sub(bookRecord.text, phraseStart, currentCharacterStep - 1) .. \"<<\",\n            \"[\" .. phraseStart .. \"..\" .. (currentCharacterStep - 1) .. \"]\")\n    elseif debugType == \"DEBUG5\" then\n        debugPrint(\"++:: \", \"PATTERN_FOR_WHITESPACE\",\n            \"added phrase PhraseType.WHITESPACE\",\n            \">>\" ..\n            string.sub(bookRecord.text, currentCharacterStep, currentCharacterStep + lengthOfCurrentCharacter - 1) ..\n            \"<<\",\n            \"[\" ..\n            currentCharacterStep .. \"..\" .. (currentCharacterStep + lengthOfCurrentCharacter - 1) .. \"]\")\n    elseif debugType == \"DEBUG6\" then\n        debugPrint(\"++:: \", \"PATTERN_FOR_PUNCTUATION\",\n            \"added phrase PhraseType.PUNCTUATION\",\n            \">>\" ..\n            string.sub(bookRecord.text, currentCharacterStep, currentCharacterStep + lengthOfCurrentCharacter - 1) ..\n            \"<<\",\n            \"[\" ..\n            currentCharacterStep .. \"..\" .. (currentCharacterStep + lengthOfCurrentCharacter - 1) .. \"]\")\n    elseif debugType == \"DEBUG7\" then\n        debugPrint(\"++:: \", \"currentCharacterStep == #text\",\n            \"added end-phrase PhraseType.NORMAL_TEXT\",\n            \">>\" .. string.sub(bookRecord.text, phraseStart, #bookRecord.text) .. \"<<\",\n            \"[\" .. phraseStart .. \"..\" .. (#bookRecord.text) .. \"]\")\n    end\nend\n\nfunction WSP.splitToPhraseWidgets(bookRecord)\n    local splitPhrases = {}\n    local characterSizingTable = character_sizing.createCharacterSizingTools()\n\n    local text = bookRecord.text\n    local lowercaseTextCopy = { s = string.lower(text) }\n\n    local phraseStart = 1\n    local currentFormattingSettings = {\n        newFontColor = nil,\n        newFontFace = nil,\n        newTextSize = nil,\n    }\n    local nextStepLength = 1\n\n    for currentCharacterStep, thisCharacterByte in utf8.codes(lowercaseTextCopy.s) do\n        debugPrint(\"DEBUG1\", currentCharacterStep, thisCharacterByte, bookRecord, nextStepLength)\n\n        nextStepLength = nextStepLength - 1\n        if nextStepLength > 0 then\n            debugPrint(\"DEBUG2\", currentCharacterStep, thisCharacterByte, bookRecord, nextStepLength)\n        else\n            local foundPhraseAlready = false\n            nextStepLength = 1\n\n            -- determine if tag is beginning\n            if thisCharacterByte == PATTERN_FOR_TAG_START then\n                debugPrint(\"DEBUG3\", currentCharacterStep, thisCharacterByte, bookRecord, nextStepLength)\n                local tagResult = html_tag_parsing.parseTag(lowercaseTextCopy, currentCharacterStep)\n                if tagResult then\n                    if phraseStart <= currentCharacterStep - 1 then\n                        addPhraseToTable(\n                            splitPhrases,\n                            string.sub(text, phraseStart, currentCharacterStep - 1),\n                            PhraseType.NORMAL_TEXT,\n                            currentFormattingSettings,\n                            characterSizingTable)\n                    end\n                    if tagResult.newFontColor ~= nil then\n                        currentFormattingSettings.newFontColor = tagResult.newFontColor\n                    end\n                    if tagResult.newFontFace ~= nil then\n                        currentFormattingSettings.newFontFace = tagResult.newFontFace\n                    end\n                    if tagResult.newTextSize ~= nil then\n                        currentFormattingSettings.newTextSize = tagResult.newTextSize\n                    end\n\n                    nextStepLength = tagResult.numberOfCharactersToSkipBy\n                    phraseStart = currentCharacterStep + nextStepLength\n                    foundPhraseAlready = true\n                    if tagResult.newWidgets then\n                        for _, newWidget in pairs(tagResult.newWidgets) do\n                            table.insert(splitPhrases, newWidget)\n                        end\n                    end\n                end\n            end\n\n            if not foundPhraseAlready then\n                if string.match(lowercaseTextCopy.s, PATTERN_FOR_WORD_END, currentCharacterStep) then\n                    local lengthOfCurrentCharacter = 1\n                    if thisCharacterByte > 127 then\n                        local matchedSymbol = string.match(\n                            lowercaseTextCopy.s,\n                            \"^\" .. utf8.charpattern .. \"\",\n                            currentCharacterStep)\n                        lengthOfCurrentCharacter = #matchedSymbol\n                    end\n\n                    if phraseStart < currentCharacterStep then\n                        addPhraseToTable(\n                            splitPhrases,\n                            string.sub(text, phraseStart, currentCharacterStep - 1),\n                            PhraseType.NORMAL_TEXT,\n                            currentFormattingSettings,\n                            characterSizingTable)\n                        debugPrint(\"DEBUG4\", currentCharacterStep, thisCharacterByte, bookRecord, nextStepLength,\n                            phraseStart)\n                    end\n                    if string.match(lowercaseTextCopy.s, PATTERN_FOR_WHITESPACE, currentCharacterStep) then\n                        addPhraseToTable(\n                            splitPhrases,\n                            string.sub(text, currentCharacterStep, currentCharacterStep + lengthOfCurrentCharacter - 1),\n                            PhraseType.WHITESPACE,\n                            currentFormattingSettings,\n                            characterSizingTable)\n                        debugPrint(\"DEBUG5\", currentCharacterStep, thisCharacterByte, bookRecord, nextStepLength,\n                            phraseStart, lengthOfCurrentCharacter)\n                    elseif string.match(lowercaseTextCopy.s, PATTERN_FOR_PUNCTUATION, currentCharacterStep) then\n                        addPhraseToTable(\n                            splitPhrases,\n                            string.sub(text, currentCharacterStep, currentCharacterStep + lengthOfCurrentCharacter - 1),\n                            PhraseType.PUNCTUATION,\n                            currentFormattingSettings,\n                            characterSizingTable)\n                        debugPrint(\"DEBUG6\", currentCharacterStep, thisCharacterByte, bookRecord, nextStepLength,\n                            phraseStart, lengthOfCurrentCharacter)\n                    elseif string.match(lowercaseTextCopy.s, PATTERN_FOR_NEWLINE, currentCharacterStep) then\n                        --fallthrough\n                    end\n                    phraseStart = currentCharacterStep + lengthOfCurrentCharacter\n                elseif currentCharacterStep == #text then\n                    addPhraseToTable(\n                        splitPhrases,\n                        string.sub(text, phraseStart, #text),\n                        PhraseType.NORMAL_TEXT,\n                        currentFormattingSettings,\n                        characterSizingTable)\n                    debugPrint(\"DEBUG7\", currentCharacterStep, thisCharacterByte, bookRecord, nextStepLength, phraseStart)\n                end\n            end\n        end\n    end\n\n    return splitPhrases\nend\n\nreturn WSP\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\wording\\phrase_type.lua": "return {\n    NORMAL_TEXT = 20,\n    WHITESPACE = 30,\n    PUNCTUATION = 40,\n    NEWLINE = 50,\n    DOUBLE_NEWLINE = 70,\n    IMAGE = 80,\n    ALIGN_CENTER = 90,\n    ALIGN_LEFT = 91,\n    ALIGN_RIGHT = 92,\n}\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\wording\\record_text_modifier.lua": "local self = require('openmw.self')\nlocal types = require('openmw.types')\n\nlocal V = {}\n\nlocal function createTableOfPossibleVariableValues()\n    return {\n        [\"%%[pP][cC][nN][Aa][Mm][Ee]\"] = types.Player.record(self).name,\n        [\"%%[pP][cC][cC][lL][aA][sS][sS]\"] = types.Player.classes.records[types.Player.record(self).class].name,\n        [\"%%[pP][cC][Rr][Aa][Cc][Ee]\"] = types.Player.races.records[types.Player.record(self).race].name,\n        [\"%%[Yy][Ee][Aa][Rr]\"] = \"427\", --eeeh it's good enough, right? Right?\n    }\nend\n\nfunction V.tryToReplaceWithFilledValues(bookRecord)\n    if not string.match(bookRecord.text, \"(%%%w+)\") then\n        return nil\n    end\n\n    local result = { text = bookRecord.text }\n\n    local variables = createTableOfPossibleVariableValues()\n    for pattern, value in pairs(variables) do\n        result.text = string.gsub(result.text, pattern, value)\n    end\n\n    return result\nend\n\nfunction V.overwriteNewlines(bookRecord)\n    if not string.match(bookRecord.text, \"\\n\") then\n        return nil\n    end\n    local result = string.gsub(\n        bookRecord.text,\n        \"<BR>%s*<BR>\",\n        \"<BR><BR>\"\n    )\n\n    result = string.gsub(\n        result,\n        \"<BR>[ \\t]*\\r\\n?\",\n        \"<BR>\"\n    )\n\n    result = string.gsub(\n        result,\n        \"<BR>[ \\t]*\\n\\r?\",\n        \"<BR>\"\n    )\n\n    result = string.gsub(\n        result,\n        \"<DIV%s+ALIGN=\\\"([^\\\"]-)\\\"><BR>\",\n        \"<BR><DIV ALIGN=\\\"%1\\\">\"\n    )\n\n    result = string.gsub(\n        result,\n        \"<DIV\",\n        \"<BR><DIV\"\n    )\n\n    return {\n        text = string.gsub(\n            result,\n            \"\\n\",\n            \"<BR>\"\n        )\n    }\nend\n\nreturn V\n",
    "openmw-books-enhanced.zip-55126-v6-1-1723979671\\scripts\\openmw_books_enhanced\\wording\\text_parser.lua": "local types = require('openmw.types')\nlocal phrase_splitting = require('scripts.openmw_books_enhanced.wording.phrase_splitting')\nlocal record_text_modifier = require('scripts.openmw_books_enhanced.wording.record_text_modifier')\nlocal text_arrangement = require('scripts.openmw_books_enhanced.window.page_text_arrangement')\nlocal page_setter = require(\"scripts.openmw_books_enhanced.outside_manipulators.page_setter\")\n\nlocal TP = {}\n\nfunction TP.applyBookObjectTextToWindow(activatedBookObject, documentWindow, documentWindowData)\n    if documentWindow.layout.userData == nil then\n        documentWindow.layout.userData = {}\n    end\n\n    local bookRecord = types.Book.records[activatedBookObject.recordId]\n    local modifiedBookRecord = record_text_modifier.tryToReplaceWithFilledValues(bookRecord)\n    if modifiedBookRecord then\n        modifiedBookRecord = record_text_modifier.overwriteNewlines(modifiedBookRecord)\n    else\n        modifiedBookRecord = record_text_modifier.overwriteNewlines(bookRecord)\n    end\n\n    if documentWindowData.modifyTextBeforeApplying ~= nil then\n        if modifiedBookRecord then\n            modifiedBookRecord = { text = documentWindowData.modifyTextBeforeApplying(modifiedBookRecord.text) }\n        else\n            modifiedBookRecord = { text = documentWindowData.modifyTextBeforeApplying(bookRecord.text) }\n        end\n    end\n\n    local splitPhrases = nil\n    if modifiedBookRecord then\n        splitPhrases = phrase_splitting.splitToPhraseWidgets(modifiedBookRecord)\n    else\n        splitPhrases = phrase_splitting.splitToPhraseWidgets(bookRecord)\n    end\n    documentWindow.layout.userData.lines = text_arrangement.createLinesSplitIntoPages(documentWindow, splitPhrases)\n    documentWindow.layout.userData.currentPageNumber = 1\n\n    page_setter.setPages(documentWindow)\nend\n\nreturn TP\n"
  }
}