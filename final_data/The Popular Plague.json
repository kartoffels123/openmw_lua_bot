{
  "folder_name": "The Popular Plague",
  "lua_files": {
    "The Popular Plague-54730-1-1-1-1718072785\\01a MWSE\\MWSE\\mods\\The-Popular-Plague\\main.lua": "event.register(\"initialized\", function()\n    if (mwse.buildDate == nil) or (mwse.buildDate < 20240522) then\n        tes3.messageBox(\n            \"[The Popular Plague] Your MWSE is out of date!\"\n            .. \" You will need to update to a more recent version to use this mod.\"\n        )\n    end\n\n    if tes3.isModActive(\"The Popular Plague.esp\") then\n        dofile(\"The-Popular-Plague.music\")\n        dofile(\"The-Popular-Plague.quest\")\n        dofile(\"The-Popular-Plague.ssqn\")\n    end\nend)\n",
    "The Popular Plague-54730-1-1-1-1718072785\\01a MWSE\\MWSE\\mods\\The-Popular-Plague\\music.lua": "---@parma cell tes3cell?\nlocal function isEidolonCell(cell)\n    return (cell ~= nil) and (cell.id:find(\"Eidolon\") ~= nil)\nend\n\n--- When first entering an Eidolon, trigger our custom music.\n---\n---@param e cellChangedEventData\nlocal function onCellChanged(e)\n    local isEidolon = isEidolonCell(e.cell)\n    local wasEidolon = isEidolonCell(e.previousCell)\n    if isEidolon and not wasEidolon then\n        tes3.streamMusic({\n            path = \"md24/The Golden Tower.mp3\",\n            situation = tes3.musicSituation.explore,\n        })\n    elseif wasEidolon and not isEidolon then\n        ---@diagnostic disable-next-line: missing-fields\n        tes3.skipToNextMusicTrack({ force = true })\n    end\nend\nevent.register(\"cellChanged\", onCellChanged, { priority = 720 })\n\n\n--- Override new music track selections while in an Eidolon cell.\n---\n--- @param e musicSelectTrackEventData\nlocal function onMusicSelectTrack(e)\n    if e.situation == tes3.musicSituation.combat then\n        return -- allow combat music to play as normal\n    end\n    local cell = tes3.getPlayerCell()\n    if isEidolonCell(cell) then\n        e.music = \"md24/The Golden Tower.mp3\"\n        e.situation = tes3.musicSituation.explore\n    end\nend\nevent.register(\"musicSelectTrack\", onMusicSelectTrack, { priority = 720 })\n",
    "The Popular Plague-54730-1-1-1-1718072785\\01a MWSE\\MWSE\\mods\\The-Popular-Plague\\quest.lua": "---@param ref tes3reference\nlocal function isDiseased(ref)\n    return tes3.hasSpell({ reference = ref, spell = \"md24_greatnewdisease\" })\nend\n\n\n---@param ref tes3reference\nlocal function isDancing(ref)\n    if ref.tempData.md24_dancing then\n        local group = tes3.getAnimationGroups({ reference = ref })\n        return group == tes3.animationGroup.idle9\n    end\n    return false\nend\n\n\n---@param ref tes3reference\nlocal function startDancing(ref)\n    if ref == nil then return end\n\n    if ref.object.race.isBeast\n        or ref.mobile.inCombat\n    then\n        return\n    end\n\n    -- Play the dancing animation\n    tes3.playAnimation({\n        reference = ref,\n        mesh = \"md24\\\\r\\\\belly_dance.nif\",\n        group = tes3.animationGroup.idle9,\n    })\n\n    -- Set dancing flag\n    ref.tempData.md24_dancing = true\nend\n\n\n---@param ref tes3reference\nlocal function stopDancing(ref)\n    if ref == nil then return end\n\n    local mesh = \"base_anim.nif\"\n    if ref.object.race.isBeast then\n        mesh = \"base_animkna.nif\"\n    elseif ref.object.female then\n        mesh = \"base_anim_female.nif\"\n    end\n\n    -- Interrupt the animation\n    tes3.playAnimation({\n        reference = ref,\n        mesh = mesh,\n        group = tes3.animationGroup.idle,\n    })\n\n    -- Clear the dancing flag\n    ref.tempData.md24_dancing = nil\nend\n\n\n---@param position tes3vector3\nlocal function findActor(position)\n    local actors = tes3.findActorsInProximity({ position = position, range = 128 })\n    for _, actor in pairs(actors) do\n        if actor.position:distance(position) <= 8 then\n            return actor.reference\n        end\n    end\nend\n\n\nlocal function blowKiss(ref)\n    if ref == nil then return end\n\n    local angle = ref.mobile:getViewToActor(tes3.mobilePlayer)\n    ref.facing = ref.facing + math.rad(angle)\n\n    tes3.playAnimation({\n        reference = ref,\n        mesh = \"md24\\\\k\\\\blow_kiss.nif\",\n        group = tes3.animationGroup.idle9,\n        loopCount = 0,\n    })\nend\n\n\nlocal function teleportExit()\n    local ref = tes3.getReference(\"md24_Furn_ParadoxScale\")\n    if ref then\n        tes3.positionCell({\n            reference = tes3.player,\n            cell = ref.cell,\n            position = ref.position,\n            orientation = ref.orientation,\n        })\n    end\nend\n\n\n--- Start/stop dancing animations when signaled.\n---\n---@param e referenceActivatedEventData\nlocal function onReferenceActivated(e)\n    if e.reference.id == \"md24_start_dancing\" then\n        startDancing(findActor(e.reference.position))\n    end\n    if e.reference.id == \"md24_stop_dancing\" then\n        stopDancing(findActor(e.reference.position))\n    end\n    if e.reference.id == \"md24_anim_blow\" then\n        blowKiss(findActor(e.reference.position))\n    end\n    if e.reference.id == \"md24_teleport_return\" then\n        timer.start({ duration = 0.5, callback = teleportExit })\n    end\nend\nevent.register(\"referenceActivated\", onReferenceActivated)\n\n\n--- Cancel dancing animations when combat is started.\n---\n---@param e combatStartedEventData\nlocal function onCombatStarted(e)\n    local ref = e.actor.reference\n    if ref.tempData.md24_dancing then\n        stopDancing(ref)\n    end\nend\nevent.register(\"combatStarted\", onCombatStarted)\n\n\n--- Make diseased NPCs dance when loading a new cell.\n---\nlocal function onCellChanged(e)\n    local index = tes3.getJournalIndex({ id = \"md24_j_disease\" })\n    if (index < 15) or (index >= 100) then\n        return\n    end\n\n    for _, cell in pairs(tes3.getActiveCells()) do\n        for ref in cell:iterateReferences(tes3.objectType.npc) do\n            if not (ref.disabled or ref.deleted)\n                and (ref.mobile and ref.sceneNode)\n            then\n                if isDiseased(ref) and not isDancing(ref) then\n                    startDancing(ref)\n                end\n            end\n        end\n    end\nend\nevent.register(\"cellChanged\", onCellChanged)\nevent.register(\"loaded\", onCellChanged)\n\n\n--- Set a global variable for dialogue filtering when talking to a diseased npc.\n---\n---@param e activateEventData\nlocal function onActivate(e)\n    if e.activator ~= tes3.player\n        or e.target.object.objectType ~= tes3.objectType.npc\n    then\n        return\n    end\n\n    local index = tes3.getJournalIndex({ id = \"md24_j_disease\" })\n    if (index < 15) or (index >= 100) then\n        return\n    end\n\n    if e.target.mobile.inCombat then\n        return\n    end\n\n    if e.activator.mobile.bounty > 100 then\n        return\n    end\n\n    local md24_globSpeakerState = tes3.findGlobal(\"md24_globSpeakerState\")\n    md24_globSpeakerState.value = isDiseased(e.target) and 1 or 2\nend\nevent.register(\"activate\", onActivate)\n",
    "The Popular Plague-54730-1-1-1-1718072785\\01a MWSE\\MWSE\\mods\\The-Popular-Plague\\ssqn.lua": "local ssqn = include(\"SSQN.interop\")\nif ssqn then\n    ssqn.registerQIcon(\"md24_j_delphiara\", \"\\\\Icons\\\\md24\\\\q\\\\quest_thepopularplague.tga\")\n    ssqn.registerQIcon(\"md24_j_disease\", \"\\\\Icons\\\\md24\\\\q\\\\quest_thepopularplague.tga\")\n    ssqn.registerQIcon(\"md24_j_rats\", \"\\\\Icons\\\\md24\\\\q\\\\quest_thepopularplague.tga\")\n    ssqn.registerQIcon(\"md24_j_rockjoint\", \"\\\\Icons\\\\md24\\\\q\\\\quest_thepopularplague.tga\")\nend\n",
    "The Popular Plague-54730-1-1-1-1718072785\\01b OpenMW\\scripts\\SSQN\\iconlists\\ThePopularPlague.lua": "local icons = {}\n-- Red Wisdom\n\t\ticons.md24_j_delphiara = \"\\\\Icons\\\\md24\\\\q\\\\quest_thepopularplague.tga\"\n\t\ticons.md24_j_disease = \"\\\\Icons\\\\md24\\\\q\\\\quest_thepopularplague.tga\"\n\t\ticons.md24_j_rats = \"\\\\Icons\\\\md24\\\\q\\\\quest_thepopularplague.tga\"\n\t\ticons.md24_j_rockjoint = \"\\\\Icons\\\\md24\\\\q\\\\quest_thepopularplague.tga\"\n\n\nreturn icons\n",
    "The Popular Plague-54730-1-1-1-1718072785\\01b OpenMW\\scripts\\The-Popular-Plague\\activator.lua": "local core = require(\"openmw.core\")\nlocal self = require(\"openmw.self\")\nlocal types = require(\"openmw.types\")\nlocal nearby = require(\"openmw.nearby\")\n\n-- print(string.format(\"%s: enabled = %s\", self.recordId, self.enabled))\n\nreturn {\n    engineHandlers = {\n        onActive = function()\n            if self.recordId == \"md24_start_dancing\" then\n                for _, actor in ipairs(nearby.actors) do\n                    if actor.type == types.NPC then\n                        local distance = (self.position - actor.position):length()\n                        if distance <= 8 then\n                            actor:sendEvent(\"md24_start_dancing\", {})\n                        end\n                    end\n                end\n            end\n\n            if self.recordId == \"md24_stop_dancing\" then\n                for _, actor in ipairs(nearby.actors) do\n                    if actor.type == types.NPC then\n                        local distance = (self.position - actor.position):length()\n                        if distance <= 8 then\n                            actor:sendEvent(\"md24_stop_dancing\", {})\n                        end\n                    end\n                end\n            end\n\n            if self.recordId == \"md24_anim_blow\" then\n                for _, actor in ipairs(nearby.actors) do\n                    if actor.type == types.NPC then\n                        local distance = (self.position - actor.position):length()\n                        if distance <= 8 then\n                            actor:sendEvent(\"md24_anim_blow\", {})\n                        end\n                    end\n                end\n            end\n\n            if self.recordId == \"md24_teleport_return\" then\n                core.sendGlobalEvent(\"md24_teleport_return\")\n            end\n\n            if self.recordId == \"md24_furn_paradoxscale\" then\n                core.sendGlobalEvent(\"md24_furn_paradoxscale\", {\n                    cell = self.cell.name,\n                    position = self.position,\n                })\n            end\n        end,\n    },\n}\n",
    "The Popular Plague-54730-1-1-1-1718072785\\01b OpenMW\\scripts\\The-Popular-Plague\\global.lua": "local storage = require(\"openmw.storage\")\nlocal world = require(\"openmw.world\")\nlocal types = require(\"openmw.types\")\n\nlocal data = storage.globalSection(\"The-Popular-Plague\")\n\nlocal function getJournalIndex(id)\n    local quests = types.Player.quests(world.players[1])\n    return quests and quests[id] and quests[id].stage\nend\n\nreturn {\n    engineHandlers = {\n        onActivate = function(object, actor)\n            if types.NPC.objectIsInstance(object)\n                and actor == world.players[1]\n            then\n                local index = getJournalIndex(\"md24_j_disease\") or 0\n                if (index < 15) or (index >= 100) then\n                    return\n                end\n\n                local crimeLevel = types.Player.getCrimeLevel(actor)\n                if crimeLevel > 100 then\n                    return\n                end\n\n                local activeSpells = types.Actor.activeSpells(object)\n                local isDiseased = activeSpells:isSpellActive(\"md24_greatnewdisease\")\n                local globalVariables = world.mwscript.getGlobalVariables(actor)\n                globalVariables.md24_globSpeakerState = isDiseased and 1 or 2\n            end\n        end,\n    },\n    eventHandlers = {\n        md24_furn_paradoxscale = function(e)\n            data:set(\"cell\", e.cell)\n            data:set(\"position\", e.position)\n        end,\n        md24_teleport_return = function()\n            local cell = data:get(\"cell\")\n            local position = data:get(\"position\")\n            world.players[1]:teleport(cell, position)\n        end,\n    },\n}\n",
    "The Popular Plague-54730-1-1-1-1718072785\\01b OpenMW\\scripts\\The-Popular-Plague\\npc.lua": "local self = require(\"openmw.self\")\nlocal types = require(\"openmw.types\")\nlocal animation = require(\"openmw.animation\")\nlocal interfaces = require(\"openmw.interfaces\")\n\nlocal function isBeast()\n    local npc = types.NPC.records[self.recordId]\n    local race = types.NPC.races.records[npc.race]\n    return race.isBeast\nend\n\nlocal function isDiseased()\n    local activeSpells = types.Actor.activeSpells(self)\n    return activeSpells:isSpellActive(\"md24_greatnewdisease\")\nend\n\nlocal function isCombatActive()\n    local activePackage = interfaces.AI.getActivePackage()\n    return (activePackage ~= nil) and (activePackage.target ~= nil)\nend\n\nlocal function startDancing()\n    if isDiseased() -- Note: commented out for easy testing\n        and not isBeast()\n        and not isCombatActive()\n    then\n        animation.playBlended(self, \"bellydance\", { priority = animation.PRIORITY.Scripted })\n    end\nend\n\nlocal function isDancing()\n    animation.isPlaying(self, \"bellydance\")\nend\n\nlocal function stopDancing()\n    animation.cancel(self, \"bellydance\")\nend\n\nlocal function blowKiss()\n    -- local player = nearby.players[1]\n    -- local dir = (player.position - self.position)\n    -- local angle = math.atan2(dir.x, dir.y)\n    -- local rotation = util.transform.rotateZ(angle)\n    -- self:teleport(self.cell, self.position, rotation)\n    animation.playBlended(self, \"blowkiss\", { priority = animation.PRIORITY.Scripted })\nend\n\nreturn {\n    engineHandlers = {\n        onUpdate = function(dt)\n            -- Cancel dancing when combat is started.\n            if isDancing() and isCombatActive() then\n                stopDancing()\n            end\n        end,\n        onActive = function()\n            -- Start dancing (if applicable) after a 2s delay.\n            if isDiseased() then\n                startDancing()\n            end\n        end,\n    },\n    eventHandlers = {\n        md24_start_dancing = startDancing,\n        md24_stop_dancing = stopDancing,\n        md24_anim_blow = blowKiss,\n    },\n}\n",
    "The Popular Plague-54730-1-1-1-1718072785\\01b OpenMW\\scripts\\The-Popular-Plague\\player.lua": "local self = require(\"openmw.self\")\nlocal core = require(\"openmw.core\")\nlocal ambient = require(\"openmw.ambient\")\n\nlocal MUSIC_TRACK_LENGTH = 120\n\nlocal previousCell = nil\nlocal musicStarted = false\nlocal musicEndTime = 0\n\nlocal function startMusic()\n    ambient.streamMusic(\"music\\\\md24\\\\the golden tower.mp3\")\n    musicStarted = true\n    musicEndTime = core.getRealTime() + MUSIC_TRACK_LENGTH\nend\n\nlocal function stopMusic()\n    ambient.stopMusic()\n    musicStarted = false\n    musicEndTime = core.getRealTime()\nend\n\nlocal function isEidolonCell(cell)\n    return (cell ~= nil) and (cell.name:find(\"Eidolon\") ~= nil)\nend\n\nlocal function onCellChanged()\n    local isEidolon = isEidolonCell(self.cell)\n    local wasEidolon = isEidolonCell(previousCell)\n    if isEidolon and not wasEidolon then\n        startMusic()\n    elseif wasEidolon and not isEidolon then\n        stopMusic()\n    end\nend\n\nreturn {\n    engineHandlers = {\n        onFrame = function(dt)\n            if self.cell ~= previousCell then\n                onCellChanged()\n                previousCell = self.cell\n            end\n            if musicStarted and (core.getRealTime() > musicEndTime) then\n                startMusic()\n            end\n        end,\n    },\n}\n"
  }
}