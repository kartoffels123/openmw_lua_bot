{
  "folder_name": "Varied Directional Attacks",
  "lua_files": {
    "OpenMW Experimental-54998-0-1-1721469338\\VariedDirectionalAttacksOpenMW.lua": "-- Varied Directional Attacks (OpenMW Version)\nlocal name = \"Varied Directional Attacks\"\n\nlocal defaults = {\n    randomAttack = true,\n    bestAttack = true,\n    spearAlwaysThrust = false\n}\n\nlocal configFile = string.format(\"%s/My Games/OpenMW/config/%s.cfg\", os.getenv(\"USERPROFILE\"), name)\nlocal config = mwscript.loadConfig(configFile, defaults)\n\nlocal lastAttack\n\nlocal function selectAttackType(weapon)\n    mwscript.log(\"Debug: selectAttackType called\")  -- Start of function logging\n\n    local attackTypes = {\n        { type = tes3.attackType.chop,   damage = weapon.chopMin + weapon.chopMax },\n        { type = tes3.attackType.slash,  damage = weapon.slashMin + weapon.slashMax },\n        { type = tes3.attackType.thrust, damage = weapon.thrustMin + weapon.thrustMax }\n    }\n\n    -- Special handling for spears\n    local weaponType = weapon.object.type\n    mwscript.log(string.format(\"Debug: Weapon type is %s\", weaponType))\n\n    if weaponType == tes3.weaponType.spear then\n        mwscript.log(\"Debug: Spear weapon detected\")\n        if config.spearAlwaysThrust or lastAttack ~= tes3.attackType.thrust then\n            mwscript.log(\"Debug: Returning thrust attack for spear\")\n            return tes3.attackType.thrust\n        end\n    end\n\n    -- Remove invalid attacks based on weapon type\n    if weaponType == tes3.weaponType.axe or weaponType == tes3.weaponType.bluntWeapon then\n        mwscript.log(\"Debug: Removing thrust attack for axe or blunt weapon\")\n        attackTypes[3] = nil\n    elseif weaponType == tes3.weaponType.spear then\n        mwscript.log(\"Debug: Removing chop and slash attacks for spear\")\n        attackTypes[1] = nil\n        attackTypes[2] = nil\n    end\n\n    -- ... (the rest of the attack selection logic remains the same, but you can add more logs if needed)\nend\n\nlocal function onAttackStart(e)\n    mwscript.log(\"Debug: onAttackStart called\")\n    if config.randomAttack and e.attacker == tes3.player and e.attacker.weapon then\n        mwscript.log(\"Debug: Random attack enabled\")\n        e.attackType = selectAttackType(e.attacker.weapon)\n        lastAttack = e.attackType\n        mwscript.log(string.format(\"Debug: Attack type set to %s\", e.attackType))\n    end\nend\n\nlocal function onAttackHit(e)\n    mwscript.log(\"Debug: onAttackHit called\")\n    -- ... (the rest of this function remains the same, but you can add logs as needed)\nend\n\nmwscript.registerEvent(tes3.event.attack, onAttackStart, {filter = \"start\"})\nmwscript.registerEvent(tes3.event.attack, onAttackHit, {filter = \"hit\"})",
    "Varied Directional Attacks-54998-1-2-1721740953\\MWSE\\mods\\Varied Directional Attacks\\main.lua": "local name = \"Varied Directional Attacks\"\n\n\nlocal defaults = {\n    randomAttack = true,\n    bestAttack = true,\n    spearAlwaysThrust = false\n}\nlocal config = mwse.loadConfig(name, defaults)\n\nevent.register(tes3.event.modConfigReady, function()\n    local template = mwse.mcm.createTemplate({\n        name = name,\n        config = config\n    })\n    template:register()\n    template:saveOnClose(name, config)\n\n    local page = template:createPage({ label = \"Settings\" })\n    page:createYesNoButton({ label = \"Random directional attacks\", configKey = \"randomAttack\" })\n    page:createYesNoButton({ label = \"Damage as if using best attack\", configKey = \"bestAttack\" })\n    page:createYesNoButton({ label = \"Always thrust with spears\", configKey = \"spearAlwaysThrust\" })\nend)\n\nlocal lastAttack\n\nlocal function selectAttackType(weapon)\n    local attackTypes = {\n        { type = tes3.physicalAttackType.chop,   damage = weapon.chopMin + weapon.chopMax },\n        { type = tes3.physicalAttackType.slash,  damage = weapon.slashMin + weapon.slashMax },\n        { type = tes3.physicalAttackType.thrust, damage = weapon.thrustMin + weapon.thrustMax }\n    }\n    if string.find(weapon.typeName, \"Spear\") then\n        if config.spearAlwaysThrust or lastAttack ~= tes3.physicalAttackType.thrust then\n            return tes3.physicalAttackType.thrust\n        end\n    end\n\n    if string.find(weapon.typeName, \"Axe\") or string.find(weapon.typeName, \"Blunt\") then\n        attackTypes[3] = nil -- Remove thrust for Axe and Blunt weapons\n    end\n\n    local totalDamage = 0\n    for _, attack in pairs(attackTypes) do\n        if attack and lastAttack ~= attack.type then\n            totalDamage = totalDamage + attack.damage\n        end\n    end\n\n    local randomValue = math.random() * totalDamage\n    for _, attack in pairs(attackTypes) do\n        if attack and lastAttack ~= attack.type then\n            randomValue = randomValue - attack.damage\n            if randomValue <= 0 then\n                return attack.type\n            end\n        end\n    end\nend\n\nevent.register(tes3.event.attackStart, function(event)\n    if config.randomAttack and event.reference == tes3.player and event.mobile.readiedWeapon and event.mobile.readiedWeapon.object.isMelee then\n        event.attackType = selectAttackType(event.mobile.readiedWeapon.object)\n        lastAttack = event.attackType\n        mwse.log(event.attackType)\n    end\nend)\n\nevent.register(tes3.event.attackHit, function(event)\n    if config.bestAttack and event.mobile == tes3.player and event.mobile.readiedWeapon and event.mobile.readiedWeapon.object.isMelee then\n        local weapon = event.mobile.readiedWeapon.object\n        local chopDamage = weapon.chopMin + weapon.chopMax\n        local slashDamage = weapon.slashMin + weapon.slashMax\n        local thrustDamage = weapon.thrustMin + weapon.thrustMax\n\n        if chopDamage > slashDamage and chopDamage > thrustDamage then\n            event.mobile.actionData.physicalAttackType = tes3.physicalAttackType.chop\n        elseif slashDamage > thrustDamage then\n            event.mobile.actionData.physicalAttackType = tes3.physicalAttackType.slash\n        else\n            event.mobile.actionData.physicalAttackType = tes3.physicalAttackType.thrust\n        end\n        mwse.log(event.mobile.actionData.physicalAttackType)\n    end\nend)"
  }
}