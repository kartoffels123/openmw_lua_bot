{
  "folder_name": "OpenMW  Classic Resident Evil",
  "lua_files": {
    "Base Game V.0.11-54619--0-11-1716405109\\Resident Evil\\data\\scripts\\CameraPosition.lua": "local func_table={}\n\nlocal self = require('openmw.self')\nlocal input = require('openmw.input')\nlocal ui = require('openmw.ui')\nlocal util = require('openmw.util')\nlocal types = require('openmw.types')\nlocal I = require('openmw.interfaces')\nlocal core = require('openmw.core')\nlocal camera = require('openmw.camera')\nlocal interfaces = require('openmw.interfaces')\nlocal ambient = require('openmw.ambient')\nlocal vfs = require(\"openmw.vfs\")\nlocal async = require('openmw.async')\nlocal nearby = require('openmw.nearby')\nlocal postprocessing = require('openmw.postprocessing')\n\n\nlocal activeBkg\nlocal activecam\nlocal Switchzonepoints={}\nlocal Mask=1\nlocal MSKlistDepth={}\nlocal ToggleButton=true\nlocal CameraMenu\nlocal White=util.color.rgb(1, 1, 1)\nlocal Grey=util.color.rgb(0.5, 0.5, 0.5)\nlocal textSizeRatio= ui.screenSize().y/1056\nlocal ShowSwitchZone=0\nlocal SwitchZonePointPastPosition={}\nlocal ChangeSZ=0\nlocal TargetCams={}\n\nlocal TextEditBox2 = {\n\ttype = ui.TYPE.TextEdit,\n\tprops = {\n\t\tsize = util.vector2(50, 25),\n\t\ttextSize = 25,\n\t\ttextColor = White,\n\t\tmultiline = true,\n\t\twordWrap = true,\n\t},}\n\n\nfunction ChangeCam(activeBkg,MSKlist,activecam,BGDepth)\n\tcore.sendGlobalEvent('changeCam',\n\t\t{\n\t\t\tCamPos=camera.getPosition(),\n\t\t\tCamPitch=camera.getPitch(),\n\t\t\tCamYaw=camera.getYaw(),\n\t\t\tActivCam = activecam,\n\t\t\tBgd = activeBkg,\n\t\t\tMSKList=MSKlist,\n\t\t\tplayer=self,\n\t\t\tBGDepth=BGDepth,\n\n\t\t})\nend\n\n\nlocal function TextSwitchZone(text)\n\tif (tonumber(text) and Switchzonepoints[\"SwitchZone\"..text]) or text==\"\" then\n\t\tCameraMenu.layout.content[22].content[2].props.text=text\n\t\tif tonumber(text) then\n\t\t\tif text ==\"1\" then\n\t\t\t\tCameraMenu.layout.content[22].content[3].props.text=\"(Red) to camera \"\n\t\t\t\tCameraMenu.layout.content[22].content[4].props.text=Switchzonepoints[\"SwitchZone\"..text].Camera\n\t\t\telseif text==\"2\" then\n\t\t\t\tCameraMenu.layout.content[22].content[3].props.text=\"(Green) to camera \"\n\t\t\t\tCameraMenu.layout.content[22].content[4].props.text=Switchzonepoints[\"SwitchZone\"..text].Camera\n\t\t\telseif text==\"3\" then\n\t\t\t\tCameraMenu.layout.content[22].content[3].props.text=\"(Blue) to camera \"\n\t\t\t\tCameraMenu.layout.content[22].content[4].props.text=Switchzonepoints[\"SwitchZone\"..text].Camera\n\t\t\telseif text==\"4\" then\n\t\t\t\tCameraMenu.layout.content[22].content[3].props.text=\"(Yellow) to camera \"\n\t\t\t\tCameraMenu.layout.content[22].content[4].props.text=Switchzonepoints[\"SwitchZone\"..text].Camera\n\t\t\tend\n\t\t\tChangeSZ=1\n\t\t\tCameraMenu.layout.content[22].content[4].props.text=tostring(Switchzonepoints[\"SwitchZone\"..text].Camera)\n\t\t\tCameraMenu.layout.content[23].content[2].props.text=tostring(Switchzonepoints[\"SwitchZone\"..text].Point0.position.x)\n\t\t\tCameraMenu.layout.content[23].content[4].props.text=tostring(Switchzonepoints[\"SwitchZone\"..text].Point0.position.y)\n\t\t\tCameraMenu.layout.content[24].content[2].props.text=tostring(Switchzonepoints[\"SwitchZone\"..text].Point1.position.x)\n\t\t\tCameraMenu.layout.content[24].content[4].props.text=tostring(Switchzonepoints[\"SwitchZone\"..text].Point1.position.y)\n\t\t\tCameraMenu.layout.content[25].content[2].props.text=tostring(Switchzonepoints[\"SwitchZone\"..text].Point2.position.x)\n\t\t\tCameraMenu.layout.content[25].content[4].props.text=tostring(Switchzonepoints[\"SwitchZone\"..text].Point2.position.y)\n\t\t\tCameraMenu.layout.content[26].content[2].props.text=tostring(Switchzonepoints[\"SwitchZone\"..text].Point3.position.x)\n\t\t\tCameraMenu.layout.content[26].content[4].props.text=tostring(Switchzonepoints[\"SwitchZone\"..text].Point3.position.y)\n\t\t\tCameraMenu:update()\n\t\telseif text==\"\"  then\n\t\t\tCameraMenu.layout.content[22].content[3].props.text=\"to camera \"\n\t\t\tCameraMenu.layout.content[22].content[4].props.text=\"nil\"\n\t\t\tCameraMenu.layout.content[23].content[2].props.text=\"nil\"\n\t\t\tCameraMenu.layout.content[23].content[4].props.text=\"nil\"\n\t\t\tCameraMenu.layout.content[24].content[2].props.text=\"nil\"\n\t\t\tCameraMenu.layout.content[24].content[4].props.text=\"nil\"\n\t\t\tCameraMenu.layout.content[25].content[2].props.text=\"nil\"\n\t\t\tCameraMenu.layout.content[25].content[4].props.text=\"nil\"\n\t\t\tCameraMenu.layout.content[26].content[2].props.text=\"nil\"\n\t\t\tCameraMenu.layout.content[26].content[4].props.text=\"nil\"\n\t\tend\n\t\tCameraMenu:update()\n\tend\nend\n\nlocal function TextCam(text)\n\tCameraMenu.layout.content[22].content[4].props.text=text\n\tTargetCams[\"SwitchZone\"..CameraMenu.layout.content[22].content[2].props.text]=text\n\tCameraMenu:update()\nend\n\nlocal function teleportPoint(UI,Point,X,Y)\n\tif  tonumber(X) or X==\"\" or X==\"-\" then\n\t\tCameraMenu.layout.content[UI].content[2].props.text=X\n\tend\n\tif  tonumber(Y) or Y==\"\" or Y==\"-\" then\n\t\tCameraMenu.layout.content[UI].content[4].props.text=Y\n\tend\n\tif tonumber(X) then\n\t\tprint(X)\n\t\tcore.sendGlobalEvent('Teleport',{object=Switchzonepoints[\"SwitchZone\"..CameraMenu.layout.content[22].content[2].props.text][\"Point\"..Point],position=util.vector3(tonumber(X),tonumber(CameraMenu.layout.content[UI].content[4].props.text),self.position.z),rotation=nil})\n\telseif tonumber(Y) then\n\t\tprint(Y)\n\t\tcore.sendGlobalEvent('Teleport',{object=Switchzonepoints[\"SwitchZone\"..CameraMenu.layout.content[22].content[2].props.text][\"Point\"..Point],position=util.vector3(tonumber(CameraMenu.layout.content[UI].content[2].props.text),tonumber(Y),self.position.z),rotation=nil})\n\tend\nend\n\nfunc_table.PositionnningCamera=function(util,input,camera,core,BGDepth,activecam,activeBkg,MSKlist,TurnLeft,TurnRight,MoveForward,MoveBackward,SwitchZonePoints)\n\t\n\t-------------Move camera, background and masks\n\tif ShowSwitchZone==1 then\n\t\t--print(SwitchZonePoints[1])\n\t\tfor s, switchzones in pairs(SwitchZonePoints) do\n\t\t\tif CameraMenu.layout then\n\t\t\t\tif s==\"SwitchZone\"..CameraMenu.layout.content[22].content[2].props.text and switchzones[\"Point0\"] and switchzones[\"Point1\"] and switchzones[\"Point2\"] and switchzones[\"Point3\"] then\n\t\t\t\t\tif SwitchZonePointPastPosition[s..\"Point0\"]~=switchzones[\"Point0\"].position or SwitchZonePointPastPosition[s..\"Point1\"]~=switchzones[\"Point1\"].position or SwitchZonePointPastPosition[s..\"Point2\"]~=switchzones[\"Point2\"].position or  SwitchZonePointPastPosition[s..\"Point3\"]~=switchzones[\"Point3\"].position or ChangeSZ==1 then\n\t\t\t\t\t\tcore.sendGlobalEvent('CreateSwitchzoneBorders',{point1=switchzones[\"Point0\"],point2=switchzones[\"Point1\"],point3=switchzones[\"Point2\"],point4=switchzones[\"Point3\"],switchzone=s,player=self})\n\t\t\t\t\t\tSwitchZonePointPastPosition[s..\"Point0\"]=switchzones[\"Point0\"].position\n\t\t\t\t\t\tSwitchZonePointPastPosition[s..\"Point1\"]=switchzones[\"Point1\"].position\n\t\t\t\t\t\tSwitchZonePointPastPosition[s..\"Point2\"]=switchzones[\"Point2\"].position\n\t\t\t\t\t\tSwitchZonePointPastPosition[s..\"Point3\"]=switchzones[\"Point3\"].position\n\t\t\t\t\t\tChangeSZ=0\n\t\t\t\t\t\tprint(CameraMenu.layout.content[23].content[2].props.text)\n\t\t\t\t\t\tprint(Switchzonepoints[\"SwitchZone\"..CameraMenu.layout.content[22].content[2].props.text])\n\t\t\t\t\t\tCameraMenu.layout.content[23].content[2].props.text=tostring(Switchzonepoints[\"SwitchZone\"..CameraMenu.layout.content[22].content[2].props.text].Point0.position.x)\n\t\t\t\t\t\tCameraMenu.layout.content[23].content[4].props.text=tostring(Switchzonepoints[\"SwitchZone\"..CameraMenu.layout.content[22].content[2].props.text].Point0.position.y)\n\t\t\t\t\t\tCameraMenu.layout.content[24].content[2].props.text=tostring(Switchzonepoints[\"SwitchZone\"..CameraMenu.layout.content[22].content[2].props.text].Point1.position.x)\n\t\t\t\t\t\tCameraMenu.layout.content[24].content[4].props.text=tostring(Switchzonepoints[\"SwitchZone\"..CameraMenu.layout.content[22].content[2].props.text].Point1.position.y)\n\t\t\t\t\t\tCameraMenu.layout.content[25].content[2].props.text=tostring(Switchzonepoints[\"SwitchZone\"..CameraMenu.layout.content[22].content[2].props.text].Point2.position.x)\n\t\t\t\t\t\tCameraMenu.layout.content[25].content[4].props.text=tostring(Switchzonepoints[\"SwitchZone\"..CameraMenu.layout.content[22].content[2].props.text].Point2.position.y)\n\t\t\t\t\t\tCameraMenu.layout.content[26].content[2].props.text=tostring(Switchzonepoints[\"SwitchZone\"..CameraMenu.layout.content[22].content[2].props.text].Point3.position.x)\n\t\t\t\t\t\tCameraMenu.layout.content[26].content[4].props.text=tostring(Switchzonepoints[\"SwitchZone\"..CameraMenu.layout.content[22].content[2].props.text].Point3.position.y)\n\t\t\t\t\t\tCameraMenu:update()\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\telseif SwitchZonePointPastPosition~=nil then\n\t\tSwitchZonePointPastPosition={}\n\tend\n\n\tif I.UI.getMode()==\"MainMenu\" and (CameraMenu==nil or CameraMenu.layout==nil) then\n\t\tTargetCams={}\n\n\t\tCameraMenu=ui.create{layer = 'Console',  type = ui.TYPE.Flex,props={relativePosition=util.vector2(7/10, 1/30), autoSize=true, anchor=util.vector2(0,0)},\n\t\t\t\t\t\t\tcontent=ui.content{\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"0 : Camera placement tool\", textSize = 25*textSizeRatio, textColor = White, visible = true} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"P : Print datas (F10)\", textSize = 25*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Right : Turn Camera Right (with fixed camera only)\", textSize = 20*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Left : Turn Camera Left (with fixed camera only)\", textSize = 20*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Forward : Turn Camera Up (with fixed camera only)\", textSize = 20*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Back : Turn Camera Down (with fixed camera only)\", textSize = 20*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"9 : Move Camera (with fixed camera only)\",relativePosition=util.vector2(2/16, 7/16), textSize = 25*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Right : Move Camera Right\", textSize = 25*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Left : Move Camera Left\", textSize = 25*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Forward : Move Camera Forward\", textSize = 25*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Back : Move Camera Back\", textSize = 25*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"8 : Move Up/Down (with fixed camera only)\", textSize = 20*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Forward : Move Camera Up\", textSize = 25*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Back : Move Camera Down\", textSize = 25*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"M : Mask tool\", textSize = 25*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Left/Right : Change Mask\", textSize = 25*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Forward/Back : Change Mask's depth\", textSize = 25*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"B : Background tool\", textSize = 25*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Forward/Back : Change Background's depth\", textSize = 25*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"H : Show Switchzones\", textSize = 25*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"T : Save Switchzones\", textSize = 25*textSizeRatio, textColor = White, visible = false} },\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Flex,  props = { visible = false, autoZise=false, horizontal=true} ,content=ui.content{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"SwitchZone \", textSize = 25*textSizeRatio, textColor = White, visible = true} },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ template = TextEditBox2,type = ui.TYPE.TextEdit,props = {wordWrap = true, autoSize = true,text=\"1\",textSize=25*textSizeRatio,textColor=Grey, visible = true},events={textChanged=async:callback(TextSwitchZone)}},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"(Red) to camera \", textSize = 25*textSizeRatio, textColor = White, visible = true} },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ template = TextEditBox2,type = ui.TYPE.TextEdit,props = {wordWrap = true, autoSize = true,text=\"Cam??\",textSize=25*textSizeRatio,textColor=Grey, visible = true},events={textChanged=async:callback(TextCam)}},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},},\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Flex,  props = { visible = false, autoZise=false, horizontal=true} ,content=ui.content{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Point 0 X \", textSize = 25*textSizeRatio, textColor = White, visible = true} },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ template = TextEditBox2,type = ui.TYPE.TextEdit,props = {text=\"0\",textSize=25*textSizeRatio,textColor=Grey, visible = true},events={textChanged=async:callback(function(text) teleportPoint(23,0,text,nil) end)}},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Point 0 Y \", textSize = 25*textSizeRatio, textColor = White, visible = true} },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ template = TextEditBox2,type = ui.TYPE.TextEdit,props = {text=\"0\",textSize=25*textSizeRatio,textColor=Grey, visible = true},events={textChanged=async:callback(function(text) teleportPoint(23,0,nil,text) end)}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},},\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Flex,  props = { visible = false, autoZise=false, horizontal=true} ,content=ui.content{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Point 1 X \", textSize = 25*textSizeRatio, textColor = White, visible = true} },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ template = TextEditBox2,type = ui.TYPE.TextEdit,props = {text=\"0\",textSize=25*textSizeRatio,textColor=Grey, visible = true},events={textChanged=async:callback(function(text) teleportPoint(24,1,text,nil) end)}},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Point 1 Y \", textSize = 25*textSizeRatio, textColor = White, visible = true} },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ template = TextEditBox2,type = ui.TYPE.TextEdit,props = {text=\"0\",textSize=25*textSizeRatio,textColor=Grey, visible = true},events={textChanged=async:callback(function(text)  teleportPoint(24,1,nil,text)end)}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},},\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Flex,  props = { visible = false, autoZise=false, horizontal=true} ,content=ui.content{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Point 2 X \", textSize = 25*textSizeRatio, textColor = White, visible = true} },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ template = TextEditBox2,type = ui.TYPE.TextEdit,props = {text=\"0\",textSize=25*textSizeRatio,textColor=Grey, visible = true},events={textChanged=async:callback(function(text)  teleportPoint(25,2,text,nil)  end)}},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Point 2 Y \", textSize = 25*textSizeRatio, textColor = White, visible = true} },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ template = TextEditBox2,type = ui.TYPE.TextEdit,props = {text=\"0\",textSize=25*textSizeRatio,textColor=Grey, visible = true},events={textChanged=async:callback(function(text)  teleportPoint(25,2,nil,text) end)}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},},\n\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Flex,  props = { visible = false, autoZise=false, horizontal=true} ,content=ui.content{\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Point 3 X \", textSize = 25*textSizeRatio, textColor = White, visible = true} },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ template = TextEditBox2,type = ui.TYPE.TextEdit,props = {text=\"0\",textSize=25*textSizeRatio,textColor=Grey, visible = true},events={textChanged=async:callback(function(text)  teleportPoint(26,3,text,nil) end)}},\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Point 3 Y \", textSize = 25*textSizeRatio, textColor = White, visible = true} },\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ template = TextEditBox2,type = ui.TYPE.TextEdit,props = {text=\"0\",textSize=25*textSizeRatio,textColor=Grey, visible = true},events={textChanged=async:callback(function(text)  teleportPoint(26,3,nil,text) end)}}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t},},\n\n\t\t\t\t\t\t\t\t},}\n\telseif I.UI.getMode()==\"MainMenu\" then\n\t\tfor i=1,20 do\n\t\t\tif i==1 then\n\t\t\t\tCameraMenu.layout.content[i].props.visible=true\n\t\t\telseif CameraMenu.layout.content[i].props then\n\t\t\t\tCameraMenu.layout.content[i].props.visible=false\n\t\t\tend\n\t\tend\n\t\tCameraMenu:update()\n\telseif I.UI.getMode()~=\"MainMenu\" and CameraMenu then\n\t\tCameraMenu:destroy()\n\tend\n\n\t\n\tif CameraMenu and I.UI.getMode()==\"MainMenu\" then\n\t\tif input.isKeyPressed(input.KEY.T) and ShowSwitchZone==1 then\n\n\t\t\tui.showMessage(\"SwitchZones Saved\")\n\t\t\tcore.sendGlobalEvent('SHSwitchZones',{Player=self,SH=3, cam=activecam,TargetCam=TargetCams})\n\t\telseif ShowSwitchZone==1 and CameraMenu.layout.content[21].props.visible==false and SwitchZonePoints[\"SwitchZone1\"] then\n\t\t\tprint(ShowSwitchZone)\n\t\t\tSwitchzonepoints=SwitchZonePoints\n\t\t\tCameraMenu.layout.content[21].props.visible=true\n\t\t\tCameraMenu.layout.content[22].props.visible=true\n\t\t\tCameraMenu.layout.content[22].content[3].props.text=\"(Red) to camera \"\n\t\t\tCameraMenu.layout.content[22].content[4].props.text=SwitchZonePoints.SwitchZone1.Camera\n\t\t\tCameraMenu.layout.content[23].props.visible=true\n\t\t\tCameraMenu.layout.content[23].content[2].props.text=tostring(SwitchZonePoints.SwitchZone1.Point0.position.x)\n\t\t\tCameraMenu.layout.content[23].content[4].props.text=tostring(SwitchZonePoints.SwitchZone1.Point0.position.y)\n\t\t\tCameraMenu.layout.content[24].props.visible=true\n\t\t\tCameraMenu.layout.content[24].content[2].props.text=tostring(SwitchZonePoints.SwitchZone1.Point1.position.x)\n\t\t\tCameraMenu.layout.content[24].content[4].props.text=tostring(SwitchZonePoints.SwitchZone1.Point1.position.y)\n\t\t\tCameraMenu.layout.content[25].props.visible=true\n\t\t\tCameraMenu.layout.content[25].content[2].props.text=tostring(SwitchZonePoints.SwitchZone1.Point2.position.x)\n\t\t\tCameraMenu.layout.content[25].content[4].props.text=tostring(SwitchZonePoints.SwitchZone1.Point2.position.y)\n\t\t\tCameraMenu.layout.content[26].props.visible=true\n\t\t\tCameraMenu.layout.content[26].content[2].props.text=tostring(SwitchZonePoints.SwitchZone1.Point3.position.x)\n\t\t\tCameraMenu.layout.content[26].content[4].props.text=tostring(SwitchZonePoints.SwitchZone1.Point3.position.y)\n\t\t\tCameraMenu:update()\n\t\telseif ShowSwitchZone==0 and CameraMenu.layout.content[21].props.visible==true then\n\t\t\tprint(ShowSwitchZone)\n\t\t\tCameraMenu.layout.content[21].props.visible=false\n\t\t\tCameraMenu.layout.content[22].props.visible=false\n\t\t\tCameraMenu.layout.content[23].props.visible=false\n\t\t\tCameraMenu.layout.content[24].props.visible=false\n\t\t\tCameraMenu.layout.content[25].props.visible=false\n\t\t\tCameraMenu.layout.content[26].props.visible=false\n\t\t\tCameraMenu:update()\n\t\tend\n\tend\n\n\n\tif I.UI.getMode()==\"MainMenu\" and input.isKeyPressed(input.KEY._0) then\n\t\tif CameraMenu.layout.content[2].props.visible==false then\n\t\t\tif ShowSwitchZone==1 and CameraMenu.layout.content[20].props.text==\"H : Show Switchzones\" then\n\t\t\t\tCameraMenu.layout.content[20].props.text=\"H : Hide Switchzones\"\n\t\t\tend\n\t\t\tfor i=1,20 do\n\t\t\t\tif i==2 or i==3  or i==4  or i==5  or i==6 or i==7  or i==15 or i==18 or i ==20 then\n\t\t\t\t\tCameraMenu.layout.content[i].props.visible=true\n\t\t\t\telseif CameraMenu.layout.content[i].props then\n\t\t\t\t\tCameraMenu.layout.content[i].props.visible=false\n\t\t\t\tend\n\t\t\tend\n\t\t\tCameraMenu:update()\n\t\tend\n\t\tif input.isKeyPressed(input.KEY.B) then\n\t\t\tfor i=1,20 do\n\t\t\t\tif i ==19 then\n\t\t\t\t\tCameraMenu.layout.content[i].props.visible=true\n\t\t\t\telseif CameraMenu.layout.content[i].props then\n\t\t\t\t\tCameraMenu.layout.content[i].props.visible=false\n\t\t\t\tend\n\t\t\tend\n\t\t\t\n\t\t\tif  MoveBackward(0.2) then\n\t\t\t\tBGDepth=BGDepth-5\n\t\t\t\tChangeCam(activeBkg,MSKlist,activecam,BGDepth)\n\t\t\telseif input.isKeyPressed(input.KEY.B) and  MoveForward(-0.2) then\n\t\t\t\tBGDepth=BGDepth+5\n\t\t\t\tChangeCam(activeBkg,MSKlist,activecam,BGDepth)\n\t\t\tend\n\n\t\telseif input.isKeyPressed(input.KEY.P) and ToggleButton==false then\n\t\t\tToggleButton=true\n\t\t\tcore.sendGlobalEvent('saveRDT',{Cell=self.cell.name})\n\t\t\tui.showMessage(\"RTD printed\")\n\n\t\telseif input.isKeyPressed(input.KEY.H) and ToggleButton==false then\n\t\t\tToggleButton=true\n\t\t\tif ShowSwitchZone==0 then\n\t\t\t\tCameraMenu.layout.content[20].props.text=\"H : Hide Switchzones\"\n\t\t\t\tcore.sendGlobalEvent('SHSwitchZones',{Player=self,SH=ShowSwitchZone, cam=activecam})\n\t\t\t\tShowSwitchZone=1\n\t\t\telseif ShowSwitchZone==1 then\n\t\t\t\tCameraMenu.layout.content[20].props.text=\"H : Show Switchzones\"\n\t\t\t\tcore.sendGlobalEvent('SHSwitchZones',{Player=self,SH=ShowSwitchZone, cam=activecam})\n\t\t\t\tShowSwitchZone=0\n\t\t\tend\n\t\t\tCameraMenu:update()\n\n\t\telseif input.isKeyPressed(input.KEY.M) then\n\t\t\tfor i=1,20 do\n\t\t\t\tif i ==16 or i ==17 then\n\t\t\t\t\tCameraMenu.layout.content[i].props.visible=true\n\t\t\t\telseif CameraMenu.layout.content[i].props then\n\t\t\t\t\tCameraMenu.layout.content[i].props.visible=false\n\t\t\t\tend\n\t\t\tend\n\t\t\tcore.sendGlobalEvent('BlinkingMask',{Mask=Mask})\n\t\t\tif MoveBackward(0.2) and MSKlist[Mask].depth>1 then\n\t\t\t\tMSKlist[Mask].depth=MSKlist[Mask].depth-1\n\t\t\t\tprint(MSKlist[Mask].depth)\n\t\t\t\tChangeCam(activeBkg,MSKlist,activecam,BGDepth)\n\t\t\telseif MoveForward(-0.2) then\n\t\t\t\tMSKlist[Mask].depth=MSKlist[Mask].depth+1\n\t\t\t\tprint(MSKlist[Mask].depth)\n\t\t\t\tChangeCam(activeBkg,MSKlist,activecam,BGDepth)\n\t\t\telseif TurnRight(0.2) and vfs.fileExists('meshes/Masks/'..MSKlist[Mask+1].idname..'.nif') and ToggleButton==false then\n\t\t\t\tMask=Mask+1\n\t\t\t\tui.showMessage(\"Mask\"..Mask)\n\t\t\t\tToggleButton=true\n\t\t\telseif TurnLeft(-0.2) and Mask>1 and ToggleButton==false  then\n\t\t\t\tMask=Mask-1\n\t\t\t\tui.showMessage(\"Mask\"..Mask)\n\t\t\t\tToggleButton=true\n\t\t\tend\n\t\telseif input.isKeyPressed(input.KEY._9) and camera.getMode()==0 then\n\t\t\tfor  i=1,20 do\n\t\t\t\tif i ==8 or i ==9 or i ==10 or i ==11 or i ==12 then\n\t\t\t\t\tCameraMenu.layout.content[i].props.visible=true\n\t\t\t\telseif CameraMenu.layout.content[i].props then\n\t\t\t\t\tCameraMenu.layout.content[i].props.visible=false\n\t\t\t\tend\n\t\t\tend\n\t\t\tCameraMenu:update()\n\t\t\tif TurnLeft(-0.2) == true then\n\t\t\t\tcamera.setStaticPosition(util.transform.move(util.vector3(-1, 0, 0)) * camera.getPosition())\n\t\t\t\tChangeCam(activeBkg,MSKlist,activecam,BGDepth)\n\t\t\telseif TurnRight(0.2) == true then\n\t\t\t\tcamera.setStaticPosition(util.transform.move(util.vector3(1, 0, 0)) * camera.getPosition())\n\t\t\t\tChangeCam(activeBkg,MSKlist,activecam,BGDepth)\n\n\n\n\n\n\t\t\telseif input.isKeyPressed(input.KEY._8) == true then\n\t\t\t\tfor  i=1,20 do\n\t\t\t\t\tif i ==13 or i ==14 then\n\t\t\t\t\t\tCameraMenu.layout.content[i].props.visible=true\n\t\t\t\t\telseif CameraMenu.layout.content[i].props then\n\t\t\t\t\t\tCameraMenu.layout.content[i].props.visible=false\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tCameraMenu:update()\n\t\t\t\tif MoveBackward(0.2) == true then\n\t\t\t\tCameraMenu:update()\n\t\t\t\t\tcamera.setStaticPosition(util.transform.move(util.vector3(0, 0, -1)) * camera.getPosition())\n\t\t\t\t\tChangeCam(activeBkg,MSKlist,activecam,BGDepth)\n\t\t\t\telseif MoveForward(-0.2) == true then\n\t\t\t\t\tcamera.setStaticPosition(util.transform.move(util.vector3(0, 0, 1)) * camera.getPosition())\n\t\t\t\t\tChangeCam(activeBkg,MSKlist,activecam,BGDepth)\n\t\t\t\tend\n\n\n\n\t\t\t\t\n\t\t\telseif MoveBackward(0.2) == true then\n\t\t\t\tcamera.setStaticPosition(util.transform.move(util.vector3(0, -1, 0)) * camera.getPosition())\n\t\t\t\tChangeCam(activeBkg,MSKlist,activecam,BGDepth)\n\t\t\telseif MoveForward(-0.2) == true then\n\t\t\t\tcamera.setStaticPosition(util.transform.move(util.vector3(0, 1, 0)) * camera.getPosition())\n\t\t\t\tChangeCam(activeBkg,MSKlist,activecam,BGDepth)\n\t\t\tend\n\t\telseif TurnLeft(-0.2) == true and camera.getMode()==0 then\n\t\t\tcamera.setYaw(camera.getYaw() - 0.005)\n\t\t\tChangeCam(activeBkg,MSKlist,activecam,BGDepth)\n\t\telseif TurnRight(0.2) == true and camera.getMode()==0 then\n\t\t\tcamera.setYaw(camera.getYaw() + 0.005)\n\t\t\tChangeCam(activeBkg,MSKlist,activecam,BGDepth)\n\t\telseif MoveBackward(0.2) == true and camera.getMode()==0 then\n\t\t\tcamera.setPitch(camera.getPitch() + 0.005)\n\t\t\tChangeCam(activeBkg,MSKlist,activecam,BGDepth)\n\t\telseif MoveForward(-0.2) == true and camera.getMode()==0 then\n\t\t\tcamera.setPitch(camera.getPitch() - 0.005)\n\t\t\tChangeCam(activeBkg,MSKlist,activecam,BGDepth)\n\t\tend\n\t\tif ToggleButton==true and TurnRight(0.2)~=true and TurnLeft(-0.2)~=true and input.isKeyPressed(input.KEY.P)==false and input.isKeyPressed(input.KEY.H)==false and input.isKeyPressed(input.KEY.T)==false then\n\t\t\tToggleButton=false\n\t\telseif input.isKeyPressed(input.KEY.M)==false then\n\t\t\tMask=1\n\t\tend\n\tend\n\nend\n\nreturn func_table\n\n",
    "Base Game V.0.11-54619--0-11-1716405109\\Resident Evil\\data\\scripts\\Creatures.lua": "local self=require('openmw.self')\nlocal types = require('openmw.types')\nlocal nearby=require('openmw.nearby')\nlocal util = require('openmw.util')\nlocal core = require('openmw.core')\nlocal AI = require('openmw.interfaces').AI\n\nDamageLocTimer=0\nDamageLocPlayer=nil\n\n\nlocal function DamageEffects(data)\n    print(self)\n    print(\"life1\"..types.Actor.stats.dynamic.health(self).current)\n    --print(data.enchant)\n    --print(data.damages)\n    types.Actor.stats.dynamic.health(self).current=types.Actor.stats.dynamic.health(self).current-data.damages\n    \n    print(\"life2\"..types.Actor.stats.dynamic.health(self).current)\n    --if core.magic.enchantments[data.enchant].type==1 then  --onStrike enchantment\n    --    for i, effect in ipairs(data.enchant.effects) do \n    --        print(effect)\n    --        types.Actor.activeEffects(self):modify(effect.magnitudeMax,effect.effect)\n    --    end\n    --end\nend\n\n\nlocal function Damagelocalisation(data)\n    DamageLocTimer=core.getRealTime()\n    DamageLocPlayer=data.Player\n    --print(data.Hitpos.z/(self:getBoundingBox().halfSize.z*2-self.position.z)*100)\n    core.sendGlobalEvent(\"ReturnLocalScriptVariable\",{Player=data.Player, GameObject=self,Variable=\"DamageLoc\",value=data.Hitpos.z/(self:getBoundingBox().halfSize.z*2-self.position.z)*100})\nend\n\nreturn {\n\teventHandlers = {Damagelocalisation=Damagelocalisation,DamageEffects=DamageEffects },\n\tengineHandlers = {\n        onUpdate = function()\n            if DamageLocPlayer and (core.getRealTime()-DamageLocTimer)>0.1 then\n                --print(\"Stop localisation\")\n                core.sendGlobalEvent(\"ReturnLocalScriptVariable\",{Player=DamageLocPlayer, GameObject=self,Variable=\"DamageLoc\",value=-5})\n                DamageLocPlayer=nil\n            elseif DamageLocPlayer then\n                --print(\"localisation\")\n            end\n\n            for i, actor in pairs(nearby.actors) do\n                if actor.id~=self.id and actor.type==types.NPC and types.Actor.isDead(actor)==false then\n                    if AI.getActivePackage().target then\n                        if ((actor.position-self.position):length()<(AI.getActivePackage().target.position-self.position):length() or types.Actor.isDead(actor)==false) and actor~=AI.getActivePackage().target  then\n                            AI.startPackage({type='Combat',target=actor})\n                        elseif types.Actor.isDead(AI.getActivePackage().target) and  (actor.position-self.position):length()<2000 then\n                            AI.startPackage({type='Combat',target=actor})\n                        end\n                    elseif (actor.position-self.position):length()<3000 then\n                        AI.startPackage({type='Combat',target=actor})\n                    end\n                end\n            end\n            \n\tend\n    ,\n\t}\n}",
    "Base Game V.0.11-54619--0-11-1716405109\\Resident Evil\\data\\scripts\\Global.lua": "-- Save to my_lua_mod/scripts/example/player.lua\n\n\nlocal util = require('openmw.util')\nlocal world = require('openmw.world')\nlocal types = require('openmw.types')\nlocal core = require('openmw.core')\nlocal interfaces = require('openmw.interfaces')\nlocal vfs = require(\"openmw.vfs\")\nlocal deepToString=require('openmw_aux.util').deepToString\nlocal players = world.players\nlocal activecell\nlocal activecam\nlocal targetcam\nlocal lastcam\nlocal lastcell\nlocal MSK={}\nlocal PointP\nlocal L01=nil\nlocal L12=nil\nlocal L23=nil\nlocal L30=nil\nlocal L0P=nil\nlocal L1P=nil\nlocal L2P=nil\nlocal L3P=nil\nlocal BCG=nil\nlocal ROOMS={}\nlocal Cutscene={}\nCutscene[1]=false\nSaves={}\nlocal SelectionChoice={}\nlocal LiveSelection=false\n\nlocal Puzzle=false\n\nlocal code =\"return({\"\nfor i,book in ipairs(types.Book.records) do\n\tif string.find(book.id,\"_rdt_\")~=nil then\n\t\tprint(book.id)\n\t\tcode = code..book.text..\",\"\n\tend\nend\ncode = code..\"})\"\nROOMS=util.loadCode(code,{util = require('openmw.util')})()\n--for i, cell in pairs (ROOMS) do\n--\tprint(i)\n--end\n\n\n\n\n\nlocal function pushContainer(data)\n\tif data.startPos~=nil then\n\t\tdata.Container:teleport(data.Container.cell,data.startPos)\n\tend\n\tif data.Way==\"X+\" then\n\t\tdata.Container:teleport(activecell,util.transform.move(-1,0,0)*data.Container.position)\n\tend\n\tif data.Way==\"X-\" then\n\t\tdata.Container:teleport(activecell,util.transform.move(1,0,0)*data.Container.position)\n\tend\n\tif data.Way==\"Y+\" then\n\t\tdata.Container:teleport(activecell,util.transform.move(0,-1,0)*data.Container.position)\n\tend\n\tif data.Way==\"Y-\" then\n\t\tdata.Container:teleport(activecell,util.transform.move(0,1,0)*data.Container.position)\n\tend\nend\n\n\nlocal function Teleport(data)\n\tif data.object.parentContainer then\n\t\tdata.object:teleport(data.object.parentContainer.cell,data.position,data.rotation)\t\n\telse\n\t\tdata.object:teleport(data.object.cell,data.position,data.rotation)\n\tend\nend\n\nlocal function SetScale(data)\n\tdata.object:setScale(data.scale)\nend\n\n\nlocal BlinkingMaskTimer=0\nlocal function BlinkingMask(data)\n\tif MSK[data.Mask].enabled then\n\t\tBlinkingMaskTimer=BlinkingMaskTimer+1\n\t\tif BlinkingMaskTimer==50 then\n\t\t\tMSK[data.Mask].enabled=false\n\t\t\tBlinkingMaskTimer=0\n\t\tend\n\telseif MSK[data.Mask].enabled==false then\n\t\tMSK[data.Mask].enabled=true\n\tend\nend\n\n\n\nlocal function MoveInto(data)\n\tif data.newItem then\n\t\tprint(data.newItem)\n\t\tif data.actor then\n\t\t\tworld.createObject(data.newItem):moveInto(types.Actor.inventory(data.actor))\n\t\telseif data.container then\n\t\t\tworld.createObject(data.newItem):moveInto(types.Container.content(data.container))\n\t\tend\n\telseif data.Item then\n\t\tif data.actor then\n\t\t\tdata.Item:moveInto(types.Actor.inventory(data.actor))\n\t\telseif data.container then\n\t\t\tdata.Item:moveInto(types.Container.content(data.container))\n\t\tend\n\tend\nend\n\nlocal function setCharge(data)\n\tprint(\"setcharge\"..tostring(data.Item))\n\tprint(\"setcharge\"..tostring(data.value))\n\tif data.value>=0 then\n\t\ttypes.Item.setEnchantmentCharge(data.Item,data.value)\n\tend\nend\n\nlocal function createAmmosinInventory(data)\n\tworld.createObject(data.ammo,data.number):moveInto(types.Actor.inventory(data.actor))\nend\n\n\nlocal function RemoveItem(data)\n\tprint(\"removeditem\"..tostring(data.Item))\n\tprint(\"removeitem\"..tostring(data.number))\n\tif data.number>0 and data.Item then\n\t\tdata.Item:remove(data.number)\n\tend\nend\n\n\n\nlocal function ReturnLocalScriptVariable(data)\n\tprint(data.value)\n\tprint(data.Player)\n\tprint(data.GameObject)\n\tprint(data.Variable)\n\tif world.mwscript.getLocalScript(data.GameObject,data.Player) then\n\t\tif world.mwscript.getLocalScript(data.GameObject,data.Player).variables[data.Variable] then\n\t\t\tworld.mwscript.getLocalScript(data.GameObject,data.Player).variables[data.Variable]=data.value\n\t\tend\n\tend\nend\n\n\nlocal function ReturnGlobalVariable(data)\n\tworld.mwscript.getGlobalVariables(data.player)[data.variable]=data.value\n\tprint(data.variable)\n\tprint(data.value)\n\tif data.puzzle==true then\t\n\t\tPuzzle=false\n\tend\nend\n\n\nSpecialAmmo={}\nlocal function CreateSpecialAmmo(data)\n\tlocal RotZ=data.Player.rotation:getPitch()\n\tlocal RotX=data.Player.rotation:getYaw()\n\tSpecialAmmoVector=util.vector3(math.cos(RotZ) * math.sin(RotX), math.cos(RotZ) * math.cos(RotX),-math.sin(RotZ))*3\n\tAmmo=data.Ammo\n\tSpecial=world.createObject(data.Ammo)\n\tSpecial:addScript(\"scripts/SpecialAmmo.lua\")\n\tprint(Special)\n\tSpecial:teleport(data.Player.cell,util.vector3(0,0,110)+data.Player.position+util.vector3(math.cos(RotZ) * math.sin(RotX), math.cos(RotZ) * math.cos(RotX),-math.sin(RotZ))*50)\n\tSpecialAmmo[1]=true\nend\n\n\n\nlocal function Disable(data)\n\tprint(\"disable\")\n\tdata.Object.enabled=false\nend\t\n---------Essaie pour activer le script des armes dans l'inventaire\n--for i, player in ipairs(world.players) do\n--\tfor j, weapon in ipairs(types.Actor.inventory(player):getAll(types.weapons)) do\n--\t\tweapon:activateBy(player)\n--\t\t--weapon:addScript(\"scripts/Weapon.lua\") \n--\tend\n--end\n\nlocal function CreateSwitchzoneBorders(data)\n\tfor i, object in pairs(data.player.cell:getAll()) do\n\t\tif object.type==types.Activator then\n\t\t\tif string.find(types.Activator.record(object).name,\" border\") and string.find(types.Activator.record(object).name,\"SwitchZone\") then\n\t\t\t\tobject.enabled=false\n\t\t\t\tobject:remove()\n\t\t\tend\n\t\tend\n\tend\n\tlocal angle=0\n\tif data.point1.position.x<data.point2.position.x then\n\t\tif data.point1.position.y<data.point2.position.y then\n\t\t\tangle=math.acos((data.point2.position.x-data.point1.position.x)/((data.point1.position-data.point2.position):length()))\n\t\telse\n\t\t\tangle=-math.acos((data.point2.position.x-data.point1.position.x)/((data.point1.position-data.point2.position):length()))\n\t\tend\n\telse\n\t\tif data.point1.position.y<data.point2.position.y then\n\t\t\tangle=math.acos((data.point2.position.x-data.point1.position.x)/((data.point1.position-data.point2.position):length()))\n\t\telse\n\t\t\tangle=-math.acos((data.point2.position.x-data.point1.position.x)/((data.point1.position-data.point2.position):length()))\n\t\tend\n\tend\n\t\n\tfor d=1,(data.point1.position-data.point2.position):length() do \n\t\tif d%15==0 then\n\t\t\tworld.createObject(world.createRecord(types.Activator.createRecordDraft({name=data.switchzone..\" border\",model=('meshes/Point'..data.switchzone..'border.nif')})).id,1):teleport(data.player.cell.name,data.point1.position+util.vector3(math.cos(angle),math.sin(angle),0)*d)\n\t\tend\n\tend\t\n\n\n\tangle=0\n\tif data.point2.position.x<data.point3.position.x then\n\t\tif data.point2.position.y<data.point3.position.y then\n\t\t\tangle=math.acos((data.point3.position.x-data.point2.position.x)/((data.point2.position-data.point3.position):length()))\n\t\telse\n\t\t\tangle=-math.acos((data.point3.position.x-data.point2.position.x)/((data.point2.position-data.point3.position):length()))\n\t\tend\n\telse\n\t\tif data.point2.position.y<data.point3.position.y then\n\t\t\tangle=math.acos((data.point3.position.x-data.point2.position.x)/((data.point2.position-data.point3.position):length()))\n\t\telse\n\t\t\tangle=-math.acos((data.point3.position.x-data.point2.position.x)/((data.point2.position-data.point3.position):length()))\n\t\tend\n\tend\n\t\n\tfor d=1,(data.point2.position-data.point3.position):length() do \n\t\tif d%15==0 then\n\t\t\tworld.createObject(world.createRecord(types.Activator.createRecordDraft({name=data.switchzone..\" border\",model=('meshes/Point'..data.switchzone..'border.nif')})).id,1):teleport(data.player.cell.name,data.point2.position+util.vector3(math.cos(angle),math.sin(angle),0)*d)\n\t\tend\n\tend\n\n\n\tangle=0\n\tif data.point3.position.x<data.point4.position.x then\n\t\tif data.point3.position.y<data.point4.position.y then\n\t\t\tangle=math.acos((data.point4.position.x-data.point3.position.x)/((data.point3.position-data.point4.position):length()))\n\t\telse\n\t\t\tangle=-math.acos((data.point4.position.x-data.point3.position.x)/((data.point3.position-data.point4.position):length()))\n\t\tend\n\telse\n\t\tif data.point3.position.y<data.point4.position.y then\n\t\t\tangle=math.acos((data.point4.position.x-data.point3.position.x)/((data.point3.position-data.point4.position):length()))\n\t\telse\n\t\t\tangle=-math.acos((data.point4.position.x-data.point3.position.x)/((data.point3.position-data.point4.position):length()))\n\t\tend\n\tend\n\t\n\tfor d=1,(data.point3.position-data.point4.position):length() do \n\t\tif d%15==0 then\n\t\t\tworld.createObject(world.createRecord(types.Activator.createRecordDraft({name=data.switchzone..\" border\",model=('meshes/Point'..data.switchzone..'border.nif')})).id,1):teleport(data.player.cell.name,data.point3.position+util.vector3(math.cos(angle),math.sin(angle),0)*d)\n\t\tend\n\tend\n\n\n\tangle=0\n\tif data.point4.position.x<data.point1.position.x then\n\t\tif data.point4.position.y<data.point1.position.y then\n\t\t\tangle=math.acos((data.point1.position.x-data.point4.position.x)/((data.point4.position-data.point1.position):length()))\n\t\telse\n\t\t\tangle=-math.acos((data.point1.position.x-data.point4.position.x)/((data.point4.position-data.point1.position):length()))\n\t\tend\n\telse\n\t\tif data.point4.position.y<data.point1.position.y then\n\t\t\tangle=math.acos((data.point1.position.x-data.point4.position.x)/((data.point4.position-data.point1.position):length()))\n\t\telse\n\t\t\tangle=-math.acos((data.point1.position.x-data.point4.position.x)/((data.point4.position-data.point1.position):length()))\n\t\tend\n\tend\n\t\n\tfor d=1,(data.point4.position-data.point1.position):length() do \n\t\tif d%15==0 then\n\t\t\tworld.createObject(world.createRecord(types.Activator.createRecordDraft({name=data.switchzone..\" border\",model=('meshes/Point'..data.switchzone..'border.nif')})).id,1):teleport(data.player.cell.name,data.point4.position+util.vector3(math.cos(angle),math.sin(angle),0)*d)\n\t\tend\n\tend\t\n\nend\n\n\n\nSwitchZonePoints={}\nlocal function SHSwitchZones(data)\n\tif data.SH==0 then\n\t\tfor i, switchzone in pairs(ROOMS[data.Player.cell.name][data.cam].SwitchZone) do\n\t\t\tSwitchZonePoints[i]={}\n\t\t\tfor p, point in pairs(switchzone) do\n\t\t\t\tif (p==\"Point0\" or p==\"Point1\" or p==\"Point2\" or p==\"Point3\") then\n\t\t\t\t\tSwitchZonePoints[i][p]=\tworld.createObject(world.createRecord(types.Activator.createRecordDraft({name=i..p..\" to \"..switchzone.Camera,model=('meshes/Point'..i..p..'.nif')})).id,1)\n\t\t\t\t\t--print(i..p..\" :  \"..tostring(SwitchZonePoints[i][p]))\n\t\t\t\t\tSwitchZonePoints[i][p]:teleport(data.Player.cell.name,util.vector3(point.x,point.y,data.Player.position.z))\n\t\t\t\telse\n\t\t\t\t\tSwitchZonePoints[i][p]=point\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\telseif data.SH==1 then\n\t\tfor i, switchzone in pairs(SwitchZonePoints) do\n\t\t\tfor p, point in pairs(switchzone) do\n\t\t\t\tif point.type==types.Activator then\n\t\t\t\t\tpoint.enabled=false\n\t\t\t\t\tpoint:remove()\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tSwitchZonePoints={}\n\t\tfor i, object in pairs(data.Player.cell:getAll()) do\n\t\t\tif object.type==types.Activator then\n\t\t\t\tif string.find(types.Activator.record(object).name,\"SwitchZone\") and string.find(types.Activator.record(object).name,\" border\") then\n\t\t\t\t\tobject.enabled=false\n\t\t\t\t\tobject:remove()\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\telseif data.SH==3 then\n\t\tfor i, switchzone in pairs(SwitchZonePoints)do\n\t\t\tif switchzone.Point0.type==types.Activator then\n\t\t\t\tROOMS[data.Player.cell.name][data.cam].SwitchZone[i][\"Point0\"]=util.vector2(switchzone.Point0.position.x,switchzone.Point0.position.y)\n\t\t\t\tROOMS[data.Player.cell.name][data.cam].SwitchZone[i][\"Point1\"]=util.vector2(switchzone.Point1.position.x,switchzone.Point1.position.y)\n\t\t\t\tROOMS[data.Player.cell.name][data.cam].SwitchZone[i][\"Point2\"]=util.vector2(switchzone.Point2.position.x,switchzone.Point2.position.y)\n\t\t\t\tROOMS[data.Player.cell.name][data.cam].SwitchZone[i][\"Point3\"]=util.vector2(switchzone.Point3.position.x,switchzone.Point3.position.y)\n\t\t\t\tif data.TargetCam[i] then\n\t\t\t\t\tROOMS[data.Player.cell.name][data.cam].SwitchZone[i][\"Camera\"]=data.TargetCam[i]\n\t\t\t\t\tprint(i)\n\t\t\t\t\tprint(data.TargetCam[i])\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\telseif data.SH==4 then\n\n\t\tdata.Player:sendEvent('DefineSwitchZones',{SwitchZonePoints=SwitchZonePoints})\n\n\tend\n\tif data.SH~=4 then\n\t\tcore.sendGlobalEvent('SHSwitchZones',{Player=data.Player,SH=4, cam=data.cam})\n\tend\nend\n\n\nlocal function PlaceBgdMsk(activecell,activecam,player)\n\tfor i, switchzone in pairs(SwitchZonePoints) do\n\t\tfor p, point in pairs(switchzone) do\n\t\t\tif point.type==types.Activator and point:isValid() and point.count>0 then\n\t\t\t\tpoint.enabled=false\n\t\t\t\tprint(point:isValid())\n\t\t\t\tpoint:remove()\n\t\t\tend\n\t\tend\n\tend\n\tfor i, object in pairs(player.cell:getAll()) do\n\t\tif object.type==types.Activator then\n\t\t\tif string.find(types.Activator.record(object).name,\"SwitchZone\") and string.find(types.Activator.record(object).name,\" border\") and object:isValid() then\n\t\t\t\tobject.enabled=false\n\t\t\t\tobject:remove()\n\t\t\tend\n\t\tend\n\tend\n\t\n\t--print(ROOMS[activecell][activecam].name)\n\n\t-------------- Creation des Masks\n\t--print(ROOMS[activecell][activecam].MASK.mask1.scale)\n\tlocal RotMskZ=ROOMS[activecell][activecam].Pitch\n\tlocal RotMskX=ROOMS[activecell][activecam].Yaw\n\tlocal MskNum=1\n\n\tfor i=1,20 do\n\t\t--print(activecell)\n\t\t--print(ROOMS[activecell][activecam].name)\n\t\tif vfs.fileExists('meshes/Masks/'..activecell..ROOMS[activecell][activecam].name..\"MASK\"..i..'.nif') then\n\t\t\tif ROOMS[activecell][activecam].MASK[i]==nil then\n\t\t\t\ttable.insert(ROOMS[activecell][activecam].MASK,{[\"idname\"]=tostring(activecell..ROOMS[activecell][activecam].name..\"MASK\"..i),[\"depth\"]=1})\n\t\t\tend\n\t\telse\n\t\t\tbreak\n\t\tend\t\n\tend\n\n\n\tfor d, msk in pairs(ROOMS[activecell][activecam].MASK) do\n\t\tif MSK[d] then\n\t\t\tMSK[d].enabled=false\n\t\t\tMSK[d]:remove()\n\t\t\tMSK[d]=nil\n\t\tend\n\t\t--print(ROOMS[activecell][activecam].MASK[MskNum])\n\t\tif ROOMS[activecell][activecam].MASK[MskNum] and vfs.fileExists('meshes/Masks/'..ROOMS[activecell][activecam].MASK[MskNum].idname..'.nif') then --ROOMS[activecell][activecam].MASK[d].depth>0 then\n\t\t\tMSK[MskNum]=world.createObject(world.createRecord(types.Activator.createRecordDraft({name=ROOMS[activecell][activecam].MASK[MskNum].idname,model=('meshes/Masks/'..ROOMS[activecell][activecam].MASK[MskNum].idname..'.nif')})).id,1)\n\t\t\tprint(MSK['MSK'..d])\n\t\t\tprint(\"here\")\n\t\t\tMSK[MskNum]:teleport(activecell,ROOMS[activecell][activecam].Position +util.vector3(math.cos(RotMskZ) * math.sin(RotMskX), math.cos(RotMskZ) * math.cos(RotMskX),-math.sin(RotMskZ))* ROOMS[activecell][activecam].MASK[d].depth,\n\t\t\t\tMSK[MskNum].rotation*util.transform.rotateZ(ROOMS[activecell][activecam].Yaw)*util.transform.rotateX(ROOMS[activecell][activecam].Pitch))\n\t\t\tMSK[MskNum]:setScale(ROOMS[activecell][activecam].MASK[d].depth/5000)\n\t\t\tprint(MSK[MskNum])\n\t\t\tprint(MskNum)\n\t\t\tMskNum=MskNum+1\n\t\tend\n\tend\n\t\t\t\n\tif BGD and BGD:isValid() and BGD.count>0 then\n\t\tBGD:remove()\n\t\t--BGD.enabled=false\n\tend\n\tif ROOMS[activecell][activecam].bgd.idname~=\"\" then\n\t\tif vfs.fileExists('meshes/bgd/'..ROOMS[activecell][activecam].bgd.idname..'.nif') then\n\t\t\tif ROOMS[activecell][activecam].bgd[\"depth\"]==nil then\n\t\t\t\t--table.insert(ROOMS[activecell][activecam].bgd,\"depth\")\n\t\t\t\tROOMS[activecell][activecam].bgd.depth=5000\n\t\t\tend\n\t\t\tprint(\"BGD depth\"..tostring(ROOMS[activecell][activecam].bgd.depth))\n\t\t\tBGD=world.createObject(world.createRecord(types.Activator.createRecordDraft({name=ROOMS[activecell][activecam].bgd.idname,model=('meshes/bgd/'..ROOMS[activecell][activecam].bgd.idname..'.nif')})).id,1)\t\t\t\n\t\t\tBGD:teleport(activecell,ROOMS[activecell][activecam].Position +util.vector3(math.cos(RotMskZ) * math.sin(RotMskX), math.cos(RotMskZ) * math.cos(RotMskX),-math.sin(RotMskZ))*ROOMS[activecell][activecam].bgd.depth,\n\t\t\tBGD.rotation*util.transform.rotateZ(ROOMS[activecell][activecam].Yaw)*util.transform.rotateX(ROOMS[activecell][activecam].Pitch))\n\t\t\tBGD:setScale(ROOMS[activecell][activecam].bgd.depth/5000)\n\t\tend\n\tend\n\tCamRotation=util.vector2(ROOMS[activecell][activecam].Pitch,ROOMS[activecell][activecam].Yaw)\n\tplayer:sendEvent('CameraPos', {source=player.object, BGDepth=ROOMS[activecell][activecam].bgd.depth,CamPos=ROOMS[activecell][activecam].Position, CamAng=CamRotation, ActiveCam=activecam,ActiveBkg=BGD,MSKList=ROOMS[activecell][activecam].MASK})\n\t\t\t\t\n\nend\n\n\nlocal function changeCam(data)\n\tROOMS[data.player.cell.name][data.ActivCam].Position=data.CamPos\n\tROOMS[data.player.cell.name][data.ActivCam].Pitch=data.CamPitch\n\tROOMS[data.player.cell.name][data.ActivCam].Yaw=data.CamYaw\n\tROOMS[data.player.cell.name][data.ActivCam].bgd.depth=data.BGDepth\n\tROOMS[data.player.cell.name][data.ActivCam].bgd.Anglez=data.CamYaw\n\tROOMS[data.player.cell.name][data.ActivCam].bgd.Anglex=data.CamPitch\n\tROOMS[data.player.cell.name][data.ActivCam].MASK=data.MSKList\n\n\tPlaceBgdMsk(data.player.cell.name,data.ActivCam,data.player)\nend\n\n\n\n\nlocal function table_to_string(tbl)\n    local result = \"{\"\n    for k, v in pairs(tbl) do\n        -- Check the key type (ignore any numerical keys - assume its an array)\n        if type(k) == \"string\" then\n            result = result..\"[\\\"\"..k..\"\\\"]\"..\"=\"\n        end\n\n        -- Check the value type\n        if type(v) == \"table\" then\n            result = result..table_to_string(v)\n        elseif type(v) == \"boolean\" then\n            result = result..tostring(v)\n        elseif type(v) == \"number\" then\n            result = result..tostring(v)\n\t\telseif type(v) == \"userdata\" then\n\t\t\tif string.find(tostring(v),\",\",string.find(tostring(v),\",\")+1) then\n\t\t\t\tresult=result..\"util.vector3\"..tostring(v)\n\t\t\telse\n\t\t\t\tresult=result..\"util.vector2\"..tostring(v)\n\t\t\tend\n        else\n            result = result..\"\\\"\"..v..\"\\\"\"\n        end\n        result = result..\",\"\n    end\n    -- Remove leading commas from the result\n    if result ~= \"\" then\n        result = result:sub(1, result:len()-1)\n    end\n    return result..\"}\"\nend\n\n\nlocal function saveRDT(data)\n\tprint(tostring(activecell)..\"=\"..table_to_string(ROOMS[data.Cell]))\n    --print(string.gsub(string.gsub(deepToString(ROOMS[data.Cell],7), \"\\n\",\"\"),\"\\t\",\"\"))\nend\n\nlocal SaveNum=0\n\nlocal function onSave()\n\tfor d, msk in pairs(ROOMS[activecell][activecam].MASK) do\n\t\tif MSK[d] then\n\t\t\tMSK[d].enabled=false\n\t\t\tMSK[d]:remove()\n\t\t\tMSK[d]=nil\n\t\tend\n\tend\n\t\t\t\n\tif BGD and BGD:isValid() and BGD.count>0 then\n\t\tBGD:remove()\n\t\t--BGD.enabled=false\n\tend\n\n\treturn{activecam=activecam,Savenum=SaveNum}\nend\n\nlocal function onLoad(data)\n\tactivecam=data.activecam\n\tSaveNum=data.Savenum\nend\n\nlocal function ReceiveSaves(data)\n\tprint(\"Saves received by Global\")\n\tif Saves[1]==nil then\n\t\tSaves=data.saves\n\tend\nend\n\nlocal function ReceiveSaveNum(data)\n\tSaveNum=data.savenum\nend\n\nlocal function AskObjectsInWorld(data)\n\tlocal OIM={}\n\tlocal OIW={}\n\tlocal Mapped={}\n\tlocal objects={}\n\tfor i, cell in ipairs(world.cells) do\n\t\t--table.insert(OIW,cell)\n\t\t--print(OIW.cell)\n\t\tobjects={}\n\t\tfor i, object in ipairs(cell:getAll()) do\n\t\t\tif object.type==types.Weapon or object.type==types.Potion or object.type==types.Miscellaneous then\n\t\t\t\t--print(object.recordId)\n\t\t\t\ttable.insert(objects,object.recordId)\n\t\t\tend\n\t\tend\n\t\tOIW[cell.name]=objects\n\t\t--print(OIW[cell])\n\tend\n\t\n\tfor i, variable in pairs(world.mwscript.getGlobalVariables(data.player)) do \n\t\tif string.find(i,\"objectmap\")~=nil and variable==1 then\n\t\t\tOIM[i]=variable\n\t\telseif string.find(i,\"map:\")~=nil and variable==1 then\n\t\t\tfor j, area in pairs(data.maps) do\n\t\t\t\tif string.gsub(string.match(i,\".*-\",string.find(i,\":\")+1),\"-\",\"\")==area[1] then\n\t\t\t\t\tif Mapped[j]==nil then\n\t\t\t\t\t\tMapped[j]={}\n\t\t\t\t\tend\n\t\t\t\t\tMapped[j][1]=area[1]\n\t\t\t\t\tif Mapped[j][2]==nil then\n\t\t\t\t\t\tMapped[j][2]={}\n\t\t\t\t\tend\n\t\t\t\t\tfor k, zone in pairs(area[2]) do\n\t\t\t\t\t\tif zone[1]==string.match(i,\".*\",string.find(i,\"-\")+1) then\n\t\t\t\t\t\t\tMapped[j][2][k]=zone\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\n\t\t\tend\t\n\t\tend\n\tend\n--\tprint(\"Table\")\n--\tfor j, area in pairs(Mapped) do\n--\t\tprint(area[1]..\"  \"..j)\n--\t\tfor k, zone in pairs(area[2]) do\n--\t\t\tprint(zone[1]..\"  \"..k)\n--\t\t\tfor l, room in pairs(zone[2]) do\n--\t\t\t\tprint(room..\"  \"..l)\n--\t\t\tend\n--\t\tend\n--\tend\n\n\tdata.player:sendEvent('ReturnObjectsInWorld',{Objects=OIW,ObjectsInMap=OIM,Mapped=Mapped})\nend\n\n\nreturn {\n\teventHandlers = {CreateSwitchzoneBorders=CreateSwitchzoneBorders,SHSwitchZones=SHSwitchZones,AskObjectsInWorld=AskObjectsInWorld,ReceiveSaveNum=ReceiveSaveNum,ReceiveSaves=ReceiveSaves,BlinkingMask=BlinkingMask,saveRDT=saveRDT,ReturnGlobalVariable=ReturnGlobalVariable,Disable=Disable,CreateSpecialAmmo=CreateSpecialAmmo,ReturnLocalScriptVariable=ReturnLocalScriptVariable,PushContainer = pushContainer, Teleport=Teleport,MoveInto=MoveInto, setCharge=setCharge; RemoveItem=RemoveItem, createAmmosinInventory=createAmmosinInventory,SetScale=SetScale,changeCam=changeCam },\n    engineHandlers = {\n\t\tonSave=onSave,\n\t\tonLoad=onLoad,\n        onUpdate = function()\n\n        \tif SpecialAmmo[1] then\n\t\t\t\tif SpecialAmmo[2] then\n\t\t\t\t\tprint(Special.cell)\n\t\t\t\t\tSpecial:sendEvent('start',{Vector=SpecialAmmoVector,Ammo=Ammo})\n\t\t\t\t\tprint(Special)\n\t\t\t\t\tSpecialAmmo={}\n\t\t\t\telse \n\t\t\t\t\tSpecialAmmo[2]=true\n\t\t\t\t\tprint(\"activateSpecial2\")\n\t\t\t\tend\n\t\t\tend\n\n\t\t\t---actors drop objects on death\n\t\t\tfor i, actor in ipairs(world.activeActors) do\n\t\t\t\tif actor.type==types.Creature or actor.type==types.Creature then\n\t\t\t\t\tif types.Actor.isDead(actor)==true then\n\t\t\t\t\t\tif types.Actor.inventory(actor)~=nil then\n\t\t\t\t\t\t\tfor j,object in ipairs(types.Actor.inventory(actor):getAll()) do\n\t\t\t\t\t\t\t\t--print(object)\n\t\t\t\t\t\t\t\tobject:teleport(actor.cell.name,actor.position)\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n        \t\n\n\n        \t\n            for i, player in ipairs(players) do\n\n        \t\tPointP=util.vector2(player.position.x,player.position.y)\n        \t\tactivecell=player.cell.name\n\t\t\t\t--print(activecell)\n\n\t\t\t\tfor i , container in pairs(player.cell:getAll(types.Container)) do \n\t\t\t\t\tif string.find(types.Container.record(container).mwscript,\"climbable\")~=nil then\n\t\t\t\t\t\tinterfaces.Activation.addHandlerForObject(container,function(container,actor) return false end)\n\t\t\t\t\tend\n\t\t\t\tend\n\n\n\n\n\t\t\t\t----------savingMenu\n\t\t\t\tif world.mwscript.getGlobalVariables(player)[\"SavingMenu\"]==1 then\n\t\t\t\t\ttypes.Player.sendMenuEvent(player, 'AskSaves', {value=nil,})\n\t\t\t\t\t--for i, save in pairs(Saves) do print(i) end\n\t\t\t\t\tif Saves[1] then\n\t\t\t\t\t\tSaves[11]=SaveNum\n\t\t\t\t\t\tprint(Saves[11])\n\t\t\t\t\t\tplayer:sendEvent('SavingMenu', {Value=Saves,})\n\t\t\t\t\t\t--world.mwscript.getGlobalVariables(player)['SavingMenu']=0\n\t\t\t\t\t\tSaves={}\n\t\t\t\t\tend\n\t\t\t\t\t--print(\"saving menu\")\n\t\t\t\tend\n\n\n\n\n\n\t\t\t\t\n\n\t\t\t\t---------------Puzzles\n\n\t\t\t\t--[[for i, gameobject in ipairs(player.cell:getAll()) do \n\t\t\t\t\tif world.mwscript.getLocalScript(gameobject,player) and world.mwscript.getLocalScript(gameobject,player).variables[\"choiceyesno\"] == -1 then ----choix Yes/No\n\t\t\t\t\t\tplayer:sendEvent('ChoiceYesNo', {Value=-1,GameObject=gameobject})\n\t\t\t\t\tend \n\t\t\t\t\tif world.mwscript.getLocalScript(gameobject,player) and world.mwscript.getLocalScript(gameobject,player).variables[\"choice1-5\"] == -1 then ----choix 1-5\n\t\t\t\t\t\tplayer:sendEvent('Choice15', {Value=-1,GameObject=gameobject})\n\t\t\t\t\tend \n\t\t\t\tend]]--\n\t\t\t\t\n\t\t\t\tSelectionChoice={}\n\t\t\t\tfor variable,value in pairs(world.mwscript.getGlobalVariables(player))  do\n\t\t\t\t\tif value==world.mwscript.getGlobalVariables(player)[\"SelectionChoiceValue\"] and variable~=\"selectionchoicevalue\" then\t\t\t\t\t\n\t\t\t\t\t\ttable.insert(SelectionChoice,variable)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tif SelectionChoice[2] then\n\t\t\t\t\tplayer:sendEvent(\"ChoicesSelection\", {selection=SelectionChoice})\n\t\t\t\tend\n\n\n\n\n\t\t\t\tif world.mwscript.getGlobalVariables(player)[\"ElectricalPanelPuzzle\"]==1 then\n\t\t\t\t\tplayer:sendEvent(\"ElectricalPanelPuzzle\", {})\n\t\t\t\t\t--Puzzle=true\n\t\t\t\tend\n\n\n\n\n\n\n\t\t\t\t----------Cutscene\n\t\t\t\tif Cutscene[2]==true then\n\t\t\t\t\tplayer:setScale(0.01)\n\t\t\t\tend\n\n\n\t\t\t\tif world.mwscript.getGlobalVariables(player)[\"Cutscene\"] ==1 and Cutscene[1]==false then\n\t\t\t\t\tCutscene[1]=true\n\t\t\t\t\ttypes.Actor.activeEffects(player):set(100,\"paralyze\")\n\t\t\t\t\ttypes.Actor.activeEffects(player):set(100,\"levitate\")\n\t\t\t\t\tPlayerActor=world.createObject(\"PlayerActor\")\n\t\t\t\t\tprint(player.position)\n\t\t\t\t\tPlayerActor:teleport(player.cell,player.position+util.vector3(0,0,0),player.rotation)\n\t\t\t\t\tplayer:teleport(player.cell,player.position+util.vector3(0,0,-200))\n\t\t\t\t\tCutscene[2]=true\n\t\t\t\tend\n\n\n\t\t\t\tif world.mwscript.getGlobalVariables(player)[\"Cutscene\"]==0 and Cutscene[1]==true then\n\t\t\t\t\tCutscene[2]=false\n\t\t\t\t\tCutscene[1]=false\n\t\t\t\t\tplayer:teleport(PlayerActor.cell,PlayerActor.position,PlayerActor.rotation)\n\t\t\t\t\ttypes.Actor.activeEffects(player):set(0,\"paralyze\")\n\t\t\t\t\ttypes.Actor.activeEffects(player):set(0,\"levitate\")\n\t\t\t\t\tplayer:setScale(1)\n\t\t\t\t\tPlayerActor.enabled=false\n\t\t\t\t\tLiveSelection=false\n\t\t\t\tend\n\n\n\n\t\t\t\t------------------LiveSelection Text\n\t\t\t\tif Cutscene[1]==true and LiveSelection==false then\n\t\t\t\t\tlocal Choice1=nil\n\t\t\t\t\tlocal Choice2=nil\n\n\t\t\t\t\tfor i, GlobalVariable in pairs(world.mwscript.getGlobalVariables(player)) do \n\t\t\t\t\t\tif GlobalVariable==world.mwscript.getGlobalVariables(player)[\"LiveSelectionChoice1\"] and i~=\"liveselectionchoice1\" then\n\t\t\t\t\t\t\tChoice1=i\n\t\t\t\t\t\tend\n\t\t\t\t\t\tif GlobalVariable==world.mwscript.getGlobalVariables(player)[\"LiveSelectionChoice2\"] and i~=\"liveselectionchoice2\" then\n\t\t\t\t\t\t\tChoice2=i\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\tif Choice1 and Choice2 then\n\t\t\t\t\t\tLiveSelection=true\n\t\t\t\t\t\tplayer:sendEvent(\"LiveSelection\", { Choice1 = Choice1, Choice2 = Choice2})\n\t\t\t\t\t\tworld.mwscript.getGlobalVariables(player)[\"respond\"]=0\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t----------------\n\t\t\t\t\n\n\n\n\n\n\t\t\t\t---------transform ammunitions to ammunitions_\n\t\t\t\tfor a, cell in pairs(world.cells) do\n\t\t\t\t\tif cell==player.cell then\n\t\t\t\t\t\tfor b, ammo in pairs(cell:getAll(types.Weapon)) do\n\t\t\t\t\t\t\tfor c, weapon in pairs(types.Weapon.records) do\n\t\t\t\t\t\t\t\tif (ammo.recordId..\"_\")==weapon.id then\n\t\t\t\t\t\t\t\t\tworld.createObject(weapon.id,ammo.count):teleport(activecell,ammo.position)\n\t\t\t\t\t\t\t\t\tammo:remove()\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t------------transform ammunitions_ to ammunitions in inventory\n\t\t\t\tfor i,ammo in pairs(types.Actor.inventory(player):getAll(types.Weapon)) do\n\t\t\t\t\tfor c, weapon in pairs(types.Weapon.records) do\n\t\t\t\t\t\tif ammo.recordId==(weapon.id..\"_\") then\n\t\t\t\t\t\t\tworld.createObject(weapon.id,types.Actor.inventory(player):countOf(ammo.recordId)):moveInto(types.Actor.inventory(player))\n\t\t\t\t\t\t\tammo:remove()\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\t----------------------------\n\n\t\t\t\tif world.mwscript.getGlobalVariables(player)[\"camera\"] >-1 then\n\t\t\t\t\tactivecam=\"Cam\"..world.mwscript.getGlobalVariables(player)[\"camera\"]\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif ROOMS[activecell][activecam].SwitchZone then\n\t\t\t\t\tfor f,zone in pairs(ROOMS[activecell][activecam].SwitchZone) do\n\t\t\t\t\t\t\tL01=(zone.Point0-zone.Point1):length()\n\t\t\t\t\t\t\tL12=(zone.Point1-zone.Point2):length()\n\t\t\t\t\t\t\tL23=(zone.Point2-zone.Point3):length()\n\t\t\t\t\t\t\tL30=(zone.Point3-zone.Point0):length()\n\t\t\t\t\t\t\tL0P=(zone.Point0-PointP):length()\n\t\t\t\t\t\t\tL1P=(zone.Point1-PointP):length()\n\t\t\t\t\t\t\tL2P=(zone.Point2-PointP):length()\n\t\t\t\t\t\t\tL3P=(zone.Point3-PointP):length()\n\t\t\t\t\t\t\tif (math.acos(((L01*L01-L1P*L1P-L0P*L0P)/(-2*L1P*L0P)))+math.acos(((L12*L12-L2P*L2P-L1P*L1P)/(-2*L2P*L1P)))+math.acos(((L23*L23-L3P*L3P-L2P*L2P)/(-2*L3P*L2P)))+math.acos(((L30*L30-L0P*L0P-L3P*L3P)/(-2*L0P*L3P)))>=6.27) and (math.acos(((L01*L01-L1P*L1P-L0P*L0P)/(-2*L1P*L0P)))+math.acos(((L12*L12-L2P*L2P-L1P*L1P)/(-2*L2P*L1P)))+math.acos(((L23*L23-L3P*L3P-L2P*L2P)/(-2*L3P*L2P)))+math.acos(((L30*L30-L0P*L0P-L3P*L3P)/(-2*L0P*L3P)))<=(2*math.pi))  then\n\t\t\t\t\t\t\t\tactivecam=zone.Camera\n\t\t\t\t\t\t\t\tprint(\"SWITCHZONE\")\n\t\t\t\t\t\t\t\tprint(zone.Camera)\n\t\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\n\n\n\t\t\t\t--print(activecam)\n\t\t\t\t--print(activecell)\n\n\t\t\t\t--if BGD then print(BGD:isValid()) end\n\t\t\t\t--if BGD then print(BGD.enabled) end\n\t\t\t\tif activecam~=lastcam or lastcam==nil or activecell~=lastcell or ((BGD==nil or BGD.enabled==false) and ROOMS[player.cell.name][activecam].bgd.idname~=\"\") then\n\t\t\t\t\tPlaceBgdMsk(activecell,activecam,player)\n\t\t\t\t\tprint(\"here?\")\n\t\t\t\tend\n\n\t\t\t\tlastcam=activecam\n\t\t\t\tlastcell=activecell\n\t\t\tend\t\t\n\t\tend\n\t}\n}\n",
    "Base Game V.0.11-54619--0-11-1716405109\\Resident Evil\\data\\scripts\\Menu.lua": "local menu=require('openmw.menu')\nlocal core = require('openmw.core')\nlocal Saves={}\nlocal SaveChecked=0\n\n\n\n\nlocal function AskSaves(data)\n\t\tfor j, saves in pairs(menu.getAllSaves()) do\n\t\t\tfor k, save in pairs(saves) do\n\t\t\t\tSaveChecked=SaveChecked+1\n\t\t\t\tif SaveChecked==11 then\n\t\t\t\t\tcore.sendGlobalEvent('ReceiveSaves',{saves=Saves})\n\t\t\t\t\tSaveChecked=0\n\t\t\t\t\t--break\n\t\t\t\telse\n\t\t\t\t\tSaves[SaveChecked]={}\n\t\t\t\t\tSaves[SaveChecked][\"directory\"]=j\n\t\t\t\t\tSaves[SaveChecked][\"slotName\"]=k\n\t\t\t\t\tSaves[SaveChecked][\"description\"]=save.description\n\t\t\t\t\tprint(Saves[SaveChecked][\"description\"])\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif SaveChecked<10 then\n\t\t\tfor i=(SaveChecked+1),10 do\n\t\t\t\tSaves[i]={}\n\t\t\t\tSaves[i][\"description\"]=\"No Data\"\n\t\t\t\tprint(Saves[i][\"description\"])\n\t\t\t\tif i==10 then\n\t\t\t\t\tprint(Saves[11])\n\t\t\t\t\tcore.sendGlobalEvent('ReceiveSaves',{saves=Saves})\n\t\t\t\t\tSaveChecked=0\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\nend\n\nlocal function Save(data)\n\tmenu.saveGame(data.value,data.value)\nend\n\nlocal function Load()\n\nend\n\nlocal function deleteSave(data)\n\tmenu.deleteGame(data.directory, data.slotName)\nend\n\n\nreturn {\n\teventHandlers = {AskSaves=AskSaves, Save=Save, Load=Load, deleteSave=deleteSave},\n\n}\n\n\n",
    "Base Game V.0.11-54619--0-11-1716405109\\Resident Evil\\data\\scripts\\NPCs.lua": "local self=require('openmw.self')\nlocal types = require('openmw.types')\nlocal nearby=require('openmw.nearby')\nlocal util = require('openmw.util')\nlocal core = require('openmw.core')\nlocal AI = require('openmw.interfaces').AI\n\nreturn {\n\tengineHandlers = {\n        onUpdate = function()\n        \t\n\t\tif types.Actor.getStance(self)==1 then\n\t\t\tself.controls.movement=0\n\t\tend\n\t\t\n\t\ttypes.Actor.stats.attributes.speed(self).modifier=types.Actor.stats.attributes.speed(self).base*types.Actor.getEncumbrance(self)/types.NPC.getCapacity(self)\n\n\t\tif self.type~=types.Player then\n\t\t\tfor i, actor in pairs(nearby.actors) do\n\t\t\t\tif actor.id~=self.id and actor.type==types.Creature and types.Actor.isDead(actor)==false then\n\t\t\t\t\tif AI.getActivePackage().target then\n\t\t\t\t\t\tif ((actor.position-self.position):length()<(AI.getActivePackage().target.position-self.position):length() or types.Actor.isDead(actor)==false) and actor~=AI.getActivePackage().target  then\n\t\t\t\t\t\t\tAI.startPackage({type='Combat',target=actor})\n\t\t\t\t\t\telseif types.Actor.isDead(AI.getActivePackage().target) and  (actor.position-self.position):length()<2000 then\n\t\t\t\t\t\t\tAI.startPackage({type='Combat',target=actor})\n\t\t\t\t\t\tend\n\t\t\t\t\telseif (actor.position-self.position):length()<3000 then\n\t\t\t\t\t\tAI.startPackage({type='Combat',target=actor})\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\n\tend\n\t}\n}\n\n\n",
    "Base Game V.0.11-54619--0-11-1716405109\\Resident Evil\\data\\scripts\\puzzles.lua": "\nlocal types = require('openmw.types')\nlocal ambient = require('openmw.ambient')\nlocal core = require('openmw.core')\n\nlocal func_table={}\n\nlocal ToggleUseButton = false\nlocal MenuSelectStop = true\nlocal ElecPanPuzzle={}\nlocal SavingSelection=1\nlocal SavingDescription=\"\"\nlocal Saving=false\nlocal SavingLetter=4\nlocal Timer=0\n\n\n\n\n\n\n\n\nfunc_table.RunningPuzzles=function(self,input,util,core,I,MoveForward,MoveBackward,TurnLeft,TurnRight,Colors,\n\tMenuYesNo,Menu15,ElectricalPanelPuzzleUI,MenuSelection)\n\n\n\tif ElectricalPanelPuzzleUI and ElectricalPanelPuzzleUI.layout then\n\t\tif ElecPanPuzzle[1]==nil then\n\t\t\tElecPanPuzzle[1]=1\n\t\tend\n\t\tif MoveForward(-0.2) == true then\n\t\t\tif ElecPanPuzzle[4] then\n\t\t\t\tElecPanPuzzle[4]=1\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[1].props.relativePosition=util.vector2(25/36, 12/28)\n\t\t\telseif ElecPanPuzzle[3] then\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[1].props.relativePosition=util.vector2(16/32, 12/28)\n\t\t\t\tElecPanPuzzle[3]=1\n\t\t\telseif ElecPanPuzzle[2] then\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[1].props.relativePosition=util.vector2(11/31, 12/28)\n\t\t\t\tElecPanPuzzle[2]=1\n\t\t\telseif ElecPanPuzzle[1] then\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[1].props.relativePosition=util.vector2(6/30, 12/28)\n\t\t\t\tElecPanPuzzle[1]=1\n\t\t\tend\n\t\t\tElectricalPanelPuzzleUI:update()\n\t\telseif MoveBackward(0.2) == true then\n\t\t\tif ElecPanPuzzle[4] then\n\t\t\t\tElecPanPuzzle[4]=-1\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[1].props.relativePosition=util.vector2(25/36, 15/31)\n\t\t\telseif ElecPanPuzzle[3] then\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[1].props.relativePosition=util.vector2(16/32, 15/31)\n\t\t\t\tElecPanPuzzle[3]=-1\n\t\t\telseif ElecPanPuzzle[2] then\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[1].props.relativePosition=util.vector2(11/31, 17/35)\n\t\t\t\tElecPanPuzzle[2]=-1\n\t\t\telseif ElecPanPuzzle[1] then\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[1].props.relativePosition=util.vector2(6/30, 17/35)\n\t\t\t\tElecPanPuzzle[1]=-1\n\t\t\tend\n\t\t\tElectricalPanelPuzzleUI:update()\n\t\tend\n\t\t\n\t\tif input.isActionPressed(input.ACTION.Use) == true and ToggleUseButton == true then\n\t\t\tToggleUseButton =false\n\t\t\t\n\t\t\tif ElecPanPuzzle[5] then\n\t\t\t\tcore.sendGlobalEvent(\"ReturnGlobalVariable\",\n\t\t\t\t\t{ value = tonumber(ElectricalPanelPuzzleUI.layout.content[6].props.text), player = self, variable = \"ElectricalPanelPuzzle\" })\n\t\t\t\tElectricalPanelPuzzleUI:destroy()\n\t\t\t\tElecPanPuzzle={}\n\t\t\t\tI.UI.removeMode(I.UI.MODE.Interface)\n\t\t\tend\n\n\t\t\tif ElecPanPuzzle[4] then\n\t\t\t\tElecPanPuzzle[5]=1\n\t\t\t\tambient.playSound(\"Button1\")\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[10].props.relativePosition=ElectricalPanelPuzzleUI.layout.content[1].props.relativePosition\n\t\t\t\tif ElecPanPuzzle[4]==1 then\n\t\t\t\t\tElectricalPanelPuzzleUI.layout.content[10].props.color=Colors.Red\n\t\t\t\telse\n\t\t\t\t\tElectricalPanelPuzzleUI.layout.content[10].props.color=Colors.Blue\n\t\t\t\tend\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[1].props.visible=false\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[6].props.text=tostring(ElectricalPanelPuzzleUI.layout.content[5].props.text+(ElecPanPuzzle[4]*15*4))\n\t\t\telseif ElecPanPuzzle[3] then\n\t\t\t\tElecPanPuzzle[4]=1\n\t\t\t\tambient.playSound(\"Button1\")\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[9].props.relativePosition=ElectricalPanelPuzzleUI.layout.content[1].props.relativePosition\n\t\t\t\tif ElecPanPuzzle[3]==1 then\n\t\t\t\t\tElectricalPanelPuzzleUI.layout.content[9].props.color=Colors.Red\n\t\t\t\telse\n\t\t\t\t\tElectricalPanelPuzzleUI.layout.content[9].props.color=Colors.Blue\n\t\t\t\tend\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[1].props.relativePosition=util.vector2(25/36, 12/28)\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[5].props.text=tostring(ElectricalPanelPuzzleUI.layout.content[4].props.text+(ElecPanPuzzle[3]*5*3))\n\t\t\telseif ElecPanPuzzle[2] then\n\t\t\t\tElecPanPuzzle[3]=1\n\t\t\t\tambient.playSound(\"Button1\")\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[8].props.relativePosition=ElectricalPanelPuzzleUI.layout.content[1].props.relativePosition\n\t\t\t\tif ElecPanPuzzle[2]==1 then\n\t\t\t\t\tElectricalPanelPuzzleUI.layout.content[8].props.color=Colors.Red\n\t\t\t\telse\n\t\t\t\t\tElectricalPanelPuzzleUI.layout.content[8].props.color=Colors.Blue\n\t\t\t\tend\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[1].props.relativePosition=util.vector2(16/32, 12/28)\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[4].props.text=tostring(ElectricalPanelPuzzleUI.layout.content[3].props.text+(ElecPanPuzzle[2]*15*2))\n\t\t\telseif ElecPanPuzzle[1] then\n\t\t\t\tElecPanPuzzle[2]=1\n\t\t\t\tambient.playSound(\"Button1\")\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[7].props.relativePosition=ElectricalPanelPuzzleUI.layout.content[1].props.relativePosition\n\t\t\t\tif ElecPanPuzzle[1]==1 then\n\t\t\t\t\tElectricalPanelPuzzleUI.layout.content[7].props.color=Colors.Red\n\t\t\t\telse\n\t\t\t\t\tElectricalPanelPuzzleUI.layout.content[7].props.color=Colors.Blue\n\t\t\t\tend\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[1].props.relativePosition=util.vector2(11/31, 12/28)\n\t\t\t\tElectricalPanelPuzzleUI.layout.content[3].props.text=tostring(ElectricalPanelPuzzleUI.layout.content[2].props.text+(ElecPanPuzzle[1]*5))\n\t\t\tend\n\t\t\tElectricalPanelPuzzleUI:update()\n\t\tend\n\n\tend\n\n\n\n\tif MenuYesNo and MenuYesNo.layout then\n\t\tif TurnRight(0.2) == true and MenuSelectStop == false  then\n\t\t\tMenuSelectStop = true\n\t\t\tMenuYesNoLayout.content[1].props.visible = false\n\t\t\tMenuYesNoLayout.content[3].props.visible = true\n\t\t\tMenuYesNo:update()\n\t\t\tambient.playSound(\"Cursor\")\n\t\telseif TurnLeft(-0.2) == true and MenuSelectStop == false  then\n\t\t\tMenuSelectStop = true\n\t\t\tMenuYesNoLayout.content[1].props.visible = true\n\t\t\tMenuYesNoLayout.content[3].props.visible = false\n\t\t\tMenuYesNo:update()\n\t\t\tambient.playSound(\"Cursor\")\n\t\tend\n\t\tif input.isActionPressed(input.ACTION.Use) == true and ToggleUseButton == true then\n\t\t\tToggleUseButton=false\n\t\t\tif MenuYesNoLayout.content[1].props.visible == true then\n\t\t\t\tcore.sendGlobalEvent(\"ReturnLocalScriptVariable\",\n\t\t\t\t\t{ value = 1, Player = self, GameObject = MWscriptGameObject, Variable = \"choiceYesNo\" })\n\t\t\t\t\tambient.playSound(\"REdecide\")\n\t\t\telse\n\t\t\t\tcore.sendGlobalEvent(\"ReturnLocalScriptVariable\",\n\t\t\t\t\t{ value = 2, Player = self, GameObject = MWscriptGameObject, Variable = \"choiceYesNo\" })\n\t\t\t\t\tambient.playSound(\"RECancel\")\n\t\t\tend\n\t\t\tI.UI.removeMode(I.UI.MODE.Interface)\n\t\t\tMenuYesNo:destroy()\n\t\t\tMWscriptGameObject = nil\n\t\tend\n\tend\n\n\n\tif MenuSelection and MenuSelection.layout then\n\t\tif TurnRight(0.2) == true and MenuSelectStop == false then\n\t\t\tMenuSelectStop = true\n\t\t\tfor i, content in ipairs(MenuSelection.layout.content) do\n\t\t\t\tif type(i)==\"number\" then\n\t\t\t\t\tif i % 2 == 1 and MenuSelection.layout.content[i + 2] and content.props.visible == true then\n\t\t\t\t\t\tcontent.props.visible = false\n\t\t\t\t\t\tMenuSelection.layout.content[i + 2].props.visible = true\n\t\t\t\t\t\tMenuSelection:update()\n\t\t\t\t\t\tambient.playSound(\"Cursor\")\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\telseif TurnLeft(-0.2) == true and MenuSelectStop == false then\n\t\t\tMenuSelectStop = true\n\t\t\tfor i, content in ipairs(MenuSelection.layout.content) do\n\t\t\t\tif type(i)==\"number\" then\n\t\t\t\t\tif i % 2 == 1 and i >= 3 and content.props.visible == true then\n\t\t\t\t\t\tcontent.props.visible = false\n\t\t\t\t\t\tMenuSelection.layout.content[i - 2].props.visible = true\n\t\t\t\t\t\tMenuSelection:update()\n\t\t\t\t\t\tambient.playSound(\"Cursor\")\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif input.isActionPressed(input.ACTION.Use) == true and ToggleUseButton == true then\n\t\t\tToggleUseButton=false\n\t\t\tfor i, content in ipairs(MenuSelection.layout.content) do\n\t\t\t\tif i % 2 == 1 and content.props.visible == true then\n\t\t\t\t\tprint(i)\n\t\t\t\t\tprint(MenuSelection.layout.content[i+1].props.text)\n\t\t\t\t\tcore.sendGlobalEvent(\"ReturnGlobalVariable\",{value =1,Player = self,variable =MenuSelection.layout.content[i+1].props.text})\n\t\t\t\t\tambient.playSound(\"REdecide\")\n\t\t\t\tend\n\t\t\tend\n\t\t\tI.UI.removeMode(I.UI.MODE.Interface)\n\t\t\tMenuSelection:destroy()\n\t\t\tMenuSelection=nil\n\t\tend\n\tend\n\n\n\n\n\tif Menu15 and Menu15.layout then\n\t\tif TurnRight(0.2) == true and MenuSelectStop == false then\n\t\t\tMenuSelectStop = true\n\t\t\tfor i, content in ipairs(Menu15Layout.content) do\n\t\t\t\tif i % 2 == 1 and Menu15Layout.content[i + 2] and content.props.visible == true then\n\t\t\t\t\tcontent.props.visible = false\n\t\t\t\t\tMenu15Layout.content[i + 2].props.visible = true\n\t\t\t\t\tMenu15:update()\n\t\t\t\t\tambient.playSound(\"Cursor\")\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\telseif TurnLeft(-0.2) == true and MenuSelectStop == false then\n\t\t\tMenuSelectStop = true\n\t\t\tfor i, content in ipairs(Menu15Layout.content) do\n\t\t\t\tif i % 2 == 1 and i >= 3 and content.props.visible == true then\n\t\t\t\t\tcontent.props.visible = false\n\t\t\t\t\tMenu15Layout.content[i - 2].props.visible = true\n\t\t\t\t\tMenu15:update()\n\t\t\t\t\tambient.playSound(\"Cursor\")\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif input.isActionPressed(input.ACTION.Use) == true and ToggleUseButton == true then\n\t\t\tToggleUseButton=false\n\t\t\tfor i, content in ipairs(Menu15Layout.content) do\n\t\t\t\tif i % 2 == 1 and content.props.visible == true then\n\t\t\t\t\tprint((math.ceil(i / 2)))\n\t\t\t\t\tprint(self)\n\t\t\t\t\tprint(MWscriptGameObject)\n\t\t\t\t\tcore.sendGlobalEvent(\"ReturnLocalScriptVariable\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvalue = (math.ceil(i / 2)),\n\t\t\t\t\t\t\tPlayer = self,\n\t\t\t\t\t\t\tGameObject = MWscriptGameObject,\n\t\t\t\t\t\t\tVariable =\n\t\t\t\t\t\t\t\"Choice1-5\"\n\t\t\t\t\t\t})\n\t\t\t\t\tambient.playSound(\"REdecide\")\n\t\t\t\tend\n\t\t\tend\n\t\t\tI.UI.removeMode(I.UI.MODE.Interface)\n\t\t\tMenu15:destroy()\n\t\t\tMWscriptGameObject = nil\n\t\tend\n\tend\n\t--print(\"MenuSelectStop \"..tostring(MenuSelectStop))\n\t--print(\"ToggleUseButton \"..tostring(ToggleUseButton))\n\t--print(input.isActionPressed(input.ACTION.Use))\n\tif I.UI.getMode() then\n\t\tif MoveBackward(0.2) == nil and MoveForward(-0.2) == nil and TurnLeft(-0.2) == nil and TurnRight(0.2) == nil and MenuSelectStop == true then\n\t\t\tMenuSelectStop = false\n\t\tend\n\t\tif ToggleUseButton == false and input.isActionPressed(input.ACTION.Use) == false then\n\t\t\tToggleUseButton = true\n\t\tend\n\telseif ToggleUseButton==true and I.UI.getMode()==nil and input.isActionPressed(input.ACTION.Use) == false then\n\t\tToggleUseButton = false\n\tend\n\n\n\t\n--\tif I.UI.getMode() == nil then\n--\t\tif MenuSelection and MenuSelection.layout then\n--\t\t\tMenuSelection:destroy()\n--\t\t\tfor i, variable in pairs(MenuSelection.layout.content) do\n--\t\t\t\tif type(i)==\"number\" then\n--\t\t\t\t\tif i%2==0 then\n--\t\t\t\t\t\tcore.sendGlobalEvent(\"ReturnGlobalVariable\",{player=self,variable=variable.props.text,value=0})\n--\t\t\t\t\tend\n--\t\t\t\tend\n--\t\t\tend\n--\t\t\tambient.playSound(\"RECancel\")\n--\t\tend\n--\tend\n\nend\n\n\n\nreturn func_table\n",
    "Base Game V.0.11-54619--0-11-1716405109\\Resident Evil\\data\\scripts\\RDT checker.lua": "local util=require(\"openmw.util\")\n\n\n\n\n\n\n\n\n",
    "Base Game V.0.11-54619--0-11-1716405109\\Resident Evil\\data\\scripts\\REPushable Container.lua": "local self=require('openmw.self')\nlocal types = require('openmw.types')\nlocal nearby=require('openmw.nearby')\nlocal util = require('openmw.util')\nlocal core = require('openmw.core')\nlocal OriginPos\n\n\nlocal function Start()\n    if string.find(types.Container.record(self).mwscript,\"pushable\")~=nil then\n        OriginPos=self.position\n    end\nend\n\nlocal function End()\n    if string.find(types.Container.record(self).mwscript,\"pushable\")~=nil then\n        core.sendGlobalEvent('PushContainer', {Container=self.object, Way=nil, startPos=OriginPos})\n    end\nend\n\nlocal function Climb(data)\n    if string.find(types.Container.record(self).mwscript,\"climbable\")~=nil and self.position.z+10>=data.position.z then\n        core.sendGlobalEvent('Teleport', {object=data, position=util.vector3((data.position.x+self.position.x)/2,(data.position.y+self.position.y)/2,nearby.castRay(self.position,util.transform.move(0,0,200)*self.position).hitPos.z+10),rotation=nil})\n    end\nend\n\n\nlocal function onUpdate()\n\n    --print(types.Container.record(self).mwscript)\n    if string.find(types.Container.record(self).mwscript,\"pushable\") then\n        local XPchecker = nearby.castRay(util.transform.move(2,0,0)*nearby.castRay(self.position,util.transform.move(200,0,0)*self.position).hitPos,util.transform.move(10,0,0)*nearby.castRay(self.position,util.transform.move(200,0,0)*self.position).hitPos,{radius=40})\n        local YPchecker=nearby.castRay(util.transform.move(0,2,0)*nearby.castRay(self.position,util.transform.move(0,200,0)*self.position).hitPos,util.transform.move(0,10,0)*nearby.castRay(self.position,util.transform.move(0,200,0)*self.position).hitPos,{radius=40})\n        local XMchecker=nearby.castRay(util.transform.move(-2,0,0)*nearby.castRay(self.position,util.transform.move(-200,0,0)*self.position).hitPos,util.transform.move(-10,0,0)*nearby.castRay(self.position,util.transform.move(-200,0,0)*self.position).hitPos,{radius=40})\n        local YMchecker =nearby.castRay(util.transform.move(0,-2,0)*nearby.castRay(self.position,util.transform.move(0,-200,0)*self.position).hitPos,util.transform.move(0,-10,0)*nearby.castRay(self.position,util.transform.move(0,-200,0)*self.position).hitPos,{radius=40})\n        \n\n        if XPchecker.hit == true and XMchecker.hit == false and XPchecker.hitObject.type==types.Player then\n            core.sendGlobalEvent('PushContainer', {Container=self, Way=\"X+\", startPos=nil})\n            --print(XPchecker.hitObject)\n        end\n        if XMchecker.hit == true and XPchecker.hit == false and XMchecker.hitObject.type==types.Player then\n            core.sendGlobalEvent('PushContainer', {Container=self, Way=\"X-\", startPos=nil})\n            --print(XMchecker.hitObject)\n        end\n        if YPchecker.hit == true and YMchecker.hit == false and YPchecker.hitObject.type==types.Player then\n            core.sendGlobalEvent('PushContainer', {Container=self, Way=\"Y+\", startPos=nil})\n            --print(YPchecker.hitObject)\n        end\n        if YMchecker.hit == true and YPchecker.hit ==false and YMchecker.hitObject.type==types.Player then\n            core.sendGlobalEvent('PushContainer', {Container=self, Way=\"Y-\", startPos=nil})\n            --print(YMchecker.hitObject)\n        end\n    end\n\nend\n\n\nreturn {\n\tengineHandlers = {\n        onActive=Start,\n        onInactive=End,\n        onActivated=Climb,------marche pas avec  MWscript \"if onactivate==1\"-> besoin de 'interfaces.Activation.addHandlerForObject'\n        onUpdate = onUpdate\n        \n\n\n\n\t}\n}\n",
    "Base Game V.0.11-54619--0-11-1716405109\\Resident Evil\\data\\scripts\\RE_Controls_Player.lua": "local self = require('openmw.self')\nlocal nearby = require('openmw.nearby')\nlocal input = require('openmw.input')\nlocal ui = require('openmw.ui')\nlocal util = require('openmw.util')\nlocal types = require('openmw.types')\nlocal I = require('openmw.interfaces')\nlocal core = require('openmw.core')\nlocal camera = require('openmw.camera')\nlocal interfaces = require('openmw.interfaces')\nlocal ambient = require('openmw.ambient')\nlocal vfs = require(\"openmw.vfs\")\nlocal storage = require('openmw.storage')\nlocal async = require('openmw.async')\nlocal postprocessing = require('openmw.postprocessing')\nlocal Puzzles=require('scripts/puzzles')\nlocal PlaceCamera=require('scripts/CameraPosition')\nlocal UI=require('scripts/UI')\n\nlocal doOnce = nil\nlocal activecam = nil\nlocal activeBkg = nil\nMSKlist = {}\nBGDepth=nil\n\n\nlocal Maps=util.loadCode(\"return({\"..types.Book.record(\"Maps\").text..\"})\",{})()\n\nI.Settings.registerPage {\n    key = 'RESettingsPage',\n    l10n = 'RESettings',\n    name = 'Resident Evil Settings',\n    description = 'Settings that can be changed to play with RE3 or RE0 gameplay.',\n}\n\nI.Settings.registerGroup {\n    key = 'RESettings1',\n    page = 'RESettingsPage',\n    l10n = 'RESettings',\n    name = 'Edit RE settings',\n    description = 'Settings',\n    permanentStorage = false,\n    settings = {\n        {\n            key = 'AutoAim',\n            renderer = 'checkbox',\n            name = 'AutoAim',\n            description = 'Target ennemie or attack objects when targeting',\n            default = true,\n\t\t\targument={trueLabel = \"Auto\",falseLabel = \"Manual\"},\n        },\n        {\n            key = 'Dodge',\n            renderer = 'checkbox',\n            name = 'Dodge',\n            description = 'Ability to dodge (RE3)',\n            default = true,\n\t\t\targument={trueLabel = \"Yes\",falseLabel = \"No\"},\n        },\n        {\n            key = 'Drop',\n            renderer = 'checkbox',\n            name = 'Drop',\n            description = 'Ability to drop object from the inventory (RE0)',\n            default = true,\n\t\t\targument={trueLabel = \"Yes\",falseLabel = \"No\"},\n        },\n        {\n            key = 'Reload',\n            renderer = 'checkbox',\n            name = 'Reload',\n            description = 'Ability to reload weapon (draw weapon+run)',\n            default = true,\n\t\t\targument={trueLabel = \"Yes\",falseLabel = \"No\"},\n        },\n        {\n            key = 'FixedCamera',\n            renderer = 'checkbox',\n            name = 'FixedCamera',\n            description = 'Play with fixed cameras',\n            default = true,\n\t\t\targument={trueLabel = \"Yes\",falseLabel = \"No\"},\n        },\n    },\n}\n\n--{\"Hand Gun Bullets\", \"Hand Gun Bullets Enhanced\", \"Shotgun Shells\",\"Shotgun Shells Enhanced\",\"Grenade Rounds\",\"Acid Rounds\",\"Flame Rounds\",\"Freeze Rounds\",\"Sponge Round\",\"Assault Rifle Bullets\",\"Magnum Bullets\",\"Mine Thrower Rounds\",\"Fuel\"}\nlocal AmmunitionTypes = {}\nlocal EquippedWeapon\nlocal ammosloadable\nlocal StartingAmmo\nlocal ammoscharged = false\nlocal wrongammo = true\nAmmoChecked = 0\nInstantammo = 0\nlocal ammochanged = false\nlocal weaponcondition = 0\nlocal InventoryAmmunitionTypes = {}\nlocal InventoryItemSelected = {}\nlocal Colors={\nWhite=util.color.rgb(1, 1, 1),\nGrey=util.color.rgb(0.5, 0.5, 0.5),\nOrange=util.color.rgb(0.67, 0.74, 0.12),\nBlue=util.color.rgb(0.09, 0.38, 0.54),\nRed=util.color.rgb(0.74, 0.11, 0.11),\nGreen=util.color.rgb(0.08, 0.71, 0.02),\n}\n---------------------------\n\n\n\nlocal Borderbox=ui.texture { path = \"textures/BorderBox.dds\", }\nlocal TransparentBorderBox=ui.texture { path = \"textures/TransparentBorderBox.dds\", }\nlocal WrapperTemplate = {\n\ttype = ui.TYPE.Image,\n\tprops = {\n\t\tresource = Borderbox,\n\t\tcolor = Colors.White,\n\t\tvisible=true\n\t},\n\tcontent = ui.content {\n\t\t{\n\t\t\texternal = { slot = true },\n\t\t\tprops = {relativeSize = util.vector2(1, 1) } } }\n}\n\n\n---------------------------------------\nlocal function InventoryReload(item1, item2)\n\titem1:sendEvent('GiveWeaponInfos', { player = self, Equipped = false })\n\tif InventoryAmmunitionTypes[1] then\n\t\tfor i, ammo in ipairs(InventoryAmmunitionTypes) do\n\t\t\t--print(ammo)\n\t\t\t--print(item2.recordId)\n\t\t\tif ammo == item2.recordId then\n\t\t\t\t--print(\"GOOD AMMO\")\n\t\t\t\t--print(10000 + i)\n\t\t\t\tlocal Inventoryammosloadable = 0\n\t\t\t\tif types.Item.itemData(item1).condition - 10000 == i then\n\t\t\t\t\tif types.Actor.inventory(self):countOf(item2.recordId) > (core.magic.enchantments.records[types.Weapon.record(item1).enchant].charge - types.Item.getEnchantmentCharge(item1)) then\n\t\t\t\t\t\tInventoryammosloadable = core.magic.enchantments.records[types.Weapon.record(item1).enchant].charge -\n\t\t\t\t\t\t\ttypes.Item.getEnchantmentCharge(item1)\n\t\t\t\t\t\t--print(\"ammosload\" .. tostring(Inventoryammosloadable))\n\t\t\t\t\t\tcore.sendGlobalEvent('setCharge',\n\t\t\t\t\t\t\t{ Item = item1, value = core.magic.enchantments.records[types.Weapon.record(item1).enchant].charge })\n\t\t\t\t\telse\n\t\t\t\t\t\t--print(\"low ammo\")\n\t\t\t\t\t\tInventoryammosloadable = types.Actor.inventory(self):countOf(item2.recordId)\n\t\t\t\t\t\t--print(\"ammosload\" .. tostring(Inventoryammosloadable))\n\t\t\t\t\t\tcore.sendGlobalEvent('setCharge',\n\t\t\t\t\t\t\t{ Item = item1, value = Inventoryammosloadable + types.Item.getEnchantmentCharge(item1) })\n\t\t\t\t\tend\n\t\t\t\t\tcore.sendGlobalEvent('RemoveItem', { Item = item2, number = Inventoryammosloadable })\n\t\t\t\telse\n\t\t\t\t\tif types.Actor.inventory(self):countOf(item2.recordId) >= core.magic.enchantments.records[types.Weapon.record(item1).enchant].charge then\n\t\t\t\t\t\tcore.sendGlobalEvent('setCharge',\n\t\t\t\t\t\t\t{ Item = item1, value = core.magic.enchantments.records[types.Weapon.record(item1).enchant].charge })\n\t\t\t\t\t\tcore.sendGlobalEvent('RemoveItem',\n\t\t\t\t\t\t\t{ Item = item2, number = core.magic.enchantments.records[types.Weapon.record(item1).enchant].charge })\n\t\t\t\t\t\tfor i = 1, types.Item.getEnchantmentCharge(item1) do\n\t\t\t\t\t\t\tcore.sendGlobalEvent('MoveInto',\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tItem = nil,\n\t\t\t\t\t\t\t\t\tcontainer = nil,\n\t\t\t\t\t\t\t\t\tactor = self,\n\t\t\t\t\t\t\t\t\tnewItem = InventoryAmmunitionTypes\n\t\t\t\t\t\t\t\t\t\t[types.Item.itemData(item1).condition - 10000]\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\tend\n\t\t\t\t\telse\n\t\t\t\t\t\tcore.sendGlobalEvent('setCharge',\n\t\t\t\t\t\t\t{ Item = item1, value = types.Actor.inventory(self):countOf(item2.recordId) })\n\t\t\t\t\t\tcore.sendGlobalEvent('RemoveItem',\n\t\t\t\t\t\t\t{ Item = item2, number = types.Actor.inventory(self):countOf(item2.recordId) })\n\n\n\t\t\t\t\t\tfor i = 1, types.Item.getEnchantmentCharge(item1) do\n\t\t\t\t\t\t\tcore.sendGlobalEvent('MoveInto',\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tItem = nil,\n\t\t\t\t\t\t\t\t\tcontainer = nil,\n\t\t\t\t\t\t\t\t\tactor = self,\n\t\t\t\t\t\t\t\t\tnewItem = InventoryAmmunitionTypes\n\t\t\t\t\t\t\t\t\t\t[types.Item.itemData(item1).condition - 10000]\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\t--print(10000 + i)\n\t\t\t\t\titem1:sendEvent('setCondition', { value = 10000 + i })\n\t\t\t\t\tweaponcondition = 10000 + i\n\t\t\t\tend\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tif InventoryAmmunitionTypes[i + 1] == nil then\n\t\t\t\t--print(\"WRONG AMMO\")\n\t\t\tend\n\t\tend\n\n\t\tInventoryItemSelected[4] = nil\n\t\tSelectedCombineItem:destroy()\n\t\tToggleUseButton = false\n\t\tFrameRefresh = true\n\tend\nend\n\nlocal function ReturnEquippedWeaponInfos(data)\n\tAmmunitionTypes = data.AmmunitionTypes\n\t--print(\"returned\")\n\t--for i, ammo in ipairs(AmmunitionTypes) do\n\t--\tprint(ammo)\n\t--end\n\t--print(\"returned\")\n\tAmmoChecked = 1\nend\n\nlocal function ReturnInventoryWeaponInfos(data)\n\tInventoryAmmunitionTypes = data.AmmunitionTypes\n\t--print(\"received inventory\")\nend\n\n\nlocal BulletOnScreen\nlocal BulletOnScreenTimer=60\nlocal function CheckBulletOnScreen ()\n\tlocal RotZ = self.rotation:getPitch()\n\tlocal RotX = self.rotation:getYaw()\n\tlocal Target = nearby.castRay(\n\t\t\t\tutil.vector3(0, 0, 110) + self.position +\n\t\t\t\tutil.vector3(math.cos(RotZ) * math.sin(RotX), math.cos(RotZ) * math.cos(RotX), -math.sin(RotZ)) * 50,\n\t\t\t\tutil.vector3(0, 0, 110) + self.position +\n\t\t\t\tutil.vector3(math.cos(RotZ) * math.sin(RotX), math.cos(RotZ) * math.cos(RotX), -math.sin(RotZ)) * (self.position-camera.getPosition()):length())\n\n\n\t--print()\n\tif ((self.rotation:getPitch())>=(camera.getPitch()-(camera.getFieldOfView())/2)) and ((self.rotation:getPitch())<=(camera.getPitch()+(camera.getFieldOfView())/2)) and ((self.rotation:getYaw()-math.pi)>=(camera.getYaw()-(camera.getFieldOfView())/2)) and ((self.rotation:getYaw()-math.pi)<=(camera.getYaw()+(camera.getFieldOfView())/2)) and Target.hitObject==nil then\n\t\tif BulletOnScreen and BulletOnScreen.layout then\n\t\t\tBulletOnScreen.layout.props.relativePosition=util.vector2(math.random(10)/12, math.random(10)/14)\n\t\t\tBulletOnScreen:update()\n\t\t\tBulletOnScreenTimer=0\n\t\telse\n\t\t\tBulletOnScreen=ui.create({name=\"BulletOnScreen\",layer = 'HUD',  type = ui.TYPE.Image,  props = {relativeSize = util.vector2(1/5, 1/5),relativePosition=util.vector2(math.random(10)/12, math.random(10)/14),resource = ui.texture{path =\"textures/BulletImpactOnGlass.dds\"},}})\n\t\t\tBulletOnScreenTimer=0\n\t\tend\n\tend\n\nend\n\nlocal UseButton = 0\nlocal QuickTurnButton = 0\nlocal ToggleUseButton = false\nlocal DodgeButton = 0\nlocal TurningBack = 0\nlocal ToggleWeaponButton=false\nlocal ToggleWeaponButtonMap=false\nlocal ToggleSneakButtonMap=false\n\n\n\nlocal TargetedBOW = {}\nlocal BOWchecked = 0\nlocal TargetedAttackObject = {}\nlocal AttackObjectchecked = 0\nlocal changetarget = 0\n\nlocal Menu = false\nlocal shootTimer = 0\nlocal FrameRefresh = false\n\nlocal TargetBOW\nlocal TargetAttackObject\n\nlocal Lifebare\nlocal doOnceMenu = 0\nlocal path1\nlocal path2 = 0\nlocal path3\nlocal lifebarTimer = 0\nlocal onFrameHealth\n\nlocal equipped = types.Actor.equipment(self)\n\nlocal LiveSelectionTimer =0\nlocal LiveSelectionChoice1=\"\"\nlocal LiveSelectionChoice2=\"\"\nlocal negativeshader = postprocessing.load('negative')\n\n\n----- variables pour tire shotguns\nlocal SShellRotX\nlocal SShellRotZ\nlocal SshellDamage\nlocal SshellEnchant\nlocal Xshotshell\nlocal Yshotshell\nlocal Zshotshell\nlocal ray\n\n\n---------- override  normal controls\ninterfaces.Controls.overrideMovementControls(true)\ninterfaces.Controls.overrideCombatControls(true)\ninterfaces.Controls.overrideUiControls(true)\n\n\n-----------------bars cinematiques\nui.create({ layer = 'Console', type = ui.TYPE.Image, props = { relativeSize = util.vector2(1, 1 / 7), relativePosition = util.vector2(0, 1), anchor = util.vector2(0, 1), resource = ui.texture { path = 'textures/cinematic_bar.dds' }, }, })\nui.create({ layer = 'Console', type = ui.TYPE.Image, props = { relativeSize = util.vector2(1, 1 / 7), relativePosition = util.vector2(0, 0), anchor = util.vector2(0, 0), resource = ui.texture { path = 'textures/cinematic_bar.dds' }, }, })\n\n\nlocal ItemDescriptions=util.loadCode(\"return(\"..types.Book.record(\"Item Descriptions\").text..\")\",{})()\n\nlocal ExaminedItems = util.loadCode(\"return(\" .. types.Book.record(\"examined items\").text .. \")\", {})()\n\nlocal CombinedItems = util.loadCode(\"return(\" ..types.Book.record(\"combined items\").text .. \")\", {})()\n\n\nfunction Camerapos(data)\n\tactivecam = data.ActiveCam\n\tactiveBkg = data.ActiveBkg\n\tBGDepth = data.BGDepth\n\tCamAng=data.CamAng\n\tCamPos=data.CamPos\n\t--print(data.MSKList[1])\n\tif data.MSKList then\n\t\tMSKlist = data.MSKList\n\tend\n\tif storage.playerSection('RESettings1'):get('FixedCamera')==true and data.CamPos and data.CamAng then\n\t\tcamera.setMode(0)\n\t\tcamera.setStaticPosition(data.CamPos)\n\t\tcamera.setFieldOfView(0.8)--*1280/ui.screenSize().x)\t--field of View = 50\n\t\tcamera.setPitch(data.CamAng.x)\n\t\tcamera.setYaw(data.CamAng.y)\n\tend\nend\n\nlocal SwitchZonePoints={}\nfunction DefineSwitchZones(data)\n\tSwitchZonePoints=data.SwitchZonePoints\nend\n\n\nlocal function InFront(data)\n\tif (((self.rotation:getYaw() <= .785 and self.rotation:getYaw() >= -.785) and (data.position.y - self.position.y) >= 0)\n\t\t\tor ((self.rotation:getYaw() <= 2.355 and self.rotation:getYaw() >= .785) and (data.position.x - self.position.x) >= 0)\n\t\t\tor ((self.rotation:getYaw() <= -2.355 or self.rotation:getYaw() >= 2.355) and (data.position.y - self.position.y) <= 0)\n\t\t\tor ((self.rotation:getYaw() <= -.785 and self.rotation:getYaw() >= -2.355) and (data.position.x - self.position.x) <= 0)) then\n\t\treturn (true)\n\tend\nend\n\nfunction MoveForward(data)\n\tif input.isActionPressed(input.ACTION.MoveForward) == true or input.getAxisValue(input.CONTROLLER_AXIS.LeftY) <= data then\n\t\treturn (true)\n\tend\nend\n\nfunction MoveBackward(data)\n\tif input.isActionPressed(input.ACTION.MoveBackward) == true or input.getAxisValue(input.CONTROLLER_AXIS.LeftY) >= data then\n\t\treturn (true)\n\tend\nend\n\nfunction TurnRight(data)\n\tif input.isActionPressed(input.ACTION.QuickKey1) == true or input.getAxisValue(input.CONTROLLER_AXIS.LeftX) >= data then\n\t\treturn (true)\n\tend\nend\n\nfunction TurnLeft(data)\n\tif input.isActionPressed(input.ACTION.QuickKey2) == true or input.getAxisValue(input.CONTROLLER_AXIS.LeftX) <= data then\n\t\treturn (true)\n\tend\nend\n\nlocal textSizeRatio= ui.screenSize().y/1056\nlocal MenuSelectStop = false\nlocal iconpath\nlocal InventoryItems\nlocal Inventory\nlocal PickUpItem = {}\nlocal PickUpItemIcon\nlocal function ShowInventory()\n\tambient.playSound(\"REdecide\")\n\tI.UI.setMode(I.UI.MODE.Interface, { windows = {} })\n\tlocal InventoryContent = ui.content {}\n\tlocal InventoryItems = {}\n\n\tif not (Inventory == nil ) then\n\t\tInventory:destroy()\n\tend\n\n\tfor i = 1, 20 do --20 is an arbitrary value\n\t\tif not (types.Actor.inventory(self):getAll()[i] == nil or types.Actor.inventory(self):getAll()[i].type == types.Book) then\n\t\t\ttable.insert(InventoryItems, types.Actor.inventory(self):getAll()[i])\n\t\tend\n\tend\n\n\n\tfor i, item in ipairs(InventoryItems) do\n\t\tif i>types.NPC.getCapacity(self) then\n\t\t\tbreak\n\t\tend\n\n\n\t\tlocal textLayout = {}\n\t\tlocal weapontextcolor\n\t\tif item.count > 1 then                                                   --13 == Bolt\n\t\t\ttextLayout = { type = ui.TYPE.Text, props = { text = tostring(item.count), textSize = 50*textSizeRatio, textColor = util.color.rgb(0.06, 0.4, 0.08), anchor = util.vector2(-1, -1.5), }, }\n\t\telseif item.type == types.Weapon and types.Weapon.record(item).type == 10 then --10 == MarksmanCrossbow then\n\t\t\tif types.Item.itemData(item).condition == 10001 then\n\t\t\t\tweapontextcolor = util.color.rgb(0.09, 0.38, 0.54)\n\t\t\telseif types.Item.itemData(item).condition == 10002 then\n\t\t\t\tweapontextcolor = util.color.rgb(0.67, 0.74, 0.12)\n\t\t\telseif types.Item.itemData(item).condition == 10003 then\n\t\t\t\tweapontextcolor = util.color.rgb(0.74, 0.11, 0.11)\n\t\t\telseif types.Item.itemData(item).condition == 10004 then\n\t\t\t\tweapontextcolor = util.color.rgb(0.1, 0.18, 0.73)\n\t\t\telseif types.Item.itemData(item).condition == 10005 then\n\t\t\t\tweapontextcolor = util.color.rgb(0.08, 0.71, 0.02)\n\t\t\telseif types.Item.itemData(item).condition == 10006 then\n\t\t\t\tweapontextcolor = util.color.rgb(0, 0, 0)\n\t\t\tend\n\t\t\ttextLayout = { type = ui.TYPE.Text, props = { text = tostring(types.Item.getEnchantmentCharge(item)), textSize = 50*textSizeRatio, textColor = weapontextcolor, anchor = util.vector2(-1, -1.5), }, }\n\t\telse\n\t\t\ttextLayout = { type = ui.TYPE.Text, props = { text = nil, textSize = 50*textSizeRatio, textColor = util.color.rgb(0.09, 0.38, 0.54), anchor = util.vector2(-1, -1.5), }, }\n\t\tend\n\t\tif i % 2 == 1 then\n\t\t\t_G[\"ContentInventoryLine\" .. i] = ui.content {}\n\t\t\t_G[\"ContentInventoryLine\" .. i]:add({ type = ui.TYPE.Image, content = ui.content { textLayout }, props = { size = util.vector2(ui.screenSize().x / 10, ui.screenSize().y / 9), resource = ui.texture { path = item.type.record(item).icon }, }, })\n\n\t\t\tif InventoryItems[i + 1] == nil then\n\t\t\t\t_G[\"InventoryLine\" .. (i)] = {\n\t\t\t\t\tname = \"Line\" .. (i),\n\t\t\t\t\tlayer = \"Windows\",\n\t\t\t\t\ttype = ui.TYPE.Flex,\n\t\t\t\t\tprops = { position = util.vector2(ui.screenSize().x * 5 / 6 - ui.screenSize().x / 10, ui.screenSize().y / 2), anchor = util.vector2(0, 0), horizontal = true },\n\t\t\t\t\tcontent =\n\t\t\t\t\t\t_G[\"ContentInventoryLine\" .. (i)]\n\t\t\t\t}\n\t\t\t\tInventoryContent:add(_G[\"InventoryLine\" .. (i)])\n\t\t\tend\n\t\telseif i % 2 == 0 then\n\t\t\t_G[\"ContentInventoryLine\" .. (i - 1)]:add({ type = ui.TYPE.Image, content = ui.content { textLayout }, props = { size = util.vector2(ui.screenSize().x / 10, ui.screenSize().y / 9), resource = ui.texture { path = item.type.record(item).icon }, }, })\n\n\t\t\t_G[\"InventoryLine\" .. (i - 1)] = {\n\t\t\t\tname = \"Line\" .. (i - 1),\n\t\t\t\tlayer = \"Windows\",\n\t\t\t\ttype = ui.TYPE.Flex,\n\t\t\t\tprops = { position = util.vector2(ui.screenSize().x * 5 / 6 - ui.screenSize().x / 10, ui.screenSize().y / 2), anchor = util.vector2(0, 0), horizontal = true },\n\t\t\t\tcontent =\n\t\t\t\t\t_G[\"ContentInventoryLine\" .. (i - 1)]\n\t\t\t}\n\n\t\t\tInventoryContent:add(_G[\"InventoryLine\" .. (i - 1)])\n\t\tend\n\tend\n\n\tInventoryLayout = {\n\t\tname = \"Inventory\",\n\t\tlayer = \"Windows\",\n\t\ttype = ui.TYPE.Flex,\n\t\tprops = { relativePosition = util.vector2(0, 0), anchor = (util.vector2(0, 0)) },\n\t\tcontent =\n\t\t\tInventoryContent\n\t}\n\tInventory = ui.create({ \tname = \"Inventory\", \n\t\t\t\t\t\t\t\tlayer = 'Windows', \n\t\t\t\t\t\t\t\ttype = ui.TYPE.Image, \n\t\t\t\t\t\t\t\tprops = { autoSize=true, relativeSize = util.vector2(2 / 10, types.NPC.getCapacity(self) / 2 / 9), relativePosition = util.vector2(3 / 4, 1 / 3), anchor = (util.vector2(0, 0)), resource = ui.texture { path = \"textures/BkgInventory.dds\" }, },\n\t\t\t\t\t\t\t\tcontent=ui.content{InventoryLayout,}\n\t\t\t\t\t\t\t})\n\treturn (InventoryItems)\nend\n\n\n\nfunction ShowItem(item, text)\n\tlocal ItemIcon = { layer = 'Windows', type = ui.TYPE.Image, props = { relativeSize = util.vector2(2 / 3, 1 / 2),  anchor = (util.vector2(0, 0)), resource = ui.texture { path = item.type.record(item).icon }, }, }\n\tlocal Text = { layer = 'Windows', type = ui.TYPE.Text, props = {relativeSize = util.vector2(2 / 3, 1 / 2), anchor = util.vector2(1 / 2, 1 / 2), text = text, autoSize = false, textSize = 30*textSizeRatio, textColor = util.color.rgb(1, 1, 1), wordWrap=true}, }\n\n\tShowItemIcon = ui.create({\n\t\tlayer = 'Console',\n\t\ttype = ui.TYPE.Flex,\n\t\tprops = { autoSize = false, relativeSize = util.vector2(1 / 2, 1 / 2), relativePosition = util.vector2(1 / 3, 1 / 2), anchor = util.vector2(0, 0), },\n\t\tcontent = ui.content { ItemIcon,\n\t\t\t{ layer = 'Windows', type = ui.TYPE.Text, props = { text = \" \", textSize = 120*textSizeRatio } }, Text }\n\t})\nend\n\n\n\n\nlocal function Overload()\n\tfor i, book in ipairs(types.Player.inventory(self):getAll(types.Book)) do\n\t\tif types.Player.inventory(self):getAll(types.Book)[i + 1] == nil then\n\t\t\tif types.Player.inventory(self):getAll()[types.NPC.getCapacity(self) + i + 1] and input.isActionPressed(input.ACTION.ToggleWeapon) == false then\n\t\t\t\tcore.sendGlobalEvent('Teleport',\n\t\t\t\t{\n\t\t\t\t\tobject = types.Player.inventory(self):getAll()[types.NPC.getCapacity(self) + i + 1],\n\t\t\t\t\tposition =\n\t\t\t\t\t\tself.position,\n\t\t\t\t\trotation = nil\n\t\t\t\t})\n\t\t\tui.showMessage(\"Your inventory is full, you drop : \" ..\n\t\t\t\ttostring(types.Player.inventory(self):getAll()[types.NPC.getCapacity(self) + i + 1].recordId))\n\t\t\tend\n\t\tend\n\tend\nend\n\n\n\n\nfunction TurnToTarget(Target)\n\tlocal AngleTarget\n\tif self.position.x < Target.position.x then\n\t\tif self.position.y < Target.position.y then --ok\n\t\t\tAngleTarget = -self.rotation:getYaw() +\n\t\t\t\tmath.acos((Target.position.y - self.position.y) / (self.position - Target.position):length())\n\t\telseif self.position.y > Target.position.y then\n\t\t\tAngleTarget = -self.rotation:getYaw() -\n\t\t\t\tmath.acos((self.position.y - Target.position.y) / (self.position - Target.position):length()) - math.pi\n\t\tend\n\telseif self.position.x > Target.position.x then --ok\n\t\tif self.position.y < Target.position.y then\n\t\t\tAngleTarget = -self.rotation:getYaw() +\n\t\t\t\tmath.acos((self.position.y - Target.position.y) / (self.position - Target.position):length()) - math.pi\n\t\telseif self.position.y > Target.position.y then\n\t\t\tAngleTarget = -self.rotation:getYaw() -\n\t\t\t\tmath.acos((Target.position.y - self.position.y) / (self.position - Target.position):length())\n\t\tend\n\tend\n\tself.controls.yawChange = AngleTarget\nend\n\nlocal MapUI=nil\nlocal LastRoom\nlocal ObjectsInWorld\nlocal ObjectsInMap\nAreaMap=0\nZoneMap=0\nRoomMap=0\nMapsUtils={Blink={value=-0.01,Room=0},RoomsVisited={},RoomsMapped={}}\n\n\nlocal function CheckTableUD(table,number,Way)\n\t--print(\"function\")\n\tlocal Delta=0\n\n\t--print(number)\n\t--print(Way)\n\tif table then\n\t\tfor i, num in pairs(table) do\n\t\t\t--print(i)\n\t\t\tif Way==\"+\" and i>number then\n\t\t\t\tif Delta>(i-number) or Delta==0 then\n\t\t\t\t\tDelta=i-number\n\t\t\t\tend\n\t\t\telseif  Way==\"-\" and i<number then\n\t\t\t\tif Delta<(i-number) or Delta==0 then\n\t\t\t\t\tDelta=(i-number)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t--print(Delta)\n\treturn (Delta)\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlocal function ShowMap(Area,Zone,Cell)\n\tMapsUtils.Blink.Room=0\n\tlocal MapUIContent={}\n\tlocal RoomNum=0\n\tlocal FlexObjectsContent={}\n\tif\t MapUI and MapUI.layout then\n\t\tMapUI:destroy()\n\tend \n\n\tfor i, Room in pairs(Maps[Area][2][Zone][2]) do\n\t\tif MapsUtils[\"RoomsVisited\"][Area] then\n\t\t\tif MapsUtils[\"RoomsVisited\"][Area][2][Zone] then\n\t\t\t\t\tif MapsUtils[\"RoomsVisited\"][Area][2][Zone][2][i] then\n\t\t\t\t\t\tif Room==self.cell.name then\n\t\t\t\t\t\t\ttable.insert(MapUIContent,{type = ui.TYPE.Image, props = {alpha=1, relativeSize = util.vector2(1,1),relativePosition=util.vector2(0.5, 0.5),anchor = util.vector2(0.5, 0.5),resource = ui.texture{path =\"textures/Maps/\"..Maps[Area][1]..\"/\"..Maps[Area][2][Zone][1]..\"/\"..Room..\"In.png\"}}})\n\t\t\t\t\t\t\tRoomNum=RoomNum+1\n\t\t\t\t\t\t\tif i==Cell then\n\t\t\t\t\t\t\t\tMapsUtils.Blink.Room=RoomNum\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\ttable.insert(MapUIContent,{type = ui.TYPE.Image, props = {alpha=1,relativeSize = util.vector2(1,1),relativePosition=util.vector2(0.5, 0.5),anchor = util.vector2(0.5, 0.5),resource = ui.texture{path =\"textures/Maps/\"..Maps[Area][1]..\"/\"..Maps[Area][2][Zone][1]..\"/\"..Room..\".png\"}}})\n\t\t\t\t\t\t\tRoomNum=RoomNum+1\n\t\t\t\t\t\t\tif i==Cell then\n\t\t\t\t\t\t\t\tMapsUtils.Blink.Room=RoomNum\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\telseif MapsUtils[\"RoomsMapped\"][Area] then\n\t\t\t\t\t\tif MapsUtils[\"RoomsMapped\"][Area][2][Zone] then\n\t\t\t\t\t\t\t--print(\"MappedR\")\n\t\t\t\t\t\t\ttable.insert(MapUIContent,{type = ui.TYPE.Image, props = {alpha=0.2,relativeSize = util.vector2(1,1),relativePosition=util.vector2(0.5, 0.5),anchor = util.vector2(0.5, 0.5),resource = ui.texture{path =\"textures/Maps/\"..Maps[Area][1]..\"/\"..Maps[Area][2][Zone][1]..\"/\"..Room..\".png\"}}})\n\t\t\t\t\t\t\tRoomNum=RoomNum+1\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\telseif MapsUtils[\"RoomsMapped\"][Area] then\n\t\t\t\tif MapsUtils[\"RoomsMapped\"][Area][2][Zone] then\n\t\t\t\t\t--print(\"MappedZ\")\n\t\t\t\t\ttable.insert(MapUIContent,{type = ui.TYPE.Image, props = {alpha=0.2,relativeSize = util.vector2(1,1),relativePosition=util.vector2(0.5, 0.5),anchor = util.vector2(0.5, 0.5),resource = ui.texture{path =\"textures/Maps/\"..Maps[Area][1]..\"/\"..Maps[Area][2][Zone][1]..\"/\"..Room..\".png\"}}})\n\t\t\t\t\tMapsUtils.Blink.Room=0\n\t\t\t\tend\n\t\t\tend\n\t\telseif MapsUtils[\"RoomsMapped\"][Area] then\n\t\t\tif MapsUtils[\"RoomsMapped\"][Area][2][Zone] then\n\t\t\t\t--print(\"MappedA\")\n\t\t\t\ttable.insert(MapUIContent,{type = ui.TYPE.Image, props = {alpha=0.2,relativeSize = util.vector2(1,1),relativePosition=util.vector2(0.5, 0.5),anchor = util.vector2(0.5, 0.5),resource = ui.texture{path =\"textures/Maps/\"..Maps[Area][1]..\"/\"..Maps[Area][2][Zone][1]..\"/\"..Room..\".png\"}}})\n\t\t\t\tMapsUtils.Blink.Room=0\n\t\t\tend\n\t\tend\n\tend\n\n\tfor i, variable in pairs(ObjectsInMap) do\n\t\t--print(i)\n\t\t--print(\"variable \"..variable)\n\t\tif variable==1 and vfs.fileExists('textures/Maps/'..Maps[Area][1]..\"/\"..Maps[Area][2][Zone][1]..\"/\"..i..\".png\") then\n\t\t\t--print(\"find\")\n\t\t\ttable.insert(MapUIContent,{type = ui.TYPE.Image, props = {relativeSize = util.vector2(1,1),relativePosition=util.vector2(0.5, 0.5),anchor = util.vector2(0.5, 0.5),resource = ui.texture{path ='textures/Maps/'..Maps[Area][1]..\"/\"..Maps[Area][2][Zone][1]..\"/\"..i..\".png\"}}})\n\t\tend\n\n\tend\n\n\n\tif MapsUtils[\"RoomsVisited\"][Area] then\n\t\tif MapsUtils[\"RoomsVisited\"][Area][2][Zone] then\n\t\t\ttable.insert(FlexObjectsContent,{ type = ui.TYPE.Text,  props = { text = MapsUtils[\"RoomsVisited\"][Area][2][Zone][2][Cell],relativePosition=util.vector2(0.5, 0.5), anchor = util.vector2(0.5, 0.5),textSize = 40*textSizeRatio, textColor = Colors.White } }) \n\t\t\ttable.insert(FlexObjectsContent,{ type = ui.TYPE.Text,  props = { text = \"Items : \",relativePosition=util.vector2(0.5, 0.5), anchor = util.vector2(0.5, 0.5),textSize = 35*textSizeRatio, textColor = Colors.White } }) \n\t\t\tfor i=1,10 do\n\t\t\t\t--print(Zone)\n\t\t\t\t--print(Maps[Area][2][Zone][1])\n\t\t\t\t--print(Cell)\n\t\t\t\t--print(Maps[Area][2][Zone][2][Cell])\n\t\t\t\tif i==10 and ObjectsInWorld[Maps[Area][2][Zone][2][Cell]][11] then\n\t\t\t\t\ttable.insert(FlexObjectsContent,{ type = ui.TYPE.Text,  props = { text = \"...\",relativePosition=util.vector2(2/16, 7/16), textSize = 25*textSizeRatio, textColor = Colors.White } }) \n\t\t\t\t\tbreak\n\t\t\t\telseif ObjectsInWorld[Maps[Area][2][Zone][2][Cell]][i] then\n\t\t\t\t\ttable.insert(FlexObjectsContent,{ type = ui.TYPE.Text,  props = { text = ObjectsInWorld[Maps[Area][2][Zone][2][Cell]][i],relativePosition=util.vector2(2/16, 7/16), textSize = 25*textSizeRatio, textColor = Colors.White } }) \n\t\t\t\telseif i==1 and ObjectsInWorld[Maps[Area][2][Zone][2][Cell]][i]==nil then\t\n\t\t\t\t\ttable.insert(FlexObjectsContent,{ type = ui.TYPE.Text,  props = { text = \"Nothing\",relativePosition=util.vector2(2/16, 7/16), textSize = 25*textSizeRatio, textColor = Colors.White } }) \n\t\t\t\telse\t\n\t\t\t\t\ttable.insert(FlexObjectsContent,{ type = ui.TYPE.Text,  props = { text = \" \",relativePosition=util.vector2(2/16, 7/16), textSize = 25*textSizeRatio, textColor = Colors.White } }) \n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\n\tfor i, zone in pairs(Maps[Area][2]) do\n\t\tif Maps[Area][2][Zone+i] then\n\t\t\tif MapsUtils[\"RoomsVisited\"][Area] then\n\t\t\t\tif  MapsUtils[\"RoomsVisited\"][Area][2][Zone+i] then\n\t\t\t\t\ttable.insert(MapUIContent, { type = ui.TYPE.Image, props = {relativePosition=util.vector2(0.5, 0), anchor = util.vector2(0, 0), size = util.vector2(30, 30), visible = true, color = Colors.Green, resource = ui.texture { path = \"textures/Choice select cursor Up.dds\" } } })\n\t\t\t\tend\n\t\t\telseif MapsUtils[\"RoomsMapped\"][Area] then\n\t\t\t\tif MapsUtils[\"RoomsMapped\"][Area][2][Zone+i] then\n\t\t\t\t\ttable.insert(MapUIContent, { type = ui.TYPE.Image, props = {relativePosition=util.vector2(0.5, 0), anchor = util.vector2(0, 0), size = util.vector2(30, 30), visible = true, color = Colors.Green, resource = ui.texture { path = \"textures/Choice select cursor Up.dds\" } } })\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\tfor i, zone in pairs(Maps[Area][2]) do\n\t\tif (Zone-i)>0 then\n\t\t\tif  MapsUtils[\"RoomsVisited\"][Area]then\n\t\t\t\tif  MapsUtils[\"RoomsVisited\"][Area][2][Zone-i]then\n\t\t\t\t\ttable.insert(MapUIContent, { type = ui.TYPE.Image, props = {relativePosition=util.vector2(0.5, 0.96), anchor = util.vector2(0, 0), size = util.vector2(30, 30), visible = true, color = Colors.Green, resource = ui.texture { path = \"textures/Choice select cursor Down.dds\" } } })\n\t\t\t\tend\n\t\t\telseif MapsUtils[\"RoomsMapped\"][Area] then\n\t\t\t\tif MapsUtils[\"RoomsMapped\"][Area][2][Zone-i] then\n\t\t\t\t\ttable.insert(MapUIContent, { type = ui.TYPE.Image, props = {relativePosition=util.vector2(0.5, 0.96), anchor = util.vector2(0, 0), size = util.vector2(30, 30), visible = true, color = Colors.Green, resource = ui.texture { path = \"textures/Choice select cursor Down.dds\" } } })\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\n\tfor i, area in pairs(Maps)do\n\t\tif (MapsUtils[\"RoomsVisited\"][i] or MapsUtils[\"RoomsMapped\"][i]) and i>AreaMap then\n\t\t\ttable.insert(MapUIContent, { type = ui.TYPE.Image, props = {relativePosition=util.vector2(0.97, 0.5), anchor = util.vector2(0, 0), size = util.vector2(30, 30), visible = true, color = Colors.Green, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } })\n\t\t\tbreak\n\t\tend\n\tend\n\tfor i, area in pairs(Maps)do\n\t\tif (MapsUtils[\"RoomsVisited\"][i] or MapsUtils[\"RoomsMapped\"][i]) and i<AreaMap then\n\t\t\ttable.insert(MapUIContent, { type = ui.TYPE.Image, props = {relativePosition=util.vector2(0, 0.5), anchor = util.vector2(0, 0), size = util.vector2(30, 30), visible = true, color = Colors.Green, resource = ui.texture { path = \"textures/Choice select cursor Left.dds\" } } })\n\t\t\tbreak\n\t\tend\n\tend\n\n\n\ttable.insert(MapUIContent,{type = ui.TYPE.Flex, props = {autoSize=true,relativePosition=util.vector2(0.1, 0.25),anchor = util.vector2(0.5, 0.5)}, content=ui.content(FlexObjectsContent)})\n\n\tMapUI=ui.create({layer = 'Console',  type = ui.TYPE.Image,\n\tprops = {relativeSize = util.vector2(1,1),relativePosition=util.vector2(0.5, 0.5),anchor = util.vector2(0.5, 0.5),resource = ui.texture{path =\"textures/Maps/\"..Maps[Area][1]..\"/\"..Maps[Area][2][Zone][1]..\"/BKG.png\"},},\n\tcontent=ui.content(MapUIContent)\n\t})\n\nend\t\n\n\n\n\n\n\nlocal function onUpdate()\n\n\n\tif BulletOnScreen and BulletOnScreen.layout then\n\t\tif BulletOnScreenTimer<60 then\n\t\t\tBulletOnScreenTimer=BulletOnScreenTimer+1\n\t\telse \n\t\t\tBulletOnScreen:destroy()\n\t\tend\n\tend\n\n\n\t------- picking items 1/2\n\tif PickUpItem[2] == true and PickUpItem[3] == nil then\n\t\tShowInventory()\n\t\tInventoryItemSelected[2] = nil\n\t\tPickUpItem[3] = true\n\t\tShowItem(PickUpItem[1], 'You Pickup ' .. PickUpItem[1].recordId)\n\telseif PickUpItem[2] == false and PickUpItem[3] == nil then\n\t\tShowInventory()\n\t\tInventoryItemSelected[2] = nil\n\t\tPickUpItem[3] = true\n\t\tShowItem(PickUpItem[1], \"You can't pickup \" .. PickUpItem[1].recordId .. '. Your Inventory is full.')\n\tend\n\n\t---------Ouvrir carte\n\tif input.isActionPressed(input.ACTION.ToggleSpell) and (MapUI==nil or MapUI.layout==nil) then\n\t\tcore.sendGlobalEvent('AskObjectsInWorld',{player=self,maps=Maps})\n\t\tambient.playSound(\"REdecide\")\n\t\tfor i, Area in pairs(Maps) do\n\t\t\tfor j ,Zone in pairs (Area[2]) do\n\t\t\t\tfor k, Room in pairs(Zone[2]) do\n\t\t\t\t\tif Room==self.cell.name then\n\t\t\t\t\t\tI.UI.setMode(I.UI.MODE.Interface, { windows = {} })\n\t\t\t\t\t\tAreaMap=i \n\t\t\t\t\t\tZoneMap=j\n\t\t\t\t\t\tRoomMap=k\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\n\n\n\n\n\n\n\n\n\n\n\n\t---------------Activate near -> ajouter animation de ramasser un objet\n\tif input.isActionPressed(input.ACTION.Use) and types.Actor.getStance(self) == 0 and UseButton == 0 and I.UI.getMode() == nil then\n\t\tfor i, items in ipairs(nearby.items) do\n\t\t\tlocal dist = (util.vector2(self.position.x, self.position.y) - util.vector2(items.position.x, items.position.y)):length()\n\t\t\tif dist < 100 and ((items.position.z - self.position.z) <= 150) and InFront(items) == true and UseButton==0 then\n\t\t\t\tUseButton = 1\n\t\t\t\tlocal nbritems = 0\n\t\t\t\tfor i, item in ipairs(types.Actor.inventory(self):getAll()) do\n\t\t\t\t\tif item.type ~= types.Book then\n\t\t\t\t\t\tnbritems = nbritems + 1\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tprint(nbritems)\n\t\t\t\tif (nbritems <= (types.NPC.getCapacity(self) - 1) or (items.type == types.Book) or (types.Player.inventory(self):countOf(string.gsub(items.recordId, \"_\", \"\")) > 0 and items.type.record(items).mwscript == \"\")) and PickUpItem[1] == nil then\n\t\t\t\t\titems:activateBy(self)\n\t\t\t\t\t--for i, item in ipairs(types.Actor.inventory(self):getAll()) do print(item) end\n\t\t\t\t\tPickUpItem[1] = items\n\t\t\t\t\tPickUpItem[2] = true\n\t\t\t\t\tbreak\n\t\t\t\telseif PickUpItem[1] == nil then\n\t\t\t\t\tPickUpItem[1] = items\n\t\t\t\t\tPickUpItem[2] = false\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tfor i, doors in ipairs(nearby.doors) do\n\t\t\tlocal dist = (self.position - doors.position):length()\n\t\t\tif dist < 80 and ((doors.position.z - self.position.z) <= 150) and InFront(doors) == true and UseButton==0 then\n\t\t\t\tdoors:activateBy(self)\n\t\t\t\tUseButton = 1\n\t\t\t\tprint(\"door\")\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tfor i, container in ipairs(nearby.containers) do\n\t\t\tlocal dist = (self.position - container.position):length()\n\t\t\tif dist < 100 and ((container.position.z - self.position.z) <= 150) and InFront(container) == true and UseButton==0 then\n\t\t\t\tcontainer:activateBy(self)\n\t\t\t\tUseButton = 1\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tfor i, actors in ipairs(nearby.actors) do\n\t\t\tlocal dist = (self.position - actors.position):length()\n\t\t\tif dist < 50 and ((actors.position.z - self.position.z) <= 150) and types.Actor.stats.dynamic.health(actors).current > 0 and InFront(actors) == true and actors.type ~= types.Player and UseButton==0 then\n\t\t\t\tactors:activateBy(self)\n\t\t\t\tUseButton = 1\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tfor i, activators in ipairs(nearby.activators) do\n\t\t\tlocal dist = (self.position - activators.position):length()\n\t\t\tif dist < 120 and ((activators.position.z - self.position.z) <= 150) and InFront(activators) == true and UseButton==0 and types.Activator.record(activators).id~=\"blood puddle\" then\n\t\t\t\tactivators:activateBy(self)\n\t\t\t\tUseButton = 1\n\t\t\t\tprint(\"activator\")\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\telseif input.isActionPressed(input.ACTION.Use) == false then\n\t\tUseButton = 0\n\tend\n\n\n\t------test marcher/courrir  ->ok\n\tif MoveForward(-0.2) == true and input.isActionPressed(input.ACTION.AutoMove) == true and input.isActionPressed(input.ACTION.Sneak) == false then\n\t\tself.controls.movement = 1\n\t\tself.controls.run = true\n\telseif MoveForward(-0.2) == true and input.isActionPressed(input.ACTION.Sneak) == false then\n\t\tself.controls.movement = 1\n\t\tself.controls.run = false\n\telseif MoveBackward(0.2) == true and input.isActionPressed(input.ACTION.Sneak) == false then\n\t\tself.controls.movement = -1\n\t\tself.controls.run = false\n\telse\n\t\tself.controls.movement = 0\n\tend\n\t------------- test rotation sans souris->ok\n\tif TurnRight(0.2) == true and input.isActionPressed(input.ACTION.Sneak) == false then\n\t\tself.controls.yawChange = 0.03\n\telseif TurnLeft(-0.2) == true and input.isActionPressed(input.ACTION.Sneak) == false then\n\t\tself.controls.yawChange = -0.03\n\tend\n\t------------- test visée Y fixe  -ok\n\tif types.Actor.getStance(self) == 1 then\n\t\tif storage.playerSection('RESettings1'):get('FixedCamera')==false and input.getAxisValue(input.CONTROLLER_AXIS.LeftY) then\n\t\t\t--print(input.getAxisValue(input.CONTROLLER_AXIS.LeftY))\n\t\t\tif self.rotation:getPitch()<(input.getAxisValue(input.CONTROLLER_AXIS.LeftY)*0.8) and input.getAxisValue(input.CONTROLLER_AXIS.LeftY)>0.06 then \n\t\t\t\tself.controls.pitchChange = 0.03\n\t\t\telseif self.rotation:getPitch()>(input.getAxisValue(input.CONTROLLER_AXIS.LeftY)*0.8) and input.getAxisValue(input.CONTROLLER_AXIS.LeftY)<-0.06  then \n\t\t\t\tself.controls.pitchChange = -0.03\n\t\t\telseif self.rotation:getPitch()>0.06 and (input.getAxisValue(input.CONTROLLER_AXIS.LeftY)>-0.06 and input.getAxisValue(input.CONTROLLER_AXIS.LeftY)<0.06) then\n\t\t\t\tself.controls.pitchChange = -0.03\n\t\t\telseif self.rotation:getPitch()<-0.06 and (input.getAxisValue(input.CONTROLLER_AXIS.LeftY)>-0.06 and input.getAxisValue(input.CONTROLLER_AXIS.LeftY)<0.06) then\n\t\t\t\tself.controls.pitchChange = 0.03\n\t\t\tend\n\t\t\t\n\t\telse\n\t\t\tif types.Actor.getStance(self) == 1 and not (self.rotation:getPitch() < 0.01 and self.rotation:getPitch() > -0.01) and not (MoveForward(-0.5)) and not (MoveBackward(0.5)) then\n\t\t\t\tif self.rotation:getPitch() <= 0.03 and self.rotation:getPitch() >= -0.03 then\n\t\t\t\telseif self.rotation:getPitch() < -0.03 then\n\t\t\t\t\tself.controls.pitchChange = 0.05\n\t\t\t\telseif self.rotation:getPitch() > 0.03 then\n\t\t\t\t\tself.controls.pitchChange = -0.05\n\t\t\t\tend\n\t\t\telseif types.Actor.getStance(self) == 1 and MoveBackward(0.5) and self.rotation:getPitch() < 0.45 then\n\t\t\t\tself.controls.pitchChange = 0.03\n\t\t\telseif types.Actor.getStance(self) == 1 and MoveForward(-0.5) and self.rotation:getPitch() > -0.45 then\n\t\t\t\tself.controls.pitchChange = -0.03\n\t\t\tend\n\t\tend\n\tend\n\n\n\n\t--------------Quick rotate\n\tif MoveBackward(0.2) == true and types.Actor.getStance(self) == 0 and input.isActionPressed(input.ACTION.AutoMove) == true and QuickTurnButton == 0 then\n\t\tTurningBack = 1\n\t\tQuickTurnButton = 1\n\telseif not (MoveBackward(0.2) == true) and input.isActionPressed(input.ACTION.AutoMove) == false then\n\t\tQuickTurnButton = 0\n\tend\n\n\tif TurningBack > 0 then\n\t\tself.controls.yawChange = math.pi / 10\n\t\tTurningBack = TurningBack + 1\n\t\tif TurningBack == 11 then\n\t\t\tTurningBack = 0\n\t\tend\n\tend\n\n\t--------Test dodge  -> ajouter les animations\n\tif input.isActionPressed(input.ACTION.Sneak) == true and MoveBackward(0.2) == true and DodgeButton == 0 and types.Actor.getStance(self) == 0 and storage.playerSection('RESettings1'):get('Dodge')==true then\n\t\tui.showMessage('Dodge Back')\n\t\tself.controls.jump = true\n\t\tself.controls.movement = -1\n\t\tDodgeButton = 1\n\telseif input.isActionPressed(input.ACTION.Sneak) == true and MoveForward(-0.2) == true and DodgeButton == 0 and types.Actor.getStance(self) == 0 and storage.playerSection('RESettings1'):get('Dodge')==true then\n\t\tui.showMessage('Dodge Front')\n\t\tself.controls.jump = true\n\t\tself.controls.movement = 1\n\t\tDodgeButton = 1\n\telseif input.isActionPressed(input.ACTION.Sneak) == true and TurnRight(0.2) == true and DodgeButton == 0 and types.Actor.getStance(self) == 0 and storage.playerSection('RESettings1'):get('Dodge')==true then\n\t\tui.showMessage('Dodge Right')\n\t\tself.controls.jump = true\n\t\tself.controls.sideMovement = 1\n\t\tDodgeButton = 1\n\telseif input.isActionPressed(input.ACTION.Sneak) == true and TurnLeft(-0.2) == true and DodgeButton == 0 and types.Actor.getStance(self) == 0 and storage.playerSection('RESettings1'):get('Dodge')==true then\n\t\tui.showMessage('Dodge Left')\n\t\tself.controls.jump = true\n\t\tself.controls.sideMovement = -1\n\t\tDodgeButton = 1\n\telseif input.isActionPressed(input.ACTION.Sneak) == true and DodgeButton == 1 then\n\t\tDodgeButton = 0\n\t\tself.controls.sideMovement = 0\n\t\tself.controls.movement = 0\n\t\tself.controls.jump = false\n\tend\n\n\t---------------test viser uniquement sur pression bouton ->ok\n\t--if types.Actor.getEquipment(self,16) then\n\t--\tprint(\"weaponcondition=\"..tostring(weaponcondition))\n\t--\tprint(\"Actual weaponcondition=\"..tostring(types.Item.itemData(types.Actor.getEquipment(self,16)).condition))\n\t--end\n\tif types.Actor.getEquipment(self, 16) and types.Weapon.record(types.Actor.getEquipment(self, 16)).type == 10 and weaponcondition > 0 and types.Actor.getStance(self) == 1 then\n\t\ttypes.Actor.getEquipment(self, 16):sendEvent('setCondition', { value = weaponcondition })\n\tend\n\tif types.Actor.getEquipment(self, 16) and types.Actor.getEquipment(self, 16) == EquippedWeapon and types.Item.itemData(types.Actor.getEquipment(self, 16)).condition ~= weaponcondition then\n\t\ttypes.Actor.getEquipment(self, 16):sendEvent('setCondition', { value = weaponcondition })\n\tend\n\n\tif input.isActionPressed(input.ACTION.ToggleWeapon) == false and input.isActionPressed(input.ACTION.Jump) == false and Instantammo ~= 0 then\n\t\tInstantammo = 0\n\t\ttypes.Actor.setEquipment(self, { [types.Actor.EQUIPMENT_SLOT.CarriedRight] = types.Actor.getEquipment(self, 16) })\n\t\tif types.Actor.inventory(self):findAll(AmmunitionTypes[types.Item.itemData(types.Actor.getEquipment(self, 16)).condition - 10000])[2] == nil then\n\t\t\tcore.sendGlobalEvent('RemoveItem',\n\t\t\t\t{\n\t\t\t\t\tItem = types.Actor.inventory(self):findAll(AmmunitionTypes\n\t\t\t\t\t\t[types.Item.itemData(types.Actor.getEquipment(self, 16)).condition - 10000])[1],\n\t\t\t\t\tnumber = types.Item\n\t\t\t\t\t\t.getEnchantmentCharge(types.Actor.getEquipment(self, 16))\n\t\t\t\t})\n\t\telse\n\t\t\tcore.sendGlobalEvent('RemoveItem',\n\t\t\t\t{\n\t\t\t\t\tItem = types.Actor.inventory(self):findAll(AmmunitionTypes\n\t\t\t\t\t\t[types.Item.itemData(types.Actor.getEquipment(self, 16)).condition - 10000])[2],\n\t\t\t\t\tnumber = types.Item\n\t\t\t\t\t\t.getEnchantmentCharge(types.Actor.getEquipment(self, 16))\n\t\t\t\t})\n\t\tend\n\tend\n\n\tif (input.isActionPressed(input.ACTION.ToggleWeapon) == true or input.isActionPressed(input.ACTION.Jump) == true) and types.Actor.getEquipment(self, 16) and (AmmoChecked == 1 or types.Actor.getEquipment(self, 16)) then ----degainer l'arme\n\t\ttypes.Actor.setStance(self, 1)\n\t\tself.controls.use = 1\n\n\t\tif types.Weapon.record(types.Actor.getEquipment(self, 16)).type == 10 then\n\t\t\t--print(AmmunitionTypes[types.Item.itemData(types.Actor.getEquipment(self,16)).condition-10000])\n\t\t\tif Instantammo == 0 and types.Actor.inventory(self):find(AmmunitionTypes[types.Item.itemData(types.Actor.getEquipment(self, 16)).condition - 10000]) then\n\t\t\t\tcore.sendGlobalEvent('createAmmosinInventory',\n\t\t\t\t\t{\tammo = AmmunitionTypes[types.Item.itemData(types.Actor.getEquipment(self, 16)).condition - 10000],\n\t\t\t\t\t\tnumber =types.Item.getEnchantmentCharge(types.Actor.getEquipment(self, 16)),\n\t\t\t\t\t\tactor = self\n\t\t\t\t\t})\n\t\t\t\tequipped[types.Actor.EQUIPMENT_SLOT.Ammunition] = types.Actor.inventory(self):find(AmmunitionTypes\n\t\t\t\t\t[types.Item.itemData(types.Actor.getEquipment(self, 16)).condition - 10000])\n\t\t\t\tequipped[types.Actor.EQUIPMENT_SLOT.CarriedRight] = EquippedWeapon\n\t\t\t\ttypes.Actor.setEquipment(self, equipped)\n\t\t\t\tInstantammo = 1\n\t\t\telseif Instantammo == 0 and types.Actor.inventory(self):find(AmmunitionTypes[types.Item.itemData(types.Actor.getEquipment(self, 16)).condition - 10000]) == nil then\n\t\t\t\tcore.sendGlobalEvent('createAmmosinInventory',\n\t\t\t\t\t{\n\t\t\t\t\t\tammo = AmmunitionTypes\n\t\t\t\t\t\t\t[types.Item.itemData(types.Actor.getEquipment(self, 16)).condition - 10000],\n\t\t\t\t\t\tnumber =\n\t\t\t\t\t\t\ttypes.Item.getEnchantmentCharge(types.Actor.getEquipment(self, 16)),\n\t\t\t\t\t\tactor = self\n\t\t\t\t\t})\n\t\t\t\tInstantammo = 1\n\t\t\telseif Instantammo == 1 then\n\t\t\t\tInstantammo = 2\n\t\t\telseif Instantammo == 2 then\n\t\t\t\tInstantammo = 3\n\t\t\t\tequipped[types.Actor.EQUIPMENT_SLOT.Ammunition] = types.Actor.inventory(self):find(AmmunitionTypes[types.Item.itemData(types.Actor.getEquipment(self, 16)).condition - 10000])\n\t\t\t\tequipped[types.Actor.EQUIPMENT_SLOT.CarriedRight] = EquippedWeapon\n\t\t\t\ttypes.Actor.setEquipment(self, equipped)\n\t\t\tend\n\t\tend\n\n\n\n\n\t\t----------------------------------------\n\t\tlocal actionbasetime = 4 *core.getGameTimeScale()\n\n\t\tif input.isActionPressed(input.ACTION.Use) and ((types.Item.getEnchantmentCharge(types.Actor.getEquipment(self, 16))~=nil and types.Item.getEnchantmentCharge(types.Actor.getEquipment(self, 16))>0) or types.Weapon.record(types.Actor.getEquipment(self, 16)).type ~= 10) and (core.getGameTime() - shootTimer) > (actionbasetime / types.Weapon.record(types.Actor.getEquipment(self, 16)).speed) then -- Fire!!\n\t\t\tself.controls.use = 0\n\t\t\tshootTimer = (core.getGameTime())\n\t\t\tif types.Weapon.record(types.Actor.getEquipment(self, 16)).type == 10 then\n\t\t\t\tcore.sendGlobalEvent('setCharge',{Item = types.Actor.getEquipment(self, 16),\tvalue = types.Item.getEnchantmentCharge(types.Actor.getEquipment(self, 16)) - 1})\n\t\t\t\tif types.Weapon.record(tostring(types.Actor.getEquipment(self, 18).recordId) .. \"SpecialAmmo\")~=true then\n\t\t\t\t\tCheckBulletOnScreen()\n\t\t\t\tend\n\t\t\tend\n\n\n\t\t\tlocal RotZ = self.rotation:getPitch()\n\t\t\tlocal RotX = self.rotation:getYaw()\n\t\t\tDamageLocalisation = nearby.castRay(\n\t\t\t\tutil.vector3(0, 0, 110) + self.position +\n\t\t\t\tutil.vector3(math.cos(RotZ) * math.sin(RotX), math.cos(RotZ) * math.cos(RotX), -math.sin(RotZ)) * 50,\n\t\t\t\tutil.vector3(0, 0, 110) + self.position +\n\t\t\t\tutil.vector3(math.cos(RotZ) * math.sin(RotX), math.cos(RotZ) * math.cos(RotX), -math.sin(RotZ)) * 1000000)\n\n\t\t\tif DamageLocalisation.hitObject and DamageLocalisation.hitObject.type == types.Creature then\n\t\t\t\tDamageLocalisation.hitObject:sendEvent('Damagelocalisation',\n\t\t\t\t\t{ Hitpos = DamageLocalisation.hitPos, Player = self })\n\t\t\tend\n\n\t\t\t---------------------------shotshell -----------en cours\n\t\t\tif types.Actor.getEquipment(self, 18) then\n\t\t\t\tif types.Weapon.record(types.Actor.getEquipment(self, 18)).enchant then\n\t\t\t\t\tif core.magic.enchantments.records[types.Weapon.record(types.Actor.getEquipment(self, 18)).enchant] and string.find(core.magic.enchantments.records[types.Weapon.record(types.Actor.getEquipment(self, 18)).enchant].id, \"shotshell\") then\n\t\t\t\t\t\t--print(\"self  \" .. tostring(self.position))\n\t\t\t\t\t\tlocal shelldistance = 1000\n\t\t\t\t\t\tlocal pellets = types.Weapon.record(types.Actor.getEquipment(self, 16)).chopMinDamage\n\t\t\t\t\t\tlocal r = 10\n\t\t\t\t\t\tSshellDamage = types.Weapon.record(types.Actor.getEquipment(self, 18)).thrustMinDamage\n\t\t\t\t\t\tSshellEnchant = core.magic.enchantments.records[types.Weapon.record(types.Actor.getEquipment(self, 18)).enchant]\n\t\t\t\t\t\tfor a = 1, pellets do\n\t\t\t\t\t\t\t--SShellPos=util.transform.move(0,0,70)*self.position+ util.transform.rotate(1,util.vector3(0,0,math.pi/2))self.rotation*util.vector3(0,1,0)*100\n\t\t\t\t\t\t\tSShellRotX = RotX + math.random(-5,5)*math.pi*types.Weapon.record(types.Actor.getEquipment(self, 16)).slashMinDamage/(180*11)\n\t\t\t\t\t\t\tSShellRotZ = RotZ + math.random(-5,5)*math.pi*types.Weapon.record(types.Actor.getEquipment(self, 16)).slashMinDamage/(180*11)\n\t\t\t\t\t\t\tlocal ray = nearby.castRay(util.vector3(0, 0, 80) + self.position,\n\t\t\t\t\t\t\t\tutil.vector3(0, 0, 80) + self.position +\n\t\t\t\t\t\t\t\tutil.vector3(math.cos(SShellRotZ) * math.sin(SShellRotX),math.cos(SShellRotZ) * math.cos(SShellRotX), -math.sin(SShellRotZ)) * shelldistance,{ ignore = self })\n\t\t\t\t\t\t\t--print(ray.hitPos)\n\t\t\t\t\t\t\t--print(ray.hitObject)\n\t\t\t\t\t\t\tif ray.hitObject and ray.hitObject.type == types.Creature and types.Actor.isDead(ray.hitObject)==nil then\n\t\t\t\t\t\t\t\tray.hitObject:sendEvent('DamageEffects', { damages = SshellDamage }) --,enchant=SshellEnchant})\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\t-----------------------------Special Ammo-----------------------------------------------------------------\n\t\t\t--print(tostring(types.Actor.getEquipment(self, 18).recordId) .. \"SpecialAmmo\")\n\t\t\t--------SpecialAmmo------ en cours\n\t\t\tif types.Actor.getEquipment(self, 18) then\n\t\t\t\tif types.Weapon.record(tostring(types.Actor.getEquipment(self, 18).recordId) .. \"SpecialAmmo\") then\n\t\t\t\t\t--print(tostring(types.Actor.getEquipment(self, 18).recordId) .. \"SpecialAmmo\")\n\t\t\t\t\tcore.sendGlobalEvent('CreateSpecialAmmo',\n\t\t\t\t\t\t{ Player = self, Ammo = tostring(types.Actor.getEquipment(self, 18).recordId .. \"SpecialAmmo\") })\n\t\t\t\tend\n\t\t\tend\n\t\t\t----------------------------------------------------------------------------------------------\n\n\n\t\telseif input.isActionPressed(input.ACTION.Use) and types.Item.getEnchantmentCharge(types.Actor.getEquipment(self, 16)) == 0 and (core.getGameTime()- shootTimer) > (actionbasetime / types.Weapon.record(types.Actor.getEquipment(self, 16)).speed) then\n\t\t\tui.showMessage(\"Weapon empty\")\n\t\t\tshootTimer = (core.getGameTime())\n\t\t\tambient.playSound(\"ClipEmpty\")\n\t\t\ttypes.Actor.setEquipment(self, {\n\t\t\t\t[types.Actor.EQUIPMENT_SLOT.CarriedRight] = types.Actor.getEquipment(self,\n\t\t\t\t\t16)\n\t\t\t})\n\t\telseif input.isActionPressed(input.ACTION.AutoMove) == true and (core.getGameTime() - shootTimer) > (actionbasetime / types.Weapon.record(types.Actor.getEquipment(self, 16)).speed) and storage.playerSection('RESettings1'):get('Reload')==true then\n\t\t\tshootTimer = (core.getGameTime())\n\n\t\t\tif (types.Actor.inventory(self):countOf(AmmunitionTypes[types.Item.itemData(types.Actor.getEquipment(self, 16)).condition - 10000]) - types.Item.getEnchantmentCharge(types.Actor.getEquipment(self, 16))) == 0 then\n\t\t\t\tambient.playSound(\"ClipEmpty\")\n\t\t\t\tui.showMessage(\"No more ammo\")\n\t\t\telseif types.Item.getEnchantmentCharge(types.Actor.getEquipment(self, 16)) == core.magic.enchantments.records[types.Weapon.record(types.Actor.getEquipment(self, 16)).enchant].charge then\n\t\t\t\tui.showMessage(\"Weapon full\")\n\t\t\telseif (types.Actor.inventory(self):countOf(AmmunitionTypes[types.Item.itemData(types.Actor.getEquipment(self, 16)).condition - 10000]) - types.Item.getEnchantmentCharge(types.Actor.getEquipment(self, 16))) >= (core.magic.enchantments.records[types.Weapon.record(types.Actor.getEquipment(self, 16)).enchant].charge - types.Item.getEnchantmentCharge(types.Actor.getEquipment(self, 16))) then\n\t\t\t\tammosloadable = core.magic.enchantments.records[types.Weapon.record(types.Actor.getEquipment(self, 16)).enchant]\n\t\t\t\t\t.charge - types.Item.getEnchantmentCharge(types.Actor.getEquipment(self, 16))\n\t\t\t\t--print(\"ammosload\" .. tostring(ammosloadable))\n\t\t\t\tui.showMessage(\"reload\")\n\t\t\t\tcore.sendGlobalEvent('setCharge',\n\t\t\t\t\t{\n\t\t\t\t\t\tItem = types.Actor.getEquipment(self, 16),\n\t\t\t\t\t\tvalue = core.magic.enchantments.records\n\t\t\t\t\t\t\t[types.Weapon.record(types.Actor.getEquipment(self, 16)).enchant].charge\n\t\t\t\t\t})\n\t\t\t\tInstantammo = 1\n\t\t\telseif (types.Actor.inventory(self):countOf(AmmunitionTypes[types.Item.itemData(types.Actor.getEquipment(self, 16)).condition - 10000]) - types.Item.getEnchantmentCharge(types.Actor.getEquipment(self, 16))) < (core.magic.enchantments.records[types.Weapon.record(types.Actor.getEquipment(self, 16)).enchant].charge - types.Item.getEnchantmentCharge(types.Actor.getEquipment(self, 16))) then\n\t\t\t\t--print(\"low ammo\")\n\t\t\t\tammosloadable = types.Actor.inventory(self):countOf(AmmunitionTypes\n\t\t\t\t\t\t[types.Item.itemData(types.Actor.getEquipment(self, 16)).condition - 10000]) -\n\t\t\t\t\ttypes.Item.getEnchantmentCharge(types.Actor.getEquipment(self, 16))\n\t\t\t\tui.showMessage(\"reload\")\n\t\t\t\tcore.sendGlobalEvent('setCharge',\n\t\t\t\t\t{\n\t\t\t\t\t\tItem = types.Actor.getEquipment(self, 16),\n\t\t\t\t\t\tvalue = ammosloadable +\n\t\t\t\t\t\t\ttypes.Item.getEnchantmentCharge(types.Actor.getEquipment(self, 16))\n\t\t\t\t\t})\n\t\t\t\tInstantammo = 1\n\t\t\tend\n\t\telseif ToggleWeaponButton == false then                         -------first autotarget\n\t\t\tweaponcondition = types.Item.itemData(types.Actor.getEquipment(self, 16)).condition\n\t\t\tif input.isActionPressed(input.ACTION.ToggleWeapon) == true and storage.playerSection('RESettings1'):get('AutoAim')==true then -----cible bow\n\t\t\t\tToggleWeaponButton = true\n\t\t\t\tchangetarget = 0\n\t\t\t\tTargetBOW = {\n\t\t\t\t\tposition = self.position +\n\t\t\t\t\t\tutil.vector3(math.cos(self.rotation:getPitch()) * math.sin(self.rotation:getYaw()),\n\t\t\t\t\t\t\tmath.cos(self.rotation:getPitch()) * math.cos(self.rotation:getYaw()),\n\t\t\t\t\t\t\t-math.sin(self.rotation:getPitch())) * 100000\n\t\t\t\t}\n\t\t\t\t--print(TargetBOW.position)\n\t\t\t\tfor i, actors in pairs(nearby.actors) do\n\t\t\t\t\tif actors.type == types.Creature and string.find(types.Creature.record(actors).mwscript, \"_attackobjects_\") == nil and (self.position - TargetBOW.position):length() > (self.position - actors.position):length() and types.Actor.stats.dynamic.health(actors).current > 0 then\n\t\t\t\t\t\tTargetBOW = actors\n\t\t\t\t\t\ttable.insert(TargetedBOW, TargetBOW)\n\t\t\t\t\t\t--print((self.position-TargetBOW.position):length())\n\t\t\t\t\t\t--print(TargetBOW)\n\t\t\t\t\tend\n\t\t\t\tend\n\n\t\t\t\tui.showMessage(tostring(TargetBOW))\n\t\t\t\tTurnToTarget(TargetBOW)\n\t\t\telseif input.isActionPressed(input.ACTION.Jump) == true and storage.playerSection('RESettings1'):get('AutoAim')==true then -------------cible attackobject\n\t\t\t\tToggleWeaponButton = true\n\t\t\t\tchangetarget = 0\n\t\t\t\tTargetAttackObject = {\n\t\t\t\t\tposition = self.position +\n\t\t\t\t\t\tutil.vector3(math.cos(self.rotation:getPitch()) * math.sin(self.rotation:getYaw()),\n\t\t\t\t\t\t\tmath.cos(self.rotation:getPitch()) * math.cos(self.rotation:getYaw()),\n\t\t\t\t\t\t\t-math.sin(self.rotation:getPitch())) * 100000\n\t\t\t\t}\n\t\t\t\t--print(TargetAttackObject.position)\n\t\t\t\tfor i, actors in pairs(nearby.actors) do\n\t\t\t\t\t--print(actors)\n\t\t\t\t\tif actors.type == types.Creature and types.Creature.record(actors).mwscript and string.find(types.Creature.record(actors).mwscript, \"_attackobjects_\") and (self.position - TargetAttackObject.position):length() > (self.position - actors.position):length() and types.Actor.stats.dynamic.health(actors).current > 0 then\n\t\t\t\t\t\tTargetAttackObject = actors\n\t\t\t\t\tend\n\t\t\t\tend\n\n\t\t\t\tui.showMessage(tostring(TargetAttackObject))\n\t\t\t\tTurnToTarget(TargetAttackObject)\n\t\t\tend\n\t\telseif input.isActionPressed(input.ACTION.Sneak) and input.isActionPressed(input.ACTION.ToggleWeapon) and changetarget == 0 and storage.playerSection('RESettings1'):get('AutoAim')==true then --------Change target BOW\n\t\t\tchangetarget = 1\n\t\t\tfor i, actors in pairs(nearby.actors) do\n\t\t\t\tBOWchecked = 0\n\t\t\t\tif actors.type == types.Creature and string.find(types.Creature.record(actors).mwscript, \"_attackobjects_\") == nil and types.Actor.stats.dynamic.health(actors).current > 0 then\n\t\t\t\t\tfor j, BOW in pairs(TargetedBOW) do\n\t\t\t\t\t\tif actors == BOW then\n\t\t\t\t\t\t\tBOWchecked = 1\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\tif BOWchecked == 0 then\n\t\t\t\t\t\tTargetBOW = actors\n\t\t\t\t\t\ttable.insert(TargetedBOW, TargetBOW)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\tif TargetedBOW[#TargetedBOW] == TargetBOW and BOWchecked == 1 then\n\t\t\t\tTargetedBOW = {}\n\t\t\tend\n\n\t\t\tui.showMessage(tostring(TargetBOW))\n\t\t\tTurnToTarget(TargetBOW)\n\t\telseif input.isActionPressed(input.ACTION.Sneak) and input.isActionPressed(input.ACTION.Jump) and changetarget == 0 then --------Change target attackobject\n\t\t\tchangetarget = 1\n\t\t\tfor i, actors in pairs(nearby.actors) do\n\t\t\t\tAttackObjectchecked = 0\n\t\t\t\tif actors.type == types.Creature and string.find(types.Creature.record(actors).mwscript, \"_attackobjects_\") and types.Actor.stats.dynamic.health(actors).current > 0 then\n\t\t\t\t\tfor j, AttackObject in pairs(TargetedAttackObject) do\n\t\t\t\t\t\tif actors == AttackObject then\n\t\t\t\t\t\t\tAttackObjectchecked = 1\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\t\tif AttackObjectchecked == 0 then\n\t\t\t\t\t\tTargetAttackObject = actors\n\t\t\t\t\t\ttable.insert(TargetedAttackObject, TargetAttackObject)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\tif TargetedAttackObject[#TargetedAttackObject] == TargetAttackObject and AttackObjectchecked == 1 then\n\t\t\t\tTargetedAttackObject = {}\n\t\t\tend\n\n\t\t\tui.showMessage(tostring(TargetAttackObject))\n\t\t\tTurnToTarget(TargetAttackObject)\n\t\telseif input.isActionPressed(input.ACTION.Sneak) == false then\n\t\t\tchangetarget = 0\n\t\tend\n\telse\n\t\ttypes.Actor.setStance(self, 0)\n\t\tToggleWeaponButton = false\n\t\tTargetedBOW = {}\n\t\tTargetAttackObject = {}\n\tend\n\n\tif onFrameHealth ~= types.Actor.stats.dynamic.health(self).current then\n\t\tonFrameHealth = types.Actor.stats.dynamic.health(self).current\n\tend\n\n\n\n\n\nend\n\n\n\n\n\n\n\n\n\n\nlocal function LiveSelection(data)\n\tLiveSelectionChoice1=data.Choice1\n\tLiveSelectionChoice2=data.Choice2\n\tnegativeshader:enable()\n\tLiveSelectionUI = ui.create({\n\t\tlayer = 'HUD',\n\t\ttype = ui.TYPE.Flex,\n\t\tprops = { autoSize = false, anchor = util.vector2(0.5, 0), relativeSize = util.vector2(1 / 2, 1 / 2), relativePosition = util.vector2(0.5, 0.5), },\n\t\tcontent = ui.content {\n\t\n\t\t\t{ template = nil, props = { relativeSize = util.vector2(1, 1 / 10) }, content = ui.content {\n\t\t\t\t{ type = ui.TYPE.Text, props = { text = data.Choice1, textSize = 60*textSizeRatio, textColor = util.color.rgb(0, 0, 0), relativePosition= util.vector2(0.5, 0.5), anchor = util.vector2(0.5, 0.5),} } } },\n\t\n\t\t\t{ type = ui.TYPE.Text, props = { text = \" \", textSize = 50*textSizeRatio, textColor = util.color.rgb(1, 1, 1) }, },\n\t\n\t\t\t{ template = nil, props = { relativeSize = util.vector2(1, 1 / 10) }, content = ui.content {\n\t\t\t\t{ type = ui.TYPE.Text, props = { text = data.Choice2, textSize = 60*textSizeRatio, textColor = util.color.rgb(0, 0, 0), relativePosition= util.vector2(0.5, 0.5) , anchor = util.vector2(0.5, 0.5),} } } } }\n\t})\n\tWrapperTemplate.props.color=Colors.Blue\nend\n\n\nfunction Framewait(frametowait)\n\tif frame == nil then\n\t\tframe = 0\n\telseif frame == frametowait then\n\t\tframe = 0\n\t\treturn (true)\n\telse\n\t\tframe = frame + 1\n\tend\nend\n\nlocal Saves\n\nlocal function SavingMenu(data)\n\n\t--print(\"saving\")\n\tcore.sendGlobalEvent(\"ReturnGlobalVariable\",{variable=\"SavingMenu\",player=self,value=0})\n\tSaves=data.Value\n\t--for i, save in pairs(Saves) do print(save['description']) end\n\t--print(Saves[11])\n\n\tif (SavingMenuUI == nil or SavingMenuUI.layout == nil) then\t\n\t\tI.UI.setMode(I.UI.MODE.Interface, { windows = {} })\n\t\tSavingMenuUI=ui.create({layer = 'HUD',  type = ui.TYPE.Image,\n\t\tprops = {relativeSize = util.vector2(1,1),relativePosition=util.vector2(0.5, 0.5),anchor = util.vector2(0.5, 0.5),resource = ui.texture{path =\"textures/bgd/RE2/TypeWritter.dds\"},},\n\t\tcontent=ui.content{\n\t\t\t{ type = ui.TYPE.Flex, props = {relativeSize = util.vector2(1,1),relativePosition=util.vector2(0.6, 0.7),anchor = util.vector2(0.5, 0.5)}, content=ui.content{\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \" 1 . \"..Saves[1][\"description\"],relativePosition=util.vector2(2/16, 7/16), textSize = 65*textSizeRatio, textColor = Colors.White} },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \" 2 . \"..Saves[2][\"description\"],relativePosition=util.vector2(2/16, 7/16), textSize = 65*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \" 3 . \"..Saves[3][\"description\"],relativePosition=util.vector2(2/16, 7/16), textSize = 65*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \" 4 . \"..Saves[4][\"description\"],relativePosition=util.vector2(2/16, 7/16), textSize = 65*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \" 5 . \"..Saves[5][\"description\"],relativePosition=util.vector2(2/16, 7/16), textSize = 65*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \" 6 . \"..Saves[6][\"description\"],relativePosition=util.vector2(2/16, 7/16), textSize = 65*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \" 7 . \"..Saves[7][\"description\"],relativePosition=util.vector2(2/16, 7/16), textSize = 65*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \" 8 . \"..Saves[8][\"description\"],relativePosition=util.vector2(2/16, 7/16), textSize = 65*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \" 9 . \"..Saves[9][\"description\"],relativePosition=util.vector2(2/16, 7/16), textSize = 65*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"10 . \"..Saves[10][\"description\"],relativePosition=util.vector2(2/16, 7/16), textSize = 65*textSizeRatio, textColor = Colors.White } },\n\t\t\t}},\n\t\t\t{ type = ui.TYPE.Flex, props = {relativeSize = util.vector2(1,1),relativePosition=util.vector2(0.55, 0.72),anchor = util.vector2(0.5, 0.5)}, content=ui.content{\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(30, 30), visible = true, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"\",relativePosition=util.vector2(2/16, 7/16), textSize = 35*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(30, 30), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"\",relativePosition=util.vector2(2/16, 7/16), textSize = 35*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(30, 30), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"\",relativePosition=util.vector2(2/16, 7/16), textSize = 35*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(30, 30), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"\",relativePosition=util.vector2(2/16, 7/16), textSize = 35*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(30, 30), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"\",relativePosition=util.vector2(2/16, 7/16), textSize = 35*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(30, 30), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"\",relativePosition=util.vector2(2/16, 7/16), textSize = 35*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(30, 30), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"\",relativePosition=util.vector2(2/16, 7/16), textSize = 35*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(30, 30), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"\",relativePosition=util.vector2(2/16, 7/16), textSize = 35*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(30, 30), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"\",relativePosition=util.vector2(2/16, 7/16), textSize = 35*textSizeRatio, textColor = Colors.White } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(30, 30), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t}}\n\t\t\n\t\t}})\n\t\t\t\n\tend\nend\n\n\n\nlocal function ElectricalPanelPuzzle()\n\tif (ElectricalPanelPuzzleUI == nil or ElectricalPanelPuzzleUI.layout == nil) then\n\t\tI.UI.setMode(I.UI.MODE.Interface, { windows = {} })\n\t\tElectricalPanelPuzzleUI=ui.create({layer = 'HUD',  type = ui.TYPE.Image,\n\t\tprops = {relativeSize = util.vector2(1,1),relativePosition=util.vector2(0.5, 0.5),anchor = util.vector2(0.5, 0.5),resource = ui.texture{path =\"textures/Puzzles/ElectricalPanel/ElectricalPanel.dds\"},},\n\t\tcontent=ui.content{\n\t\t\t{ type = ui.TYPE.Image,  props = {resource = ui.texture{path =\"textures/BorderBox.dds\"},relativeSize=util.vector2(1/20, 1/19),relativePosition=util.vector2(6/30, 12/28),} },\n\t\t\t{ type = ui.TYPE.Text,  props = { text = \"50\",relativePosition=util.vector2(2/16, 7/16), textSize = 90*textSizeRatio, textColor = Colors.Red } },\n\t\t\t{ type = ui.TYPE.Text,  props = { text = \"\",relativePosition=util.vector2(5/18, 7/16), textSize = 90*textSizeRatio, textColor = Colors.Red } },\n\t\t\t{ type = ui.TYPE.Text,  props = { text = \"\",relativePosition=util.vector2(8/19, 7/16), textSize = 90*textSizeRatio, textColor = Colors.Red } },\n\t\t\t{ type = ui.TYPE.Text,  props = { text = \"\",relativePosition=util.vector2(11/19, 7/16), textSize = 90*textSizeRatio, textColor = Colors.Red } },\n\t\t\t{ type = ui.TYPE.Text,  props = { text = \"\",relativePosition=util.vector2(15/19, 7/16), textSize = 90*textSizeRatio, textColor = Colors.Red } },\n\t\t\t{ type = ui.TYPE.Image,  props = {resource = ui.texture{path =\"textures/Puzzles/ElectricalPanel/selected.dds\"},relativeSize=util.vector2(1/20, 1/19),} },\n\t\t\t{ type = ui.TYPE.Image,  props = {resource = ui.texture{path =\"textures/Puzzles/ElectricalPanel/selected.dds\"},relativeSize=util.vector2(1/20, 1/19),} },\n\t\t\t{ type = ui.TYPE.Image,  props = {resource = ui.texture{path =\"textures/Puzzles/ElectricalPanel/selected.dds\"},relativeSize=util.vector2(1/20, 1/19),} },\n\t\t\t{ type = ui.TYPE.Image,  props = {resource = ui.texture{path =\"textures/Puzzles/ElectricalPanel/selected.dds\"},relativeSize=util.vector2(1/20, 1/19),} }\n\t\t\n\t\t}})\n\tend\nend\n\n--[[\nlocal function ChoiceYesNo(data)\n\tif (MenuYesNo == nil or MenuYesNo.layout == nil) then\n\t\tMWscriptGameObject = nil\n\t\tI.UI.setMode(I.UI.MODE.Interface, { windows = {} })\n\n\t\tMenuYesNoLayout = {\n\t\t\tlayer = 'Console',\n\t\t\ttype = ui.TYPE.Flex,\n\t\t\tprops = { autoSize = true, horizontal = true, relativePosition = util.vector2(1 / 2, 7 / 8), anchor = util.vector2(0, 0), },\n\t\t\tcontent = ui.content {\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(20, 20), visible = true, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"Yes\", textSize = 30*textSizeRatio, textColor = util.color.rgb(1, 1, 1) } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(20, 20), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"No\", textSize = 30*textSizeRatio, textColor = util.color.rgb(1, 1, 1) } },\n\t\t\t}\n\t\t}\n\n\t\tMenuYesNo = ui.create(MenuYesNoLayout)\n\t\tMWscriptGameObject = data.GameObject\n\tend\nend\n\n\nlocal function Choice15(data)\n\tif data.Value == -1 and (Menu15 == nil or Menu15.layout == nil) then\n\t\tMWscriptGameObject = nil\n\n\t\tI.UI.setMode(I.UI.MODE.Interface, { windows = {} })\n\n\t\tMenu15Layout = {\n\t\t\tlayer = 'Console',\n\t\t\ttype = ui.TYPE.Flex,\n\t\t\tprops = { autoSize = true, horizontal = true, relativePosition = util.vector2(1 / 2, 7 / 8), anchor = util.vector2(0, 0), },\n\t\t\tcontent = ui.content {\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(20, 20), visible = true, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"1\", textSize = 30*textSizeRatio, textColor = util.color.rgb(1, 1, 1) } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(20, 20), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"2\", textSize = 30*textSizeRatio, textColor = util.color.rgb(1, 1, 1) } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(20, 20), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"3\", textSize = 30*textSizeRatio, textColor = util.color.rgb(1, 1, 1) } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(20, 20), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"4\", textSize = 30*textSizeRatio, textColor = util.color.rgb(1, 1, 1) } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(20, 20), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"5\", textSize = 30*textSizeRatio, textColor = util.color.rgb(1, 1, 1) } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(20, 20), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"6\", textSize = 30*textSizeRatio, textColor = util.color.rgb(1, 1, 1) } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(20, 20), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"7\", textSize = 30*textSizeRatio, textColor = util.color.rgb(1, 1, 1) } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(20, 20), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"8\", textSize = 30*textSizeRatio, textColor = util.color.rgb(1, 1, 1) } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(20, 20), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"9\", textSize = 30*textSizeRatio, textColor = util.color.rgb(1, 1, 1) } },\n\t\t\t\t{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(20, 20), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } },\n\t\t\t\t{ type = ui.TYPE.Text,  props = { text = \"0\", textSize = 30*textSizeRatio, textColor = util.color.rgb(1, 1, 1) } },\n\t\t\t}\n\t\t}\n\n\t\tMenu15 = ui.create(Menu15Layout)\n\t\tMWscriptGameObject = data.GameObject\n\tend\nend\n]]--\n\n\n\n\n\nlocal MenuSelection={}\nlocal MenuSelectionContent={}\n\nlocal function ChoicesSelection(data)\n\tif MenuSelection==nil or MenuSelection.layout==nil then\n\t\tI.UI.setMode(I.UI.MODE.Interface, { windows = {} })\n\t\tMenuSelection={}\n\t\tMenuSelectionContent={}\n\t\tfor i, variable in pairs(data.selection) do\n\t\t\t--print(variable)\n\t\t\ttable.insert(MenuSelectionContent,{ type = ui.TYPE.Image, props = { anchor = util.vector2(0, 0), size = util.vector2(20, 20), visible = false, resource = ui.texture { path = \"textures/Choice select cursor.dds\" } } })\n\t\t\ttable.insert(MenuSelectionContent,{ type = ui.TYPE.Text,  props = { text = variable, textSize = 30*textSizeRatio, textColor = util.color.rgb(1, 1, 1) } })\n\t\tend\n\t\tMenuSelection=ui.create({layer = 'Console',type = ui.TYPE.Flex,props = { autoSize = true, horizontal = true, relativePosition = util.vector2(1 / 2, 7 / 8), anchor = util.vector2(0, 0), },\n\t\t\tcontent =ui.content(MenuSelectionContent)})\n\t\tMenuSelection.layout.content[1].props.visible=true\n\t\tMenuSelection:update()\n\tend\nend\n\n--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\n\nlocal function onFrame(dt)\n\n\n\tif camera.getMode()==0 and storage.playerSection('RESettings1'):get('FixedCamera')==false then\n\t\tcamera.setMode(1)\n\telseif (camera.getMode()==1 or camera.getMode()==2) and storage.playerSection('RESettings1'):get('FixedCamera')==true then\n\t\tself:sendEvent('CameraPos', {source=self, BGDepth=BGDepth,CamPos=CamPos, CamAng=CamAng, ActiveCam=activecam,ActiveBkg=activeBkg,MSKList=MSKlist})\n\tend \n\t\n\tif MapsUtils[\"RoomsVisited\"][1]==nil then -----------------First room added to maps\n\t\tLastRoom=self.cell.name\n\t\tfor i, Area in ipairs(Maps) do\n\t\t\tfor j, Zone in ipairs(Area[2]) do\n\t\t\t\tfor k, Room in ipairs(Zone[2]) do\n\t\t\t\t\tif Room==self.cell.name then\n\t\t\t\t\t\tif MapsUtils[\"RoomsVisited\"][i]==nil then\n\t\t\t\t\t\t\tMapsUtils[\"RoomsVisited\"][i]={}\n\t\t\t\t\t\tend\n\t\t\t\t\t\tMapsUtils[\"RoomsVisited\"][i][1]=Area[1]\n\t\t\t\t\t\tif \tMapsUtils[\"RoomsVisited\"][i][2]==nil then\n\t\t\t\t\t\t\tMapsUtils[\"RoomsVisited\"][i][2]={}\n\t\t\t\t\t\tend\n\t\t\t\t\t\tif \tMapsUtils[\"RoomsVisited\"][i][2][j]==nil then\n\t\t\t\t\t\t\tMapsUtils[\"RoomsVisited\"][i][2][j]={}\n\t\t\t\t\t\tend\n\t\t\t\t\t\tMapsUtils[\"RoomsVisited\"][i][2][j][1]=Zone[1]\n\t\t\t\t\t\tif \n\t\t\t\t\t\tMapsUtils[\"RoomsVisited\"][i][2][j][2]==nil then\n\t\t\t\t\t\t\tMapsUtils[\"RoomsVisited\"][i][2][j][2]={}\n\t\t\t\t\t\tend\n\t\t\t\t\t\tMapsUtils[\"RoomsVisited\"][i][2][j][2][k]=Room\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tif LastRoom~=self.cell.name then ----------New room added to maps\n\t\tLastRoom=self.cell.name\n\t\tfor i, Area in ipairs(Maps) do\n\t\t\t--print(Area[1])\n\t\t\tfor j, Zone in ipairs(Area[2]) do\n\t\t\t\t--print(Zone[1])\n\t\t\t\tfor k, Room in ipairs(Zone[2]) do\n\t\t\t\t\tif Room==self.cell.name then\n\t\t\t\t\t\tif MapsUtils[\"RoomsVisited\"][i]==nil then\n\t\t\t\t\t\t\tMapsUtils[\"RoomsVisited\"][i]={}\n\t\t\t\t\t\tend\n\t\t\t\t\t\tMapsUtils[\"RoomsVisited\"][i][1]=Area[1]\n\t\t\t\t\t\tif \tMapsUtils[\"RoomsVisited\"][i][2]==nil then\n\t\t\t\t\t\t\tMapsUtils[\"RoomsVisited\"][i][2]={}\n\t\t\t\t\t\tend\n\t\t\t\t\t\tif \tMapsUtils[\"RoomsVisited\"][i][2][j]==nil then\n\t\t\t\t\t\t\tMapsUtils[\"RoomsVisited\"][i][2][j]={}\n\t\t\t\t\t\tend\n\t\t\t\t\t\tMapsUtils[\"RoomsVisited\"][i][2][j][1]=Zone[1]\n\t\t\t\t\t\tif \n\t\t\t\t\t\tMapsUtils[\"RoomsVisited\"][i][2][j][2]==nil then\n\t\t\t\t\t\t\tMapsUtils[\"RoomsVisited\"][i][2][j][2]={}\n\t\t\t\t\t\tend\n\t\t\t\t\t\tMapsUtils[\"RoomsVisited\"][i][2][j][2][k]=Room\n\t\t\t\t\t\tprint(MapsUtils[\"RoomsVisited\"][i][2][j][2][k])\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\n\n--\t\tprint(\"check table\")\n--\t\tfor i,area in ipairs(MapsUtils[\"RoomsVisited\"]) do\n--\t\t\tprint(area[1])\n--\t\t\tfor j, zone in ipairs(area[2]) do\n--\t\t\t\tprint(zone[1])\n--\t\t\t\tfor k, room in pairs(zone[2]) do\n--\t\t\t\t\tprint(room)\n--\t\t\t\tend\n--\t\t\tend\n--\t\tend\n\n\n\tend\n\n\tif MapUI then\n\t\tif MapUI.layout then---------------------------- Navigate in Maps\n\t\t\t--print(MapsUtils.Blink.Room)\n\t\t\tif MapsUtils.Blink.Room>0 then\n\t\t\t\tif MapUI.layout.content[MapsUtils.Blink.Room] then\n\t\t\t\t\tif MapUI.layout.content[MapsUtils.Blink.Room].props.alpha>=1 then\n\t\t\t\t\t\tMapsUtils.Blink.Value=-.02\n\t\t\t\t\telseif MapUI.layout.content[MapsUtils.Blink.Room].props.alpha<=0.2 then\n\t\t\t\t\t\tMapsUtils.Blink.Value=0.02\n\t\t\t\t\tend\n\t\t\t\t\tMapUI.layout.content[MapsUtils.Blink.Room].props.alpha=MapUI.layout.content[MapsUtils.Blink.Room].props.alpha+MapsUtils.Blink.Value\n\t\t\t\t\tMapUI:update()\n\t\t\t\t\t\n\t\t\t\t\tif input.isActionPressed(input.ACTION.ToggleWeapon) and ToggleWeaponButtonMap==false then\n\t\t\t\t\t\tToggleWeaponButtonMap=true\n\t\t\t\t\t\t\tif CheckTableUD(MapsUtils[\"RoomsVisited\"][AreaMap][2][ZoneMap][2],RoomMap,\"+\")~=0 then\n\t\t\t\t\t\t\t\t--print(\"here\")\n\t\t\t\t\t\t\t\tRoomMap=CheckTableUD(MapsUtils[\"RoomsVisited\"][AreaMap][2][ZoneMap][2],RoomMap,\"+\")+RoomMap\n\t\t\t\t\t\t\t\tcore.sendGlobalEvent('AskObjectsInWorld',{player=self,maps=Maps})\n\t\t\t\t\t\t\t\tambient.playSound(\"Cursor\")\n\t\t\t\t\t\t\tend\n\n\t\t\t\t\telseif input.isActionPressed(input.ACTION.ToggleWeapon)==false and ToggleWeaponButtonMap==true then\n\t\t\t\t\t\tToggleWeaponButtonMap=false\n\t\t\t\t\telseif input.isActionPressed(input.ACTION.Sneak) and ToggleSneakButtonMap==false then\n\t\t\t\t\t\tToggleSneakButtonMap=true\n\t\t\t\t\t\t\tif CheckTableUD(MapsUtils[\"RoomsVisited\"][AreaMap][2][ZoneMap][2],RoomMap,\"-\")~=0 then\n\t\t\t\t\t\t\t\t--print(\"there\")\n\t\t\t\t\t\t\t\tRoomMap=CheckTableUD(MapsUtils[\"RoomsVisited\"][AreaMap][2][ZoneMap][2],RoomMap,\"-\")+RoomMap\n\t\t\t\t\t\t\t\tcore.sendGlobalEvent('AskObjectsInWorld',{player=self,maps=Maps})\n\t\t\t\t\t\t\t\tambient.playSound(\"Cursor\")\n\t\t\t\t\t\t\tend\n\t\t\t\t\telseif input.isActionPressed(input.ACTION.Sneak)==false and ToggleSneakButtonMap==true then\n\t\t\t\t\t\tToggleSneakButtonMap=false\t\t\t\t\n\t\t\t\t\tend\n\n\t\t\t\tend\n\t\t\tend\n\n\n\n\n\t\t\tif MoveForward(-0.2) and MenuSelectStop==false then ------------Show previous Zone\n\t\t\t\tMenuSelectStop=true\n\t\t\t\tfor i, zone in pairs(Maps[AreaMap][2]) do\n\t\t\t\t\tif Maps[AreaMap][2][ZoneMap+i] then\n\t\t\t\t\t\tif  MapsUtils[\"RoomsVisited\"][AreaMap]then\n\t\t\t\t\t\t\tif  MapsUtils[\"RoomsVisited\"][AreaMap][2][ZoneMap+i] then\n\t\t\t\t\t\t\t\tZoneMap=ZoneMap+i\n\t\t\t\t\t\t\t\tfor j, room in pairs(Maps[AreaMap][2][ZoneMap][2]) do\n\t\t\t\t\t\t\t\t\tif room== self.cell.name then\n\t\t\t\t\t\t\t\t\t\tRoomMap=j\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tRoomMap=CheckTableUD(MapsUtils[\"RoomsVisited\"][AreaMap][2][ZoneMap][2],0,\"+\")\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tcore.sendGlobalEvent('AskObjectsInWorld',{player=self,maps=Maps})\n\t\t\t\t\t\t\t\tambient.playSound(\"Book Page\")\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\telseif MapsUtils[\"RoomsMapped\"][AreaMap] then\n\t\t\t\t\t\t\tif MapsUtils[\"RoomsMapped\"][AreaMap][2][ZoneMap+i] then\n\t\t\t\t\t\t\t\tZoneMap=ZoneMap+i\n\t\t\t\t\t\t\t\tRoomMap=1\n\t\t\t\t\t\t\t\tcore.sendGlobalEvent('AskObjectsInWorld',{player=self,maps=Maps})\n\t\t\t\t\t\t\t\tambient.playSound(\"Book Page\")\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\telseif MoveBackward(0.2) and MenuSelectStop==false then ------------Show next Zone\n\t\t\t\tMenuSelectStop=true\n\t\t\t\tfor i, zone in pairs(Maps[AreaMap][2]) do\n\t\t\t\t\tif (ZoneMap-i)>0 then\n\t\t\t\t\t\tif  MapsUtils[\"RoomsVisited\"][AreaMap]then\n\t\t\t\t\t\t\tif  MapsUtils[\"RoomsVisited\"][AreaMap][2][ZoneMap-i] then\n\t\t\t\t\t\t\t\tZoneMap=ZoneMap-i\n\t\t\t\t\t\t\t\tfor j, room in pairs(Maps[AreaMap][2][ZoneMap][2]) do\n\t\t\t\t\t\t\t\t\tif room== self.cell.name then\n\t\t\t\t\t\t\t\t\t\tRoomMap=j\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tRoomMap=CheckTableUD(MapsUtils[\"RoomsVisited\"][AreaMap][2][ZoneMap][2],0,\"+\")\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tcore.sendGlobalEvent('AskObjectsInWorld',{player=self,maps=Maps})\n\t\t\t\t\t\t\t\tambient.playSound(\"Book Page\")\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\telseif MapsUtils[\"RoomsMapped\"][AreaMap] then\n\t\t\t\t\t\t\tif MapsUtils[\"RoomsMapped\"][AreaMap][2][ZoneMap-i] then\n\t\t\t\t\t\t\t\tZoneMap=ZoneMap-i\n\t\t\t\t\t\t\t\tRoomMap=1\n\t\t\t\t\t\t\t\tcore.sendGlobalEvent('AskObjectsInWorld',{player=self,maps=Maps})\n\t\t\t\t\t\t\t\tambient.playSound(\"Book Page\")\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\telseif TurnLeft(-0.2) and MenuSelectStop==false then ------------Show previous Area\n\t\t\t\tMenuSelectStop=true\n\t\t\t\tlocal lasti=0\n\t\t\t\tfor i, area in pairs(Maps) do\n\t\t\t\t\tif i<AreaMap then\n\t\t\t\t\t\tif  MapsUtils[\"RoomsVisited\"][i] or MapsUtils[\"RoomsMapped\"][i] then\n\t\t\t\t\t\t\tlasti=i\n\t\t\t\t\t\t\tfor k, zone in pairs(Maps[i][2]) do\n\t\t\t\t\t\t\t\tif MapsUtils[\"RoomsVisited\"][i] then\n\t\t\t\t\t\t\t\t\tif  MapsUtils[\"RoomsVisited\"][i][2][k] then\n\t\t\t\t\t\t\t\t\t\tZoneMap=k\n\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\telseif MapsUtils[\"RoomsMapped\"][i]then\n\t\t\t\t\t\t\t\t\tif  MapsUtils[\"RoomsMapped\"][i][2][k] then\n\t\t\t\t\t\t\t\t\t\tZoneMap=k\n\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tfor l, room in pairs(Maps[i][2][ZoneMap][2]) do\n\t\t\t\t\t\t\t\tRoomMap=l\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\telseif i==AreaMap then\n\t\t\t\t\t\tif lasti~=0 then\n\t\t\t\t\t\t\tAreaMap=lasti\n\t\t\t\t\t\t\tcore.sendGlobalEvent('AskObjectsInWorld',{player=self,maps=Maps})\n\t\t\t\t\t\t\tambient.playSound(\"Book Page\")\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\telseif TurnRight(0.2)  and MenuSelectStop==false then ------------Show next Area\n\t\t\t\tMenuSelectStop=true\t\n\t\t\t\tfor i, area in pairs(Maps) do\n\t\t\t\t\tif i>AreaMap then\n\t\t\t\t\t\tif  MapsUtils[\"RoomsVisited\"][i] or MapsUtils[\"RoomsMapped\"][i] then\n\t\t\t\t\t\t\tfor k, zone in pairs(Maps[i][2]) do\n\t\t\t\t\t\t\t\tif MapsUtils[\"RoomsVisited\"][i] then\n\t\t\t\t\t\t\t\t\tif  MapsUtils[\"RoomsVisited\"][i][2][k] then\n\t\t\t\t\t\t\t\t\t\tZoneMap=k\n\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\telseif MapsUtils[\"RoomsMapped\"][i] then\n\t\t\t\t\t\t\t\t\tif  MapsUtils[\"RoomsMapped\"][i][2][k] then\n\t\t\t\t\t\t\t\t\t\tZoneMap=k\n\t\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tfor l, room in pairs(Maps[i][2][ZoneMap][2]) do\n\t\t\t\t\t\t\t\tRoomMap=l\n\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tAreaMap=i\n\t\t\t\t\t\t\tcore.sendGlobalEvent('AskObjectsInWorld',{player=self,maps=Maps})\n\t\t\t\t\t\t\tambient.playSound(\"Book Page\")\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\n\n\n\t\t\t\n--\t\t\tif TurnRight(0.2) and CheckTableUD(MapsUtils[\"RoomsVisited\"],AreaMap,\"+\")~=0 and MenuSelectStop==false then\n--\t\t\t\tMenuSelectStop=true\n--\t\t\t\tAreaMap=CheckTableUD(MapsUtils[\"RoomsVisited\"][AreaMap],\"+\")+AreaMap\n--\t\t\t\tZoneMap=CheckTableUD(MapsUtils[\"RoomsVisited\"][AreaMap][2],0,\"+\")\n--\t\t\t\tRoomMap=CheckTableUD(MapsUtils[\"RoomsVisited\"][AreaMap][2][ZoneMap][2],0,\"+\")\n--\t\t\t\tcore.sendGlobalEvent('AskObjectsInWorld',{player=self,maps=Maps})\n--\t\t\t\tambient.playSound(\"Book Page\")\n--\t\t\tend\n--\t\t\tif TurnLeft(-0.2) and CheckTableUD(MapsUtils[\"RoomsVisited\"],AreaMap,\"-\")~=0 and MenuSelectStop==false then\n--\t\t\t\tMenuSelectStop=true\n--\t\t\t\tAreaMap=CheckTableUD(MapsUtils[\"RoomsVisited\"][AreaMap],\"-\")+AreaMap\n--\t\t\t\tZoneMap=CheckTableUD(MapsUtils[\"RoomsVisited\"][AreaMap][2],0,\"+\")\n--\t\t\t\tRoomMap=CheckTableUD(MapsUtils[\"RoomsVisited\"][AreaMap][2][ZoneMap][2],0,\"+\")\n--\t\t\t\tcore.sendGlobalEvent('AskObjectsInWorld',{player=self,maps=Maps})\n--\t\t\t\tambient.playSound(\"Book Page\")\n--\t\t\tend\n\n\n\t\tend\n\tend\n\n\n\n\n\n\n\tUI.RunningUI(MoveForward,MoveBackward,TurnLeft,TurnRight,Colors,Saves,SavingMenuUI, MapUI, MapsUtils, Maps)\n\n\tPuzzles.RunningPuzzles(self,input,util,core,I,MoveForward,MoveBackward,TurnLeft,TurnRight,Colors,\n\tMenuYesNo,Menu15,ElectricalPanelPuzzleUI,MenuSelection)\n\t\n\t\n\n\tPlaceCamera.PositionnningCamera(util,input,camera,core,BGDepth,activecam,activeBkg,MSKlist,TurnLeft,TurnRight,MoveForward,MoveBackward,SwitchZonePoints)\n\n\n\t---- picking item 2/2\n\tif PickUpItem[3] == true and PickUpItem[4] ~= true and (input.isActionPressed(input.ACTION.Use) or input.isActionPressed(input.ACTION.Inventory)) then\n\t\tShowInventory()\n\t\tInventoryItemSelected[2] = nil\n\t\tPickUpItem[4] = true\n\tend\n\tif PickUpItem[4] == true and PickUpItem[5] ~= true and input.isActionPressed(input.ACTION.Use) == false and input.isActionPressed(input.ACTION.Inventory) == false then\n\t\tPickUpItem[5] = true\n\tend\n\tif PickUpItem[2] == true and PickUpItem[5] == true and PickUpItem[6] ~= true and (input.isActionPressed(input.ACTION.Use) == true or input.isActionPressed(input.ACTION.Inventory) == true) then\n\t\tShowInventory()\n\t\tInventoryItemSelected[2] = nil\n\t\tPickUpItem[6] = true\n\tend\n\tif PickUpItem[6] == true and PickUpItem[7] ~= true and input.isActionPressed(input.ACTION.Use) == false and input.isActionPressed(input.ACTION.Inventory) == false then\n\t\tPickUpItem[7] = true\n\tend\n\tif (PickUpItem[7] == true or (PickUpItem[2] == false and PickUpItem[5] == true)) and (input.isActionPressed(input.ACTION.Use) == true or input.isActionPressed(input.ACTION.Inventory) == true) then\n\t\tInventory:destroy()\n\t\tShowItemIcon:destroy()\n\t\tPickUpItem = {}\n\t\tI.UI.removeMode(I.UI.MODE.Interface)\n\tend\n\n\n\n\n\n\t----------- Inventaire\n\tif I.UI.getMode() then\n\t\tOverload()\n\tend\n\n\n\n\n\tif Inventory and Inventory.layout and (MenuYesNo == nil or MenuYesNo.layout == nil) and (Menu15 == nil or Menu15.layout == nil) and (ElectricalPanelPuzzleUI == nil or ElectricalPanelPuzzleUI.layout == nil) then\n\t\tif doOnceMenu == 0 then\n\t\t\tdoOnceMenu = 1\n\t\t\tMenuSelectStop = false\n\t\t\tSelectedItemLayout = {\n\t\t\t\tlayer = 'Windows',\n\t\t\t\ttype = ui.TYPE.Image,\n\t\t\t\tprops = {\n\t\t\t\t\tsize = util.vector2(ui.screenSize().x / 10, ui.screenSize().y / 9),\n\t\t\t\t\trelativePosition = util.vector2(3 / 4, 1 / 3),\n\t\t\t\t\tanchor = util.vector2(0, 0),\n\t\t\t\t\tresource = ui.texture { path = \"textures/SelectedItem.dds\" },\n\t\t\t\t},\n\t\t\t}\n\t\t\tif InventoryItemSelected[2] then\n\t\t\t\tSelectedItem = ui.create(SelectedItemLayout)\n\t\t\tend\n\n\n\t\t\tif types.Actor.getEquipment(self, 16) then\n\t\t\t\ticonpath = types.Weapon.record(types.Actor.getEquipment(self, 16)).icon\n\t\t\telse\n\t\t\t\ticonpath = \"icons/No Item.dds\"\n\t\t\tend\n\t\t\tEquippedWeaponDisplay = ui.create({ name = \"EquippedWeapon\", layer = 'Windows', type = ui.TYPE.Image, props = { relativeSize = util.vector2(1 / 6, 1 / 6), relativePosition = util.vector2(1 / 2, 1 / 4), anchor = util.vector2(0.5, 0.5), resource = ui.texture { path = iconpath }, }, })\n\n\t\t\tPortrait = ui.create({ name = \"Portrait\", layer = 'Windows', type = ui.TYPE.Image, props = { relativeSize = util.vector2(1 / 7, 1 / 5), relativePosition = util.vector2(1 / 8, 1 / 4), anchor = util.vector2(0.5, 0.5), resource = ui.texture { path = 'textures/Portrait/' .. tostring(types.NPC.record(self).race) .. '.jpg' }, }, })\n\t\t\tif types.Actor.activeEffects(self):getEffect(\"poison\") and types.Actor.activeEffects(self):getEffect(\"poison\").magnitude > 0 then\n\t\t\t\tpath1 = 'textures/Lifebar/Poison/'\n\t\t\telseif (onFrameHealth / types.Actor.stats.dynamic.health(self).base) >= 0.8 then\n\t\t\t\tpath1 = 'textures/Lifebar/Fine/'\n\t\t\telseif (onFrameHealth / types.Actor.stats.dynamic.health(self).base) <= 0.3 then\n\t\t\t\tpath1 = 'textures/Lifebar/Danger/'\n\t\t\telse\n\t\t\t\tpath1 = 'textures/Lifebar/Caution/'\n\t\t\tend\n\n\t\t\tpath3 = path1 .. '1.jpg'\n\t\t\tLifebare = ui.create({ name = \"LifeBare\", layer = 'Windows', type = ui.TYPE.Image, props = { relativeSize = util.vector2(1 / 5, 1 / 6), relativePosition = util.vector2(1 / 6, 1 / 4), anchor = util.vector2(0.5, 0.5), resource = ui.texture { path = path3 }, }, })\n\t\tend\n\t\tif (core.getRealTime() - lifebarTimer) > 0.04 then\n\t\t\tpath2 = path2 + 1\n\t\t\tlifebarTimer = core.getRealTime()\n\t\t\tif path2 == 55 then\n\t\t\t\tpath2 = 1\n\t\t\t\tif types.Actor.activeEffects(self):getEffect(\"poison\") and types.Actor.activeEffects(self):getEffect(\"poison\").magnitude > 0 then\n\t\t\t\t\tpath1 = 'textures/Lifebar/Poison/'\n\t\t\t\telseif (onFrameHealth / types.Actor.stats.dynamic.health(self).base) >= 0.8 then\n\t\t\t\t\tpath1 = 'textures/Lifebar/Fine/'\n\t\t\t\telseif (onFrameHealth / types.Actor.stats.dynamic.health(self).base) <= 0.3 then\n\t\t\t\t\tpath1 = 'textures/Lifebar/Danger/'\n\t\t\t\telse\n\t\t\t\t\tpath1 = 'textures/Lifebar/Caution/'\n\t\t\t\tend\n\t\t\tend\n\n\t\t\tpath3 = path1 .. path2 .. \".jpg\"\n\t\t\tLifebare.layout.props = {\n\t\t\t\trelativeSize = util.vector2(1 / 5, 1 / 6),\n\t\t\t\trelativePosition = util.vector2(0, 0),\n\t\t\t\tanchor =\n\t\t\t\t\tutil.vector2(-1, -1),\n\t\t\t\tresource = ui.texture { path = path3 },\n\t\t\t}\n\t\t\tif Lifebare then\n\t\t\t\tLifebare:update()\n\t\t\tend\n\t\tend\n\n\n\n\t\t----------Naviguer dans inventaire\n\n\t\tif InventoryItemSelected[2] and TurnLeft(-0.2) == true and InventoryItemSelected[3] == nil and InventoryItemSelected[4] == nil and InventoryItemSelected[2] ~= 1 and MenuSelectStop == false then\n\t\t\tInventoryItemSelected[2] = InventoryItemSelected[2] - 1\n\t\t\tambient.playSound(\"Cursor\")\n\t\t\tMenuSelectStop = true\n\t\t\tif InventoryItems[InventoryItemSelected[2]] then\n\t\t\t\tui.showMessage(tostring(InventoryItems[InventoryItemSelected[2]].recordId))\n\t\t\tend\n\t\telseif InventoryItemSelected[2] and TurnRight(0.2) == true and InventoryItemSelected[3] == nil and InventoryItemSelected[4] == nil and InventoryItemSelected[2] ~= types.NPC.getCapacity(self) and MenuSelectStop == false then\n\t\t\tInventoryItemSelected[2] = InventoryItemSelected[2] + 1\n\t\t\tambient.playSound(\"Cursor\")\n\t\t\tMenuSelectStop = true\n\t\t\tif InventoryItems[InventoryItemSelected[2]] then\n\t\t\t\tui.showMessage(tostring(InventoryItems[InventoryItemSelected[2]].recordId))\n\t\t\tend\n\t\telseif InventoryItemSelected[2] and MoveBackward(0.2) == true and InventoryItemSelected[3] == nil and InventoryItemSelected[4] == nil and InventoryItemSelected[2] <= (types.NPC.getCapacity(self) - 2) and MenuSelectStop == false then\n\t\t\tInventoryItemSelected[2] = InventoryItemSelected[2] + 2\n\t\t\tambient.playSound(\"Cursor\")\n\t\t\tMenuSelectStop = true\n\t\t\tif InventoryItems[InventoryItemSelected[2]] then\n\t\t\t\tui.showMessage(tostring(InventoryItems[InventoryItemSelected[2]].recordId))\n\t\t\tend\n\t\telseif InventoryItemSelected[2] and MoveForward(-0.2) == true and InventoryItemSelected[3] == nil and InventoryItemSelected[4] == nil and InventoryItemSelected[2] >= 3 and MenuSelectStop == false then\n\t\t\tInventoryItemSelected[2] = InventoryItemSelected[2] - 2\n\t\t\tambient.playSound(\"Cursor\")\n\t\t\tMenuSelectStop = true\n\t\t\tif InventoryItems[InventoryItemSelected[2]] then\n\t\t\t\tui.showMessage(tostring(InventoryItems[InventoryItemSelected[2]].recordId))\n\t\t\tend\n\t\telseif InventoryItemSelected[2] and InventoryItemSelected[3] == nil and input.isActionPressed(input.ACTION.Use) == true and InventoryItems[InventoryItemSelected[2]] and ToggleUseButton == true then\n\t\t\tInventoryItemSelected[3] = 1\n\t\t\tToggleUseButton = false\n\t\t\t\n\t\t\tSubInventoryText1 = { layer = 'Windows', type = ui.TYPE.Text, props = { text = \"Equip\", textSize = 50*textSizeRatio, textColor = util.color.rgb(0.5, 0.5, 0.5) }, }\n\t\t\tSubInventoryText2 = { layer = 'Windows', type = ui.TYPE.Text, props = { text = \"Check\", textSize = 50*textSizeRatio, textColor = util.color.rgb(1, 1, 1) }, }\n\t\t\tSubInventoryText3 = { layer = 'Windows', type = ui.TYPE.Text, props = { text = \"Combine\", textSize = 50*textSizeRatio, textColor = util.color.rgb(1, 1, 1) }, }\n\n\n\t\t\tif storage.playerSection('RESettings1'):get('Drop')==true then\n\t\t\t\tSubInventoryText4 = { layer = 'Windows', type = ui.TYPE.Text, props = { text = \"Drop\", textSize = 50*textSizeRatio, textColor = util.color.rgb(1, 1, 1) }, }\n\t\t\t\tSubInventoryBKG=\"textures/Sub Menu Inventory.dds\"\n\t\t\telse\n\t\t\t\tSubInventoryText4 = { layer = 'Windows', type = ui.TYPE.Text, props = { text = \"\", textSize = 50*textSizeRatio, textColor = util.color.rgb(1, 1, 1) }, }\n\t\t\t\tSubInventoryBKG=\"textures/Sub Menu Inventory Dropless.dds\"\n\t\t\tend\n\n\n\n\n\n\t\t\tSubInventoryTexts = {\n\t\t\t\tlayer = 'Windows',\n\t\t\t\ttype = ui.TYPE.Flex,\n\t\t\t\tprops = {\n\t\t\t\t\trelativeSize = util.vector2(1 / 5, 1 / 2),\n\t\t\t\t\trelativePosition = util.vector2(0.5, 0.45),\n\t\t\t\t\tanchor = util.vector2(0.5, 0.5),\n\t\t\t\t},\n\t\t\t\tcontent = ui.content { SubInventoryText1,\n\t\t\t\t\t{ layer = 'Windows', type = ui.TYPE.Text, props = { text = \" \", textSize = 35*textSizeRatio } }, SubInventoryText2,\n\t\t\t\t\t{ layer = 'Windows', type = ui.TYPE.Text, props = { text = \" \", textSize = 35*textSizeRatio } }, SubInventoryText3,\n\t\t\t\t\t{ layer = 'Windows', type = ui.TYPE.Text, props = { text = \" \", textSize = 30*textSizeRatio } }, SubInventoryText4 }\n\t\t\t}\n\n\t\t\tSubInventory = ui.create{\n\t\t\t\tlayer = 'Windows',\n\t\t\t\ttype = ui.TYPE.Image,\n\t\t\t\tprops = {\n\t\t\t\t\tautoSize = true,\n\t\t\t\t\trelativeSize = util.vector2(1/ 5, 1/ 3),\n\t\t\t\t\trelativePosition = util.vector2(13 / 24, 1 / 2),\n\t\t\t\t\tanchor = util.vector2(0, 0),\n\t\t\t\t\tresource = ui.texture { path = SubInventoryBKG },\n\t\t\t\t},\n\n\t\t\t\tcontent=ui.content {SubInventoryTexts}\n\t\t\t}\n\t\tend\n\n\t\tif InventoryItemSelected[2] and SelectedItem then\n\t\t\tSelectedItemLayout.props.relativePosition = util.vector2(\n\t\t\t\t3 / 4 + 1 / 10 - (InventoryItemSelected[2] % 2) * 1 /\n\t\t\t\t10, 1 / 3 + (InventoryItemSelected[2] + InventoryItemSelected[2] % 2) / 2 * 1 / 9 - 1 / 9)\n\t\t\tSelectedItem:update()\n\t\tend\n\n\n\n\n\t\t-----------------Naviguer dans inventaire de combine\n\t\tif InventoryItemSelected[4] and TurnLeft(-0.2) == true and MenuSelectStop == false and InventoryItemSelected[4] ~= 1 then\n\t\t\tInventoryItemSelected[4] = InventoryItemSelected[4] - 1\n\t\t\tambient.playSound(\"Cursor\")\n\t\t\tMenuSelectStop = true\n\t\telseif InventoryItemSelected[4] and TurnRight(0.2) == true and InventoryItemSelected[4] ~= types.NPC.getCapacity(self) and MenuSelectStop == false then\n\t\t\tInventoryItemSelected[4] = InventoryItemSelected[4] + 1\n\t\t\tambient.playSound(\"Cursor\")\n\t\t\tMenuSelectStop = true\n\t\telseif InventoryItemSelected[4] and MoveBackward(0.2) == true and InventoryItemSelected[4] <= (types.NPC.getCapacity(self) - 2) and MenuSelectStop == false then\n\t\t\tInventoryItemSelected[4] = InventoryItemSelected[4] + 2\n\t\t\tambient.playSound(\"Cursor\")\n\t\t\tMenuSelectStop = true\n\t\telseif InventoryItemSelected[4] and MoveForward(-0.2) == true and InventoryItemSelected[4] >= 3 and MenuSelectStop == false then\n\t\t\tInventoryItemSelected[4] = InventoryItemSelected[4] - 2\n\t\t\tambient.playSound(\"Cursor\")\n\t\t\tMenuSelectStop = true\n\t\telseif InventoryItemSelected[4] and input.isActionPressed(input.ACTION.Use) == true and ToggleUseButton == true and InventoryItems[InventoryItemSelected[2]] ~= InventoryItems[InventoryItemSelected[4]] then\n\t\t\tlocal item1 = InventoryItems[InventoryItemSelected[2]]\n\t\t\tlocal item2 = InventoryItems[InventoryItemSelected[4]]\n\t\t\tlocal itemscombined = false\n\t\t\tif item1.type == types.Weapon and item2.type == types.Weapon then\n\t\t\t\tif (types.Weapon.record(item1).type == 10 and types.Weapon.record(item2).type == 13) or (types.Weapon.record(item1).type == 13 and types.Weapon.record(item2).type == 10) then\n\t\t\t\t\t--print(\"RELOAD/LOAD WEAPON\")\n\n\n\t\t\t\t\tif types.Weapon.record(item1).type == 10 and ToggleUseButton then\n\t\t\t\t\t\tInventoryReload(item1, item2)\n\t\t\t\t\telseif types.Weapon.record(item2).type == 10 and ToggleUseButton then\n\t\t\t\t\t\tInventoryReload(item2, item1)\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\telse\n\t\t\t\tfor i, item in ipairs(CombinedItems) do\n\t\t\t\t\tif itemscombined == false and ((item1.type.record(item1).id) == (string.lower(item[1])) and (item2.type.record(item2).id) == (string.lower(item[3]))) then\n\t\t\t\t\t\tif types.Actor.inventory(self):countOf(item1.recordId) < tonumber(item[2]) then\n\t\t\t\t\t\t\tfor i = 1, math.ceil(types.Actor.inventory(self):countOf(item1.recordId) / item[2] * item[6]) do\n\t\t\t\t\t\t\t\tcore.sendGlobalEvent('MoveInto', {\n\t\t\t\t\t\t\t\t\tItem = nil,\n\t\t\t\t\t\t\t\t\tcontainer = nil,\n\t\t\t\t\t\t\t\t\tactor = self,\n\t\t\t\t\t\t\t\t\tnewItem =\n\t\t\t\t\t\t\t\t\t\titem[5]\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tcore.sendGlobalEvent('RemoveItem',\n\t\t\t\t\t\t\t\t{ Item = item1, number = tonumber(types.Actor.inventory(self):countOf(item1.recordId)) })\n\t\t\t\t\t\t\tcore.sendGlobalEvent('RemoveItem', { Item = item2, number = tonumber(item[4]) })\n\t\t\t\t\t\t\titemscombined = true\n\t\t\t\t\t\telseif types.Actor.inventory(self):countOf(item2.recordId) < tonumber(item[4]) then\n\t\t\t\t\t\t\tfor i = 1, math.ceil(types.Actor.inventory(self):countOf(item2.recordId) / item[4] * item[6]) do\n\t\t\t\t\t\t\t\tcore.sendGlobalEvent('MoveInto', {\n\t\t\t\t\t\t\t\t\tItem = nil,\n\t\t\t\t\t\t\t\t\tcontainer = nil,\n\t\t\t\t\t\t\t\t\tactor = self,\n\t\t\t\t\t\t\t\t\tnewItem =\n\t\t\t\t\t\t\t\t\t\titem[5]\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tcore.sendGlobalEvent('RemoveItem', { Item = item1, number = tonumber(item[2]) })\n\t\t\t\t\t\t\tcore.sendGlobalEvent('RemoveItem',\n\t\t\t\t\t\t\t\t{ Item = item2, number = tonumber(types.Actor.inventory(self):countOf(item2.recordId)) })\n\t\t\t\t\t\t\titemscombined = true\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tfor i = 1, tonumber(item[6]) do\n\t\t\t\t\t\t\t\tcore.sendGlobalEvent('MoveInto', {\n\t\t\t\t\t\t\t\t\tItem = nil,\n\t\t\t\t\t\t\t\t\tcontainer = nil,\n\t\t\t\t\t\t\t\t\tactor = self,\n\t\t\t\t\t\t\t\t\tnewItem =\n\t\t\t\t\t\t\t\t\t\titem[5]\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tcore.sendGlobalEvent('RemoveItem', { Item = item1, number = tonumber(item[2]) })\n\t\t\t\t\t\t\tcore.sendGlobalEvent('RemoveItem', { Item = item2, number = tonumber(item[4]) })\n\t\t\t\t\t\t\titemscombined = true\n\t\t\t\t\t\tend\n\t\t\t\t\telseif itemscombined == false and ((item1.type.record(item1).id) == (string.lower(item[3])) and (item2.type.record(item2).id) == (string.lower(item[1]))) then\n\t\t\t\t\t\tif types.Actor.inventory(self):countOf(item1.recordId) < tonumber(item[4]) then\n\t\t\t\t\t\t\tfor i = 1, math.ceil(types.Actor.inventory(self):countOf(item1.recordId) / item[3] * item[6]) do\n\t\t\t\t\t\t\t\tcore.sendGlobalEvent('MoveInto', {\n\t\t\t\t\t\t\t\t\tItem = nil,\n\t\t\t\t\t\t\t\t\tcontainer = nil,\n\t\t\t\t\t\t\t\t\tactor = self,\n\t\t\t\t\t\t\t\t\tnewItem =\n\t\t\t\t\t\t\t\t\t\titem[5]\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tcore.sendGlobalEvent('RemoveItem',\n\t\t\t\t\t\t\t\t{ Item = item1, number = tonumber(types.Actor.inventory(self):countOf(item1.recordId)) })\n\t\t\t\t\t\t\tcore.sendGlobalEvent('RemoveItem', { Item = item2, number = tonumber(item[2]) })\n\t\t\t\t\t\t\titemscombined = true\n\t\t\t\t\t\telseif types.Actor.inventory(self):countOf(item2.recordId) < tonumber(item[2]) then\n\t\t\t\t\t\t\tfor i = 1, math.ceil(types.Actor.inventory(self):countOf(item2.recordId) / item[2] * item[6]) do\n\t\t\t\t\t\t\t\tcore.sendGlobalEvent('MoveInto', {\n\t\t\t\t\t\t\t\t\tItem = nil,\n\t\t\t\t\t\t\t\t\tcontainer = nil,\n\t\t\t\t\t\t\t\t\tactor = self,\n\t\t\t\t\t\t\t\t\tnewItem =\n\t\t\t\t\t\t\t\t\t\titem[5]\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tcore.sendGlobalEvent('RemoveItem', { Item = item1, number = tonumber(item[4]) })\n\t\t\t\t\t\t\tcore.sendGlobalEvent('RemoveItem',\n\t\t\t\t\t\t\t\t{ Item = item2, number = tonumber(types.Actor.inventory(self):countOf(item2.recordId)) })\n\t\t\t\t\t\t\titemscombined = true\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tfor i = 1, tonumber(item[6]) do\n\t\t\t\t\t\t\t\tcore.sendGlobalEvent('MoveInto', {\n\t\t\t\t\t\t\t\t\tItem = nil,\n\t\t\t\t\t\t\t\t\tcontainer = nil,\n\t\t\t\t\t\t\t\t\tactor = self,\n\t\t\t\t\t\t\t\t\tnewItem =\n\t\t\t\t\t\t\t\t\t\titem[5]\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tcore.sendGlobalEvent('RemoveItem', { Item = item1, number = tonumber(item[4]) })\n\t\t\t\t\t\t\tcore.sendGlobalEvent('RemoveItem', { Item = item2, number = tonumber(item[2]) })\n\t\t\t\t\t\t\titemscombined = true\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tInventoryItemSelected[4] = nil\n\t\t\t\tSelectedCombineItem:destroy()\n\t\t\t\tToggleUseButton = false\n\t\t\t\tFrameRefresh = true\n\t\t\tend\n\t\tend\n\n\t\tif InventoryItemSelected[4] and SelectedItem then\n\t\t\tSelectedCombineItemLayout.props.relativePosition = util.vector2(3 / 4 + 1 / 10 -\n\t\t\t\t(InventoryItemSelected[4] % 2) * 1 / 10,\n\t\t\t\t1 / 3 + (InventoryItemSelected[4] + InventoryItemSelected[4] % 2) /\n\t\t\t\t2 * 1 / 9 - 1 / 9)\n\t\t\tSelectedCombineItem:update()\n\t\tend\n\n\n\n\n\n\t\t-----------------Naviguer dans sub Menu inventaire\n\t\tif InventoryItemSelected[3] and InventoryItemSelected[4] == nil then\n\t\t\tif MoveForward(-0.2) == true and InventoryItemSelected[3] >= 3 and MenuSelectStop == false then\n\t\t\t\tambient.playSound(\"Cursor\")\n\t\t\t\tSubInventoryTexts.content[InventoryItemSelected[3]].props.textColor = util.color.rgb(1, 1, 1)\n\t\t\t\tSubInventory:update()\n\t\t\t\tInventoryItemSelected[3] = InventoryItemSelected[3] - 2\n\t\t\t\tMenuSelectStop = true\n\t\t\t\tSubInventoryTexts.content[InventoryItemSelected[3]].props.textColor = util.color.rgb(0.5, 0.5, 0.5)\n\t\t\t\tSubInventory:update()\n\t\t\telseif MoveBackward(0.2) == true and MenuSelectStop == false and ((InventoryItemSelected[3] <= 5 and storage.playerSection('RESettings1'):get('Drop')==true) or (InventoryItemSelected[3] <= 3 and storage.playerSection('RESettings1'):get('Drop')==false)) then\n\t\t\t\tambient.playSound(\"Cursor\")\n\t\t\t\tSubInventoryTexts.content[InventoryItemSelected[3]].props.textColor = util.color.rgb(1, 1, 1)\n\t\t\t\tSubInventory:update()\n\t\t\t\tInventoryItemSelected[3] = InventoryItemSelected[3] + 2\n\t\t\t\tMenuSelectStop = true\n\t\t\t\tSubInventoryTexts.content[InventoryItemSelected[3]].props.textColor = util.color.rgb(0.5, 0.5, 0.5)\n\t\t\t\tSubInventory:update()\n\t\t\telseif FrameRefresh == true and Framewait(3) then\n\t\t\t\tToggleUseButton = false\n\t\t\t\tFrameRefresh = false\n\t\t\t\tdoOnceMenu = 0\n\t\t\t\tif ShowItemIcon then\n\t\t\t\t\tShowItemIcon:destroy()\n\t\t\t\t\tShowItemIcon = nil\n\t\t\t\tend\n\t\t\t\tEquippedWeaponDisplay:destroy()\n\t\t\t\tPortrait:destroy()\n\t\t\t\tLifebare:destroy()\n\t\t\t\tSelectedItem:destroy()\n\t\t\t\tif SubInventory then\n\t\t\t\t\tSubInventory:destroy()\n\t\t\t\tend\n\t\t\t\tInventoryItemSelected[2] = 1\n\t\t\t\tInventoryItemSelected[3] = nil\n\t\t\t\tInventoryItems = ShowInventory()\n\t\t\telseif input.isActionPressed(input.ACTION.Use) and ToggleUseButton == true and FrameRefresh == false then ---------- EQUIP\n\t\t\t\tif InventoryItemSelected[3] == 1 then\n\t\t\t\t\tcore.sendGlobalEvent('UseItem',\n\t\t\t\t\t\t{ object = InventoryItems[InventoryItemSelected[2]], actor = self, force = true })\n\t\t\t\t\tif InventoryItems[InventoryItemSelected[2]].type == types.Potion then\n\t\t\t\t\t\tfor i, effect in ipairs(types.Potion.record(InventoryItems[InventoryItemSelected[2]]).effects) do\n\t\t\t\t\t\t\t--print(effect.effect.id)\n\t\t\t\t\t\t\t--print(core.magic.EFFECT_TYPE.RestoreHealth)\n\t\t\t\t\t\t\tif effect.effect.id == core.magic.EFFECT_TYPE.RestoreHealth then\n\t\t\t\t\t\t\t\tonFrameHealth = types.Actor.stats.dynamic.health(self).current +\n\t\t\t\t\t\t\t\t\t(effect.magnitudeMin + effect.magnitudeMin) / 2\n\t\t\t\t\t\t\t\tif onFrameHealth > types.Actor.stats.dynamic.health(self).base then\n\t\t\t\t\t\t\t\t\tonFrameHealth = types.Actor.stats.dynamic.health(self).base\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\t\t--print(onFrameHealth)\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\n\t\t\t\t\tFrameRefresh = true\n\t\t\t\telseif InventoryItemSelected[3] == 3 then ---------- CHECK\n\t\t\t\t\tif input.isActionPressed(input.ACTION.Use) and ToggleUseButton == true and ShowItemIcon then\n\t\t\t\t\t\tFrameRefresh = true\n\t\t\t\t\t\tfor i, item in ipairs(ExaminedItems) do\n\t\t\t\t\t\t\tif InventoryItems[InventoryItemSelected[2]].type.record(InventoryItems[InventoryItemSelected[2]]).id == string.lower(ExaminedItems[i][1]) then\n\t\t\t\t\t\t\t\tcore.sendGlobalEvent('RemoveItem',\n\t\t\t\t\t\t\t\t\t{ Item = InventoryItems[InventoryItemSelected[2]], number = 1 })\n\t\t\t\t\t\t\t\tcore.sendGlobalEvent('MoveInto',\n\t\t\t\t\t\t\t\t\t{ Item = nil, container = nil, actor = self, newItem = ExaminedItems[i][2] })\n\t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\n\t\t\t\t\tif ShowItemIcon == nil then\n\t\t\t\t\t\tlocal ItemDescription=\"\"\n\t\t\t\t\t\tif ItemDescriptions[InventoryItems[InventoryItemSelected[2]].type.record(InventoryItems[InventoryItemSelected[2]]).name] then\n\t\t\t\t\t\t\tShowItem(InventoryItems[InventoryItemSelected[2]],ItemDescriptions[InventoryItems[InventoryItemSelected[2]].type.record(InventoryItems[InventoryItemSelected[2]]).name])\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tShowItem(InventoryItems[InventoryItemSelected[2]],tostring(InventoryItems[InventoryItemSelected[2]]))\n\t\t\t\t\t\tend\n\t\t\t\t\t\tSubInventory:destroy()\n\t\t\t\t\tend\n\n\t\t\t\t\tToggleUseButton = false\n\t\t\t\telseif InventoryItemSelected[3] == 5 then ---------- COMBINE\n\t\t\t\t\tSelectedCombineItemLayout = {\n\t\t\t\t\t\tlayer = 'Windows',\n\t\t\t\t\t\ttype = ui.TYPE.Image,\n\t\t\t\t\t\tprops = {\n\t\t\t\t\t\t\tsize = util.vector2(ui.screenSize().x / 10, ui.screenSize().y / 9),\n\t\t\t\t\t\t\trelativePosition = util.vector2(3 / 4, 1 / 3),\n\t\t\t\t\t\t\tanchor = util.vector2(0, 0),\n\t\t\t\t\t\t\tresource = ui.texture { path = \"textures/SelectedItemCombine.dds\" },\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t\tSelectedCombineItem = ui.create(SelectedCombineItemLayout)\n\t\t\t\t\tInventoryItemSelected[4] = 1\n\n\t\t\t\t\tFrameRefresh = true\n\t\t\t\telseif InventoryItemSelected[3] == 7 then ---------- DROP\n\t\t\t\t\tcore.sendGlobalEvent('Teleport',\n\t\t\t\t\t\t{ object = InventoryItems[InventoryItemSelected[2]], position = self.position, rotation = nil })\n\t\t\t\t\tFrameRefresh = true\n\t\t\t\tend\n\t\t\t\tToggleUseButton = false\n\t\t\tend\n\t\t\t--print(InventoryItemSelected[3])\n\t\tend\n\n\t\t--print(InventoryItemSelected[2])\n\t\t--print(InventoryItems[InventoryItemSelected[2]])\n\tend\n\tif I.UI.getMode() == nil and doOnceMenu == 1 then\n\t\tambient.playSound(\"RECancel\")\n\t\tEquippedWeaponDisplay:destroy()\n\t\tPortrait:destroy()\n\t\tLifebare:destroy()\n\t\tInventory:destroy()\n\t\tif SelectedItem then\n\t\t\tSelectedItem:destroy()\n\t\tend\n\t\tif InventoryItemSelected[3] then\n\t\t\tSubInventory:destroy()\n\t\t\tif InventoryItemSelected[4] then\n\t\t\t\tSelectedCombineItem:destroy()\n\t\t\tend\n\t\tend\n\n\t\tInventoryItemSelected[2] = nil\n\t\tInventoryItemSelected[3] = nil\n\t\tInventoryItemSelected[4] = nil\n\t\tdoOnceMenu = 0\n\tend\n\n\tif I.UI.getMode() == nil then\n\t\tif ElectricalPanelPuzzleUI and ElectricalPanelPuzzleUI.layout then\n\t\t\tElectricalPanelPuzzleUI:destroy()\n\t\t\tambient.playSound(\"RECancel\")\n\t\tend\n\t\tif MenuYesNo and MenuYesNo.layout then\n\t\t\tMenuYesNo:destroy()\n\t\t\tcore.sendGlobalEvent(\"ReturnChoiceYesNo\", { value = -2, Player = self, GameObject = MWscriptGameObject })\n\t\t\tambient.playSound(\"RECancel\")\n\t\tend\n\t\tif Menu15 and Menu15.layout then\n\t\t\tMenu15:destroy()\n\t\t\tcore.sendGlobalEvent(\"ReturnChoice15\", { value = -2, Player = self, GameObject = MWscriptGameObject })\n\t\t\tambient.playSound(\"RECancel\")\n\t\tend\n\t\tif SavingMenuUI and SavingMenuUI.layout then\n\t\t\tSavingMenuUI:destroy()\n\t\t\tambient.playSound(\"RECancel\")\n\t\tend\n\t\tif MapUI and MapUI.layout then\n\t\t\tMapUI:destroy()\n\t\t\tambient.playSound(\"RECancel\")\n\t\tend\n\t\tif MenuSelection and MenuSelection.layout then\n\t\t\tMenuSelection:destroy()\n\t\t\tMenuSelection=nil\n\t\t\tambient.playSound(\"RECancel\")\n\t\tend\n\n\t\t--if ShowItemIcon and ShowItemIcon.layout then\n\t\t--\tShowItemIcon:destroy()\n\t\t--end\n\tend\n\n\n\n\n\n\t-----------ouvrir le menu inventaire\n\tif input.isActionPressed(input.ACTION.Inventory) == true and I.UI.getMode() == nil and Menu == false and types.Actor.getStance(self) == 0 then -- and PickUpItem[1]==nil then\n\t\t--I.UI.setMode(I.UI.MODE.Interface, {windows = {I.UI.WINDOW.QuickKeys,}})\n\t\tInventoryItems = ShowInventory()\n\t\tInventoryItemSelected[2] = 1\n\t\tui.showMessage(tostring(InventoryItems[InventoryItemSelected[2]].recordId))\n\telseif input.isActionPressed(input.ACTION.Inventory) == true and I.UI.getMode() and Menu == true and InventoryItemSelected[3] == nil then\n\t\t--I.UI.removeMode(I.UI.MODE.Interface)\n\telseif input.isActionPressed(input.ACTION.Inventory) == false and I.UI.getMode() then\n\t\tMenu = true\n\telseif input.isActionPressed(input.ACTION.Inventory) == false and I.UI.getMode() == nil then\n\t\tMenu = false\n\tend\n\n\n\tif I.UI.getMode() or (LiveSelectionUI and LiveSelectionUI.layout) then\n\t\tif MoveBackward(0.2) == nil and MoveForward(-0.2) == nil and TurnLeft(-0.2) == nil and TurnRight(0.2) == nil and MenuSelectStop == true then\n\t\t\tMenuSelectStop = false\n\t\tend\n\t\tif ToggleUseButton == false and input.isActionPressed(input.ACTION.Use) == false then\n\t\t\tToggleUseButton = true\n\t\t\tInventoryAmmunitionTypes = {}\n\t\tend\n\tend\n\n\n\t-------------Equiper une arme       \t\t\n\tif types.Actor.getEquipment(self, 16) and types.Weapon.record(types.Actor.getEquipment(self, 16)).type == 10 and types.Actor.getEquipment(self, 16) ~= EquippedWeapon then ---define ammo an auto equip basic ammos\n\t\tEquippedWeapon = types.Actor.getEquipment(self, 16)\n\t\tAmmunitionTypes = {}\n\t\tammoscharged = false\n\t\tAmmoChecked = 0\n\t\ttypes.Actor.getEquipment(self, 16):sendEvent('GiveWeaponInfos', { player = self, Equipped = true })\n\t\t--print(\"send\")\n\t\tweaponcondition = types.Item.itemData(types.Actor.getEquipment(self, 16)).condition\n\tend\n\n\t\n--\tif negativeshader:isEnabled() and (LiveSelectionUI == nil or LiveSelectionUI.layout==nil) and LiveSelectionTimer==0 then\n--\t\tLiveSelectionTimer=core.getRealTime()\n--\telseif negativeshader:isEnabled() and (core.getRealTime()-LiveSelectionTimer)>3 and (LiveSelectionUI == nil or LiveSelectionUI.layout==nil) then\n--\t\tLiveSelectionTimer=0\n--\t\tnegativeshader:disable()\n--\tend\n\tif negativeshader:isEnabled() and LiveSelectionUI == nil then\n\t\tnegativeshader:disable()\n\tend\n\n\n\tif LiveSelectionUI then\n\t\tprint(core.getRealTime())\n\t\tprint(LiveSelectionTimer)\n\t\tprint(core.getRealTime()-LiveSelectionTimer)\n\t\tif LiveSelectionTimer==0 then\n\t\t\tLiveSelectionTimer=core.getRealTime()\n\t\tend\n\t\tprint(LiveSelectionTimer)\n\t\tif (core.getRealTime()-LiveSelectionTimer)>9 then\n\t\t\tprint('9')\n\t\t\tcore.sendGlobalEvent(\"ReturnGlobalVariable\",{variable=LiveSelectionChoice1,player=self,value=3})\n\t\t\tcore.sendGlobalEvent(\"ReturnGlobalVariable\",{variable=LiveSelectionChoice2,player=self,value=0})\n\t\t\tLiveSelectionUI:destroy()\n\t\t\tLiveSelectionUI=nil\n\t\t\tLiveSelectionTimer=0\n\t\t\tnegativeshader:enable()\n\t\telseif (core.getRealTime()-LiveSelectionTimer)>7 then\n\t\t\tprint(\"7\")\n\t\t\tif I.UI.getMode() then \n\t\t\t\tnegativeshader:disable()\n\t\t\t\tI.UI.removeMode(I.UI.MODE.Interface)\n\t\t\t\tLiveSelectionUI.layout.content[1].content[1].props.textColor = util.color.rgb(1, 1, 1)\n\t\t\t\tLiveSelectionUI.layout.content[3].content[1].props.textColor = util.color.rgb(1, 1, 1)\n\t\t\t\tLiveSelectionUI.layout.props.relativePosition = util.vector2(0.5, 0.7)\n\t\t\t\tLiveSelectionUI:update()\n\t\t\tend\n\t\t\tif (string.byte(core.getRealTime()%1,3)==48 or string.byte(core.getRealTime()%1,3)==52 or string.byte(core.getRealTime()%1,3)==56) and WrapperTemplate.props.resource==Borderbox then\n\t\t\t\tWrapperTemplate.props.resource= TransparentBorderBox\n\t\t\t\tLiveSelectionUI:update()\n\t\t\telseif (string.byte(core.getRealTime()%1,3)==50 or string.byte(core.getRealTime()%1,3)==54 or string.byte(core.getRealTime()%1,3)==57) and WrapperTemplate.props.resource==TransparentBorderBox then\n\t\t\t\tWrapperTemplate.props.resource= Borderbox\n\t\t\t\tLiveSelectionUI:update()\n\t\t\tend\n\t\telseif (core.getRealTime()-LiveSelectionTimer)>6 then\n\t\t\tprint(\"6\")\n\t\t\tif  I.UI.getMode() == nil then\n\t\t\t\tWrapperTemplate.props.color=Colors.Red\n\t\t\t\tnegativeshader:enable()\n\t\t\t\tI.UI.setMode(I.UI.MODE.Interface, { windows = {} })\n\t\t\t\tLiveSelectionUI.layout.content[1].content[1].props.textColor = util.color.rgb(0, 0, 0)\n\t\t\t\tLiveSelectionUI.layout.content[3].content[1].props.textColor = util.color.rgb(0, 0, 0)\n\t\t\t\tif LiveSelectionUI.layout.content[1].template then\n\t\t\t\t\tLiveSelectionUI.layout.content[1].template=WrapperTemplate\n\t\t\t\telse\n\t\t\t\t\tLiveSelectionUI.layout.content[3].template=WrapperTemplate\n\t\t\t\tend\n\t\t\t\tLiveSelectionUI:update()\n\t\t\tend\n\t\telseif (core.getRealTime()-LiveSelectionTimer)>4 then\n\t\t\tprint(\"4\")\n\t\t\tif I.UI.getMode() then \n\t\t\t\tnegativeshader:disable()\n\t\t\t\tI.UI.removeMode(I.UI.MODE.Interface)\n\t\t\t\tLiveSelectionUI.layout.content[1].content[1].props.textColor = util.color.rgb(1, 1, 1)\n\t\t\t\tLiveSelectionUI.layout.content[3].content[1].props.textColor = util.color.rgb(1, 1, 1)\n\t\t\t\tLiveSelectionUI:update()\n\t\t\tend\n\t\t\tif (string.byte(core.getRealTime()%1,3)==48 or string.byte(core.getRealTime()%1,3)==54) and WrapperTemplate.props.resource==Borderbox then\n\t\t\t\tWrapperTemplate.props.resource= TransparentBorderBox\n\t\t\t\tLiveSelectionUI:update()\n\t\t\telseif (string.byte(core.getRealTime()%1,3)==50 or string.byte(core.getRealTime()%1,3)==56) and WrapperTemplate.props.resource==TransparentBorderBox then\n\t\t\t\tWrapperTemplate.props.resource= Borderbox\n\t\t\t\tLiveSelectionUI:update()\n\t\t\tend\n\t\telseif (core.getRealTime()-LiveSelectionTimer)>3 then\n\t\t\tprint(\"3\")\n\t\t\tif  I.UI.getMode() == nil then\n\t\t\t\tWrapperTemplate.props.color=Colors.Orange\n\t\t\t\tnegativeshader:enable()\n\t\t\t\tI.UI.setMode(I.UI.MODE.Interface, { windows = {} })\n\t\t\t\tLiveSelectionUI.layout.content[1].content[1].props.textColor = util.color.rgb(0, 0, 0)\n\t\t\t\tLiveSelectionUI.layout.content[3].content[1].props.textColor = util.color.rgb(0, 0, 0)\n\t\t\t\tif LiveSelectionUI.layout.content[1].template then\n\t\t\t\t\tLiveSelectionUI.layout.content[1].template=WrapperTemplate\n\t\t\t\telse\n\t\t\t\t\tLiveSelectionUI.layout.content[3].template=WrapperTemplate\n\t\t\t\tend\n\t\t\t\tLiveSelectionUI:update()\n\t\t\tend\n\t\telseif (core.getRealTime()-LiveSelectionTimer)>1 then\n\t\t\tprint(\"1\")\n\t\t\tif I.UI.getMode() then \n\t\t\t\tLiveSelectionUI.layout.content[1].template = WrapperTemplate\n\t\t\t\tnegativeshader:disable()\n\t\t\t\tI.UI.removeMode(I.UI.MODE.Interface)\n\t\t\t\tLiveSelectionUI.layout.content[1].content[1].props.textColor = util.color.rgb(1, 1, 1)\n\t\t\t\tLiveSelectionUI.layout.content[3].content[1].props.textColor = util.color.rgb(1, 1, 1)\n\t\t\t\tLiveSelectionUI.layout.props.relativePosition = util.vector2(0.5, 0.7)\n\t\t\t\tLiveSelectionUI:update()\n\t\t\tend\n\t\t\tif string.byte(core.getRealTime()%1,3)==48 and WrapperTemplate.props.resource==Borderbox then\n\t\t\t\tWrapperTemplate.props.resource= TransparentBorderBox\n\t\t\t\tLiveSelectionUI:update()\n\t\t\telseif string.byte(core.getRealTime()%1,3)==52 and WrapperTemplate.props.resource==TransparentBorderBox then\n\t\t\t\tWrapperTemplate.props.resource= Borderbox\n\t\t\t\tLiveSelectionUI:update()\n\t\t\tend\n\n\t\telseif (core.getRealTime()-LiveSelectionTimer)>0.1 and I.UI.getMode() == nil then\n\t\t\t\tprint(\"0\")\n\t\t\t\tI.UI.setMode(I.UI.MODE.Interface, { windows = {} })\n\t\tend\n\n\t\tif (MoveBackward(0.2) or MoveForward(-0.2)) and MenuSelectStop==false and I.UI.getMode() == nil then\n\t\t\tMenuSelectStop=true\n\t\t\tambient.playSound(\"Cursor\")\n\t\t\tif LiveSelectionUI.layout.content[1].template == nil then\n\t\t\t\tLiveSelectionUI.layout.content[1].template = WrapperTemplate\n\t\t\t\tLiveSelectionUI.layout.content[3].template = nil\n\t\t\telse\n\t\t\t\tLiveSelectionUI.layout.content[1].template = nil\n\t\t\t\tLiveSelectionUI.layout.content[3].template = WrapperTemplate\n\t\t\tend\n\t\t\tLiveSelectionUI:update()\n\t\telseif input.isActionPressed(input.ACTION.Use) and I.UI.getMode() == nil and (core.getRealTime()-LiveSelectionTimer)>0.1 then\n\t\t\tprint(\"use\")\n\t\t\tif LiveSelectionUI.layout.content[1].template then\n\t\t\t\tcore.sendGlobalEvent(\"ReturnGlobalVariable\",{variable=LiveSelectionChoice1,player=self,value=1})\n\t\t\t\tcore.sendGlobalEvent(\"ReturnGlobalVariable\",{variable=LiveSelectionChoice2,player=self,value=0})\n\t\t\telseif LiveSelectionUI.layout.content[3].template then\n\t\t\t\tcore.sendGlobalEvent(\"ReturnGlobalVariable\",{variable=LiveSelectionChoice1,player=self,value=2})\n\t\t\t\tcore.sendGlobalEvent(\"ReturnGlobalVariable\",{variable=LiveSelectionChoice2,player=self,value=0})\n\t\t\tend\n\t\t\tLiveSelectionUI:destroy()\n\t\t\tLiveSelectionUI=nil\n\t\t\tLiveSelectionTimer=0\n\t\t\tnegativeshader:enable()\n\t\tend\n\tend\n\tprint(input.isActionPressed(input.ACTION.Use))\nend\n\n\nlocal function onSave()\n\treturn{MapsUtils=MapsUtils}\n\nend\n\nlocal function onLoad(data)\n\tif data.MapsUtils then\n\t\tMapsUtils=data.MapsUtils\n\tend\nend\n\nlocal function ReturnObjectsInWorld(data)\n\tObjectsInWorld=data.Objects\n\tObjectsInMap=data.ObjectsInMap\n\tMapsUtils[\"RoomsMapped\"]=data.Mapped\n\n--\tprint(\"Table Mapped\")\n--\tfor j, area in ipairs(MapsUtils[\"RoomsMapped\"]) do\n--\t\tprint(\"j \"..j..\" Area \"..area)\n--\t\tfor k, zone in ipairs(area) do\n--\t\t\tprint(\"k \"..k..\" zonz \"..zone)\n--\t\tend\n--\tend\n\n--\tprint(\"return... \"..RoomMap)\n\tShowMap(AreaMap,ZoneMap,RoomMap)\n\nend\n\nreturn {\n\teventHandlers = {ChoicesSelection=ChoicesSelection,DefineSwitchZones=DefineSwitchZones,ReturnObjectsInWorld=ReturnObjectsInWorld, SavingMenu=SavingMenu, ElectricalPanelPuzzle=ElectricalPanelPuzzle, LiveSelection = LiveSelection, CameraPos = Camerapos, ReturnEquippedWeaponInfos = ReturnEquippedWeaponInfos, ReturnInventoryWeaponInfos = ReturnInventoryWeaponInfos, ChoiceYesNo = ChoiceYesNo, Choice15 = Choice15 },\n\tengineHandlers = {\n\t\tonSave=onSave,\n\t\tonLoad=onLoad,\n\t\tonFrame = onFrame,\n\t\tonUpdate = onUpdate\n\n\t}\n}\n",
    "Base Game V.0.11-54619--0-11-1716405109\\Resident Evil\\data\\scripts\\SpecialAmmo.lua": "local self=require('openmw.self')\nlocal types = require('openmw.types')\nlocal nearby=require('openmw.nearby')\nlocal util = require('openmw.util')\nlocal core = require('openmw.core')\nlocal timer=core.getRealTime()\nlocal Collision\n\nMove=false\nAmmo=nil\nVector=nil\n\nprint(\"activated\")\n\nlocal function start(data)\n    Move=true\n    Vector=data.Vector\n    print(data.Ammo)\n    Ammo=types.Weapon.record(data.Ammo)\nend\n\n\nreturn {\n\teventHandlers = {start=start},\n\tengineHandlers = {\n        onUpdate = function()\n            if Move==true then\n\n\n                core.sendGlobalEvent('Teleport', {object=self,position=self.position+Vector})\n\n                local Collision=nearby.castRay(self.position,self.position+Vector,{ignore=self})\n\n               -- if Collision.hitObject then\n                 --   print(Collision.hitObject)\n                   -- print(Collision.hitObject.type)\n                --end\n                if Collision.hitObject then\n                    if Collision.hitObject.type==types.Creature and types.Actor.stats.dynamic.health(Collision.hitObject).current>0  then\n                        print(Collision.hitObject)\n                        print(types.Actor.stats.dynamic.health(Collision.hitObject).current)\n                        Collision.hitObject:sendEvent('DamageEffects',{damages=Ammo.thrustMinDamage})\n                    end\n                end\n\n                if (core.getRealTime()-timer)>=1 or Collision.hit then\n                    core.sendGlobalEvent('Disable',{Object=self})\n                    --core.sendGlobalEvent('RemoveItem', {Item=self, number=1})\n                end\n\n            end\n\tend\n    ,\n\t}\n}",
    "Base Game V.0.11-54619--0-11-1716405109\\Resident Evil\\data\\scripts\\UI.lua": "local self = require('openmw.self')\nlocal nearby = require('openmw.nearby')\nlocal input = require('openmw.input')\nlocal ui = require('openmw.ui')\nlocal util = require('openmw.util')\nlocal types = require('openmw.types')\nlocal I = require('openmw.interfaces')\nlocal core = require('openmw.core')\nlocal ambient = require('openmw.ambient')\n\n\nlocal func_table={}\n\nlocal ToggleUseButton = false\nlocal MenuSelectStop = true\nlocal ElecPanPuzzle={}\nlocal SavingSelection=1\nlocal SavingDescription=\"\"\nlocal Saving=false\nlocal SavingLetter=4\nlocal Timer=0\nlocal ObjectsinWorld\n\n\n\nfunc_table.RunningUI=function(MoveForward,MoveBackward,TurnLeft,TurnRight,Colors,Saves,SavingMenuUI, MapUI, RoomsVisited, Maps)\n\n\n\tif SavingMenuUI and SavingMenuUI.layout then\n\t\tif MoveForward(-0.2) == true and MenuSelectStop == false and SavingSelection>1 and Saving==false then\n\t\t\tMenuSelectStop = true\n\t\t\tSavingMenuUI.layout.content[2].content[SavingSelection*2-1].props.visible=false\t\n\t\t\tSavingSelection=SavingSelection-1\n\t\t\tSavingMenuUI.layout.content[2].content[SavingSelection*2-1].props.visible=true\n\t\t\tSavingMenuUI:update()\n\t\t\tambient.playSound(\"Cursor\")\n\t\telseif MoveBackward(0.2) == true and MenuSelectStop == false and SavingSelection<10 and Saving==false then\n\t\t\tMenuSelectStop = true\n\t\t\tSavingMenuUI.layout.content[2].content[SavingSelection*2-1].props.visible=false\n\t\t\tSavingSelection=SavingSelection+1\n\t\t\tSavingMenuUI.layout.content[2].content[SavingSelection*2-1].props.visible=true\n\t\t\tSavingMenuUI:update()\n\t\t\tambient.playSound(\"Cursor\")\n\t\tend\n\n\t\t\n\t\tif input.isActionPressed(input.ACTION.Use) == true and ToggleUseButton == true and Saving==false then\n\t\t\tfor i, save in pairs(Saves) do print(save) end\n\t\t\tprint(Saves[11])\n\t\t\tToggleUseButton=false\n\t\t\tambient.playSound(\"REdecide\")\n\t\t\tSaving=true\n\t\t\tTimer=core.getRealTime()\n\t\t\tSaves[11]=Saves[11]+1\n\t\t\tSavingMenuUI.layout.content[1].content[SavingSelection].props.text=SavingMenuUI.layout.content[1].content[SavingSelection].props.text:sub(1,5)\n\t\t\tSavingDescription=SavingSelection..\" . \"..types.NPC.record(self).race..\"  /\"..(Saves[11])..\"/ \"..self.cell.name\n\t\t\tSavingMenuUI:update()\n\t\t\t--core.sendGlobalEvent('RemoveItem', { Item = types.Actor.inventory(self):find(\"ink ribbon\"), number = 1 })\n\t\t\tif Saves[SavingSelection][\"description\"]~=\"No Data\" then\n\t\t\t\ttypes.Player.sendMenuEvent(self, 'deleteSave', {directory=Saves[SavingSelection][\"directory\"],slotName=Saves[SavingSelection][\"slotName\"]})\n\t\t\tend\n\t\t\ttypes.Player.sendMenuEvent(self, 'Save', {value=types.NPC.record(self).race..\"  /\"..(Saves[11])..\"/ \"..self.cell.name,savenum=(Saves[11])})\n\t\t\tcore.sendGlobalEvent(\"ReceiveSaveNum\",{ savenum=Saves[11]})\n\n\t\tend\n\n\t\tif Saving ==true then\n\t\t\tif SavingLetter<=7 then\n\t\t\t\tI.UI.setMode(I.UI.MODE.Interface, { windows = {} })\n\t\t\tend\n\t\t\tif (core.getRealTime()-Timer)>0.3 then\n\t\t\t\tSavingLetter=SavingLetter+1\n\t\t\t\tTimer=core.getRealTime()\n\t\t\t\tif SavingDescription:sub(SavingLetter,SavingLetter)~=\"\" then\n\t\t\t\t\tSavingMenuUI.layout.content[1].content[SavingSelection].props.text=SavingMenuUI.layout.content[1].content[SavingSelection].props.text..SavingDescription:sub(SavingLetter,SavingLetter)\n\t\t\t\t\tSavingMenuUI:update()\n\t\t\t\t\tif SavingDescription:sub(SavingLetter,SavingLetter)==\" \" then \n\t\t\t\t\t\tambient.playSound(\"TypewriterSpace\")\n\t\t\t\t\telse\n\t\t\t\t\t\tambient.playSound(\"Typewriter\")\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\t\tI.UI.removeMode(I.UI.MODE.Interface)\n\t\t\t\t\tSavingMenuUI:destroy()\n\t\t\t\t\tSaving =false\n\t\t\t\t\tambient.playSound(\"RECancel\")\n\t\t\t\t\tSavingLetter=4\n\t\t\t\tend\n\t\t\tend\n\n\n\t\tend\n\n\telseif SavingSelection~=1 or Saving then\n\t\tSavingSelection=1\n\t\tSaving=false\n\tend\n\n\tif MapUI and MapUI.layout then\n\n\n\n\n\tend\n\n\n\n\n\n\n\n\n\n\n\n\tif I.UI.getMode() then\n\t\tif MoveBackward(0.2) == nil and MoveForward(-0.2) == nil and TurnLeft(-0.2) == nil and TurnRight(0.2) == nil and MenuSelectStop == true then\n\t\t\tMenuSelectStop = false\n\t\tend\n\t\tif ToggleUseButton == false and input.isActionPressed(input.ACTION.Use) == false then\n\t\t\tToggleUseButton = true\n\t\tend\n\telseif ToggleUseButton==true and I.UI.getMode()==nil then\n\t\tToggleUseButton = false\n\tend\n\nend\n\n\n\nreturn func_table\n",
    "Base Game V.0.11-54619--0-11-1716405109\\Resident Evil\\data\\scripts\\Weapon.lua": "local self=require('openmw.self')\nlocal types = require('openmw.types')\nlocal nearby=require('openmw.nearby')\nlocal util = require('openmw.util')\nlocal core = require('openmw.core')\n\nAmmunitionTypes={}\n\n\n\nif core.magic.enchantments.records[types.Weapon.record(self).enchant]~=nil and types.Weapon.record(self).type==10 then\n\n    local munitions =tostring(core.magic.enchantments.records[types.Weapon.record(self).enchant].id)\n    local startingmunitions\n    local word=\"\"\n\n    --print(types.Weapon.record(self).id)\n\n    for c in munitions:gmatch\".\" do\n        if not(c==\"_\") then\n            word=word..c\n        elseif c==\"_\" then\n            if startingmunitions==nil and word~=\"\" then\n                startingmunitions=word\n            else\n                for a, ammo in ipairs(types.Weapon.records) do\n                    if ammo.id==word then\n                          table.insert(AmmunitionTypes, ammo.id)\n                          --print(word)\n                    end\n                end\n            end\n            word=\"\"\n        end   \n\n    end\t\n\n    if types.Item.getEnchantmentCharge(self)==nil then\n        core.sendGlobalEvent('setCharge', {Item=self, value=tonumber(startingmunitions)})\n        types.Item.itemData(self).condition=10001\n    end\n\nend\t\n\nlocal function setCondition(data)\n    --print(self)\n    --SelfConditon=data.value\n    types.Item.itemData(self).condition=data.value\n    --print(\"weapon side : \"..tostring(types.Item.itemData(self).condition))\nend\n\nlocal function GiveWeaponInfos(data)\n    if data.Equipped==true then\n        data.player:sendEvent('ReturnEquippedWeaponInfos',{AmmunitionTypes=AmmunitionTypes})\n    elseif data.Equipped==false then\n        data.player:sendEvent('ReturnInventoryWeaponInfos',{AmmunitionTypes=AmmunitionTypes})\n    end\n    print(\"received\")\nend\n\nreturn {\n\teventHandlers = {setCondition=setCondition,GiveWeaponInfos=GiveWeaponInfos },\n\tengineHandlers = {\n        onUpdate = function()\n\n            \n            \n\tend\n    ,\n\t}\n}"
  }
}