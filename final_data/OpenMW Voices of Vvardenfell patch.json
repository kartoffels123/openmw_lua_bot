{
  "folder_name": "OpenMW Voices of Vvardenfell patch",
  "lua_files": {
    "OpenMW Voices of Vvardenfell patch All Dialogue-54137-0-52-1715723622\\scripts\\VoV_OpenMW\\global.lua": "local core = require(\"openmw.core\")\n\n\nreturn {\n\teventHandlers = {\n\t\tsoundSay = function(e) core.sound.say(e.file, e.obj) end,\n\t\tsoundStopSay = function(e) core.sound.stopSay(e) end\n\t},\n}\n",
    "OpenMW Voices of Vvardenfell patch All Dialogue-54137-0-52-1715723622\\scripts\\VoV_OpenMW\\player.lua": "local core = require(\"openmw.core\")\nlocal self = require(\"openmw.self\")\nlocal ambient = require(\"openmw.ambient\")\nlocal types = require(\"openmw.types\")\nlocal I = require(\"openmw.interfaces\")\nlocal vfs = require(\"openmw.vfs\")\nlocal storage = require(\"openmw.storage\")\n\nI.Settings.registerPage {\n   key = \"openmw_VoV\",\n   l10n = \"openmw_VoV\",\n   name = \"Voices of Vvardenfell\",\n   description = \"Original MWSE script by Kezyma and tewlwolow\\n\\nOpenMW conversion by Taitechnic v0.5\\n\\n\\nProvides a voiced dialogue framework for OpenMW.\"\n}\n\nI.Settings.registerGroup({\n   key = \"Settings_openmw_VoV\",\n   page = \"openmw_VoV\",\n   l10n = \"openmw_VoV\",\n   name = \"Preferences\",\n   permanentStorage = true,\n   settings = {\n      {\n         key = \"greetings\",\n         default = false,\n         renderer = \"checkbox\",\n         name = \"Greetings only mode?\",\n         description = \"Enabling requires OpenMW build released May 10 2024 or later\",\n      },\n      {\n         key = \"silence\",\n         default = false,\n         renderer = \"checkbox\",\n         name = \"Silence voice audio when dialogue is closed.\",\n      },\n   },\n})\n\nlocal settingsGroup = storage.playerSection(\"Settings_openmw_VoV\")\n\n\nlocal infoTable = {}\nif core.dialogue then\n  for _, record in pairs(core.dialogue.greeting.records) do\n      for _, v in ipairs(record.infos) do\n          infoTable[v.id] = record.id\n      end\n  end\nend\n\nlocal function isGreetingInfo(m)\n\tif not core.dialogue then return true end\n\tlocal dialogueType = infoTable[m]\n\tlocal greeting = false\n\tif dialogueType and string.sub(dialogueType, 1, 8) == \"greeting\" then greeting = true end\n\treturn greeting\nend\n\n\nlocal basePath = \"Vo\\\\AIV\"\nlocal vovActor = nil\n\n\n--- @param path string\n--- openmw if npc is not nearby, sound played on player instead of focused on npc\nlocal function playText(path, npc)\n\tlocal near = true\n\tif not self.cell.isExterior and self.cell ~= npc.cell then\n\t\tnear = false\n\telse\n\t\tnear = (self.position - npc.position):length() < 1000\n\tend\n\tif near then\n\t\tcore.sendGlobalEvent(\"soundSay\", {file=path, obj=npc})\n\telse\n\t\tambient.say(path)\n\tend\nend\n\n--- @param isMale boolean\n--- @return string\nlocal function getActorSex(isMale)\n\tif isMale then return \"m\" else return \"f\" end\nend\n\n--- @param path string\n--- @return boolean\nlocal function isPathValid(path)\n\treturn vfs.fileExists(\"Sound\\\\\" .. path)\nend\n\nlocal function constructVoicePath(race, sex, infoId, actorId, factionId, factionRank)\n\tlocal path = basePath\n\tif (race) then\n\t\tpath = path .. \"\\\\\" .. race\n\telse\n\t\tpath = path .. \"\\\\creature\"\n\tend\n\tif (sex) then\n\t\tpath = path .. \"\\\\\" .. sex\n\tend\n\tif (actorId) then\n\t\tpath = path .. \"\\\\\" .. actorId\n\tend\n\tif (factionId) then\n\t\tpath = path .. \"\\\\\" .. factionId\n\tend\n\tif (factionRank and factionRank >= 0) then\n\t\tpath = path .. \"\\\\\" .. factionRank\n\tend\n\tif (infoId) then\n\t\tpath = path .. \"\\\\\" .. infoId .. \".mp3\"\n\tend\n\treturn path\nend\n\nlocal function getVoicePath(race, sex, infoId, actorId, factionId, factionRank)\n\t-- Check the most specific path first.\n\tlocal primaryPath = constructVoicePath(race, sex, infoId, actorId, factionId, factionRank)\n\tif (isPathValid(primaryPath)) then return primaryPath end\n\t-- Find every possible fallback path.\n\tlocal secondaryPaths = {\n\t\tconstructVoicePath(race, sex, infoId, actorId, factionId, nil),\n\t\tconstructVoicePath(race, sex, infoId, actorId, nil, nil),\n\t\tconstructVoicePath(race, sex, infoId, nil, factionId, factionRank),\n\t\tconstructVoicePath(race, sex, infoId, nil, factionId, nil),\n\t\tconstructVoicePath(race, sex, infoId, nil, nil, nil),\n\t\tconstructVoicePath(nil, nil,  infoId, actorId, factionId, factionRank),\n\t\tconstructVoicePath(nil, nil,  infoId, actorId, factionId, nil),\n\t\tconstructVoicePath(nil, nil, infoId, actorId, nil, nil),\n\t\tconstructVoicePath(nil, nil,  infoId, nil, factionId, factionRank),\n\t\tconstructVoicePath(nil, nil,  infoId, nil, factionId, nil),\n\t\tconstructVoicePath(nil, nil, infoId, nil, nil, nil)\n\t}\n\t-- Return the first path in the list that is valid.\n\tfor k, path in pairs(secondaryPaths) do\n\t\tif(isPathValid(path)) then\n\t\t\treturn path\n\t\tend\n\tend\n\t-- If there's no line, return the most specific path for logging purposes.\n\treturn primaryPath\nend\n\n---@param e infoGetTextEventData\nlocal function onInfoGetText(e)\n\tlocal info = e.info\n\tif settingsGroup:get(\"greetings\") and not isGreetingInfo(info.id) then return end\n\tif vovActor then\n\t\tlocal infoId = info.id\n\t\tlocal actorId = vovActor.recordId\n\t\tlocal race = nil\n\t\tlocal sex = nil\n\t\tlocal factionId = nil\n\t\tlocal factionRank = nil\n\t\tif vovActor.type == types.NPC then\n\t\t\tlocal npcRecord = types.NPC.record(vovActor)\n\t\t\trace = npcRecord.race\n\t\t\tsex = getActorSex(npcRecord.isMale)\n\t\t\tlocal factions = types.NPC.getFactions(vovActor)\n\t\t\tfactionId = factions[1]\n\t\t\tif factionId ~= nil then\n\t\t\t\tfactionRank = types.NPC.getFactionRank(self, factionId)\n\t\t\tend\n\t\tend\n\t\tlocal voicePath = getVoicePath(race, sex, infoId, actorId, factionId, factionRank)\n\t\tif isPathValid(voicePath) then\n\t\t\tprint(string.format(\"VoV: Playing Line at %s\", voicePath))\n\t\t\tplayText(\"Sound\\\\\" .. voicePath, vovActor)\n\t\telse\n\t\t\tprint(string.format(\"VoV: Missing Line at %s\", voicePath))\n\t\tend\n\tend\nend\n\n\nlocal function silenceVoice(npc)\n\tvovActor = nil\n\tif not settingsGroup:get(\"silence\") then return end\n\tif core.sound.isSayActive(npc) then\n\t\tcore.sendGlobalEvent(\"soundStopSay\", npc)\n\tend\n\tambient.stopSay()\nend\n\nreturn {\n\teventHandlers = {\n\ttes3InfoGetText = onInfoGetText,\n\tUiModeChanged = function(m)\n\t\tif m.newMode == nil then\n\t\t\tif vovActor then silenceVoice(vovActor) end\n\t\tend\n\t\tif m.newMode == \"Dialogue\" and m.arg and m.arg ~= vovActor then\n\t\t\tvovActor = m.arg\n\t\tend\n\tend\n\t},\n}\n"
  }
}