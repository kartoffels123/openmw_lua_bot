{
  "folder_name": "Most Wanted Nerevarine",
  "lua_files": {
    "MostWantedNerevarine 1.2-53717-1-2-1724062088\\MostWantedNerevarine_1.2\\scripts\\MostWantedNerevarine\\menu.lua": "local util = require('openmw.util')\nlocal ui = require('openmw.ui')\nlocal async = require('openmw.async')\nlocal I = require('openmw.interfaces')\n\nI.Settings.registerRenderer(\n'MostWantedNerevarine_ScreenPosition',\nfunction(value, set)\n   local buttonSize = util.vector2(20, 20)\n   local containerSize = util.vector2(50, 50)\n   local update = async:callback(function(e)\n      if e.button ~= 1 then return end\n      local relativeOffset = (e.offset - buttonSize / 2):ediv(containerSize)\n      local clampedOffset = util.vector2(\n      util.clamp(relativeOffset.x, 0, 1),\n      util.clamp(relativeOffset.y, 0, 1))\n\n      set(clampedOffset)\n   end)\n   return {\n      template = I.MWUI.templates.box,\n      content = ui.content({\n         {\n            props = {\n               size = containerSize + buttonSize,\n            },\n            content = ui.content({\n               {\n                  template = I.MWUI.templates.borders,\n                  props = {\n                     anchor = value,\n                     relativePosition = value,\n                     size = buttonSize,\n                  },\n                  content = ui.content({\n                     {\n                        type = ui.TYPE.Image,\n                        props = {\n                           resource = ui.texture({ path = 'textures/menu_map_smark.dds' }),\n                           relativeSize = util.vector2(1, 1),\n                           color = util.color.rgb(202 / 255, 165 / 255, 96 / 255),\n                        },\n                     },\n                  }),\n               },\n            }),\n            events = {\n               mouseMove = update,\n               mousePress = update,\n            },\n         },\n      }),\n   }\nend)\n",
    "MostWantedNerevarine 1.2-53717-1-2-1724062088\\MostWantedNerevarine_1.2\\scripts\\MostWantedNerevarine\\player.lua": "local self = require('openmw.self')\nlocal types = require('openmw.types')\nlocal core = require('openmw.core')\nlocal async = require('openmw.async')\nlocal storage = require('openmw.storage')\nlocal ambient = require('openmw.ambient')\nlocal I = require('openmw.interfaces')\n\nrequire('scripts.MostWantedNerevarine.settings')\n\nlocal ui = require('scripts.MostWantedNerevarine.ui')\nlocal settings = storage.playerSection('SettingsMostWantedNerevarine')\n\nlocal BOUNTY_LEVEL_SOUND = {\n   [ui.BountyLevel.none] = 'item gold down',\n   [ui.BountyLevel.criminal] = 'bell1',\n   [ui.BountyLevel.arrest] = 'bell3',\n   [ui.BountyLevel.attack] = 'bell6',\n}\n\nlocal arrestThreshold = core.getGMST(\"iCrimeThreshold\")\nlocal attackThreshold = core.getGMST(\"iCrimeThresholdMultiplier\") * arrestThreshold\n\nlocal function getBountyLevel(bounty)\n   if bounty <= 0 then\n      return ui.BountyLevel.none\n   elseif bounty < arrestThreshold then\n      return ui.BountyLevel.criminal\n   elseif bounty < attackThreshold then\n      return ui.BountyLevel.arrest\n   else\n      return ui.BountyLevel.attack\n   end\nend\n\nlocal getCrimeLevel = types.Player.getCrimeLevel\n\nlocal bounty = getCrimeLevel(self.object)\nlocal bountyLevel = getBountyLevel(bounty)\n\nlocal function updateBountyLevel()\n   local newBountyLevel = getBountyLevel(bounty)\n   if newBountyLevel == bountyLevel then return end\n   bountyLevel = newBountyLevel\n   if settings:get('bountyLevelSound') then\n      local sound = BOUNTY_LEVEL_SOUND[bountyLevel]\n      ambient.playSound(sound, { scale = false })\n   end\nend\n\nlocal SETTING_CHANGE_VISIBLE = 15\nlocal lastSettingChangeTime = core.getRealTime() - SETTING_CHANGE_VISIBLE\nlocal function hasSettingUpdated()\n   return (core.getRealTime() - lastSettingChangeTime) < SETTING_CHANGE_VISIBLE\nend\nlocal lastWasSettingUpdated = false\n\n\nlocal function updateHud()\n   local menuMode = I.UI.getMode()\n\n   local hudVisible = I.UI.isHudVisible()\n   local inInterface = menuMode == 'Interface'\n   local showInMenu = menuMode == nil or (inInterface and not (settings:get('hideInMenu')))\n   local showNoBounty = bounty > 0 or not (settings:get('hideNoBounty'))\n   local showDetails = not (settings:get('hideDetails'))\n   local settingUpdated = menuMode == 'MainMenu' and hasSettingUpdated()\n\n   local showAnything = hudVisible and showNoBounty and showInMenu or settingUpdated\n   local showWindow = showAnything and showDetails and inInterface or (settingUpdated and showDetails)\n   local showHud = showAnything and not showWindow\n\n   ui.updateHud(showHud, bountyLevel)\n   ui.updateWindow(showWindow, bounty, bountyLevel)\nend\n\nupdateHud()\n\nsettings:subscribe(async:callback(function()\n   lastSettingChangeTime = core.getRealTime()\n   lastWasSettingUpdated = true\n   updateHud()\nend))\n\nlocal function update()\n   local newBounty = getCrimeLevel(self.object)\n   if newBounty == bounty then return end\n   bounty = newBounty\n   updateBountyLevel()\n   updateHud()\nend\n\nlocal lastMenuMode = nil\n\nlocal function frame()\n   if lastMenuMode ~= I.UI.getMode() or lastWasSettingUpdated ~= hasSettingUpdated() then\n      updateHud()\n      lastMenuMode = I.UI.getMode()\n      lastWasSettingUpdated = hasSettingUpdated()\n   end\nend\n\nreturn {\n   engineHandlers = {\n      onUpdate = update,\n      onFrame = frame,\n   },\n}\n",
    "MostWantedNerevarine 1.2-53717-1-2-1724062088\\MostWantedNerevarine_1.2\\scripts\\MostWantedNerevarine\\settings.lua": "local util = require('openmw.util')\nlocal I = require('openmw.interfaces')\n\nI.Settings.registerPage({\n   key = 'MostWantedNerevarine',\n   l10n = 'MostWantedNerevarine',\n   name = 'page_name',\n   description = 'page_description',\n})\n\nI.Settings.registerGroup({\n   key = 'SettingsMostWantedNerevarine',\n   page = 'MostWantedNerevarine',\n   l10n = 'MostWantedNerevarine',\n   name = \"ui_settings_group\",\n   permanentStorage = false,\n   settings = {\n      {\n         key = 'hideNoBounty',\n         name = \"hideNoBounty_name\",\n         default = true,\n         renderer = 'checkbox',\n      },\n      {\n         key = 'hideInMenu',\n         name = \"hideInMenu_name\",\n         default = false,\n         renderer = 'checkbox',\n      },\n      {\n         key = 'hideDetails',\n         name = 'hideDetails_name',\n         default = false,\n         renderer = 'checkbox',\n      },\n      {\n         key = 'iconSize',\n         name = 'iconSize_name',\n         description = 'iconSize_description',\n         default = 48,\n         renderer = 'number',\n         argument = {\n            integer = true,\n            min = 1,\n         },\n      },\n      {\n         key = 'screenPosition',\n         name = 'screenPosition_name',\n         default = util.vector2(0.5, 0),\n         renderer = 'MostWantedNerevarine_ScreenPosition',\n      },\n      {\n         key = 'verticalHud',\n         name = 'verticalHud_name',\n         default = false,\n         renderer = 'checkbox',\n      },\n      {\n         key = 'bountyLevelSound',\n         name = 'bountyLevelSound_name',\n         default = true,\n         renderer = 'checkbox',\n      },\n   },\n})\n",
    "MostWantedNerevarine 1.2-53717-1-2-1724062088\\MostWantedNerevarine_1.2\\scripts\\MostWantedNerevarine\\ui.lua": "local ui = require('openmw.ui')\nlocal util = require('openmw.util')\nlocal core = require('openmw.core')\nlocal storage = require('openmw.storage')\nlocal I = require('openmw.interfaces')\n\nlocal settings = storage.playerSection('SettingsMostWantedNerevarine')\n\nlocal BountyLevel = {\n   none = 0,\n   criminal = 1,\n   arrest = 2,\n   attack = 3,\n}\n\nlocal sealIcon = ui.texture({ path = 'bookart/moragtong.dds' })\nlocal goldIcon = ui.texture({ path = 'icons/gold.dds' })\nlocal inactiveShading = util.color.rgb(0.3, 0.3, 0.3)\n\nlocal l10n = core.l10n('MostWantedNerevarine')\n\nlocal padding = {\n   props = { size = util.vector2(1, 1) * 10 },\n}\n\nlocal function renderSeals(level, horizontal)\n   local wrapper = {\n      type = ui.TYPE.Flex,\n      props = {\n         horizontal = horizontal,\n         arrange = ui.ALIGNMENT.Center,\n      },\n      content = ui.content({\n         padding,\n      }),\n   }\n   local sealSize = settings:get('iconSize')\n   local sealPaddingSize = math.ceil(sealSize * 0.25)\n   local sealPadding = {\n      props = { size = util.vector2(1, 1) * sealPaddingSize },\n   }\n   for i = BountyLevel.criminal, BountyLevel.attack do\n      local seal = {\n         type = ui.TYPE.Image,\n         props = {\n            size = util.vector2(1, 1) * sealSize,\n            resource = sealIcon,\n         },\n      }\n      if i > level then\n         seal.props.color = inactiveShading\n      end\n      wrapper.content:add(seal)\n      wrapper.content:add(sealPadding)\n   end\n   return wrapper\nend\n\nlocal function levelHintKey(level)\n   for key, i in pairs(BountyLevel) do\n      if i == level then\n         return 'hint_' .. key\n      end\n   end\n   error('Invalid bounty level: ' .. tostring(level))\nend\n\nlocal function renderHorizontalDetails(bounty, level)\n   local bountyIcon = {\n      type = ui.TYPE.Image,\n      props = {\n         resource = goldIcon,\n         size = util.vector2(1, 1) * 16,\n      },\n   }\n\n   local bountyText = {\n      template = I.MWUI.templates.textNormal,\n      props = {\n         text = tostring(bounty),\n      },\n   }\n\n   local levelHint = {\n      template = I.MWUI.templates.textNormal,\n      props = {\n         relativeSize = util.vector2(1, 0),\n         size = util.vector2(16, 16),\n         text = l10n(levelHintKey(level)),\n      },\n      external = {\n         stretch = 1,\n      },\n   }\n\n   return {\n      type = ui.TYPE.Flex,\n      props = {\n         horizontal = true,\n         arrange = ui.ALIGNMENT.Center,\n      },\n      content = ui.content({\n         padding,\n         bountyIcon,\n         padding,\n         bountyText,\n         padding,\n         levelHint,\n         padding,\n      }),\n   }\nend\n\nlocal function renderVerticalDetails(bounty, level)\n   local bountyIcon = {\n      type = ui.TYPE.Image,\n      props = {\n         resource = goldIcon,\n         size = util.vector2(1, 1) * 16,\n      },\n   }\n\n   local bountyText = {\n      template = I.MWUI.templates.textNormal,\n      props = {\n         text = tostring(bounty),\n      },\n   }\n\n   local bountyRow = {\n      type = ui.TYPE.Flex,\n      props = {\n         horizontal = true,\n         arrange = ui.ALIGNMENT.Center,\n      },\n      content = ui.content({\n         bountyIcon, padding, bountyText,\n      }),\n   }\n\n   local levelHint = {\n      template = I.MWUI.templates.textParagraph,\n      props = {\n         text = l10n(levelHintKey(level)),\n      },\n      external = {\n         stretch = 1,\n      },\n   }\n\n   return {\n      type = ui.TYPE.Flex,\n      props = {\n         horizontal = false,\n      },\n      content = ui.content({\n         bountyRow,\n         padding,\n         levelHint,\n         padding,\n      }),\n   }\nend\n\nlocal function renderRootWrapper(layer, content)\n   local screenPosition = settings:get('screenPosition')\n   local paddingOffset = (util.vector2(1, 1) - screenPosition * 2):emul(util.vector2(13, 13))\n   local border = {\n      layer = layer,\n      template = I.MWUI.templates.boxTransparent,\n      props = {\n         anchor = screenPosition,\n         relativePosition = screenPosition,\n         position = paddingOffset,\n      },\n      content = content,\n   }\n   return border\nend\n\nlocal function renderHud(level)\n   local horizontal = not settings:get('verticalHud')\n   return renderRootWrapper('HUD', ui.content({ renderSeals(level, horizontal) }))\nend\n\nlocal function renderWindow(bounty, level)\n   local horizontal = not settings:get('verticalHud')\n   local renderDetails = horizontal and renderHorizontalDetails or renderVerticalDetails\n   local column = {\n      type = ui.TYPE.Flex,\n      props = {\n         horizontal = not horizontal,\n         arrange = ui.ALIGNMENT.Center,\n      },\n      content = ui.content({\n         padding,\n         renderSeals(level, horizontal),\n         padding,\n         renderDetails(bounty, level),\n         padding,\n      }),\n   }\n   return renderRootWrapper('Windows', ui.content({ column }))\nend\n\nlocal hudElement = nil\nlocal windowElement = nil\n\nreturn {\n   BountyLevel = BountyLevel,\n   updateHud = function(active, level)\n      if hudElement and not active then\n         hudElement:destroy()\n         hudElement = nil\n      elseif active and not hudElement then\n         hudElement = ui.create(renderHud(level))\n      elseif active and hudElement then\n         hudElement.layout = renderHud(level)\n         hudElement:update()\n      end\n   end,\n   updateWindow = function(active, bounty, level)\n      if windowElement and not active then\n         windowElement:destroy()\n         windowElement = nil\n      elseif active and not windowElement then\n         windowElement = ui.create(renderWindow(bounty, level))\n      elseif active and windowElement then\n         windowElement.layout = renderWindow(bounty, level)\n         windowElement:update()\n      end\n   end,\n}\n"
  }
}