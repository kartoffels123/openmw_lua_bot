{
  "folder_name": "Abandoned Flat Containers",
  "lua_files": {
    "Abandoned Flat Containers-53142-2-2-1715389172\\scripts\\abandoned-flat-containers\\activator.lua": "require(\"scripts.abandoned-flat-containers.checks\")\nlocal core = require('openmw.core')\nlocal Activation = require('openmw.interfaces').Activation\nlocal types = require('openmw.types')\nlocal util = require('openmw.util')\nlocal world = require('openmw.world')\n\nlocal ids = require(\"scripts.abandoned-flat-containers.ids\")\nlocal STORAGE_KEY_ID = \"momw_afc_es_key\"\nlocal STORAGE_CELL = \"Enchanting Storage\"\n\nlocal function Container(containerId)\n    for _, c in pairs(world.getCellByName(STORAGE_CELL):getAll(types.Container)) do\n        if c.recordId == containerId then return c end\n    end\nend\n\nlocal function makeHandler(activator, objtype, container, str, sound)\n    return function(obj, actor)\n        local moved\n\n        if obj.recordId == activator then\n            local c = Container(container)\n            for _, thing in pairs(types.Player.inventory(actor):getAll(objtype)) do\n                if c then\n                    thing:moveInto(types.Container.content(c))\n                    moved = true\n                end\n            end\n        end\n\n        if moved then\n            actor:sendEvent(ids.e, {sound = sound, str = str})\n        end\n    end\nend\n\n-- Special handling for enchanted and non-enchanted clothing\nlocal function clothing(obj, actor)\n    local moved\n\n    if obj.recordId == ids.clothing_activator then\n        local c = Container(ids.clothing_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Clothing)) do\n            local clothes = types.Clothing.record(thing)\n            if\n                clothes.enchant == \"\"\n                and not types.Player.hasEquipped(actor, thing)\n            then\n                if c then\n                    thing:moveInto(types.Container.content(c))\n                    moved = true\n                end\n            end\n        end\n    end\n\n    if moved then\n        actor:sendEvent(ids.e, {sound = ids.clothing_sound, str = ids.clothing_s})\n    end\nend\n\nlocal function enchanted(obj, actor)\n    local moved\n\n    if obj.recordId == ids.ench_clo_activator then\n        local c = Container(ids.ench_clo_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Clothing)) do\n            local clothes = types.Clothing.record(thing)\n            if\n                clothes.enchant ~= \"\"\n                and not types.Player.hasEquipped(actor, thing)\n            then\n                if c then\n                    thing:moveInto(types.Container.content(c))\n                    moved = true\n                end\n            end\n        end\n    end\n\n    if moved then\n        actor:sendEvent(ids.e, {sound = ids.ench_clo_sound, str = ids.ench_clo_s})\n    end\nend\n\n-- THANK YOU zackhasacat!\n-- https://discord.com/channels/260439894298460160/854806553310920714/1122323464087416895\nlocal typeGmstMap = {\n    [types.Armor.TYPE.Boots] = \"iBootsWeight\",\n    [types.Armor.TYPE.Cuirass] = \"iCuirassWeight\",\n    [types.Armor.TYPE.Greaves] = \"iGreavesWeight\",\n    [types.Armor.TYPE.Helmet] = \"iHelmWeight\",\n    [types.Armor.TYPE.LBracer] = \"iGauntletWeight\",\n    [types.Armor.TYPE.LGauntlet] = \"iGauntletWeight\",\n    [types.Armor.TYPE.LPauldron] = \"iPauldronWeight\",\n    [types.Armor.TYPE.RBracer] = \"iGauntletWeight\",\n    [types.Armor.TYPE.RGauntlet] = \"iGauntletWeight\",\n    [types.Armor.TYPE.RPauldron] = \"iPauldronWeight\",\n    [types.Armor.TYPE.Shield] = \"iShieldWeight\"\n}\n\nlocal function armorKind(obj)\n    local iWeight = core.getGMST(typeGmstMap[obj.type.record(obj).type])\n    local epsilon = 0.0005\n    local weight = obj.type.record(obj).weight\n\n    if weight <= iWeight * core.getGMST(\"fLightMaxMod\") + epsilon then\n        return \"LightArmor\"\n    elseif weight <= iWeight * core.getGMST(\"fMedMaxMod\") + epsilon then\n        return \"MediumArmor\"\n    else\n        return \"HeavyArmor\"\n    end\nend\n\nlocal function armor(kind, activator, container, str, sound)\n    return function(obj, actor)\n        local moved\n\n        if obj.recordId == activator then\n            local c = Container(container)\n            for _, thing in pairs(types.Player.inventory(actor):getAll(types.Armor)) do\n                if\n                    c\n                    and armorKind(thing) == kind\n                    and not types.Player.hasEquipped(actor, thing)\n                then\n                    thing:moveInto(types.Container.content(c))\n                    moved = true\n                end\n            end\n        end\n\n        if moved then\n            actor:sendEvent(ids.e, {sound = sound, str = str})\n        end\n    end\nend\n\nlocal function makeWpn(inTypes, activator, container, str, sound)\n    return function(obj, actor)\n        local moved\n        if obj.recordId == activator then\n            local c = Container(container)\n            for _, thing in pairs(types.Player.inventory(actor):getAll(types.Weapon)) do\n                if\n                    c\n                    and inTypes[types.Weapon.record(thing).type]\n                    and not types.Player.hasEquipped(actor, thing)\n                then\n                    thing:moveInto(types.Container.content(c))\n                    moved = true\n                end\n            end\n        end\n        if moved then\n            actor:sendEvent(ids.e, {sound = sound, str = str})\n        end\n    end\nend\n\n-- Various other special handlers\nlocal function book(obj, actor)\n    local moved\n\n    if obj.recordId == ids.book_activator then\n        local c = Container(ids.book_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Book)) do\n            local books = types.Book.record(thing)\n            if c and not books.isScroll then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n    end\n\n    if moved then\n        actor:sendEvent(ids.e, {sound = ids.book_sound, str = ids.book_s})\n    end\nend\n\nlocal function scroll(obj, actor)\n    local moved\n\n    if obj.recordId == ids.scroll_activator then\n        local c = Container(ids.scroll_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Book)) do\n            local scrolls = types.Book.record(thing)\n            if c and scrolls.isScroll then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n    end\n\n    if moved then\n        actor:sendEvent(ids.e, {sound = ids.scroll_sound, str = ids.scroll_s})\n    end\nend\n\nlocal function ttool(obj, actor)\n    local moved\n    if obj.recordId == ids.ttool_activator then\n        local c = Container(ids.ttool_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Lockpick)) do\n            if c and not types.Player.hasEquipped(actor, thing) then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Probe)) do\n            if c and not types.Player.hasEquipped(actor, thing) then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n    end\n    if moved then\n        actor:sendEvent(ids.e, {sound = ids.ttool_sound, str = ids.ttool_s})\n    end\nend\n\n-- Soul gems, keys, and other types.Miscellaneous need special handling\nlocal function keyHandler(obj, actor)\n    local moved\n\n    if obj.recordId == ids.key_activator then\n        local c = Container(ids.key_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Miscellaneous)) do\n            if\n                c\n                and string.match(thing.recordId, \"key\")\n                and thing.recordId ~= STORAGE_KEY_ID\n            then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n    end\n\n    if moved then\n        actor:sendEvent(ids.e, {sound = ids.key_sound, str = ids.key_s})\n    end\nend\n\nlocal function misc(obj, actor)\n    local moved\n\n    if obj.recordId == ids.misc_activator then\n        local c = Container(ids.misc_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Miscellaneous)) do\n            if c\n                and not string.match(thing.recordId, \"gold\")\n                and not string.match(thing.recordId, \"key\")\n                and not string.match(thing.recordId, \"soulgem\")\n            then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Apparatus)) do\n            if c then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Light)) do\n            if c then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n    end\n\n    if moved then\n        actor:sendEvent(ids.e, {sound = ids.misc_sound, str = ids.misc_s})\n    end\nend\n\nlocal function soulgem(obj, actor)\n    local moved\n\n    if obj.recordId == ids.soulgem_activator then\n        local c = Container(ids.soulgem_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Miscellaneous)) do\n            if c and string.match(thing.recordId, \"soulgem\") then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n    end\n\n    if moved then\n        actor:sendEvent(ids.e, {sound = ids.soulgem_sound, str = ids.soulgem_s})\n    end\nend\n\n-- Weapon type bundles\nlocal axes = {\n    [types.Weapon.TYPE.AxeOneHand] = true,\n    [types.Weapon.TYPE.AxeTwoHand] = true\n}\n\nlocal ammos = {\n    [types.Weapon.TYPE.Arrow] = true,\n    [types.Weapon.TYPE.Bolt] = true,\n    [types.Weapon.TYPE.MarksmanThrown] = true\n}\n\nlocal blunts = {\n    [types.Weapon.TYPE.BluntOneHand] = true,\n    [types.Weapon.TYPE.BluntTwoClose] = true,\n    [types.Weapon.TYPE.BluntTwoWide] = true\n}\n\nlocal function takeAll(obj, actor)\n    local c, moved\n\n    -- Do All The Things\n    if obj.recordId == ids.all_activator then\n        -- Ingredients\n        c = Container(ids.alchemy_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Ingredient)) do\n            if c then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Ammo\n        c = Container(ids.ammo_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Weapon)) do\n            if\n                c\n                and ammos[types.Weapon.record(thing).type]\n                and not types.Player.hasEquipped(actor, thing)\n            then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Axes\n        c = Container(ids.axe_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Weapon)) do\n            if\n                c\n                and axes[types.Weapon.record(thing).type]\n                and not types.Player.hasEquipped(actor, thing)\n            then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Blunts\n        c = Container(ids.bluntwpn_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Weapon)) do\n            if\n                c\n                and blunts[types.Weapon.record(thing).type]\n                and not types.Player.hasEquipped(actor, thing)\n            then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Books\n        c = Container(ids.book_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Book)) do\n            local books = types.Book.record(thing)\n            if c and not books.isScroll then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Bows\n        c = Container(ids.bow_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Weapon)) do\n            if\n                c\n                and types.Weapon.record(thing).type == types.Weapon.TYPE.MarksmanBow\n                and not types.Player.hasEquipped(actor, thing)\n            then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Clothes\n        c = Container(ids.clothing_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Clothing)) do\n            local clothes = types.Clothing.record(thing)\n            if\n                clothes.enchant == \"\"\n                and not types.Player.hasEquipped(actor, thing)\n            then\n                if c then\n                    thing:moveInto(types.Container.content(c))\n                    moved = true\n                end\n            end\n        end\n\n        -- Crossbow\n        c = Container(ids.crossbow_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Weapon)) do\n            if\n                c\n                and types.Weapon.record(thing).type == types.Weapon.TYPE.MarksmanCrossbow\n                and not types.Player.hasEquipped(actor, thing)\n            then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Enchanted\n        c = Container(ids.ench_clo_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Clothing)) do\n            local clothes = types.Clothing.record(thing)\n            if\n                clothes.enchant ~= \"\"\n                and not types.Player.hasEquipped(actor, thing)\n            then\n                if c then\n                    thing:moveInto(types.Container.content(c))\n                    moved = true\n                end\n            end\n        end\n\n        -- Heavy Armor\n        c = Container(ids.heavy_armor_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Armor)) do\n            if\n                c\n                and armorKind(thing) == \"HeavyArmor\"\n                and not types.Player.hasEquipped(actor, thing)\n            then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Keys\n        c = Container(ids.key_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Miscellaneous)) do\n            if\n                c\n                and string.match(thing.recordId, \"key\")\n                and thing.recordId ~= STORAGE_KEY_ID\n            then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Light Armor\n        c = Container(ids.light_armor_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Armor)) do\n            if\n                c\n                and armorKind(thing) == \"LightArmor\"\n                and not types.Player.hasEquipped(actor, thing)\n            then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Long Blade 1\n        c = Container(ids.longblade1_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Weapon)) do\n            if\n                c\n                and types.Weapon.record(thing).type == types.Weapon.TYPE.LongBladeOneHand\n                and not types.Player.hasEquipped(actor, thing)\n            then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Long Blade 2\n        c = Container(ids.longblade2_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Weapon)) do\n            if\n                c\n                and types.Weapon.record(thing).type == types.Weapon.TYPE.LongBladeTwoHand\n                and not types.Player.hasEquipped(actor, thing)\n            then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Medium Armor\n        c = Container(ids.medium_armor_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Armor)) do\n            if\n                c\n                and armorKind(thing) == \"MediumArmor\"\n                and not types.Player.hasEquipped(actor, thing)\n            then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Misc\n        c = Container(ids.misc_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Miscellaneous)) do\n            if c\n                and not string.match(thing.recordId, \"gold\")\n                and not string.match(thing.recordId, \"key\")\n                and not string.match(thing.recordId, \"soulgem\")\n            then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Apparatus)) do\n            if c then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Light)) do\n            if c then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Potions\n        c = Container(ids.potion_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Potion)) do\n            if c then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Scrolls\n        c = Container(ids.scroll_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Book)) do\n            local scrolls = types.Book.record(thing)\n            if c and scrolls.isScroll then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Short Blade\n        c = Container(ids.shortblade_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Weapon)) do\n            if\n                c\n                and types.Weapon.record(thing).type == types.Weapon.TYPE.ShortBladeOneHand\n                and not types.Player.hasEquipped(actor, thing)\n            then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Soul Gems\n        c = Container(ids.soulgem_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Miscellaneous)) do\n            if c and string.match(thing.recordId, \"soulgem\") then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Spears\n        c = Container(ids.spear_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Weapon)) do\n            if\n                c\n                and types.Weapon.record(thing).type == types.Weapon.TYPE.SpearTwoWide\n                and not types.Player.hasEquipped(actor, thing)\n            then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        -- Thief Tools\n        c = Container(ids.ttool_container)\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Lockpick)) do\n            if c and not types.Player.hasEquipped(actor, thing) then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n        for _, thing in pairs(types.Player.inventory(actor):getAll(types.Probe)) do\n            if c and not types.Player.hasEquipped(actor, thing) then\n                thing:moveInto(types.Container.content(c))\n                moved = true\n            end\n        end\n\n        if moved then actor:sendEvent(ids.e, {str = ids.all_s, sound = ids.all_sound}) end\n    end\nend\n\n-- No engineHandler needed; just do this stuff when the script loads. The game world may not\n-- yet be fully initialized but that's fine since all we're doing is registering handlers.\nfor _, handler in pairs(\n    {\n        makeHandler(ids.alchemy_activator, types.Ingredient, ids.alchemy_container, ids.alchemy_s, ids.alchemy_sound),\n        makeWpn(ammos, ids.ammo_activator, ids.ammo_container, ids.ammo_s, ids.ammo_sound),\n        makeWpn(axes, ids.axe_activator, ids.axe_container, ids.axe_s, ids.axe_sound),\n        makeWpn(blunts, ids.bluntwpn_activator, ids.bluntwpn_container, ids.bluntwpn_s, ids.bluntwpn_sound),\n        book,\n        makeWpn({[types.Weapon.TYPE.MarksmanBow] = true}, ids.bow_activator, ids.bow_container, ids.bow_s, ids.bow_sound),\n        clothing,\n\n        makeWpn({[types.Weapon.TYPE.MarksmanCrossbow] = true}, ids.crossbow_activator, ids.crossbow_container, ids.crossbow_s, ids.crossbow_sound),\n        enchanted,\n        armor(\"HeavyArmor\", ids.heavy_armor_activator, ids.heavy_armor_container, ids.heavy_armor_s, ids.heavy_armor_sound),\n        keyHandler,\n        armor(\"LightArmor\", ids.light_armor_activator, ids.light_armor_container, ids.light_armor_s, ids.light_armor_sound),\n        makeWpn({[types.Weapon.TYPE.LongBladeOneHand] = true}, ids.longblade1_activator, ids.longblade1_container, ids.longblade1_s, ids.longblade1_sound),\n        makeWpn({[types.Weapon.TYPE.LongBladeTwoHand] = true}, ids.longblade2_activator, ids.longblade2_container, ids.longblade2_s, ids.longblade2_sound),\n        armor(\"MediumArmor\", ids.medium_armor_activator, ids.medium_armor_container, ids.medium_armor_s, ids.medium_armor_sound),\n        misc,\n        makeHandler(ids.potion_activator, types.Potion, ids.potion_container, ids.potion_s, ids.potion_sound),\n        scroll,\n        makeWpn({[types.Weapon.TYPE.ShortBladeOneHand] = true}, ids.shortblade_activator, ids.shortblade_container, ids.shortblade_s, ids.shortblade_sound),\n        soulgem,\n        makeWpn({[types.Weapon.TYPE.SpearTwoWide] = true}, ids.spear_activator, ids.spear_container, ids.spear_s, ids.spear_sound),\n        ttool,\n\n        takeAll\n    }\n) do\n    Activation.addHandlerForType(types.Activator, handler)\nend\n\nlocal function bossBattleBegin(player)\n    player:teleport(\n        \"Enchanting Storage\",\n        util.vector3(-3926.082031, 1340.704590, 145.000061),\n        util.transform.rotateZ(185)\n    )\nend\n\nlocal function bossBattleOver(player)\n    player:teleport(\n        \"Enchanting Storage\",\n        util.vector3(-178.434174, -344.366058, 3),\n        util.transform.rotateZ(90)\n    )\nend\n\nlocal function disableActor(actor)\n\tactor.enabled = false\nend\n\nreturn {\n    eventHandlers = {\n        momw_afc_bossBattleBegin = bossBattleBegin,\n        momw_afc_bossBattleOver = bossBattleOver,\n        momw_afc_disableActor = disableActor\n    }\n}\n",
    "Abandoned Flat Containers-53142-2-2-1715389172\\scripts\\abandoned-flat-containers\\checks.lua": "local core = require(\"openmw.core\")\nlocal errors = {}\nif core.API_REVISION < 51 then\n    table.insert(errors, 'This mod requires OpenMW 0.49.0 or newer')\nend\nif not core.contentFiles.has(\"OAAB_Data.esm\") then\n\ttable.insert(errors, \"OAAB_Data.esm is not installed\")\nend\nif not core.contentFiles.has(\"Tamriel_Data.esm\") then\n\ttable.insert(errors, \"Tamriel_Data.esm is not installed\")\nend\nif #errors > 0 then\n    print(\"Abandoned Flat Containers ERROR:\")\n\tfor _, err in pairs(errors) do\n        print(err)\n    end\n    error(\"Abandoned Flat Containers cannot load due to the above error or errors!\")\nend\n",
    "Abandoned Flat Containers-53142-2-2-1715389172\\scripts\\abandoned-flat-containers\\ids.lua": "return {\n    alchemy_activator = \"momw_afc_alchemy_act\",\n    alchemy_container = \"momw_afc_alchemy_cont\",\n    alchemy_s = \"alchemy ingredients have\",\n    alchemy_sound = \"item ingredient down\",\n\n    all_activator = \"momw_afc_takeall_act\",\n    all_s = \"various things have\",\n    all_sound = \"illusion area\",\n\n    ammo_activator = \"momw_afc_ammo_act\",\n    ammo_container = \"momw_afc_ammo_cont\",\n    ammo_s = \"marksman ammo has\",\n    ammo_sound = \"item ammo down\",\n\n    axe_activator = \"momw_afc_axe_act\",\n    axe_container = \"momw_afc_axe_cont\",\n    axe_s = \"axes have\",\n    axe_sound = \"item weapon blunt down\",\n\n    bluntwpn_activator = \"momw_afc_bluntwpn_act\",\n    bluntwpn_container = \"momw_afc_bluntwpn_cont\",\n    bluntwpn_s = \"blunt weapons have\",\n    bluntwpn_sound = \"item weapon blunt down\",\n\n    book_activator = \"momw_afc_book_act\",\n    book_container = \"momw_afc_book_cont\",\n    book_s = \"books have\",\n    book_sound = \"item book down\",\n\n    bow_activator = \"momw_afc_bow_act\",\n    bow_container = \"momw_afc_bow_cont\",\n    bow_s = \"bows have\",\n    bow_sound = \"item weapon bow down\",\n\n    clothing_activator = \"momw_afc_clothing_act\",\n    clothing_container = \"momw_afc_clothing_cont\",\n    clothing_s = \"clothing has\",\n    clothing_sound = \"item clothes down\",\n\n    crossbow_activator = \"momw_afc_crossbow_act\",\n    crossbow_container = \"momw_afc_crossbow_cont\",\n    crossbow_s = \"crossbows have\",\n    crossbow_sound = \"item weapon crossbow down\",\n\n    ench_clo_activator = \"momw_afc_ench_clothing_act\",\n    ench_clo_container = \"momw_afc_ench_clothing_cont\",\n    ench_clo_s = \"enchanted clothing has\",\n    ench_clo_sound = \"item ring down\",\n\n    heavy_armor_activator = \"momw_afc_heavya_act\",\n    heavy_armor_container = \"momw_afc_heavya_cont\",\n    heavy_armor_s = \"heavy armor has\",\n    heavy_armor_sound = \"item armor heavy down\",\n\n    key_activator = \"momw_afc_key_act\",\n    key_container = \"momw_afc_key_cont\",\n    key_s = \"keys have\",\n    key_sound = \"item misc down\",\n\n    light_armor_activator = \"momw_afc_lighta_act\",\n    light_armor_container = \"momw_afc_lighta_cont\",\n    light_armor_s = \"light armor has\",\n    light_armor_sound = \"item armor light down\",\n\n    longblade1_activator = \"momw_afc_longblade1_act\",\n    longblade1_container = \"momw_afc_longblade1_cont\",\n    longblade1_s = \"one-handed long blade weapons have\",\n    longblade1_sound = \"item weapon longblade down\",\n\n    longblade2_activator = \"momw_afc_longblade2_act\",\n    longblade2_container = \"momw_afc_longblade2_cont\",\n    longblade2_s = \"two-handed long blade weapons have\",\n    longblade2_sound = \"item weapon longblade down\",\n\n    medium_armor_activator = \"momw_afc_meda_act\",\n    medium_armor_container = \"momw_afc_meda_cont\",\n    medium_armor_s = \"medium armor has\",\n    medium_armor_sound = \"item armor medium down\",\n\n    misc_activator = \"momw_afc_misc_act\",\n    misc_container = \"momw_afc_misc_cont\",\n    misc_s = \"misc items have\",\n    misc_sound = \"item misc down\",\n\n    potion_activator = \"momw_afc_potion_act\",\n    potion_container = \"momw_afc_potion_cont\",\n    potion_s = \"potions have\",\n    potion_sound = \"item potion down\",\n\n    scroll_activator = \"momw_afc_scroll_act\",\n    scroll_container = \"momw_afc_scroll_cont\",\n    scroll_s = \"scrolls have\",\n    scroll_sound = \"item book down\",\n\n    shortblade_activator = \"momw_afc_shortblade_act\",\n    shortblade_container = \"momw_afc_shortblade_cont\",\n    shortblade_s = \"short blade weapons have\",\n    shortblade_sound = \"item weapon shortblade down\",\n\n    soulgem_activator = \"momw_afc_soulgem_act\",\n    soulgem_container = \"momw_afc_soulgem_cont\",\n    soulgem_s = \"soul gems have\",\n    soulgem_sound = \"item misc down\",\n\n    spear_activator = \"momw_afc_spear_act\",\n    spear_container = \"momw_afc_spear_cont\",\n    spear_s = \"spears have\",\n    spear_sound = \"item weapon spear down\",\n\n    ttool_activator = \"momw_afc_ttool_act\",\n    ttool_container = \"momw_afc_ttool_cont\",\n    ttool_s = \"thief tools have\",\n    ttool_sound = \"item lockpick down\",\n\n    e = \"momw_af_containers_inform\",\n}\n",
    "Abandoned Flat Containers-53142-2-2-1715389172\\scripts\\abandoned-flat-containers\\player.lua": "require(\"scripts.abandoned-flat-containers.checks\")\nlocal ambient = require(\"openmw.ambient\")\nlocal async = require(\"openmw.async\")\nlocal core = require(\"openmw.core\")\nlocal nearby = require(\"openmw.nearby\")\nlocal self = require(\"openmw.self\")\nlocal types = require(\"openmw.types\")\nlocal ui = require(\"openmw.ui\")\nlocal vfs = require(\"openmw.vfs\")\n\n-- Easter egg stuff\nlocal quest = types.Player.quests(self)[\"momw_afc_taking_liberties\"]\nlocal BATTLE_OVER_DELAY = 5\nlocal BOSS_DISABLE_DELAY = 2\nlocal SONG_DISTANCE = 2040\nlocal STOP_MUSIC_DELAY = 3\nlocal flea = \"momw_afc_flea\"\nlocal ozzie = \"momw_afc_ozzie\"\nlocal slash = \"momw_afc_slash\"\nlocal bossTrack\nlocal bossTrack1 = \"17 - Boss Battle 2.flac\"\nlocal bossTrack2 = \"217 Boss Battle 2.mp3\"\nlocal hasBossSong\nlocal hasBossSong1 = vfs.fileExists(bossTrack1)\nlocal hasBossSong2 = vfs.fileExists(bossTrack2)\nif hasBossSong1 then\n    bossTrack = bossTrack1\n    hasBossSong = hasBossSong1\nelseif hasBossSong2 then\n    bossTrack = bossTrack2\n    hasBossSong = hasBossSong2\nend\nlocal bossSongPlaying = false\nlocal bossesAreDead = false\nlocal songTriggers  = {\n    [flea] = true,\n    [ozzie] = true,\n    [slash] = true\n}\nlocal bossStatus  = {}\n\n\nlocal warned = false\nlocal function playBossMusic(stop)\n    if not hasBossSong then\n        if not warned then\n            print(\"WARNING: Track for easter egg boss music not found!\")\n            print(\"WARNING: Missing the file: '17 - Boss Battle 2.flac'\")\n            warned = true\n        end\n        return\n    end\n    if stop then\n        ambient.stopMusic()\n        bossSongPlaying = false\n        return\n    end\n    ambient.stopMusic()\n    ambient.streamMusic(bossTrack)\n    bossSongPlaying = true\nend\n\nlocal function onLoad(data)\n    if not data then return end\n    bossSongPlaying = data.bossSongPlaying\n    bossStatus = data.bossStatus\n\tbossesAreDead = data.bossesAreDead\nend\n\nlocal function onSave()\n\treturn {\n        bossSongPlaying = bossSongPlaying,\n        bossStatus = bossStatus,\n        bossesAreDead = bossesAreDead\n    }\nend\n\nlocal stopMusicCallback = async:registerTimerCallback(\n    \"momw_afc_stop_music\",\n    function() playBossMusic(true) end\n)\n\nlocal bossBattleOverCallback = async:registerTimerCallback(\n    \"momw_afc_boss_battle_over\",\n    function()\n        -- The battle is over and the player didn't get killed. Great Job!\n        core.sendGlobalEvent(\"momw_afc_bossBattleOver\", self)\n    end\n)\n\nlocal disableActorCallback = async:registerTimerCallback(\n    string.format(\"momw_afc_disable_actor\"),\n    function(actor)\n        core.sendGlobalEvent(\"momw_afc_disableActor\", actor)\n    end\n)\n\nlocal function onUpdate()\n    -- Try to bail\n    if bossesAreDead then return end\n    if self.cell.name ~= \"Enchanting Storage\" then return end\n\n    -- If all three bosses are dead then register them as such, stop the music, and bail.\n    if bossStatus[flea] and bossStatus[ozzie] and bossStatus[slash] then\n        bossesAreDead = true\n        if bossSongPlaying then\n            -- Stop the music after a short delay\n            async:newSimulationTimer(STOP_MUSIC_DELAY, stopMusicCallback)\n            -- Update the journal\n            quest:addJournalEntry(30)\n            async:newSimulationTimer(BATTLE_OVER_DELAY, bossBattleOverCallback)\n        end\n        return\n    end\n\n    -- Scan for our bosses\n    for _, actor in pairs(nearby.actors) do\n        local recordId = actor.recordId\n        if songTriggers[recordId] then\n            -- Has this one been killed?\n            if not bossStatus[recordId] and types.NPC.isDead(actor) then\n                bossStatus[recordId] = true\n                async:newSimulationTimer(BOSS_DISABLE_DELAY, disableActorCallback, actor)\n            end\n\n            -- Play the boss music as needed\n            if not bossSongPlaying and (self.position - actor.position):length() <= SONG_DISTANCE then\n                playBossMusic()\n            end\n        end\n    end\nend\n\nlocal function UiModeChanged(data)\n    if data.oldMode == \"Dialogue\" and data.newMode == nil then\n        if quest and quest.stage == 20 then\n            -- Wait until the dialogue box closes before zapping the player off to battle\n            ambient.playSound(\"conjuration hit\")\n            core.sendGlobalEvent(\"momw_afc_bossBattleBegin\", self)\n        end\n    end\nend\n\nlocal function inform(data)\n    ui.showMessage(string.format(\"Your %s been deposited\", data.str))\n    ambient.playSound(data.sound)\nend\n\n\nreturn {\n    engineHandlers = {\n        onLoad = onLoad,\n        onSave = onSave,\n        onUpdate = onUpdate\n    },\n    eventHandlers = {\n        UiModeChanged = UiModeChanged,\n        momw_af_containers_inform = inform\n    }\n}\n"
  }
}