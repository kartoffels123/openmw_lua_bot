{
  "title": "Package openmw.core\uf0c1",
  "sections": [
    {
      "header": "Usage:",
      "content": [
        {
          "code": "local core = require('openmw.core')"
        },
        {
          "code": "local core = require('openmw.core')"
        }
      ]
    },
    {
      "header": "Typecore",
      "content": [
        {
          "code": "core"
        },
        {
          "paragraph": "The revision of OpenMW Lua API."
        },
        {
          "paragraph": "#ContentFiles: functions working with the list of currently loaded content files."
        },
        {
          "paragraph": "#Dialogue: Dialogue"
        },
        {
          "paragraph": "#Factions: Factions"
        },
        {
          "paragraph": "Construct FormId string from content file name and the index in the file."
        },
        {
          "paragraph": "Get a GMST setting from content files."
        },
        {
          "paragraph": "Game time in seconds."
        },
        {
          "paragraph": "The scale of game time relative to simulation time."
        },
        {
          "paragraph": "Frame duration in seconds."
        },
        {
          "paragraph": "Real time in seconds; starting point is not fixed (can be time since last reboot), use only for measuring intervals."
        },
        {
          "paragraph": "Simulation time in seconds."
        },
        {
          "paragraph": "The scale of simulation time relative to real time."
        },
        {
          "paragraph": "Whether the world is paused (onUpdate doesn't work when the world is paused)."
        },
        {
          "paragraph": "Return l10n formatting function for the given context."
        },
        {
          "paragraph": "#Magic: spells and spell effects"
        },
        {
          "paragraph": "Terminates the game and quits to the OS."
        },
        {
          "paragraph": "Send an event to global scripts."
        },
        {
          "paragraph": "#Sound: Sounds and Speech"
        },
        {
          "paragraph": "#Stats: stats"
        }
      ]
    },
    {
      "header": "TypeActiveEffect",
      "content": [
        {
          "code": "ActiveEffect"
        },
        {
          "paragraph": "Optional attribute ID"
        },
        {
          "paragraph": "Optional skill ID"
        },
        {
          "paragraph": "Effect id string"
        },
        {
          "paragraph": "current magnitude of the effect. Will be set to 0 when effect is removed or expires."
        },
        {
          "paragraph": "Localized name of the effect"
        }
      ]
    },
    {
      "header": "TypeActiveSpell",
      "content": [
        {
          "code": "ActiveSpell"
        },
        {
          "paragraph": "A number uniquely identifying this active spell within the affected actor's list of active spells."
        },
        {
          "paragraph": "If set, this spell affects the base values of affected stats, rather than modifying current values."
        },
        {
          "paragraph": "The caster object, or nil if the spell has no defined caster"
        },
        {
          "paragraph": "The active effects (#ActiveSpellEffect) of this spell."
        },
        {
          "paragraph": "If set, this spell is tied to an equipped item and can only be ended by unequipping the item."
        },
        {
          "paragraph": "Record id of the spell or item used to cast the spell"
        },
        {
          "paragraph": "The enchanted item used to cast the spell, or nil if the spell was not cast from an enchanted item. Note that if the spell was cast for a single-use enchantment such as a scroll, this will be nil."
        },
        {
          "paragraph": "The spell or item display name"
        },
        {
          "paragraph": "If set, this spell can be applied multiple times. If not set, the same spell can only be applied once from the same source (where source is determined by caster + item). In vanilla rules, consumables are stackable while spells and enchantments are not."
        },
        {
          "paragraph": "If set, this spell effect is temporary and should end on its own. Either after a single application or after its duration has run out."
        }
      ]
    },
    {
      "header": "TypeActiveSpellEffect",
      "content": [
        {
          "code": "ActiveSpellEffect"
        },
        {
          "paragraph": "Optional attribute ID"
        },
        {
          "paragraph": "Optional skill ID"
        },
        {
          "paragraph": "Total duration in seconds of this spell effect, should not be confused with remaining duration. Or nil if the effect is not temporary."
        },
        {
          "paragraph": "Remaining duration in seconds of this spell effect, or nil if the effect is not temporary."
        },
        {
          "paragraph": "Magic effect id"
        },
        {
          "paragraph": "Index of this effect within the original list of#MagicEffectWithParamsof the spell/enchantment/potion this effect came from."
        },
        {
          "paragraph": "The magnitude of the effect in the current frame. This will be a new random number between minMagnitude and maxMagnitude every frame. Or nil if the effect has no magnitude."
        },
        {
          "paragraph": "The maximum magnitude of this effect, or nil if the effect has no magnitude."
        },
        {
          "paragraph": "The minimum magnitude of this effect, or nil if the effect has no magnitude."
        },
        {
          "paragraph": "Localized name of the effect"
        }
      ]
    },
    {
      "header": "TypeAttribute",
      "content": [
        {
          "code": "Attribute"
        },
        {
          "paragraph": "Returns a read-only#AttributeRecord"
        },
        {
          "paragraph": "A read-only list of all#AttributeRecords in the world database, may be indexed by recordId.\nImplementsiterables#Listof #AttributeRecord."
        }
      ]
    },
    {
      "header": "TypeAttributeRecord",
      "content": [
        {
          "code": "AttributeRecord"
        },
        {
          "paragraph": "Human-readable description"
        },
        {
          "paragraph": "VFS path to the icon"
        },
        {
          "paragraph": "Record id"
        },
        {
          "paragraph": "Human-readable name"
        }
      ]
    },
    {
      "header": "TypeCell",
      "content": [
        {
          "code": "Cell"
        },
        {
          "paragraph": "Get all objects of given type from the cell; Only available from global scripts."
        },
        {
          "paragraph": "Index of the cell by X (only for exteriors)."
        },
        {
          "paragraph": "Index of the cell by Y (only for exteriors)."
        },
        {
          "paragraph": "True if in this cell sky should be rendered."
        },
        {
          "paragraph": "Returns true if the cell has given tag."
        },
        {
          "paragraph": "True if the cell contains water."
        },
        {
          "paragraph": "Unique record ID of the cell, based on cell name for interiors and the worldspace for exteriors, or the formID of the cell for ESM4 cells."
        },
        {
          "paragraph": "Whether the cell is an exterior cell. \"Exterior\" means grid of cells where the player can seamless walk from one cell to another without teleports. QuasiExterior (interior with sky) is not an exterior."
        },
        {
          "paragraph": "Returns true either if the cell contains the object or if the cell is an exterior and the object is also in an exterior."
        },
        {
          "paragraph": "(DEPRECATED, usehasTag(\"QuasiExterior\")) Whether the cell is a quasi exterior (like interior but with the sky and the wheather)."
        },
        {
          "code": "hasTag(\"QuasiExterior\")"
        },
        {
          "paragraph": "Name of the cell (can be empty string)."
        },
        {
          "paragraph": "Region of the cell."
        },
        {
          "paragraph": "The water level of the cell. (nil if cell has no water)."
        },
        {
          "paragraph": "Id of the world space."
        }
      ]
    },
    {
      "header": "TypeContentFiles",
      "content": [
        {
          "code": "ContentFiles"
        },
        {
          "paragraph": "Check if the content file with given name present in the load order."
        },
        {
          "paragraph": "Return the index of a specific content file in the load order (ornilif there is no such content file)."
        },
        {
          "code": "nil"
        },
        {
          "paragraph": "The current load order (list of content file names)."
        }
      ]
    },
    {
      "header": "TypeDialogue",
      "content": [
        {
          "code": "Dialogue"
        },
        {
          "paragraph": "#DialogueRecordsfunctions for greeting read-only records."
        },
        {
          "paragraph": "#DialogueRecordsfunctions for journal (quest) read-only records."
        },
        {
          "paragraph": "#DialogueRecordsfunctions for persuasion read-only records."
        },
        {
          "paragraph": "#DialogueRecordsfunctions for topic read-only records."
        },
        {
          "paragraph": "#DialogueRecordsfunctions for voice read-only records."
        }
      ]
    },
    {
      "header": "TypeDialogueRecord",
      "content": [
        {
          "code": "DialogueRecord"
        },
        {
          "paragraph": "Record identifier"
        },
        {
          "paragraph": "A read-only list containing all#DialogueRecordInfos for this record, in order."
        },
        {
          "paragraph": "Same as id, but with upper cases preserved."
        },
        {
          "paragraph": "Non-nil only for journal records with available value. Holds the quest name for this journal entry. Same info may be available underinfos[1].textas well, but this variable is made for convenience."
        },
        {
          "code": "infos[1].text"
        }
      ]
    },
    {
      "header": "TypeDialogueRecordInfo",
      "content": [
        {
          "code": "DialogueRecordInfo"
        },
        {
          "paragraph": "Speaker class allowing for this info entry to appear."
        },
        {
          "paragraph": "Minimum speaker disposition allowing for this info entry to appear."
        },
        {
          "paragraph": "Faction of which the speaker must be a member for this info entry to appear."
        },
        {
          "paragraph": "Minimum speaker's rank in their faction allowing for this info entry to appear."
        },
        {
          "paragraph": "Speaker gender allowing for this info entry to appear: \"male\" or \"female\"."
        },
        {
          "paragraph": "Speaker ID allowing for this info entry to appear."
        },
        {
          "paragraph": "Speaker race allowing for this info entry to appear."
        },
        {
          "paragraph": "Cell name prefix of location where the player must be for this info entry to appear."
        },
        {
          "paragraph": "Faction of which the player must be a member for this info entry to appear."
        },
        {
          "paragraph": "Minimum player's rank in their faction allowing for this info entry to appear."
        },
        {
          "paragraph": "Identifier for this info entry. Is unique only within the#DialogueRecordit belongs to."
        },
        {
          "paragraph": "True if this info entry has the \"Finished\" flag checked."
        },
        {
          "paragraph": "True if this info entry has the \"Quest Name\" flag checked."
        },
        {
          "paragraph": "True if this info entry has the \"Restart\" flag checked."
        },
        {
          "paragraph": "Quest stage (same as inopenmw_types#PlayerQuest.stage) this info entry is associated with."
        },
        {
          "paragraph": "MWScript (full script text) executed when this info is chosen."
        },
        {
          "paragraph": "Sound file path for this info entry."
        },
        {
          "paragraph": "Text associated with this info entry."
        }
      ]
    },
    {
      "header": "TypeDialogueRecords",
      "content": [
        {
          "code": "DialogueRecords"
        },
        {
          "paragraph": "A read-only list of all#DialogueRecords in the world database, may be indexed by recordId, which doesn't have to be lowercase."
        }
      ]
    },
    {
      "header": "TypeEffects",
      "content": [
        {
          "code": "Effects"
        },
        {
          "paragraph": "Map from#MagicEffectIdto#MagicEffect"
        }
      ]
    },
    {
      "header": "TypeEnchantment",
      "content": [
        {
          "code": "Enchantment"
        },
        {
          "paragraph": "If set, the casting cost should be computed based on the effect list rather than read from the cost field"
        },
        {
          "paragraph": "Charge capacity. Should not be confused with current charge."
        },
        {
          "paragraph": "The effects (#MagicEffectWithParams) of the enchantment"
        },
        {
          "paragraph": "Enchantment id"
        },
        {
          "paragraph": "#EnchantmentType"
        }
      ]
    },
    {
      "header": "TypeEnchantmentType",
      "content": [
        {
          "code": "EnchantmentType"
        },
        {
          "paragraph": "Enchantment is cast on strike, if there is enough charge."
        },
        {
          "paragraph": "Enchantment is cast when used, if there is enough charge."
        },
        {
          "paragraph": "Enchantment can be cast once, destroying the enchanted item."
        },
        {
          "paragraph": "Enchantment is always active when equipped."
        }
      ]
    },
    {
      "header": "TypeEnchantments",
      "content": [
        {
          "code": "Enchantments"
        },
        {
          "paragraph": "A read-only list of all#Enchantmentrecords in the world database, may be indexed by recordId."
        }
      ]
    },
    {
      "header": "TypeFactionRank",
      "content": [
        {
          "code": "FactionRank"
        },
        {
          "paragraph": "Attributes values required to get this rank."
        },
        {
          "paragraph": "Reaction of faction members if player is in this faction."
        },
        {
          "paragraph": "Secondary skill value required to get this rank."
        },
        {
          "paragraph": "Faction name Rank display name"
        },
        {
          "paragraph": "Primary skill value required to get this rank."
        }
      ]
    },
    {
      "header": "TypeFactionRecord",
      "content": [
        {
          "code": "FactionRecord"
        },
        {
          "paragraph": "A read-only list containing IDs of attributes to advance ranks in the faction."
        },
        {
          "paragraph": "If true, the faction won't show in the player's skills menu"
        },
        {
          "paragraph": "Faction id"
        },
        {
          "paragraph": "Faction name"
        },
        {
          "paragraph": "A read-only list containing data for all ranks in the faction, in order."
        },
        {
          "paragraph": "A read-only map containing reactions of other factions to this faction."
        },
        {
          "paragraph": "A read-only list containing IDs of skills to advance ranks in the faction."
        }
      ]
    },
    {
      "header": "TypeFactions",
      "content": [
        {
          "code": "Factions"
        },
        {
          "paragraph": "A read-only list of all#FactionRecords in the world database."
        }
      ]
    },
    {
      "header": "TypeGameObject",
      "content": [
        {
          "code": "GameObject"
        },
        {
          "paragraph": "Activate the object."
        },
        {
          "paragraph": "Add new local script to the object."
        },
        {
          "paragraph": "The cell where the object currently is. During loading a game and for objects in an inventory or a containercellis nil."
        },
        {
          "code": "cell"
        },
        {
          "paragraph": "Lower cased file name of the content file that defines this object; nil for dynamically created objects."
        },
        {
          "paragraph": "Count (>1 means a stack of objects)."
        },
        {
          "paragraph": "Whether the object is enabled or disabled. Global scripts can set the value. Items in containers or inventories can't be disabled."
        },
        {
          "paragraph": "The axis aligned bounding box in world coordinates."
        },
        {
          "paragraph": "Global Variable associated with this object(read only)."
        },
        {
          "paragraph": "Whether a script with given path is attached to this object."
        },
        {
          "paragraph": "A unique id of this object (not record id), can be used as a key in a table."
        },
        {
          "paragraph": "Does the object still exist and is available."
        },
        {
          "paragraph": "Moves object into a container or an inventory."
        },
        {
          "paragraph": "Ownership information"
        },
        {
          "paragraph": "Container or actor that contains (or has in inventory) this object. It is nil if the object is in a cell."
        },
        {
          "paragraph": "Object position."
        },
        {
          "paragraph": "Returns record ID of the object in lowercase."
        },
        {
          "paragraph": "Removes an object or reduces a stack of objects."
        },
        {
          "paragraph": "Removes script that was attached byaddScriptCan be called only from a global script."
        },
        {
          "code": "addScript"
        },
        {
          "paragraph": "Object rotation."
        },
        {
          "paragraph": "Object scale."
        },
        {
          "paragraph": "Send local event to the object."
        },
        {
          "paragraph": "Sets the object's scale."
        },
        {
          "paragraph": "Splits a stack of items."
        },
        {
          "paragraph": "The object original position"
        },
        {
          "paragraph": "The object original rotation"
        },
        {
          "paragraph": "Moves object to given cell and position."
        },
        {
          "paragraph": "Type of the object (one of the tables from the packageopenmw.types#types)."
        }
      ]
    },
    {
      "header": "TypeInventory",
      "content": [
        {
          "code": "Inventory"
        },
        {
          "paragraph": "The number of items with given recordId."
        },
        {
          "paragraph": "Get first item with given recordId from the inventory."
        },
        {
          "paragraph": "Get all items with given recordId from the inventory."
        },
        {
          "paragraph": "Get all items of given type from the inventory."
        },
        {
          "paragraph": "Checks if the inventory has a resolved item list."
        },
        {
          "paragraph": "Will resolve the inventory, filling it with levelled items if applicable, making its contents permanent."
        }
      ]
    },
    {
      "header": "TypeMagic",
      "content": [
        {
          "code": "Magic"
        },
        {
          "paragraph": "Possible#MagicEffectIdvalues"
        },
        {
          "paragraph": "Possible#EnchantmentTypevalues"
        },
        {
          "paragraph": "Possible#SpellRangevalues"
        },
        {
          "paragraph": "Possible#SpellTypevalues"
        },
        {
          "paragraph": "#Effects: Magic Effects"
        },
        {
          "paragraph": "#Enchantments: Enchantments"
        },
        {
          "paragraph": "#Spells: Spells"
        }
      ]
    },
    {
      "header": "TypeMagicEffect",
      "content": [
        {
          "code": "MagicEffect"
        },
        {
          "paragraph": "Identifier of the sound used for AOE spells"
        },
        {
          "paragraph": "Identifier of the vfx static used for AOE spells"
        },
        {
          "paragraph": "Identifier of the projectile used for ranged spells"
        },
        {
          "paragraph": "Identifier of the projectile sound used for ranged spells"
        },
        {
          "paragraph": "Identifier of the sound used for casting"
        },
        {
          "paragraph": "Identifier of the vfx static used for casting"
        },
        {
          "paragraph": "If set, it is implied the magic effect links back to the caster in some way and should end immediately or never be applied if the caster dies or is not an actor."
        },
        {
          "paragraph": "Whether the magic effect's vfx should loop or not"
        },
        {
          "paragraph": "If set, the effect is considered harmful and should elicit a hostile reaction from affected NPCs."
        },
        {
          "paragraph": "If set, the magic effect has a duration. As an example, divine intervention has no duration while fire damage does."
        },
        {
          "paragraph": "If set, the magic effect depends on a magnitude. As an example, cure common disease has no magnitude while chameleon does."
        },
        {
          "paragraph": "Identifier of the sound used on hit"
        },
        {
          "paragraph": "Identifier of the vfx static used on hit"
        },
        {
          "paragraph": "Effect Icon Path"
        },
        {
          "paragraph": "Effect ID"
        },
        {
          "paragraph": "If set, the magic effect is applied fully on cast, rather than being continuously applied over the effect's duration. For example, chameleon is applied once, while fire damage is continuously applied for the duration."
        },
        {
          "paragraph": "Localized name of the effect"
        },
        {
          "paragraph": "If set, this effect cannot be re-applied until it has ended. This is used by bound equipment spells."
        },
        {
          "paragraph": "Identifier of the particle texture"
        },
        {
          "paragraph": "Skill ID that is this effect's school"
        }
      ]
    },
    {
      "header": "TypeMagicEffectId",
      "content": [
        {
          "code": "MagicEffectId"
        },
        {
          "paragraph": "\"absorbattribute\""
        },
        {
          "paragraph": "\"absorbfatigue\""
        },
        {
          "paragraph": "\"absorbhealth\""
        },
        {
          "paragraph": "\"absorbmagicka\""
        },
        {
          "paragraph": "\"absorbskill\""
        },
        {
          "paragraph": "\"almsiviintervention\""
        },
        {
          "paragraph": "\"blind\""
        },
        {
          "paragraph": "\"boundbattleaxe\""
        },
        {
          "paragraph": "\"boundboots\""
        },
        {
          "paragraph": "\"boundcuirass\""
        },
        {
          "paragraph": "\"bounddagger\""
        },
        {
          "paragraph": "\"boundgloves\""
        },
        {
          "paragraph": "\"boundhelm\""
        },
        {
          "paragraph": "\"boundlongbow\""
        },
        {
          "paragraph": "\"boundlongsword\""
        },
        {
          "paragraph": "\"boundmace\""
        },
        {
          "paragraph": "\"boundshield\""
        },
        {
          "paragraph": "\"boundspear\""
        },
        {
          "paragraph": "\"burden\""
        },
        {
          "paragraph": "\"calmcreature\""
        },
        {
          "paragraph": "\"calmhumanoid\""
        },
        {
          "paragraph": "\"chameleon\""
        },
        {
          "paragraph": "\"charm\""
        },
        {
          "paragraph": "\"commandcreature\""
        },
        {
          "paragraph": "\"commandhumanoid\""
        },
        {
          "paragraph": "\"corprus\""
        },
        {
          "paragraph": "\"cureblightdisease\""
        },
        {
          "paragraph": "\"curecommondisease\""
        },
        {
          "paragraph": "\"curecorprusdisease\""
        },
        {
          "paragraph": "\"cureparalyzation\""
        },
        {
          "paragraph": "\"curepoison\""
        },
        {
          "paragraph": "\"damageattribute\""
        },
        {
          "paragraph": "\"damagefatigue\""
        },
        {
          "paragraph": "\"damagehealth\""
        },
        {
          "paragraph": "\"damagemagicka\""
        },
        {
          "paragraph": "\"damageskill\""
        },
        {
          "paragraph": "\"demoralizecreature\""
        },
        {
          "paragraph": "\"demoralizehumanoid\""
        },
        {
          "paragraph": "\"detectanimal\""
        },
        {
          "paragraph": "\"detectenchantment\""
        },
        {
          "paragraph": "\"detectkey\""
        },
        {
          "paragraph": "\"disintegratearmor\""
        },
        {
          "paragraph": "\"disintegrateweapon\""
        },
        {
          "paragraph": "\"dispel\""
        },
        {
          "paragraph": "\"divineintervention\""
        },
        {
          "paragraph": "\"drainattribute\""
        },
        {
          "paragraph": "\"drainfatigue\""
        },
        {
          "paragraph": "\"drainhealth\""
        },
        {
          "paragraph": "\"drainmagicka\""
        },
        {
          "paragraph": "\"drainskill\""
        },
        {
          "paragraph": "\"extraspell\""
        },
        {
          "paragraph": "\"feather\""
        },
        {
          "paragraph": "\"firedamage\""
        },
        {
          "paragraph": "\"fireshield\""
        },
        {
          "paragraph": "\"fortifyattack\""
        },
        {
          "paragraph": "\"fortifyattribute\""
        },
        {
          "paragraph": "\"fortifyfatigue\""
        },
        {
          "paragraph": "\"fortifyhealth\""
        },
        {
          "paragraph": "\"fortifymagicka\""
        },
        {
          "paragraph": "\"fortifymaximummagicka\""
        },
        {
          "paragraph": "\"fortifyskill\""
        },
        {
          "paragraph": "\"frenzycreature\""
        },
        {
          "paragraph": "\"frenzyhumanoid\""
        },
        {
          "paragraph": "\"frostdamage\""
        },
        {
          "paragraph": "\"frostshield\""
        },
        {
          "paragraph": "\"invisibility\""
        },
        {
          "paragraph": "\"jump\""
        },
        {
          "paragraph": "\"levitate\""
        },
        {
          "paragraph": "\"light\""
        },
        {
          "paragraph": "\"lightningshield\""
        },
        {
          "paragraph": "\"lock\""
        },
        {
          "paragraph": "\"mark\""
        },
        {
          "paragraph": "\"nighteye\""
        },
        {
          "paragraph": "\"open\""
        },
        {
          "paragraph": "\"paralyze\""
        },
        {
          "paragraph": "\"poison\""
        },
        {
          "paragraph": "\"rallycreature\""
        },
        {
          "paragraph": "\"rallyhumanoid\""
        },
        {
          "paragraph": "\"recall\""
        },
        {
          "paragraph": "\"reflect\""
        },
        {
          "paragraph": "\"removecurse\""
        },
        {
          "paragraph": "\"resistblightdisease\""
        },
        {
          "paragraph": "\"resistcommondisease\""
        },
        {
          "paragraph": "\"resistcorprusdisease\""
        },
        {
          "paragraph": "\"resistfire\""
        },
        {
          "paragraph": "\"resistfrost\""
        },
        {
          "paragraph": "\"resistmagicka\""
        },
        {
          "paragraph": "\"resistnormalweapons\""
        },
        {
          "paragraph": "\"resistparalysis\""
        },
        {
          "paragraph": "\"resistpoison\""
        },
        {
          "paragraph": "\"resistshock\""
        },
        {
          "paragraph": "\"restoreattribute\""
        },
        {
          "paragraph": "\"restorefatigue\""
        },
        {
          "paragraph": "\"restorehealth\""
        },
        {
          "paragraph": "\"restoremagicka\""
        },
        {
          "paragraph": "\"restoreskill\""
        },
        {
          "paragraph": "\"sanctuary\""
        },
        {
          "paragraph": "\"shield\""
        },
        {
          "paragraph": "\"shockdamage\""
        },
        {
          "paragraph": "\"silence\""
        },
        {
          "paragraph": "\"slowfall\""
        },
        {
          "paragraph": "\"soultrap\""
        },
        {
          "paragraph": "\"sound\""
        },
        {
          "paragraph": "\"spellabsorption\""
        },
        {
          "paragraph": "\"stuntedmagicka\""
        },
        {
          "paragraph": "\"summonancestralghost\""
        },
        {
          "paragraph": "\"summonbear\""
        },
        {
          "paragraph": "\"summonbonelord\""
        },
        {
          "paragraph": "\"summonbonewalker\""
        },
        {
          "paragraph": "\"summonbonewolf\""
        },
        {
          "paragraph": "\"summoncenturionsphere\""
        },
        {
          "paragraph": "\"summonclannfear\""
        },
        {
          "paragraph": "\"summoncreature04\""
        },
        {
          "paragraph": "\"summoncreature05\""
        },
        {
          "paragraph": "\"summondaedroth\""
        },
        {
          "paragraph": "\"summondremora\""
        },
        {
          "paragraph": "\"summonfabricant\""
        },
        {
          "paragraph": "\"summonflameatronach\""
        },
        {
          "paragraph": "\"summonfrostatronach\""
        },
        {
          "paragraph": "\"summongoldensaint\""
        },
        {
          "paragraph": "\"summongreaterbonewalker\""
        },
        {
          "paragraph": "\"summonhunger\""
        },
        {
          "paragraph": "\"summonscamp\""
        },
        {
          "paragraph": "\"summonskeletalminion\""
        },
        {
          "paragraph": "\"summonstormatronach\""
        },
        {
          "paragraph": "\"summonwingedtwilight\""
        },
        {
          "paragraph": "\"summonwolf\""
        },
        {
          "paragraph": "\"sundamage\""
        },
        {
          "paragraph": "\"swiftswim\""
        },
        {
          "paragraph": "\"telekinesis\""
        },
        {
          "paragraph": "\"turnundead\""
        },
        {
          "paragraph": "\"vampirism\""
        },
        {
          "paragraph": "\"waterbreathing\""
        },
        {
          "paragraph": "\"waterwalking\""
        },
        {
          "paragraph": "\"weaknesstoblightdisease\""
        },
        {
          "paragraph": "\"weaknesstocommondisease\""
        },
        {
          "paragraph": "\"weaknesstocorprusdisease\""
        },
        {
          "paragraph": "\"weaknesstofire\""
        },
        {
          "paragraph": "\"weaknesstofrost\""
        },
        {
          "paragraph": "\"weaknesstomagicka\""
        },
        {
          "paragraph": "\"weaknesstonormalweapons\""
        },
        {
          "paragraph": "\"weaknesstopoison\""
        },
        {
          "paragraph": "\"weaknesstoshock\""
        }
      ]
    },
    {
      "header": "TypeMagicEffectWithParams",
      "content": [
        {
          "code": "MagicEffectWithParams"
        },
        {
          "paragraph": "Optional attribute ID"
        },
        {
          "paragraph": "Optional skill ID"
        },
        {
          "paragraph": "#MagicEffect"
        },
        {
          "paragraph": "ID of the associated#MagicEffect"
        },
        {
          "paragraph": "Index of this effect within the original list of#MagicEffectWithParamsof the spell/enchantment/potion this effect came from."
        }
      ]
    },
    {
      "header": "TypeMagicSchoolData",
      "content": [
        {
          "code": "MagicSchoolData"
        },
        {
          "paragraph": "VFS path to the area sound"
        },
        {
          "paragraph": "VFS path to the bolt sound"
        },
        {
          "paragraph": "VFS path to the cast sound"
        },
        {
          "paragraph": "VFS path to the failure sound"
        },
        {
          "paragraph": "VFS path to the hit sound"
        },
        {
          "paragraph": "Human-readable name"
        }
      ]
    },
    {
      "header": "TypeObjectOwner",
      "content": [
        {
          "code": "ObjectOwner"
        },
        {
          "paragraph": "Faction who owns the object (nil if missing). Global and self scripts can set the value."
        },
        {
          "paragraph": "Rank required to be allowed to pick up the object (nilif any rank is allowed). Global and self scripts can set the value."
        },
        {
          "code": "nil"
        },
        {
          "paragraph": "NPC who owns the object (nil if missing). Global and self scripts can set the value."
        }
      ]
    },
    {
      "header": "TypeSkill",
      "content": [
        {
          "code": "Skill"
        },
        {
          "paragraph": "Returns a read-only#SkillRecord"
        },
        {
          "paragraph": "A read-only list of all#SkillRecords in the world database, may be indexed by recordId.\nImplementsiterables#Listof #SkillRecord."
        }
      ]
    },
    {
      "header": "TypeSkillRecord",
      "content": [
        {
          "code": "SkillRecord"
        },
        {
          "paragraph": "The id of the skill's governing attribute"
        },
        {
          "paragraph": "Human-readable description"
        },
        {
          "paragraph": "VFS path to the icon"
        },
        {
          "paragraph": "Record id"
        },
        {
          "paragraph": "Human-readable name"
        },
        {
          "paragraph": "Optional magic school"
        },
        {
          "paragraph": "Table of the 4 possible skill gain values. SeeSkillProgression#SkillUseType."
        },
        {
          "paragraph": "Skill specialization. Either combat, magic, or stealth."
        }
      ]
    },
    {
      "header": "TypeSound",
      "content": [
        {
          "code": "Sound"
        },
        {
          "paragraph": "Checks if sound system is enabled (any functions to play sounds are no-ops when it is disabled)."
        },
        {
          "paragraph": "Check if an animated voiceover is playing"
        },
        {
          "paragraph": "Check if sound file is playing on given object"
        },
        {
          "paragraph": "Check if sound is playing on given object"
        },
        {
          "paragraph": "Play a 3D sound, attached to object"
        },
        {
          "paragraph": "In local scripts can be used only on self."
        },
        {
          "paragraph": "Play a 3D sound file, attached to object"
        },
        {
          "paragraph": "In local scripts can be used only on self."
        },
        {
          "paragraph": "List of all#SoundRecords."
        },
        {
          "paragraph": "Play an animated voiceover."
        },
        {
          "paragraph": "Stop an animated voiceover"
        },
        {
          "paragraph": "In local scripts can be used only on self."
        },
        {
          "paragraph": "Stop a 3D sound, attached to object"
        },
        {
          "paragraph": "In local scripts can be used only on self."
        },
        {
          "paragraph": "Stop a 3D sound file, attached to object"
        },
        {
          "paragraph": "In local scripts can be used only on self."
        }
      ]
    },
    {
      "header": "TypeSoundRecord",
      "content": [
        {
          "code": "SoundRecord"
        },
        {
          "paragraph": "Normalized path to sound file in VFS"
        },
        {
          "paragraph": "Sound id"
        },
        {
          "paragraph": "Raw maximal range value, from 0 to 255"
        },
        {
          "paragraph": "Raw minimal range value, from 0 to 255"
        },
        {
          "paragraph": "Raw sound volume, from 0 to 255"
        }
      ]
    },
    {
      "header": "TypeSpell",
      "content": [
        {
          "code": "Spell"
        },
        {
          "paragraph": "If set, the spell should ignore skill checks and always succeed."
        },
        {
          "paragraph": "If set, the casting cost should be computed based on the effect list rather than read from the cost field"
        },
        {
          "paragraph": "The effects (#MagicEffectWithParams) of the spell"
        },
        {
          "paragraph": "Spell id"
        },
        {
          "paragraph": "Spell name"
        },
        {
          "paragraph": "If set, the spell can be selected as a player's starting spell."
        },
        {
          "paragraph": "#SpellType"
        }
      ]
    },
    {
      "header": "TypeSpellRange",
      "content": [
        {
          "code": "SpellRange"
        },
        {
          "paragraph": "Applied on self"
        },
        {
          "paragraph": "Ranged spell"
        },
        {
          "paragraph": "On touch"
        }
      ]
    },
    {
      "header": "TypeSpellType",
      "content": [
        {
          "code": "SpellType"
        },
        {
          "paragraph": "Innate ability, always in effect"
        },
        {
          "paragraph": "Blight disease"
        },
        {
          "paragraph": "Curse"
        },
        {
          "paragraph": "Common disease"
        },
        {
          "paragraph": "Power, can be used once a day"
        },
        {
          "paragraph": "Normal spell, must be cast and costs mana"
        }
      ]
    },
    {
      "header": "TypeSpells",
      "content": [
        {
          "code": "Spells"
        },
        {
          "paragraph": "List of all#Spells."
        }
      ]
    },
    {
      "header": "TypeStats",
      "content": [
        {
          "code": "Stats"
        },
        {
          "paragraph": "#Attributefunctions"
        },
        {
          "paragraph": "#Skillfunctions"
        }
      ]
    },
    {
      "header": "TypeTeleportOptions",
      "content": [
        {
          "code": "TeleportOptions"
        },
        {
          "paragraph": "If true, adjust destination position to the ground."
        },
        {
          "paragraph": "New rotation; if missing, then the current rotation is used."
        }
      ]
    },
    {
      "header": "Typecore",
      "content": [
        {
          "code": "core"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "The revision of OpenMW Lua API."
        },
        {
          "paragraph": "It is an integer that is incremented every time the API is changed. See the actual value at the top of the page."
        },
        {
          "paragraph": "#ContentFiles: functions working with the list of currently loaded content files."
        },
        {
          "paragraph": "#Dialogue: Dialogue"
        },
        {
          "paragraph": "#Factions: Factions"
        },
        {
          "paragraph": "Construct FormId string from content file name and the index in the file."
        },
        {
          "paragraph": "In ESM3 games (e.g. Morrowind) FormIds are used to reference game objects.\nIn ESM4 games (e.g. Skyrim) FormIds are used both for game objects and as record ids."
        }
      ]
    },
    {
      "header": "Parameters",
      "content": [
        {
          "paragraph": "#string contentFile:"
        },
        {
          "code": "#string contentFile"
        },
        {
          "paragraph": "#number index:"
        },
        {
          "code": "#number index"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#string:"
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "if obj.recordId == core.getFormId('Skyrim.esm', 0x4d7da) then ... end"
        },
        {
          "code": "if obj.recordId == core.getFormId('Skyrim.esm', 0x4d7da) then ... end"
        },
        {
          "code": "-- In ESM3 content files (e.g. Morrowind) ids are human-readable strings\nobj.owner.factionId = 'blades'\n-- In ESM4 (e.g. Skyrim) ids should be constructed using `core.getFormId`:\nobj.owner.factionId = core.getFormId('Skyrim.esm', 0x72834)"
        },
        {
          "code": "-- In ESM3 content files (e.g. Morrowind) ids are human-readable strings\nobj.owner.factionId = 'blades'\n-- In ESM4 (e.g. Skyrim) ids should be constructed using `core.getFormId`:\nobj.owner.factionId = core.getFormId('Skyrim.esm', 0x72834)"
        },
        {
          "code": "-- local scripts\nlocal obj = nearby.getObjectByFormId(core.getFormId('Morrowind.esm', 128964))"
        },
        {
          "code": "-- local scripts\nlocal obj = nearby.getObjectByFormId(core.getFormId('Morrowind.esm', 128964))"
        },
        {
          "code": "-- global scripts\nlocal obj = world.getObjectByFormId(core.getFormId('Morrowind.esm', 128964))"
        },
        {
          "code": "-- global scripts\nlocal obj = world.getObjectByFormId(core.getFormId('Morrowind.esm', 128964))"
        },
        {
          "paragraph": "Get a GMST setting from content files."
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#string setting: \nSetting name"
        },
        {
          "code": "#string setting"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#any:"
        },
        {
          "paragraph": "Game time in seconds."
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#number:"
        },
        {
          "paragraph": "The scale of game time relative to simulation time."
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#number:"
        },
        {
          "paragraph": "Frame duration in seconds."
        },
        {
          "paragraph": "Not available in global scripts."
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#number:"
        },
        {
          "paragraph": "Real time in seconds; starting point is not fixed (can be time since last reboot), use only for measuring intervals."
        },
        {
          "paragraph": "For Unix time useos.time()."
        },
        {
          "code": "os.time()"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#number:"
        },
        {
          "paragraph": "Simulation time in seconds."
        },
        {
          "paragraph": "The number of simulation seconds passed in the game world since starting a new game."
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#number:"
        },
        {
          "paragraph": "The scale of simulation time relative to real time."
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#number:"
        },
        {
          "paragraph": "Whether the world is paused (onUpdate doesn't work when the world is paused)."
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#boolean:"
        },
        {
          "paragraph": "Return l10n formatting function for the given context."
        },
        {
          "paragraph": "Localisation files (containing the message names and translations) should be stored in\nVFS as files of the forml10n/<ContextName>/<Locale>.yaml."
        },
        {
          "code": "l10n/<ContextName>/<Locale>.yaml"
        },
        {
          "paragraph": "SeeLocalisationfor details of the localisation file structure."
        },
        {
          "paragraph": "When calling the l10n formatting function, if no localisation can be found for any of the requested locales then\nthe message key will be returned instead (and formatted, if possible).\nThis makes it possible to use the source strings as message identifiers."
        },
        {
          "paragraph": "If you do not use the source string as a message identifier you should instead make certain to include\na fallback locale with a complete set of messages."
        }
      ]
    },
    {
      "header": "Parameters",
      "content": [
        {
          "paragraph": "#string context: \nl10n context; recommended to use the name of the mod."
        },
        {
          "code": "#string context"
        },
        {
          "code": "This must match the <ContextName> directory in the VFS which stores the localisation files."
        },
        {
          "code": "This must match the <ContextName> directory in the VFS which stores the localisation files."
        },
        {
          "paragraph": "#string fallbackLocale: \nThe source locale containing the default messages"
        },
        {
          "code": "#string fallbackLocale"
        },
        {
          "code": "If omitted defaults to \"en\"."
        },
        {
          "code": "If omitted defaults to \"en\"."
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#function:"
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "# DataFiles/l10n/MyMod/en.yaml\ngood_morning: 'Good morning.'\nyou_have_arrows: |-\n  {count, plural,\n    one {You have one arrow.}\n    other {You have {count} arrows.}\n  }"
        },
        {
          "code": "# DataFiles/l10n/MyMod/en.yaml\ngood_morning: 'Good morning.'\nyou_have_arrows: |-\n  {count, plural,\n    one {You have one arrow.}\n    other {You have {count} arrows.}\n  }"
        },
        {
          "code": "# DataFiles/l10n/MyMod/de.yaml\ngood_morning: \"Guten Morgen.\"\nyou_have_arrows: |-\n  {count, plural,\n    one {Du hast ein Pfeil.}\n    other {Du hast {count} Pfeile.}\n  }\n\"Hello {name}!\": \"Hallo {name}!\""
        },
        {
          "code": "# DataFiles/l10n/MyMod/de.yaml\ngood_morning: \"Guten Morgen.\"\nyou_have_arrows: |-\n  {count, plural,\n    one {Du hast ein Pfeil.}\n    other {Du hast {count} Pfeile.}\n  }\n\"Hello {name}!\": \"Hallo {name}!\""
        },
        {
          "code": "-- Usage in Lua\nlocal myMsg = core.l10n('MyMod', 'en')\nprint( myMsg('good_morning') )\nprint( myMsg('you_have_arrows', {count=5}) )\nprint( myMsg('Hello {name}!', {name='World'}) )"
        },
        {
          "code": "-- Usage in Lua\nlocal myMsg = core.l10n('MyMod', 'en')\nprint( myMsg('good_morning') )\nprint( myMsg('you_have_arrows', {count=5}) )\nprint( myMsg('Hello {name}!', {name='World'}) )"
        },
        {
          "paragraph": "#Magic: spells and spell effects"
        },
        {
          "paragraph": "Terminates the game and quits to the OS."
        },
        {
          "paragraph": "Should be used only for testing purposes."
        },
        {
          "paragraph": "Send an event to global scripts."
        },
        {
          "paragraph": "Note: in menu scripts, errors if the game is not running (checkopenmw.menu#menu.getState)"
        }
      ]
    },
    {
      "header": "Parameters",
      "content": [
        {
          "paragraph": "#string eventName:"
        },
        {
          "code": "#string eventName"
        },
        {
          "paragraph": "eventData:"
        },
        {
          "code": "eventData"
        },
        {
          "paragraph": "#Sound: Sounds and Speech"
        },
        {
          "paragraph": "#Stats: stats"
        }
      ]
    },
    {
      "header": "TypeActiveEffect",
      "content": [
        {
          "code": "ActiveEffect"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Optional attribute ID"
        },
        {
          "paragraph": "Optional skill ID"
        },
        {
          "paragraph": "Effect id string"
        },
        {
          "paragraph": "current magnitude of the effect. Will be set to 0 when effect is removed or expires."
        },
        {
          "paragraph": "Localized name of the effect"
        }
      ]
    },
    {
      "header": "TypeActiveSpell",
      "content": [
        {
          "code": "ActiveSpell"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "A number uniquely identifying this active spell within the affected actor's list of active spells."
        },
        {
          "paragraph": "If set, this spell affects the base values of affected stats, rather than modifying current values."
        },
        {
          "paragraph": "The caster object, or nil if the spell has no defined caster"
        },
        {
          "paragraph": "The active effects (#ActiveSpellEffect) of this spell."
        },
        {
          "paragraph": "If set, this spell is tied to an equipped item and can only be ended by unequipping the item."
        },
        {
          "paragraph": "Record id of the spell or item used to cast the spell"
        },
        {
          "paragraph": "The enchanted item used to cast the spell, or nil if the spell was not cast from an enchanted item. Note that if the spell was cast for a single-use enchantment such as a scroll, this will be nil."
        },
        {
          "paragraph": "The spell or item display name"
        },
        {
          "paragraph": "If set, this spell can be applied multiple times. If not set, the same spell can only be applied once from the same source (where source is determined by caster + item). In vanilla rules, consumables are stackable while spells and enchantments are not."
        },
        {
          "paragraph": "If set, this spell effect is temporary and should end on its own. Either after a single application or after its duration has run out."
        }
      ]
    },
    {
      "header": "TypeActiveSpellEffect",
      "content": [
        {
          "code": "ActiveSpellEffect"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Optional attribute ID"
        },
        {
          "paragraph": "Optional skill ID"
        },
        {
          "paragraph": "Total duration in seconds of this spell effect, should not be confused with remaining duration. Or nil if the effect is not temporary."
        },
        {
          "paragraph": "Remaining duration in seconds of this spell effect, or nil if the effect is not temporary."
        },
        {
          "paragraph": "Magic effect id"
        },
        {
          "paragraph": "Index of this effect within the original list of#MagicEffectWithParamsof the spell/enchantment/potion this effect came from."
        },
        {
          "paragraph": "The magnitude of the effect in the current frame. This will be a new random number between minMagnitude and maxMagnitude every frame. Or nil if the effect has no magnitude."
        },
        {
          "paragraph": "The maximum magnitude of this effect, or nil if the effect has no magnitude."
        },
        {
          "paragraph": "The minimum magnitude of this effect, or nil if the effect has no magnitude."
        },
        {
          "paragraph": "Localized name of the effect"
        }
      ]
    },
    {
      "header": "TypeAttribute",
      "content": [
        {
          "code": "Attribute"
        },
        {
          "paragraph": "core.stats.Attribute"
        },
        {
          "code": "core.stats.Attribute"
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "local record = core.stats.Attribute.records['example_recordid']"
        },
        {
          "code": "local record = core.stats.Attribute.records['example_recordid']"
        },
        {
          "code": "local record = core.stats.Attribute.records[1]"
        },
        {
          "code": "local record = core.stats.Attribute.records[1]"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Returns a read-only#AttributeRecord"
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#string recordId:"
        },
        {
          "code": "#string recordId"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#AttributeRecord:"
        },
        {
          "paragraph": "A read-only list of all#AttributeRecords in the world database, may be indexed by recordId.\nImplementsiterables#Listof #AttributeRecord."
        }
      ]
    },
    {
      "header": "TypeAttributeRecord",
      "content": [
        {
          "code": "AttributeRecord"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Human-readable description"
        },
        {
          "paragraph": "VFS path to the icon"
        },
        {
          "paragraph": "Record id"
        },
        {
          "paragraph": "Human-readable name"
        }
      ]
    },
    {
      "header": "TypeCell",
      "content": [
        {
          "code": "Cell"
        },
        {
          "paragraph": "A cell of the game world."
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Get all objects of given type from the cell; Only available from global scripts."
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "type: \n(optional) object type (seeopenmw.types#types)"
        },
        {
          "code": "type"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#ObjectList:"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "local type = require('openmw.types')\nlocal all = cell:getAll()\nlocal weapons = cell:getAll(types.Weapon)"
        },
        {
          "code": "local type = require('openmw.types')\nlocal all = cell:getAll()\nlocal weapons = cell:getAll(types.Weapon)"
        },
        {
          "paragraph": "Index of the cell by X (only for exteriors)."
        },
        {
          "paragraph": "Index of the cell by Y (only for exteriors)."
        },
        {
          "paragraph": "True if in this cell sky should be rendered."
        },
        {
          "paragraph": "Returns true if the cell has given tag."
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#string tag: \nOne of \"QuasiExterior\", \"NoSleep\"."
        },
        {
          "code": "#string tag"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#boolean:"
        },
        {
          "paragraph": "True if the cell contains water."
        },
        {
          "paragraph": "Unique record ID of the cell, based on cell name for interiors and the worldspace for exteriors, or the formID of the cell for ESM4 cells."
        },
        {
          "paragraph": "Whether the cell is an exterior cell. \"Exterior\" means grid of cells where the player can seamless walk from one cell to another without teleports. QuasiExterior (interior with sky) is not an exterior."
        },
        {
          "paragraph": "Returns true either if the cell contains the object or if the cell is an exterior and the object is also in an exterior."
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#GameObjectobject:"
        },
        {
          "code": "#GameObjectobject"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#boolean:"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "if obj1.cell:isInSameSpace(obj2) then\n    dist = (obj1.position - obj2.position):length()\nelse\n    -- the distance can't be calculated because the coordinates are in different spaces\nend"
        },
        {
          "code": "if obj1.cell:isInSameSpace(obj2) then\n    dist = (obj1.position - obj2.position):length()\nelse\n    -- the distance can't be calculated because the coordinates are in different spaces\nend"
        },
        {
          "paragraph": "(DEPRECATED, usehasTag(\"QuasiExterior\")) Whether the cell is a quasi exterior (like interior but with the sky and the wheather)."
        },
        {
          "code": "hasTag(\"QuasiExterior\")"
        },
        {
          "paragraph": "Name of the cell (can be empty string)."
        },
        {
          "paragraph": "Region of the cell."
        },
        {
          "paragraph": "The water level of the cell. (nil if cell has no water)."
        },
        {
          "paragraph": "Id of the world space."
        }
      ]
    },
    {
      "header": "TypeContentFiles",
      "content": [
        {
          "code": "ContentFiles"
        },
        {
          "paragraph": "Functions working with the list of currently loaded content files."
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Check if the content file with given name present in the load order."
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#string contentFile:"
        },
        {
          "code": "#string contentFile"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#boolean:"
        },
        {
          "paragraph": "Return the index of a specific content file in the load order (ornilif there is no such content file)."
        },
        {
          "code": "nil"
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#string contentFile:"
        },
        {
          "code": "#string contentFile"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#number:"
        },
        {
          "paragraph": "The current load order (list of content file names)."
        }
      ]
    },
    {
      "header": "TypeDialogue",
      "content": [
        {
          "code": "Dialogue"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "#DialogueRecordsfunctions for greeting read-only records."
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "--print ids of all greeting records\nfor _, greetingRecord in pairs(core.dialogue.greeting.records) do\n    print(greetingRecord.id)\nend"
        },
        {
          "code": "--print ids of all greeting records\nfor _, greetingRecord in pairs(core.dialogue.greeting.records) do\n    print(greetingRecord.id)\nend"
        },
        {
          "code": "--print all NPC lines for \"greeting 0\"\nfor idx, greetingInfo in pairs(core.dialogue.greeting.records[\"greeting 0\"].infos) do\n    print(idx, greetingInfo.text)\nend"
        },
        {
          "code": "--print all NPC lines for \"greeting 0\"\nfor idx, greetingInfo in pairs(core.dialogue.greeting.records[\"greeting 0\"].infos) do\n    print(idx, greetingInfo.text)\nend"
        },
        {
          "paragraph": "#DialogueRecordsfunctions for journal (quest) read-only records."
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "--print the name of the record, which is a capitalized version of its id\nprint(core.dialogue.journal.records[\"ms_fargothring\"].name) -- MS_FargothRing"
        },
        {
          "code": "--print the name of the record, which is a capitalized version of its id\nprint(core.dialogue.journal.records[\"ms_fargothring\"].name) -- MS_FargothRing"
        },
        {
          "code": "--print ids of all journal records\nfor _, journalRecord in pairs(core.dialogue.journal.records) do\n    print(journalRecord.id)\nend"
        },
        {
          "code": "--print ids of all journal records\nfor _, journalRecord in pairs(core.dialogue.journal.records) do\n    print(journalRecord.id)\nend"
        },
        {
          "code": "--print quest names for all quests the player has inside a player script\nfor _, quest in pairs(types.Player.quests(self)) do\n    print(quest.id, core.dialogue.journal.records[quest.id].questName)\nend"
        },
        {
          "code": "--print quest names for all quests the player has inside a player script\nfor _, quest in pairs(types.Player.quests(self)) do\n    print(quest.id, core.dialogue.journal.records[quest.id].questName)\nend"
        },
        {
          "paragraph": "#DialogueRecordsfunctions for persuasion read-only records."
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "--print ids of all persuasion records\nfor _, persuasionRecord in pairs(core.dialogue.persuasion.records) do\n    print(persuasionRecord.id)\nend"
        },
        {
          "code": "--print ids of all persuasion records\nfor _, persuasionRecord in pairs(core.dialogue.persuasion.records) do\n    print(persuasionRecord.id)\nend"
        },
        {
          "code": "--print all NPC lines for \"admire success\"\nfor idx, persuasionInfo in pairs(core.dialogue.persuasion.records[\"admire success\"].infos) do\n    print(idx, persuasionInfo.text)\nend"
        },
        {
          "code": "--print all NPC lines for \"admire success\"\nfor idx, persuasionInfo in pairs(core.dialogue.persuasion.records[\"admire success\"].infos) do\n    print(idx, persuasionInfo.text)\nend"
        },
        {
          "paragraph": "#DialogueRecordsfunctions for topic read-only records."
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "--print ids of all topic records\nfor _, topicRecord in pairs(core.dialogue.topic.records) do\n    print(topicRecord.id)\nend"
        },
        {
          "code": "--print ids of all topic records\nfor _, topicRecord in pairs(core.dialogue.topic.records) do\n    print(topicRecord.id)\nend"
        },
        {
          "code": "--print all NPC lines for \"vivec\"\nfor idx, topicInfo in pairs(core.dialogue.topic.records[\"vivec\"].infos) do\n    print(idx, topicInfo.text)\nend"
        },
        {
          "code": "--print all NPC lines for \"vivec\"\nfor idx, topicInfo in pairs(core.dialogue.topic.records[\"vivec\"].infos) do\n    print(idx, topicInfo.text)\nend"
        },
        {
          "paragraph": "#DialogueRecordsfunctions for voice read-only records."
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "--print ids of all voice records\nfor _, voiceRecord in pairs(core.dialogue.voice.records) do\n    print(voiceRecord.id)\nend"
        },
        {
          "code": "--print ids of all voice records\nfor _, voiceRecord in pairs(core.dialogue.voice.records) do\n    print(voiceRecord.id)\nend"
        },
        {
          "code": "--print all NPC lines & sounds for \"flee\"\nfor idx, voiceInfo in pairs(core.dialogue.voice.records[\"flee\"].infos) do\n    print(idx, voiceInfo.text, voiceInfo.sound)\nend"
        },
        {
          "code": "--print all NPC lines & sounds for \"flee\"\nfor idx, voiceInfo in pairs(core.dialogue.voice.records[\"flee\"].infos) do\n    print(idx, voiceInfo.text, voiceInfo.sound)\nend"
        }
      ]
    },
    {
      "header": "TypeDialogueRecord",
      "content": [
        {
          "code": "DialogueRecord"
        },
        {
          "paragraph": "Depending on which store this read-only dialogue record is from, it may either be a journal, topic, greeting, persuasion or voice."
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "local journalId = core.dialogue.journal.records['A2_4_MiloGone'].id -- \"a2_4_milogone\""
        },
        {
          "code": "local journalId = core.dialogue.journal.records['A2_4_MiloGone'].id -- \"a2_4_milogone\""
        },
        {
          "code": "local journalName = core.dialogue.journal.records['A2_4_MiloGone'].name -- \"A2_4_MiloGone\""
        },
        {
          "code": "local journalName = core.dialogue.journal.records['A2_4_MiloGone'].name -- \"A2_4_MiloGone\""
        },
        {
          "code": "local questName = core.dialogue.journal.records['A2_4_MiloGone'].questName -- \"Mehra Milo and the Lost Prophecies\""
        },
        {
          "code": "local questName = core.dialogue.journal.records['A2_4_MiloGone'].questName -- \"Mehra Milo and the Lost Prophecies\""
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Record identifier"
        },
        {
          "paragraph": "A read-only list containing all#DialogueRecordInfos for this record, in order."
        },
        {
          "paragraph": "Same as id, but with upper cases preserved."
        },
        {
          "paragraph": "Non-nil only for journal records with available value. Holds the quest name for this journal entry. Same info may be available underinfos[1].textas well, but this variable is made for convenience."
        },
        {
          "code": "infos[1].text"
        }
      ]
    },
    {
      "header": "TypeDialogueRecordInfo",
      "content": [
        {
          "code": "DialogueRecordInfo"
        },
        {
          "paragraph": "Holds the read-only data for one of many info entries inside a dialogue record."
        },
        {
          "paragraph": "Depending on the type of the dialogue record (journal, topic, greeting, persuasion or voice), it could be, for example, a single journal entry or a NPC dialogue line."
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "--Variable `aa` below is \"Congratulations, %PCName. You are now %PCName the %NextPCRank.\" in vanilla MW:\nlocal aa = core.dialogue.topic.records['advancement'].infos[100].text"
        },
        {
          "code": "--Variable `aa` below is \"Congratulations, %PCName. You are now %PCName the %NextPCRank.\" in vanilla MW:\nlocal aa = core.dialogue.topic.records['advancement'].infos[100].text"
        },
        {
          "code": "--Variable `bb` below is \"sound/vo/a/f/fle_af003.mp3\" in vanilla MW:\nlocal bb = core.dialogue.voice.records['flee'].infos[149].sound"
        },
        {
          "code": "--Variable `bb` below is \"sound/vo/a/f/fle_af003.mp3\" in vanilla MW:\nlocal bb = core.dialogue.voice.records['flee'].infos[149].sound"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Speaker class allowing for this info entry to appear."
        },
        {
          "paragraph": "Always nil for journal records. Otherwise the nil value represents no conditions, i.e. no filtering applied using these criteria."
        },
        {
          "paragraph": "Minimum speaker disposition allowing for this info entry to appear."
        },
        {
          "paragraph": "Always nil for journal records. Otherwise is a nonnegative number, with the zero value representing no conditions, i.e. no filtering applied using these criteria."
        },
        {
          "paragraph": "Faction of which the speaker must be a member for this info entry to appear."
        },
        {
          "paragraph": "Always nil for journal records. Otherwise the nil value represents no conditions, i.e. no filtering applied using these criteria.\nCan return an empty string - this means that the actor must not be a member of any faction for this filtering to apply."
        },
        {
          "paragraph": "Minimum speaker's rank in their faction allowing for this info entry to appear."
        },
        {
          "paragraph": "Always nil for journal records. Otherwise the nil value represents no conditions, i.e. no filtering applied using these criteria.\nRank index starts from 1, matching the value inopenmw_types#NPC.getFactionRank"
        },
        {
          "paragraph": "Speaker gender allowing for this info entry to appear: \"male\" or \"female\"."
        },
        {
          "paragraph": "Always nil for journal records. Otherwise the nil value represents no conditions, i.e. no filtering applied using these criteria."
        },
        {
          "paragraph": "Speaker ID allowing for this info entry to appear."
        },
        {
          "paragraph": "Always nil for journal records. Otherwise the nil value represents no conditions, i.e. no filtering applied using these criteria."
        },
        {
          "paragraph": "Speaker race allowing for this info entry to appear."
        },
        {
          "paragraph": "Always nil for journal records. Otherwise the nil value represents no conditions, i.e. no filtering applied using these criteria."
        },
        {
          "paragraph": "Cell name prefix of location where the player must be for this info entry to appear."
        },
        {
          "paragraph": "Always nil for journal records. Otherwise the nil value represents no conditions, i.e. no filtering applied using these criteria.\n\"Prefix\" means that the cell's name starting with this value shall pass the filtering. For example:filterPlayerCellbeing \"Seyda Neen\" does apply to the cell \"Seyda Neen, Fargoth's House\"."
        },
        {
          "code": "filterPlayerCell"
        },
        {
          "paragraph": "Faction of which the player must be a member for this info entry to appear."
        },
        {
          "paragraph": "Always nil for journal records. Otherwise the nil value represents no conditions, i.e. no filtering applied using these criteria."
        },
        {
          "paragraph": "Minimum player's rank in their faction allowing for this info entry to appear."
        },
        {
          "paragraph": "Always nil for journal records. Otherwise the nil value represents no conditions, i.e. no filtering applied using these criteria.\nRank index starts from 1, matching the value inopenmw_types#NPC.getFactionRank"
        },
        {
          "paragraph": "Identifier for this info entry. Is unique only within the#DialogueRecordit belongs to."
        },
        {
          "paragraph": "True if this info entry has the \"Finished\" flag checked."
        },
        {
          "paragraph": "Non-nil only for journal records."
        },
        {
          "paragraph": "True if this info entry has the \"Quest Name\" flag checked."
        },
        {
          "paragraph": "Non-nil only for journal records.\nIf true, then the#DialogueRecord, to which this info entry belongs, should have this info entry'sDialogueRecordInfo.textvalue available in itsDialogueRecord.questName."
        },
        {
          "paragraph": "True if this info entry has the \"Restart\" flag checked."
        },
        {
          "paragraph": "Non-nil only for journal records."
        },
        {
          "paragraph": "Quest stage (same as inopenmw_types#PlayerQuest.stage) this info entry is associated with."
        },
        {
          "paragraph": "Non-nil only for journal records."
        },
        {
          "paragraph": "MWScript (full script text) executed when this info is chosen."
        },
        {
          "paragraph": "Always nil for journal records or if there is no value set."
        },
        {
          "paragraph": "Sound file path for this info entry."
        },
        {
          "paragraph": "Always nil for journal records or if there is no sound set."
        },
        {
          "paragraph": "Text associated with this info entry."
        }
      ]
    },
    {
      "header": "TypeDialogueRecords",
      "content": [
        {
          "code": "DialogueRecords"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "A read-only list of all#DialogueRecords in the world database, may be indexed by recordId, which doesn't have to be lowercase."
        },
        {
          "paragraph": "Implementsiterables#Listof #DialogueRecord."
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "local record = core.dialogue.journal.records['ms_fargothring']"
        },
        {
          "code": "local record = core.dialogue.journal.records['ms_fargothring']"
        },
        {
          "code": "local record = core.dialogue.journal.records['MS_FargothRing']"
        },
        {
          "code": "local record = core.dialogue.journal.records['MS_FargothRing']"
        },
        {
          "code": "local record = core.dialogue.journal.records[1]"
        },
        {
          "code": "local record = core.dialogue.journal.records[1]"
        },
        {
          "code": "local record = core.dialogue.topic.records[1]"
        },
        {
          "code": "local record = core.dialogue.topic.records[1]"
        },
        {
          "code": "local record = core.dialogue.topic.records['background']"
        },
        {
          "code": "local record = core.dialogue.topic.records['background']"
        },
        {
          "code": "local record = core.dialogue.greeting.records[1]"
        },
        {
          "code": "local record = core.dialogue.greeting.records[1]"
        },
        {
          "code": "local record = core.dialogue.greeting.records['greeting 0']"
        },
        {
          "code": "local record = core.dialogue.greeting.records['greeting 0']"
        },
        {
          "code": "local record = core.dialogue.persuasion.records[1]"
        },
        {
          "code": "local record = core.dialogue.persuasion.records[1]"
        },
        {
          "code": "local record = core.dialogue.persuasion.records['admire success']"
        },
        {
          "code": "local record = core.dialogue.persuasion.records['admire success']"
        },
        {
          "code": "local record = core.dialogue.voice.records[1]"
        },
        {
          "code": "local record = core.dialogue.voice.records[1]"
        },
        {
          "code": "local record = core.dialogue.voice.records[\"flee\"]"
        },
        {
          "code": "local record = core.dialogue.voice.records[\"flee\"]"
        }
      ]
    },
    {
      "header": "TypeEffects",
      "content": [
        {
          "code": "Effects"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Map from#MagicEffectIdto#MagicEffect"
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "-- Print all harmful effects\nfor _, effect in pairs(core.magic.effects.records) do\n    if effect.harmful then\n        print(effect.name)\n    end\nend"
        },
        {
          "code": "-- Print all harmful effects\nfor _, effect in pairs(core.magic.effects.records) do\n    if effect.harmful then\n        print(effect.name)\n    end\nend"
        },
        {
          "code": "-- Look up the record of a specific effect and print its icon\nlocal mgef = core.magic.effects.records[core.magic.EFFECT_TYPE.Reflect]\nprint('Reflect Icon: '..tostring(mgef.icon))"
        },
        {
          "code": "-- Look up the record of a specific effect and print its icon\nlocal mgef = core.magic.effects.records[core.magic.EFFECT_TYPE.Reflect]\nprint('Reflect Icon: '..tostring(mgef.icon))"
        }
      ]
    },
    {
      "header": "TypeEnchantment",
      "content": [
        {
          "code": "Enchantment"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "-- Getting the enchantment of an arbitrary item, if it has one\nlocal function getRecord(item)\n    if item.type and item.type.record then\n        return item.type.record(item)\n    end\n    return nil\nend\nlocal function getEnchantment(item)\n    local record = getRecord(item)\n    if record and record.enchant then\n        return core.magic.enchantments.records[record.enchant]\n    end\n    return nil\nend"
        },
        {
          "code": "-- Getting the enchantment of an arbitrary item, if it has one\nlocal function getRecord(item)\n    if item.type and item.type.record then\n        return item.type.record(item)\n    end\n    return nil\nend\nlocal function getEnchantment(item)\n    local record = getRecord(item)\n    if record and record.enchant then\n        return core.magic.enchantments.records[record.enchant]\n    end\n    return nil\nend"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "If set, the casting cost should be computed based on the effect list rather than read from the cost field"
        },
        {
          "paragraph": "Charge capacity. Should not be confused with current charge."
        },
        {
          "paragraph": "The effects (#MagicEffectWithParams) of the enchantment"
        },
        {
          "paragraph": "Enchantment id"
        },
        {
          "paragraph": "#EnchantmentType"
        }
      ]
    },
    {
      "header": "TypeEnchantmentType",
      "content": [
        {
          "code": "EnchantmentType"
        },
        {
          "paragraph": "core.magic.ENCHANTMENT_TYPE"
        },
        {
          "code": "core.magic.ENCHANTMENT_TYPE"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Enchantment is cast on strike, if there is enough charge."
        },
        {
          "paragraph": "Enchantment is cast when used, if there is enough charge."
        },
        {
          "paragraph": "Enchantment can be cast once, destroying the enchanted item."
        },
        {
          "paragraph": "Enchantment is always active when equipped."
        }
      ]
    },
    {
      "header": "TypeEnchantments",
      "content": [
        {
          "code": "Enchantments"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "A read-only list of all#Enchantmentrecords in the world database, may be indexed by recordId."
        },
        {
          "paragraph": "Implementsiterables#Listanditerables#Mapof #Enchantment."
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "local enchantment = core.magic.enchantments.records['marara's boon']  -- get by id"
        },
        {
          "code": "local enchantment = core.magic.enchantments.records['marara's boon']  -- get by id"
        },
        {
          "code": "local enchantment = core.magic.enchantments.records[1]  -- get by index"
        },
        {
          "code": "local enchantment = core.magic.enchantments.records[1]  -- get by index"
        },
        {
          "code": "-- Print all enchantments with constant effect\nfor _, ench in pairs(core.magic.enchantments.records) do\n    if ench.type == core.magic.ENCHANTMENT_TYPE.ConstantEffect then\n        print(ench.id)\n    end\nend"
        },
        {
          "code": "-- Print all enchantments with constant effect\nfor _, ench in pairs(core.magic.enchantments.records) do\n    if ench.type == core.magic.ENCHANTMENT_TYPE.ConstantEffect then\n        print(ench.id)\n    end\nend"
        }
      ]
    },
    {
      "header": "TypeFactionRank",
      "content": [
        {
          "code": "FactionRank"
        },
        {
          "paragraph": "Faction rank data record"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Attributes values required to get this rank."
        },
        {
          "paragraph": "Reaction of faction members if player is in this faction."
        },
        {
          "paragraph": "Secondary skill value required to get this rank."
        },
        {
          "paragraph": "Faction name Rank display name"
        },
        {
          "paragraph": "Primary skill value required to get this rank."
        }
      ]
    },
    {
      "header": "TypeFactionRecord",
      "content": [
        {
          "code": "FactionRecord"
        },
        {
          "paragraph": "Faction data record"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "A read-only list containing IDs of attributes to advance ranks in the faction."
        },
        {
          "paragraph": "If true, the faction won't show in the player's skills menu"
        },
        {
          "paragraph": "Faction id"
        },
        {
          "paragraph": "Faction name"
        },
        {
          "paragraph": "A read-only list containing data for all ranks in the faction, in order."
        },
        {
          "paragraph": "A read-only map containing reactions of other factions to this faction."
        },
        {
          "paragraph": "A read-only list containing IDs of skills to advance ranks in the faction."
        }
      ]
    },
    {
      "header": "TypeFactions",
      "content": [
        {
          "code": "Factions"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "A read-only list of all#FactionRecords in the world database."
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "local record = core.factions.records['example_recordid']"
        },
        {
          "code": "local record = core.factions.records['example_recordid']"
        },
        {
          "code": "local record = core.factions.records[1]"
        },
        {
          "code": "local record = core.factions.records[1]"
        }
      ]
    },
    {
      "header": "TypeGameObject",
      "content": [
        {
          "code": "GameObject"
        }
      ]
    },
    {
      "header": "Extends #userdata",
      "content": [
        {
          "paragraph": "Any object that exists in the game world and has a specific location."
        },
        {
          "paragraph": "Player, actors, items, and statics are game objects."
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Activate the object."
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#GameObjectactor: \nThe actor who activates the object"
        },
        {
          "code": "#GameObjectactor"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "local self = require('openmw.self')\nobject:activateBy(self)"
        },
        {
          "code": "local self = require('openmw.self')\nobject:activateBy(self)"
        },
        {
          "paragraph": "Add new local script to the object."
        },
        {
          "paragraph": "Can be called only from a global script. Script should be specified in a content\nfile (omwgame/omwaddon/omwscripts) with a CUSTOM flag. Scripts can not be attached to Statics."
        }
      ]
    },
    {
      "header": "Parameters",
      "content": [
        {
          "paragraph": "#string scriptPath: \nPath to the script in OpenMW virtual filesystem."
        },
        {
          "code": "#string scriptPath"
        },
        {
          "paragraph": "#table initData: \n(optional) Initialization data to be passed to onInit. If missed then Lua initialization data from content files will be used (if exists for this script)."
        },
        {
          "code": "#table initData"
        },
        {
          "paragraph": "The cell where the object currently is. During loading a game and for objects in an inventory or a containercellis nil."
        },
        {
          "code": "cell"
        },
        {
          "paragraph": "Lower cased file name of the content file that defines this object; nil for dynamically created objects."
        },
        {
          "paragraph": "Count (>1 means a stack of objects)."
        },
        {
          "paragraph": "Whether the object is enabled or disabled. Global scripts can set the value. Items in containers or inventories can't be disabled."
        },
        {
          "paragraph": "The axis aligned bounding box in world coordinates."
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "openmw.util#Box:"
        },
        {
          "paragraph": "Global Variable associated with this object(read only)."
        },
        {
          "paragraph": "Whether a script with given path is attached to this object."
        },
        {
          "paragraph": "Can be called only from a global script."
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#string scriptPath: \nPath to the script in OpenMW virtual filesystem."
        },
        {
          "code": "#string scriptPath"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#boolean:"
        },
        {
          "paragraph": "A unique id of this object (not record id), can be used as a key in a table."
        },
        {
          "paragraph": "Does the object still exist and is available."
        },
        {
          "paragraph": "Returns true if the object exists and loaded, and false otherwise. If false, then every\naccess to the object will raise an error."
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#boolean:"
        },
        {
          "paragraph": "Moves object into a container or an inventory."
        },
        {
          "paragraph": "Enables if was disabled.\nCan be called only from a global script."
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#any dest:#Inventoryor#GameObject"
        },
        {
          "code": "#any dest"
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "item:moveInto(types.Actor.inventory(actor))"
        },
        {
          "code": "item:moveInto(types.Actor.inventory(actor))"
        },
        {
          "code": "item:moveInto(types.Container.content(container))"
        },
        {
          "code": "item:moveInto(types.Container.content(container))"
        },
        {
          "code": "item:moveInto(container)"
        },
        {
          "code": "item:moveInto(container)"
        },
        {
          "paragraph": "Ownership information"
        },
        {
          "paragraph": "Container or actor that contains (or has in inventory) this object. It is nil if the object is in a cell."
        },
        {
          "paragraph": "Object position."
        },
        {
          "paragraph": "Returns record ID of the object in lowercase."
        },
        {
          "paragraph": "Removes an object or reduces a stack of objects."
        },
        {
          "paragraph": "Can be called only from a global script."
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#number count: \n(optional) the number of items to remove (if not specified then the whole stack)"
        },
        {
          "code": "#number count"
        },
        {
          "paragraph": "Removes script that was attached byaddScriptCan be called only from a global script."
        },
        {
          "code": "addScript"
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#string scriptPath: \nPath to the script in OpenMW virtual filesystem."
        },
        {
          "code": "#string scriptPath"
        },
        {
          "paragraph": "Object rotation."
        },
        {
          "paragraph": "Object scale."
        },
        {
          "paragraph": "Send local event to the object."
        }
      ]
    },
    {
      "header": "Parameters",
      "content": [
        {
          "paragraph": "#string eventName:"
        },
        {
          "code": "#string eventName"
        },
        {
          "paragraph": "eventData:"
        },
        {
          "code": "eventData"
        },
        {
          "paragraph": "Sets the object's scale."
        },
        {
          "paragraph": "Can be called only from a global script."
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#number scale: \nScale desired in game."
        },
        {
          "code": "#number scale"
        },
        {
          "paragraph": "Splits a stack of items."
        },
        {
          "paragraph": "Original stack is reduced bycount. Returns a new stack withcountitems.\nCan be called only from a global script."
        },
        {
          "code": "count"
        },
        {
          "code": "count"
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#number count: \nThe number of items to return."
        },
        {
          "code": "#number count"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#GameObject:"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "-- take 50 coins from `money` and put to the container `cont`\nmoney:split(50):moveInto(types.Container.content(cont))"
        },
        {
          "code": "-- take 50 coins from `money` and put to the container `cont`\nmoney:split(50):moveInto(types.Container.content(cont))"
        },
        {
          "paragraph": "The object original position"
        },
        {
          "paragraph": "The object original rotation"
        },
        {
          "paragraph": "Moves object to given cell and position."
        },
        {
          "paragraph": "Can be called only from a global script.\nThe effect is not immediate: the position will be updated only in the next\nframe. Can be called only from a global script. Enables object if it was disabled.\nCan be used to move objects from an inventory or a container to the world."
        }
      ]
    },
    {
      "header": "Parameters",
      "content": [
        {
          "paragraph": "#any cellOrName: \nA cell to define the destination worldspace; can be either #Cell, or cell name, or an empty string (empty string means the default exterior worldspace).\nIf the worldspace has multiple cells (i.e. an exterior), the destination cell is calculated usingposition."
        },
        {
          "code": "#any cellOrName"
        },
        {
          "code": "position"
        },
        {
          "paragraph": "openmw.util#Vector3position: \nNew position."
        },
        {
          "code": "openmw.util#Vector3position"
        },
        {
          "paragraph": "#TeleportOptionsoptions: \n(optional) Either table#TeleportOptionsoropenmw.util#Transformrotation."
        },
        {
          "code": "#TeleportOptionsoptions"
        },
        {
          "paragraph": "Type of the object (one of the tables from the packageopenmw.types#types)."
        }
      ]
    },
    {
      "header": "TypeInventory",
      "content": [
        {
          "code": "Inventory"
        },
        {
          "paragraph": "Inventory of a player/NPC or a content of a container."
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "The number of items with given recordId."
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#string recordId:"
        },
        {
          "code": "#string recordId"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#number:"
        },
        {
          "paragraph": "Get first item with given recordId from the inventory."
        },
        {
          "paragraph": "Returns nil if not found."
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#string recordId:"
        },
        {
          "code": "#string recordId"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#GameObject:"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "inventory:find('gold_001')"
        },
        {
          "code": "inventory:find('gold_001')"
        },
        {
          "paragraph": "Get all items with given recordId from the inventory."
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#string recordId:"
        },
        {
          "code": "#string recordId"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#ObjectList:"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "for _, item in ipairs(inventory:findAll('common_shirt_01')) do ... end"
        },
        {
          "code": "for _, item in ipairs(inventory:findAll('common_shirt_01')) do ... end"
        },
        {
          "paragraph": "Get all items of given type from the inventory."
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "type: \n(optional) items type (seeopenmw.types#types)"
        },
        {
          "code": "type"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#ObjectList:"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "local types = require('openmw.types')\nlocal self = require('openmw.self')\nlocal playerInventory = types.Actor.inventory(self.object)\nlocal all = playerInventory:getAll()\nlocal weapons = playerInventory:getAll(types.Weapon)"
        },
        {
          "code": "local types = require('openmw.types')\nlocal self = require('openmw.self')\nlocal playerInventory = types.Actor.inventory(self.object)\nlocal all = playerInventory:getAll()\nlocal weapons = playerInventory:getAll(types.Weapon)"
        },
        {
          "paragraph": "Checks if the inventory has a resolved item list."
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#boolean:"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "inventory:isResolved()"
        },
        {
          "code": "inventory:isResolved()"
        },
        {
          "paragraph": "Will resolve the inventory, filling it with levelled items if applicable, making its contents permanent."
        },
        {
          "paragraph": "Must be used in a global script."
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "inventory:resolve()"
        },
        {
          "code": "inventory:resolve()"
        }
      ]
    },
    {
      "header": "TypeMagic",
      "content": [
        {
          "code": "Magic"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Possible#MagicEffectIdvalues"
        },
        {
          "paragraph": "Possible#EnchantmentTypevalues"
        },
        {
          "paragraph": "Possible#SpellRangevalues"
        },
        {
          "paragraph": "Possible#SpellTypevalues"
        },
        {
          "paragraph": "#Effects: Magic Effects"
        },
        {
          "paragraph": "#Enchantments: Enchantments"
        },
        {
          "paragraph": "#Spells: Spells"
        }
      ]
    },
    {
      "header": "TypeMagicEffect",
      "content": [
        {
          "code": "MagicEffect"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Identifier of the sound used for AOE spells"
        },
        {
          "paragraph": "Identifier of the vfx static used for AOE spells"
        },
        {
          "paragraph": "Identifier of the projectile used for ranged spells"
        },
        {
          "paragraph": "Identifier of the projectile sound used for ranged spells"
        },
        {
          "paragraph": "Identifier of the sound used for casting"
        },
        {
          "paragraph": "Identifier of the vfx static used for casting"
        },
        {
          "paragraph": "If set, it is implied the magic effect links back to the caster in some way and should end immediately or never be applied if the caster dies or is not an actor."
        },
        {
          "paragraph": "Whether the magic effect's vfx should loop or not"
        },
        {
          "paragraph": "If set, the effect is considered harmful and should elicit a hostile reaction from affected NPCs."
        },
        {
          "paragraph": "If set, the magic effect has a duration. As an example, divine intervention has no duration while fire damage does."
        },
        {
          "paragraph": "If set, the magic effect depends on a magnitude. As an example, cure common disease has no magnitude while chameleon does."
        },
        {
          "paragraph": "Identifier of the sound used on hit"
        },
        {
          "paragraph": "Identifier of the vfx static used on hit"
        },
        {
          "paragraph": "Effect Icon Path"
        },
        {
          "paragraph": "Effect ID"
        },
        {
          "paragraph": "If set, the magic effect is applied fully on cast, rather than being continuously applied over the effect's duration. For example, chameleon is applied once, while fire damage is continuously applied for the duration."
        },
        {
          "paragraph": "Localized name of the effect"
        },
        {
          "paragraph": "If set, this effect cannot be re-applied until it has ended. This is used by bound equipment spells."
        },
        {
          "paragraph": "Identifier of the particle texture"
        },
        {
          "paragraph": "Skill ID that is this effect's school"
        }
      ]
    },
    {
      "header": "TypeMagicEffectId",
      "content": [
        {
          "code": "MagicEffectId"
        },
        {
          "paragraph": "core.magic.EFFECT_TYPE"
        },
        {
          "code": "core.magic.EFFECT_TYPE"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "\"absorbattribute\""
        },
        {
          "paragraph": "\"absorbfatigue\""
        },
        {
          "paragraph": "\"absorbhealth\""
        },
        {
          "paragraph": "\"absorbmagicka\""
        },
        {
          "paragraph": "\"absorbskill\""
        },
        {
          "paragraph": "\"almsiviintervention\""
        },
        {
          "paragraph": "\"blind\""
        },
        {
          "paragraph": "\"boundbattleaxe\""
        },
        {
          "paragraph": "\"boundboots\""
        },
        {
          "paragraph": "\"boundcuirass\""
        },
        {
          "paragraph": "\"bounddagger\""
        },
        {
          "paragraph": "\"boundgloves\""
        },
        {
          "paragraph": "\"boundhelm\""
        },
        {
          "paragraph": "\"boundlongbow\""
        },
        {
          "paragraph": "\"boundlongsword\""
        },
        {
          "paragraph": "\"boundmace\""
        },
        {
          "paragraph": "\"boundshield\""
        },
        {
          "paragraph": "\"boundspear\""
        },
        {
          "paragraph": "\"burden\""
        },
        {
          "paragraph": "\"calmcreature\""
        },
        {
          "paragraph": "\"calmhumanoid\""
        },
        {
          "paragraph": "\"chameleon\""
        },
        {
          "paragraph": "\"charm\""
        },
        {
          "paragraph": "\"commandcreature\""
        },
        {
          "paragraph": "\"commandhumanoid\""
        },
        {
          "paragraph": "\"corprus\""
        },
        {
          "paragraph": "\"cureblightdisease\""
        },
        {
          "paragraph": "\"curecommondisease\""
        },
        {
          "paragraph": "\"curecorprusdisease\""
        },
        {
          "paragraph": "\"cureparalyzation\""
        },
        {
          "paragraph": "\"curepoison\""
        },
        {
          "paragraph": "\"damageattribute\""
        },
        {
          "paragraph": "\"damagefatigue\""
        },
        {
          "paragraph": "\"damagehealth\""
        },
        {
          "paragraph": "\"damagemagicka\""
        },
        {
          "paragraph": "\"damageskill\""
        },
        {
          "paragraph": "\"demoralizecreature\""
        },
        {
          "paragraph": "\"demoralizehumanoid\""
        },
        {
          "paragraph": "\"detectanimal\""
        },
        {
          "paragraph": "\"detectenchantment\""
        },
        {
          "paragraph": "\"detectkey\""
        },
        {
          "paragraph": "\"disintegratearmor\""
        },
        {
          "paragraph": "\"disintegrateweapon\""
        },
        {
          "paragraph": "\"dispel\""
        },
        {
          "paragraph": "\"divineintervention\""
        },
        {
          "paragraph": "\"drainattribute\""
        },
        {
          "paragraph": "\"drainfatigue\""
        },
        {
          "paragraph": "\"drainhealth\""
        },
        {
          "paragraph": "\"drainmagicka\""
        },
        {
          "paragraph": "\"drainskill\""
        },
        {
          "paragraph": "\"extraspell\""
        },
        {
          "paragraph": "\"feather\""
        },
        {
          "paragraph": "\"firedamage\""
        },
        {
          "paragraph": "\"fireshield\""
        },
        {
          "paragraph": "\"fortifyattack\""
        },
        {
          "paragraph": "\"fortifyattribute\""
        },
        {
          "paragraph": "\"fortifyfatigue\""
        },
        {
          "paragraph": "\"fortifyhealth\""
        },
        {
          "paragraph": "\"fortifymagicka\""
        },
        {
          "paragraph": "\"fortifymaximummagicka\""
        },
        {
          "paragraph": "\"fortifyskill\""
        },
        {
          "paragraph": "\"frenzycreature\""
        },
        {
          "paragraph": "\"frenzyhumanoid\""
        },
        {
          "paragraph": "\"frostdamage\""
        },
        {
          "paragraph": "\"frostshield\""
        },
        {
          "paragraph": "\"invisibility\""
        },
        {
          "paragraph": "\"jump\""
        },
        {
          "paragraph": "\"levitate\""
        },
        {
          "paragraph": "\"light\""
        },
        {
          "paragraph": "\"lightningshield\""
        },
        {
          "paragraph": "\"lock\""
        },
        {
          "paragraph": "\"mark\""
        },
        {
          "paragraph": "\"nighteye\""
        },
        {
          "paragraph": "\"open\""
        },
        {
          "paragraph": "\"paralyze\""
        },
        {
          "paragraph": "\"poison\""
        },
        {
          "paragraph": "\"rallycreature\""
        },
        {
          "paragraph": "\"rallyhumanoid\""
        },
        {
          "paragraph": "\"recall\""
        },
        {
          "paragraph": "\"reflect\""
        },
        {
          "paragraph": "\"removecurse\""
        },
        {
          "paragraph": "\"resistblightdisease\""
        },
        {
          "paragraph": "\"resistcommondisease\""
        },
        {
          "paragraph": "\"resistcorprusdisease\""
        },
        {
          "paragraph": "\"resistfire\""
        },
        {
          "paragraph": "\"resistfrost\""
        },
        {
          "paragraph": "\"resistmagicka\""
        },
        {
          "paragraph": "\"resistnormalweapons\""
        },
        {
          "paragraph": "\"resistparalysis\""
        },
        {
          "paragraph": "\"resistpoison\""
        },
        {
          "paragraph": "\"resistshock\""
        },
        {
          "paragraph": "\"restoreattribute\""
        },
        {
          "paragraph": "\"restorefatigue\""
        },
        {
          "paragraph": "\"restorehealth\""
        },
        {
          "paragraph": "\"restoremagicka\""
        },
        {
          "paragraph": "\"restoreskill\""
        },
        {
          "paragraph": "\"sanctuary\""
        },
        {
          "paragraph": "\"shield\""
        },
        {
          "paragraph": "\"shockdamage\""
        },
        {
          "paragraph": "\"silence\""
        },
        {
          "paragraph": "\"slowfall\""
        },
        {
          "paragraph": "\"soultrap\""
        },
        {
          "paragraph": "\"sound\""
        },
        {
          "paragraph": "\"spellabsorption\""
        },
        {
          "paragraph": "\"stuntedmagicka\""
        },
        {
          "paragraph": "\"summonancestralghost\""
        },
        {
          "paragraph": "\"summonbear\""
        },
        {
          "paragraph": "\"summonbonelord\""
        },
        {
          "paragraph": "\"summonbonewalker\""
        },
        {
          "paragraph": "\"summonbonewolf\""
        },
        {
          "paragraph": "\"summoncenturionsphere\""
        },
        {
          "paragraph": "\"summonclannfear\""
        },
        {
          "paragraph": "\"summoncreature04\""
        },
        {
          "paragraph": "\"summoncreature05\""
        },
        {
          "paragraph": "\"summondaedroth\""
        },
        {
          "paragraph": "\"summondremora\""
        },
        {
          "paragraph": "\"summonfabricant\""
        },
        {
          "paragraph": "\"summonflameatronach\""
        },
        {
          "paragraph": "\"summonfrostatronach\""
        },
        {
          "paragraph": "\"summongoldensaint\""
        },
        {
          "paragraph": "\"summongreaterbonewalker\""
        },
        {
          "paragraph": "\"summonhunger\""
        },
        {
          "paragraph": "\"summonscamp\""
        },
        {
          "paragraph": "\"summonskeletalminion\""
        },
        {
          "paragraph": "\"summonstormatronach\""
        },
        {
          "paragraph": "\"summonwingedtwilight\""
        },
        {
          "paragraph": "\"summonwolf\""
        },
        {
          "paragraph": "\"sundamage\""
        },
        {
          "paragraph": "\"swiftswim\""
        },
        {
          "paragraph": "\"telekinesis\""
        },
        {
          "paragraph": "\"turnundead\""
        },
        {
          "paragraph": "\"vampirism\""
        },
        {
          "paragraph": "\"waterbreathing\""
        },
        {
          "paragraph": "\"waterwalking\""
        },
        {
          "paragraph": "\"weaknesstoblightdisease\""
        },
        {
          "paragraph": "\"weaknesstocommondisease\""
        },
        {
          "paragraph": "\"weaknesstocorprusdisease\""
        },
        {
          "paragraph": "\"weaknesstofire\""
        },
        {
          "paragraph": "\"weaknesstofrost\""
        },
        {
          "paragraph": "\"weaknesstomagicka\""
        },
        {
          "paragraph": "\"weaknesstonormalweapons\""
        },
        {
          "paragraph": "\"weaknesstopoison\""
        },
        {
          "paragraph": "\"weaknesstoshock\""
        }
      ]
    },
    {
      "header": "TypeMagicEffectWithParams",
      "content": [
        {
          "code": "MagicEffectWithParams"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Optional attribute ID"
        },
        {
          "paragraph": "Optional skill ID"
        },
        {
          "paragraph": "#MagicEffect"
        },
        {
          "paragraph": "ID of the associated#MagicEffect"
        },
        {
          "paragraph": "Index of this effect within the original list of#MagicEffectWithParamsof the spell/enchantment/potion this effect came from."
        }
      ]
    },
    {
      "header": "TypeMagicSchoolData",
      "content": [
        {
          "code": "MagicSchoolData"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "VFS path to the area sound"
        },
        {
          "paragraph": "VFS path to the bolt sound"
        },
        {
          "paragraph": "VFS path to the cast sound"
        },
        {
          "paragraph": "VFS path to the failure sound"
        },
        {
          "paragraph": "VFS path to the hit sound"
        },
        {
          "paragraph": "Human-readable name"
        }
      ]
    },
    {
      "header": "TypeObjectList",
      "content": [
        {
          "code": "ObjectList"
        },
        {
          "paragraph": "List of GameObjects."
        },
        {
          "paragraph": "Implementsiterables#Listof #GameObject"
        },
        {
          "paragraph": "ObjectListis a list of#GameObject."
        },
        {
          "code": "ObjectList"
        },
        {
          "code": "#GameObject"
        }
      ]
    },
    {
      "header": "TypeObjectOwner",
      "content": [
        {
          "code": "ObjectOwner"
        },
        {
          "paragraph": "Object owner information"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Faction who owns the object (nil if missing). Global and self scripts can set the value."
        },
        {
          "paragraph": "Rank required to be allowed to pick up the object (nilif any rank is allowed). Global and self scripts can set the value."
        },
        {
          "code": "nil"
        },
        {
          "paragraph": "NPC who owns the object (nil if missing). Global and self scripts can set the value."
        }
      ]
    },
    {
      "header": "TypeSkill",
      "content": [
        {
          "code": "Skill"
        },
        {
          "paragraph": "core.stats.Skill"
        },
        {
          "code": "core.stats.Skill"
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "local record = core.stats.Skill.records['example_recordid']"
        },
        {
          "code": "local record = core.stats.Skill.records['example_recordid']"
        },
        {
          "code": "local record = core.stats.Skill.records[1]"
        },
        {
          "code": "local record = core.stats.Skill.records[1]"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Returns a read-only#SkillRecord"
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#string recordId:"
        },
        {
          "code": "#string recordId"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#SkillRecord:"
        },
        {
          "paragraph": "A read-only list of all#SkillRecords in the world database, may be indexed by recordId.\nImplementsiterables#Listof #SkillRecord."
        }
      ]
    },
    {
      "header": "TypeSkillRecord",
      "content": [
        {
          "code": "SkillRecord"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "The id of the skill's governing attribute"
        },
        {
          "paragraph": "Human-readable description"
        },
        {
          "paragraph": "VFS path to the icon"
        },
        {
          "paragraph": "Record id"
        },
        {
          "paragraph": "Human-readable name"
        },
        {
          "paragraph": "Optional magic school"
        },
        {
          "paragraph": "Table of the 4 possible skill gain values. SeeSkillProgression#SkillUseType."
        },
        {
          "paragraph": "Skill specialization. Either combat, magic, or stealth."
        }
      ]
    },
    {
      "header": "TypeSound",
      "content": [
        {
          "code": "Sound"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Checks if sound system is enabled (any functions to play sounds are no-ops when it is disabled)."
        },
        {
          "paragraph": "It can not be enabled or disabled during runtime."
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#boolean:"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "local enabled = core.sound.isEnabled();"
        },
        {
          "code": "local enabled = core.sound.isEnabled();"
        },
        {
          "paragraph": "Check if an animated voiceover is playing"
        }
      ]
    },
    {
      "header": "Parameter",
      "content": [
        {
          "paragraph": "#GameObjectobject: \nObject on which we want to check an animated voiceover"
        },
        {
          "code": "#GameObjectobject"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#boolean:"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "local isActive = isSayActive(object);"
        },
        {
          "code": "local isActive = isSayActive(object);"
        },
        {
          "paragraph": "Check if sound file is playing on given object"
        }
      ]
    },
    {
      "header": "Parameters",
      "content": [
        {
          "paragraph": "#string fileName: \nPath to sound file in VFS"
        },
        {
          "code": "#string fileName"
        },
        {
          "paragraph": "#GameObjectobject: \nObject on which we want to check sound"
        },
        {
          "code": "#GameObjectobject"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#boolean:"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "local isPlaying = core.sound.isSoundFilePlaying(\"Sound\\\\test.mp3\", object);"
        },
        {
          "code": "local isPlaying = core.sound.isSoundFilePlaying(\"Sound\\\\test.mp3\", object);"
        },
        {
          "paragraph": "Check if sound is playing on given object"
        }
      ]
    },
    {
      "header": "Parameters",
      "content": [
        {
          "paragraph": "#string soundId: \nID of Sound record to check"
        },
        {
          "code": "#string soundId"
        },
        {
          "paragraph": "#GameObjectobject: \nObject on which we want to check sound"
        },
        {
          "code": "#GameObjectobject"
        }
      ]
    },
    {
      "header": "Return value",
      "content": [
        {
          "paragraph": "#boolean:"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "local isPlaying = core.sound.isSoundPlaying(\"shock bolt\", object);"
        },
        {
          "code": "local isPlaying = core.sound.isSoundPlaying(\"shock bolt\", object);"
        },
        {
          "paragraph": "Play a 3D sound, attached to object"
        },
        {
          "paragraph": "In local scripts can be used only on self."
        }
      ]
    },
    {
      "header": "Parameters",
      "content": [
        {
          "paragraph": "#string soundId: \nID of Sound record to play"
        },
        {
          "code": "#string soundId"
        },
        {
          "paragraph": "#GameObjectobject: \nObject to which we attach the sound"
        },
        {
          "code": "#GameObjectobject"
        },
        {
          "paragraph": "#table options: \nAn optional table with additional optional arguments. Can contain:"
        },
        {
          "code": "#table options"
        },
        {
          "code": "timeOffset"
        },
        {
          "code": "volume"
        },
        {
          "code": "pitch"
        },
        {
          "code": "loop"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "local params = {\n   timeOffset=0.1\n   volume=0.3,\n   loop=false,\n   pitch=1.0\n};\ncore.sound.playSound3d(\"shock bolt\", object, params)"
        },
        {
          "code": "local params = {\n   timeOffset=0.1\n   volume=0.3,\n   loop=false,\n   pitch=1.0\n};\ncore.sound.playSound3d(\"shock bolt\", object, params)"
        },
        {
          "paragraph": "Play a 3D sound file, attached to object"
        },
        {
          "paragraph": "In local scripts can be used only on self."
        }
      ]
    },
    {
      "header": "Parameters",
      "content": [
        {
          "paragraph": "#string fileName: \nPath to sound file in VFS"
        },
        {
          "code": "#string fileName"
        },
        {
          "paragraph": "#GameObjectobject: \nObject to which we attach the sound"
        },
        {
          "code": "#GameObjectobject"
        },
        {
          "paragraph": "#table options: \nAn optional table with additional optional arguments. Can contain:"
        },
        {
          "code": "#table options"
        },
        {
          "code": "timeOffset"
        },
        {
          "code": "volume"
        },
        {
          "code": "pitch"
        },
        {
          "code": "loop"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "local params = {\n   timeOffset=0.1\n   volume=0.3,\n   loop=false,\n   pitch=1.0\n};\ncore.sound.playSoundFile3d(\"Sound\\\\test.mp3\", object, params)"
        },
        {
          "code": "local params = {\n   timeOffset=0.1\n   volume=0.3,\n   loop=false,\n   pitch=1.0\n};\ncore.sound.playSoundFile3d(\"Sound\\\\test.mp3\", object, params)"
        },
        {
          "paragraph": "List of all#SoundRecords."
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "local sound = core.sound.records['Ashstorm']  -- get by id"
        },
        {
          "code": "local sound = core.sound.records['Ashstorm']  -- get by id"
        },
        {
          "code": "local sound = core.sound.records[1]  -- get by index"
        },
        {
          "code": "local sound = core.sound.records[1]  -- get by index"
        },
        {
          "code": "-- Print all sound files paths\nfor _, sound in pairs(core.sound.records) do\n    print(sound.fileName)\nend"
        },
        {
          "code": "-- Print all sound files paths\nfor _, sound in pairs(core.sound.records) do\n    print(sound.fileName)\nend"
        },
        {
          "paragraph": "Play an animated voiceover."
        },
        {
          "paragraph": "In local scripts can be used only on self."
        }
      ]
    },
    {
      "header": "Parameters",
      "content": [
        {
          "paragraph": "#string fileName: \nPath to sound file in VFS"
        },
        {
          "code": "#string fileName"
        },
        {
          "paragraph": "#GameObjectobject: \nObject on which we want to play an animated voiceover"
        },
        {
          "code": "#GameObjectobject"
        },
        {
          "paragraph": "#string text: \nSubtitle text (optional)"
        },
        {
          "code": "#string text"
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "-- play voiceover for object and print messagebox\ncore.sound.say(\"Sound\\\\Vo\\\\Misc\\\\voice.mp3\", object, \"Subtitle text\")"
        },
        {
          "code": "-- play voiceover for object and print messagebox\ncore.sound.say(\"Sound\\\\Vo\\\\Misc\\\\voice.mp3\", object, \"Subtitle text\")"
        },
        {
          "code": "-- play voiceover for object, without messagebox\ncore.sound.say(\"Sound\\\\Vo\\\\Misc\\\\voice.mp3\", object)"
        },
        {
          "code": "-- play voiceover for object, without messagebox\ncore.sound.say(\"Sound\\\\Vo\\\\Misc\\\\voice.mp3\", object)"
        },
        {
          "paragraph": "Stop an animated voiceover"
        },
        {
          "paragraph": "In local scripts can be used only on self."
        }
      ]
    },
    {
      "header": "Parameters",
      "content": [
        {
          "paragraph": "#string fileName: \nPath to sound file in VFS"
        },
        {
          "code": "#string fileName"
        },
        {
          "paragraph": "#GameObjectobject: \nObject on which we want to stop an animated voiceover"
        },
        {
          "code": "#GameObjectobject"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "core.sound.stopSay(object);"
        },
        {
          "code": "core.sound.stopSay(object);"
        },
        {
          "paragraph": "Stop a 3D sound, attached to object"
        },
        {
          "paragraph": "In local scripts can be used only on self."
        }
      ]
    },
    {
      "header": "Parameters",
      "content": [
        {
          "paragraph": "#string soundId: \nID of Sound record to stop"
        },
        {
          "code": "#string soundId"
        },
        {
          "paragraph": "#GameObjectobject: \nObject on which we want to stop sound"
        },
        {
          "code": "#GameObjectobject"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "core.sound.stopSound(\"shock bolt\", object);"
        },
        {
          "code": "core.sound.stopSound(\"shock bolt\", object);"
        },
        {
          "paragraph": "Stop a 3D sound file, attached to object"
        },
        {
          "paragraph": "In local scripts can be used only on self."
        }
      ]
    },
    {
      "header": "Parameters",
      "content": [
        {
          "paragraph": "#string fileName: \nPath to sound file in VFS"
        },
        {
          "code": "#string fileName"
        },
        {
          "paragraph": "#GameObjectobject: \nObject on which we want to stop sound"
        },
        {
          "code": "#GameObjectobject"
        }
      ]
    },
    {
      "header": "Usage:",
      "content": [
        {
          "code": "core.sound.stopSoundFile(\"Sound\\\\test.mp3\", object);"
        },
        {
          "code": "core.sound.stopSoundFile(\"Sound\\\\test.mp3\", object);"
        }
      ]
    },
    {
      "header": "TypeSoundRecord",
      "content": [
        {
          "code": "SoundRecord"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Normalized path to sound file in VFS"
        },
        {
          "paragraph": "Sound id"
        },
        {
          "paragraph": "Raw maximal range value, from 0 to 255"
        },
        {
          "paragraph": "Raw minimal range value, from 0 to 255"
        },
        {
          "paragraph": "Raw sound volume, from 0 to 255"
        }
      ]
    },
    {
      "header": "TypeSpell",
      "content": [
        {
          "code": "Spell"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "If set, the spell should ignore skill checks and always succeed."
        },
        {
          "paragraph": "If set, the casting cost should be computed based on the effect list rather than read from the cost field"
        },
        {
          "paragraph": "The effects (#MagicEffectWithParams) of the spell"
        },
        {
          "paragraph": "Spell id"
        },
        {
          "paragraph": "Spell name"
        },
        {
          "paragraph": "If set, the spell can be selected as a player's starting spell."
        },
        {
          "paragraph": "#SpellType"
        }
      ]
    },
    {
      "header": "TypeSpellRange",
      "content": [
        {
          "code": "SpellRange"
        },
        {
          "paragraph": "core.magic.RANGE"
        },
        {
          "code": "core.magic.RANGE"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Applied on self"
        },
        {
          "paragraph": "Ranged spell"
        },
        {
          "paragraph": "On touch"
        }
      ]
    },
    {
      "header": "TypeSpellType",
      "content": [
        {
          "code": "SpellType"
        },
        {
          "paragraph": "core.magic.SPELL_TYPE"
        },
        {
          "code": "core.magic.SPELL_TYPE"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "Innate ability, always in effect"
        },
        {
          "paragraph": "Blight disease"
        },
        {
          "paragraph": "Curse"
        },
        {
          "paragraph": "Common disease"
        },
        {
          "paragraph": "Power, can be used once a day"
        },
        {
          "paragraph": "Normal spell, must be cast and costs mana"
        }
      ]
    },
    {
      "header": "TypeSpells",
      "content": [
        {
          "code": "Spells"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "List of all#Spells."
        }
      ]
    },
    {
      "header": "Usages:",
      "content": [
        {
          "code": "local spell = core.magic.spells.records['thunder fist']  -- get by id"
        },
        {
          "code": "local spell = core.magic.spells.records['thunder fist']  -- get by id"
        },
        {
          "code": "local spell = core.magic.spells.records[1]  -- get by index"
        },
        {
          "code": "local spell = core.magic.spells.records[1]  -- get by index"
        },
        {
          "code": "-- Print all powers\nfor _, spell in pairs(core.magic.spells.records) do\n    if spell.types == core.magic.SPELL_TYPE.Power then\n        print(spell.name)\n    end\nend"
        },
        {
          "code": "-- Print all powers\nfor _, spell in pairs(core.magic.spells.records) do\n    if spell.types == core.magic.SPELL_TYPE.Power then\n        print(spell.name)\n    end\nend"
        }
      ]
    },
    {
      "header": "TypeStats",
      "content": [
        {
          "code": "Stats"
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "#Attributefunctions"
        },
        {
          "paragraph": "#Skillfunctions"
        }
      ]
    },
    {
      "header": "TypeTeleportOptions",
      "content": [
        {
          "code": "TeleportOptions"
        },
        {
          "paragraph": "Either table with options oropenmw.util#Vector3rotation."
        }
      ]
    },
    {
      "header": "Field(s)",
      "content": [
        {
          "paragraph": "If true, adjust destination position to the ground."
        },
        {
          "paragraph": "New rotation; if missing, then the current rotation is used."
        },
        {
          "paragraph": "\u00a9 Copyright 2024, OpenMW Team.Revision7d84b85d."
        },
        {
          "code": "7d84b85d"
        }
      ]
    }
  ]
}