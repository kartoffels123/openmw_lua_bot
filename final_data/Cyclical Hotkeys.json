{
  "folder_name": "Cyclical Hotkeys",
  "lua_files": {
    "Cyclical Hotkeys-54437-1-2-1-1716387624\\Cyclical hotkeys\\scripts\\cyclicalhotkeys\\player.lua": "local types = require('openmw.types')\nlocal core = require('openmw.core')\nlocal input = require('openmw.input')\nlocal self = require('openmw.self')\n\nlocal I = require('openmw.interfaces')\nlocal ui = require('openmw.ui')\n\n-- https://openmw.readthedocs.io/en/latest/reference/lua-scripting/overview.html#language-and-sandboxing\n\nlocal display = \"\"\n\nlocal Actor = types.Actor\nlocal pressed_hotkey = nil\nlocal pressed_cycle = nil\nlocal cycle_pos = 1\n\nlocal last_hotkey = nil\nlocal setMode = false\n\nlocal isLoading = false\n\nlocal function init_cycle()\n  cycle_contents = {}\n  for i = 1, 9 do\n    if cycle_contents[i] == nil then cycle_contents[i] = {} end\n  end\nend\n\ninit_cycle()\n\nlocal num_map = {}\nnum_map[\"1\"] = 1\nnum_map[\"2\"] = 2\nnum_map[\"3\"] = 3\nnum_map[\"4\"] = 4\nnum_map[\"5\"] = 5\nnum_map[\"6\"] = 6\nnum_map[\"7\"] = 7\nnum_map[\"8\"] = 8\nnum_map[\"9\"] = 9\n\nprint(\"OpenMW Cyclical hotkeys declarations complete\")\n\n-- Initiate setHotkeySpell function with mod key '\\' input\nlocal function setHotkeySpell(number)\n  local chosen_spell = Actor.getSelectedSpell(self)\n  if chosen_spell == nil then\n    ui.showMessage(\"Please choose a spell\")\n    return\n  -- else\n    -- display = chosen_spell.name .. \" Equipped\"\n    -- ui.showMessage(display)\n  end\n  if pressed_hotkey == nil then\n    pressed_hotkey = number\n    pressed_cycle = nil\n    ui.showMessage(\"Please choose a cycle number for hotkey\")\n    return\n  end\n  if pressed_cycle == nil then\n    pressed_cycle = number\n\n    cycle_contents[pressed_hotkey][pressed_cycle] = chosen_spell\n    -- print(cycle_contents)\n    display = chosen_spell.name .. \" assigned to \" .. pressed_hotkey .. \", \" .. pressed_cycle\n    ui.showMessage(display)\n\n    pressed_cycle = nil\n    pressed_hotkey = nil\n  end\nend\n\nlocal function setSpell(number)\n  local hotkey = number\n  if last_hotkey == nil or last_hotkey ~= hotkey then\n    cycle_pos = 1\n    last_hotkey = hotkey\n  else\n    if cycle_contents ~= nil and cycle_contents[hotkey] ~= nil and #(cycle_contents[hotkey]) >= (1+cycle_pos) then\n      cycle_pos = cycle_pos + 1\n    else\n      cycle_pos = 1\n    end\n  end\n  if cycle_contents~= nil and cycle_contents[hotkey] ~= nil and cycle_contents[hotkey][cycle_pos] ~= nil then\n    Actor.setSelectedSpell(self, cycle_contents[hotkey][cycle_pos])\n    Actor.setStance(self, Actor.STANCE.Spell)\n    local known_spells = types.Actor.spells(self)\n    -- print(type(cycle_contents[hotkey][cycle_pos]) .. \" is spell type\")\n  else\n    if cycle_contents[hotkey] == nil then\n      cycle_contents[hotkey] = {}\n    end\n    ui.showMessage(\"No spell equipped on cycle\")\n  end\n\nend\n\nlocal function onKeyRelease(key)\n\n  if key.symbol == '\\\\'\n  then\n    setMode = not setMode\n    pressed_cycle = nil\n    pressed_hotkey = nil\n    if setMode and not isLoading then\n      ui.showMessage(\"HOTKEY SETUP mode\")\n    elseif not setMode and not isLoading then\n      ui.showMessage(\"HOTKEY USE mode\")\n    else\n      ui.showMessage(\"Hotkeys initialising....\")\n    end\n  end\n  \n  if not isLoading and (key.code == input.KEY._1 or key.code == input.KEY._2 or key.code == input.KEY._3 or key.code == input.KEY._4 or key.code == input.KEY._5 or key.code == input.KEY._6 or key.code == input.KEY._7 or key.code == input.KEY._8 or key.code == input.KEY._9) then\n    local number = num_map[key.symbol]\n    if setMode then\n      setHotkeySpell(number)\n    else\n      setSpell(number)\n    end\n  end\nend\n\nlocal function onSave()\n  print(\"\\nSaving OpenMW hotkeys data..\")\n  local cycle_contents_id = {}\n  for i = 1, 9 do\n    cycle_contents_id[i] = {}\n    for j = 1, 9 do\n      if cycle_contents[i] ~= nil and cycle_contents[i][j] ~= nil then\n        cycle_contents_id[i][j] = cycle_contents[i][j].id\n      end\n    end\n  end\n  return {\n      version = 1,\n      last_hotkey = last_hotkey,\n      cycle_contents_id = cycle_contents_id,\n  }\nend\n\nlocal function onLoad(data)\n  isLoading = true\n  print(\"\\nOpenMw Cyclical Hotkeys Loading starts\")\n  if data then\n    last_hotkey = data.last_hotkey\n    local cycle_contents_id = data.cycle_contents_id\n    local records = core.magic.spells.records\n    local known_spells = types.Actor.spells(self)\n    local shift = 0\n    if cycle_contents == nil\n    then\n      init_cycle()\n    end\n    -- Load Spell Data\n    for i = 1, 9 do\n      shift = 0\n      if cycle_contents_id[i] ~= nil then\n        for j = 1, 9-shift do\n          if cycle_contents_id[i][j] ~= nil then\n            cycle_contents[i][j-shift] = records[cycle_contents_id[i][j]]\n            if known_spells[cycle_contents[i][j].id] == nil\n            then\n              print(\"\\nRemoving Unknown Spell \" .. cycle_contents[i][j].name)\n              shift = shift + 1\n            end\n          end\n        end\n        if #cycle_contents[i] == 1 and shift == 1 then\n          cycle_contents[i] = {}\n        end\n      end\n    end\n  end\n  print(\"\\nOpenMW Cyclical Hotkeys Loading done\")\n  isLoading = false\nend\n\nreturn {\n  engineHandlers = {\n      onSave = onSave,\n      onLoad = onLoad,\n      onKeyRelease = onKeyRelease\n  }\n}\n\n\n\n-- Actor.setSelectedSpell(actor, spell)\n-- will set the spells by responding to hotkeys\n-- n\n\n--Actor.setStance(actor, stance)\n-- set spell stance in case actor uses hotkey to switch to spells\n\n--Actor.spells(actor)\n-- returns all given spells of a actor which may be 'nil'\n\n\n-- functions :\n-- A mechanism to bake hotkey assignments into save (onSave + Lua Tables)\n-- Load the above ( onLoad )\n-- \n\n-- Flow:\n-- (Load) Retrieve hotkey assignments if any\n-- hotkey 1- has 9 or dynamic sized map and the same for all 9 hotkeys \n-- -> 81 min hotkeys using cyclical selection and fsm\n-- detect onKeyPress for chosen hotkeys and mod menu\n-- display on top left what spell is registered\n-- Skip UI if needed and use console print for confirmation displays \n\n-- FSM:\n-- mod key -> \\\n-- Press \\ then hotkey number then 1-9 overwrite cycle"
  }
}