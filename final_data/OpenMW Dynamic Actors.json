{
  "folder_name": "OpenMW Dynamic Actors",
  "lua_files": {
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\blocklist.lua": "local blocklist = {\n\n\t-- if you have npc id names to block, add them to the list below. Lowercase letters only.\n\t-- any npc id that starts with the string will be blocked\n\n\t\t\"aakarrv_poshlatrader1\",\n\t\t\"aakarrv_poshlatrader2\",\n\t\t\"aakarrv_poshlaguest2\",\n\t\t\"aakarrv_poshlaguest1\",\n\t\t\"aakarrv_poshlaguest4\",\n\t\t\"aakarrv_poshlaguest5\",\n\n}\n\n\nlocal allow = {\n\n\t-- these id names will always be allowed, and will override the blocklist. Lowercase letters only.\n\t-- any npc id that starts with the string will be allowed\n\n\t\t\"am_camonna\",\n\t\t\"am_cleaner\",\n\n}\n\n\n\t-- do not modify entries below this line\n\n\nlocal niflist = {\n\n\t[\"am_alchemist.nif\"] = {\"idle9\", \"idle\"},\n\t[\"am_beggar.nif\"] = {\"idle2\", \"idle3\", \"idle4\", \"idle\"},\n\t[\"am_dreamera.nif\"] = {\"idle2\", \"idle\"},\n\t[\"am_dreamerb.nif\"] = {\"idle6\", \"idle\"},\n\t[\"am_drummer03.nif\"] = {\"idle2\", \"idle\"},\n\t[\"am_eater.nif\"] = {\"idle2\"},\n\t[\"am_fishman.nif\"] = {\"idle2\", \"idle3\", \"idle\"},\n\t[\"am_luteplaying.nif\"] = {\"idle2\", \"idle\"},\n\t[\"am_reader1.nif\"] = {\"idle\", \"idle2\", \"idle3\"},\n\t[\"am_reader2.nif\"] = {\"idle2\", \"idle3\", \"idle4\"},\n\t[\"am_sitting.nif\"] = {\"idle2\", \"idle3\", \"idle4\"},\n\t[\"am_smith.nif\"] = {\"idle\", \"idle2\", \"idle3\"},\n\t[\"am_writer02.nif\"] = {\"idle2\", \"idle3\", \"idle4\"},\n\n\t[\"am_sitbar.nif\"] = {\"idle8\", \"idle9\"},\n\t[\"bandit.nif\"] = {\"idle8\"},\n\t[\"farmer.nif\"] = {\"idle8\"},\n\t[\"farmer2.nif\"] = {\"idle8\", \"idle9\"},\n\t[\"miner.nif\"] = {\"idle8\", \"idle9\"},\n\t[\"miner2.nif\"] = { \"all\" },\n\t[\"prayerdf.nif\"] = {\"idle8\", \"idle9\"},\n\t[\"prayerdm.nif\"] = {\"idle8\", \"idle9\"},\n\t[\"slavesitting.nif\"] = {\"idle9\"},\n\n\t[\"va_sitting.nif\"] = { \"idle2\", \"idle3\", \"idle4\", \"idle5\", \"idle6\", \"idle7\", \"idle8\", \"idle9\" },\n\t[\"va_sittingdunmertest.nif\"] = { \"idle2\" },\n\n\t[\"anim_drunk0x2.nif\"] = { \"idle9\" },\n\t[\"anim_girlsitdrinktea.nif\"] = { \"idle9\" },\n\t[\"anim_sitpleading.nif\"] = { \"idle9\" },\n\t[\"anim_sitthreatening.nif\"] = { \"idle9\" },\n\n\n}\n\n\nlocal config = {\n\n\n--\t{ id = \"am_alch\", idle = 1 },\n\t{ id = \"am_camonna\", idle = 3 },\n\t{ id = \"am_cleaner\", idle = 1 },\n--\t{ id = \"am_smith\", turn = false, reset = true, idle = 1 },\n\n}\n\nreturn { block=blocklist, allow = allow, byAnim = niflist, config=config }\n\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\global.lua": "local world = require(\"openmw.world\")\nlocal core = require(\"openmw.core\")\nlocal vfs = require('openmw.vfs')\nlocal async = require('openmw.async')\nlocal types = require(\"openmw.types\")\nlocal I = require(\"openmw.interfaces\")\nlocal ai = require(\"openmw.interfaces\").AI\nlocal storage = require(\"openmw.storage\")\nlocal time = require(\"openmw_aux.time\")\nlocal animation = require(\"openmw.animation\")\n\n\nI.Settings.registerGroup({\n   key = \"Settings_dynamicactors\",\n   page = \"dynamicactors\",\n   l10n = \"DynamicActors\",\n   name = \"settings_modCategory2_name\",\n   permanentStorage = true,\n   settings = {\n      {\n         key = \"npcidles\",\n         default = true,\n         renderer = \"checkbox\",\n         name = \"settings_modCategory2_setting1_name\",\n      },\n      {key = \"autoturn\",\n\tdefault = true,\n\trenderer = \"checkbox\",\n\tname = \"settings_modCategory2_setting2_name\",\n\tdescription = \"settings_modCategory2_setting2_desc\",\n      },\n      {key = \"unpause_dialog\",\n\tdefault = true,\n\trenderer = \"checkbox\",\n\tname = \"settings_modCategory2_setting3_name\",\n\tdescription = \"settings_modCategory2_setting3_desc\",\n      },\n      {\n         key = \"debuglog\",\n         default = false,\n         renderer = \"checkbox\",\n         name = \"settings_modCategory2_setting4_name\",\n      },\n   },\n})\n\nlocal settings = storage.globalSection(\"Settings_dynamicactors\")\nlocal actor = nil\nlocal player = nil\nlocal openDialog = false\nlocal activateTarget = nil\nlocal npcList = require(\"scripts.DynamicActors.blocklist\")\nlocal actorsincell = { }\nlocal logging = false\n\n\nlocal function updateSettings()\n\tlocal d = not settings:get(\"unpause_dialog\")\n\tI.Settings.updateRendererArgument(\"Settings_dynamicactors\", \"npcidles\", {disabled = d})\n\tI.Settings.updateRendererArgument(\"Settings_dynamicactors\", \"autoturn\", {disabled = d})\n\tlogging = settings:get(\"debuglog\")\nend\n\nupdateSettings()\nsettings:subscribe(async:callback(updateSettings))\n\n\nlocal function debugger(npc)\n\tif not npc:hasScript(\"scripts/DynamicActors/npcDialog.lua\") then print(\"script gone\") end\nend\n\nlocal function resetActors(data)\n\tlocal npc, pos, reset = nil, nil, nil\n\tfor _,v in pairs(actorsincell) do\n\t\tnpc, cell, pos, reset = v.actor, v.cell, v.pos, v.reset\n\t\tif npc.position ~= pos and (pos - npc.position):length() < 100 and npc.cell == cell and reset then\n\t\t\tif logging then print(npc, (pos - npc.position):length(), \"reset to\", pos) end\n\t\t\tnpc:teleport(npc.cell, pos)\n\t\tend\n\tend\n\tactorsincell = { }\nend\n\nlocal function actorMonitor(data)\n\tif not I.LuaHelper then return end\n\tlocal actor = data.actor\n\tif actor.id == nil then return end\n\tlocal id, pos, reset = actor.id, actor.position, data.reset\n\tif actorsincell[id] then\n\t\tif logging then print(\"Updating\", id, reset) end\n\t\tif actorsincell[id].reset then\n\t\t\tif not reset and logging then print(\"Cancel reset\", actor) end\n\t\t\tactorsincell[id].reset = reset\n\t\tend\n\telse\n\t\tif logging then print(\"Track new npc\", actor, pos, reset) end\n\t\tactorsincell[id] = { actor=actor, cell=actor.cell, pos=pos, reset=reset }\n\tend\nend\n\nlocal function onDialogClosed(data)\n\tif actor == nil then return end\n\tactor:sendEvent(\"closeNPCdiag\")\n\topenDialog = false\nend\n\n\nI.Activation.addHandlerForType(types.NPC, function(o, actor)\n\tif actor.type == types.Player then activateTarget = actor end\nend)\n\n\nlocal function onDialogOpened(data)\n--\tfor k, v in pairs(world.getPausedTags()) do print(k, v) end\n\tlocal o = data.arg\n\tif not activateTarget and o.type == types.NPC then\n\t\tif types.NPC.record(o).class == \"guard\" then\n\t\t\tif world.getPausedTags()[\"ui\"] == nil then world.pause(\"ui\") end\n\t\t\tif logging and player then player:sendEvent(\"dynUiMessage\", \"msg_pause\") end\n\t\t\treturn\n\t\tend\n\tend\n\tactivateTarget = nil\n\tif world.getPausedTags()[\"ui\"] ~= nil and settings:get(\"unpause_dialog\") then world.unpause(\"ui\") end\n\tif not settings:get(\"unpause_dialog\") or not data.near then return end\n\tif openDialog and actor ~= data.arg then onDialogClosed(data) end\n\tactor, player = data.arg, data.player\n\tlocal block = false\n\n\tlocal file = \"\"\n\tif actor.type == types.NPC then\n\t\tfile = types.NPC.record(actor).model or \"\"\n\tend\n\tlocal i, j = string.find(file, \"\\\\[^\\\\]*$\")\n\tif i then file = string.sub(file, i+1, j) end\n\tlocal groups = npcList.byAnim[file:lower()]\n\tif groups then\n\t\tfor _, v in ipairs(groups) do \n\t\t\tif v == \"all\" or animation.isPlaying(actor, v) then\n\t\t\t\tif logging then print(file, v) end\n\t\t\t\tblock = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tif not block then\n\t\tfor _, v in pairs(npcList.block) do\n\t\t\tif string.find(actor.recordId:lower(), \"^\"..v) ~= nil then\n\t\t\t\tblock = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tif block then\n\t\tfor _, v in pairs(npcList.allow) do\n\t\t\tif string.find(actor.recordId:lower(), \"^\"..v) ~= nil then\n\t\t\t\tblock = false\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\tif block then return end\n\tlocal auto, idle, reset = settings:get(\"autoturn\"), 0, false\n\tif settings:get(\"npcidles\") then idle = 5 end\n\tfor _, v in pairs(npcList.config) do\n\t\tif string.find(actor.recordId:lower(), \"^\"..v.id) ~= nil then\n\t\t\tif v.turn == false then auto = false end\n\t\t\tif v.idle and idle > 0 then idle = v.idle end\n\t\t\tif v.reset == true then reset = true end\n\t\tend\n\tend\n\tlocal plugin = nil\n\tif vfs.fileExists(\"scripts/DynamicActors/dialogPlugins/\"..actor.recordId..\".lua\") then\n\t\tplugin = \"scripts.DynamicActors.dialogPlugins.\" .. actor.recordId\n\t\tif logging then print(\"Plugin found\", plugin) end\n\tend\n\tactor:addScript(\"scripts/DynamicActors/npcDialog.lua\")\n\tactor:sendEvent(\"initNPCdiag\", { data.player, auto, reset, idle, logging, plugin })\n\topenDialog = true\nend\n\ntime.runRepeatedly(function()\n\tif not openDialog then return end\n\tactor:sendEvent(\"shiftPose\")\n\tasync:newUnsavableSimulationTimer(6, function()\n\t\tif openDialog then actor:sendEvent(\"shiftPose\", \"playBase\") end\n\tend)\nend, 35 * time.second)\n\nreturn {\n  eventHandlers = {\n\t\tdynDialogOpened = onDialogOpened,\n\t\tdynDialogClosed = onDialogClosed,\n\t\tonCellChangeOlh = resetActors,\n\t\tdynRemoveScript = function(data)\n\tprint(data.object, \"removing\", data.script)\n\tdata.object:removeScript(data.script)\n\tend,\n\t\tdynDialogChange = function()\n\tif openDialog and world.getPausedTags()[\"ui\"] ~= nil and settings:get(\"unpause_dialog\") then\n\t\tworld.unpause(\"ui\")\n\tend\n\tend,\n\t\tdynForcePause = function()\n\tif world.getPausedTags()[\"ui\"] == nil and openDialog then\n\t\tworld.pause(\"ui\")\n\t\tif logging and player then player:sendEvent(\"dynUiMessage\", \"msg_pause\") end\n\tend\n\tend,\n\t\tdynTogglePause = function()\n\tfor k,v in pairs(world.getPausedTags()) do print(k,v) end\n\tif world.getPausedTags()[\"ui\"] == nil and openDialog then\n\t\tprint(\"pause\")\n\t\tworld.pause(\"ui\")\n\telseif openDialog then\n\t\tprint(\"unpause\")\n\t\tworld.unpause(\"ui\")\n\tend\n\tend,\n\t\tactorMonitor = actorMonitor\n  },\n}\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\menu.lua": "local ui = require('openmw.ui')\nlocal input = require(\"openmw.input\")\nlocal async = require('openmw.async')\nlocal I = require(\"openmw.interfaces\")\n\n\nI.Settings.registerRenderer(\"inputKeyBox\", function(v, set)\n\tlocal name = \"none\"\n\tif v then name = input.getKeyName(v) end\n\treturn { template = I.MWUI.templates.box, content = ui.content {\n\t\t{ template = I.MWUI.templates.padding, content = ui.content {\n\t\t\t{ template = I.MWUI.templates.textEditLine,\n\t\t\t\tprops = { text = name, },\n\t\t\t\tevents = {\n\t\t\t\t\tkeyPress = async:callback(function(e)\n\t\t\t\t\t\tif e.code == input.KEY.Escape then return end\n\t\t\t\t\t\tset(e.code)\n\t\t\t\t\tend),\n\t\t\t\t\t},\n\t\t\t},\n\t\t}, },\n\t}, }\nend)\n\n\nreturn\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\npcDialog.lua": "local core = require(\"openmw.core\")\nlocal animation = require(\"openmw.animation\")\nlocal self = require(\"openmw.self\")\nlocal util = require(\"openmw.util\")\nlocal types = require(\"openmw.types\")\nlocal ai = require(\"openmw.interfaces\").AI\nlocal I = require(\"openmw.interfaces\")\n\nlocal filters = {}\n\nfilters.baseIdle = {\n\t{ \"isMale\", false, \"handhippose\", {loops=100, priority=1, blendMask=11, speed=0.5}, 1 },\n\t{ \"isMale\", true, \"readypose\", {loops=4, priority=1, blendMask=3}, 1 },\n\t\t}\n\nfilters.greeting = {\n\t{ \"class\", \"^guard\", \"armsatback\", {loops=3, priority=2, blendMask=12}, 2 },\n\t{ \"class\", \"^ordinator\", \"armsatback\", {loops=3, priority=2, blendMask=12}, 2 },\n\t{ \"isMale\", true, \"armsfolded\", {loops=3, priority=2, blendMask=12}, 1 },\n\t\t}\n\nfilters.poseShifts = {\n\t\t{ {\n\t{ \"armsakimbo\", {loops=5, priority=2, blendMask=12} },\n\t{ \"idle2\", {priority=3, speed=2} },\n\t\t},\n\t\t{\n\t{ \"armsfolded\", {loops=4, priority=2, blendMask=12} },\n\t{ \"idle8\", {priority=3, speed=2} },\n\t\t} },\n\n\t\t{ {\n\t{ \"armsatback\", {loops=5, priority=2, blendMask=12} },\n\t{ \"idle2\", {priority=3, speed=2} },\n\t\t},\n\t\t{\n\t{ \"armsatback\", {loops=3, priority=2, blendMask=12} },\n\t{ \"idle8\", {priority=3, speed=2} },\n\t\t} }\n\t}\n\nlocal beastBlendMasks = {\n\t[\"handhippose\"] = 0, [\"armsfolded\"] = 12, [\"armsakimbo\"] = 12,\n\t[\"armsatback\"] = 12, [\"armssunshield\"] = 12, [\"readypose\"] = 12\n\t}\n\nlocal poseShiftType = 0\nlocal poseTable, infoList\nlocal plugin = {}\nlocal anim = {name=nil, opt={}}\nlocal var = {}\nlocal dialogTarget = nil\nlocal turningEnabled, resetPosRot = false, false\nlocal turningToTarget = false\nlocal logging = false\nlocal isBeast = false\nlocal isGuard = false\nif self.type == types.NPC then\n\tisBeast = types.NPC.races.record(types.NPC.record(self).race).isBeast == true\n\tisGuard = types.NPC.record(self).class == \"guard\"\nend\nlocal voice = {isPlay=false, noanim=true}\nif animation.hasGroup(self, \"idlespeak\") then voice.noanim = false end\n\n\nlocal function playHandler(g, o)\n\tif isBeast then\n\t\tlocal v = beastBlendMasks[g]\n\t\tif v then\n\t\t\tif not o.blendMask then o.blendMask = 12 end\n\t\t\to.blendMask = util.bitAnd(v, o.blendMask)\n--\t\t\tprint(g, v, o.blendMask)\n\t\tend\n\tend\n\tif o.blendMask == 0 then return end\n\tanimation.playBlended(self, g, o)\nend\n\nlocal function shiftPose(e)\n\tif voice.isPlay or poseShiftType == 0 then return end\n\tif e == \"playBase\" then\n\t\tif anim.name and anim.opt.loops > 50 then playHandler(anim.name, anim.opt) end\n\t\treturn\n\tend\n\tif anim.name then animation.cancel(self, anim.name) end\n\tlocal rand = poseTable[math.random(#poseTable)]\n\tlocal name, options = table.unpack(rand[1])\n\tplayHandler(name, options)\n\tname, options = table.unpack(rand[2])\n\tplayHandler(name, options)\nend\n\nlocal function checkFilters(t)\n\tfor i=1, #t do\n\t\tlocal k, v, shift, name, options = table.unpack(t[i])\n\t\tlocal m = false\n\t\tlocal eval = types.NPC.record(self)[k]\n\t\tif type(v) == \"string\" then\n\t\t\tif string.find(eval:lower(), v) then m = true end\n\t\telseif eval == v then\n\t\t\tm = true\n\t\tend\n\t\tif m then return shift, name, options end\n\tend\nend\n\nlocal function forcePause()\n\tlocal aipack, force = ai.getActivePackage(), false\n\tif aipack == nil then return false end\n--\tif isGuard and aipack.type == \"Unknown\" and aipack.target == nil then force=true end\n\tif aipack.type == \"Combat\" or aipack.type == \"Pursue\" then force = true end\n\tif force then core.sendGlobalEvent(\"dynForcePause\") end\n\treturn force\nend\n\nlocal function initNPCdiag(data)\n\tif forcePause() or not animation.hasAnimation(self) then return end\n\tlocal idleSet, path = 5, nil\n\tdialogTarget, turningEnabled, resetPosRot, idleSet, logging, path = table.unpack(data)\n\tvar = {npc=self, player=dialogTarget, lookAt=dialogTarget}\n\tif not idleSet or idleSet == 0 then return end\n\tlocal static = true\n\tlocal aipack = ai.getActivePackage()\n\tif aipack ~= nil then\n\t\tif logging then print(self, aipack.destPosition, aipack.target, aipack.type) end\n\t\tif aipack.destPosition ~= util.vector3(0,0,0) then static = false end\n\telse print(\"No AI package\")\n\tend\n\tcore.sendGlobalEvent(\"actorMonitor\", { actor=self, reset=static })\n\tlocal bipedal = self.type == types.NPC or self.type == types.Creature.TYPE.Humanoid\n\tif not bipedal then return end\n\n\tif path then\n\t\tplugin = require(path)\n\t\tinfoList = plugin.infoList\n\t\tif plugin.getVariableStore then plugin.getVariableStore(var) end\n\tend\n\tlocal name, options, shift\n\n\tif plugin.baseIdle then\n\t\tname, options, shift = table.unpack(plugin.baseIdle)\n\tend\n\tif not name then\n\t\tname, options, shift = checkFilters(filters.baseIdle)\n\tend\n\tif name then\n\t\tposeShiftType = shift or 1\n\t\tif not isBeast then\n\t\t\tanim.name, anim.opt = name, options\n\t\t\tplayHandler(name, options)\n\t\tend\n\tend\n\n\tname = nil\n\tif plugin.greeting then\n\t\tname, options, shift = table.unpack(plugin.greeting)\n\tend\n\tif not name then\n\t\tname, options, shift = checkFilters(filters.greeting)\n\tend\n\tif name then\n\t\tposeShiftType = shift or 1\n\t\tplayHandler(name, options)\n\tend\n\tif idleSet < 3 then poseShiftType = 0 end\n\tif poseShiftType > 0 then poseTable = filters.poseShifts[poseShiftType] end\n\nend\n\nlocal function closeNPCdiag()\n\tif animation.hasAnimation(self) then\n\t\tif anim.name then animation.cancel(self, anim.name) end\n\t\tif voice.isPlay then animation.cancel(self, \"idlespeak\") end\n\tend\n\tcore.sendGlobalEvent(\"dynRemoveScript\", { object = self, script = \"scripts/DynamicActors/npcDialog.lua\" })\n\tif plugin.closeDialog then plugin.closeDialog(dialogTarget) end\n\tdialogTarget = nil\n\tposeShiftType = 0\nend\n\nlocal bodyParts = { legs=1, chest=2, leftarm=4, rightarm=8, arms=12, armschest=14, legschest=3 }\n\nlocal function getBodyPart(mask)\n\tif type(mask) ~= \"string\" then return 15 end\n\tlocal m = bodyParts[mask:lower()] or 15\n\treturn m\nend\n\nlocal function onInfoGetText(e)\n\tif plugin.onInfoGetText then plugin.onInfoGetText(e) end\n\tif not infoList then return end\n\tlocal playlist = infoList[e.info.id]\n\tif not playlist then return end\n\tlocal play, name, o\n\tlocal mask = playlist.bodypart\n\tif type(playlist.func) == \"function\" then\n\t\tplay, name, o = playlist.func()\n\t\tif play == false then return end\n\tend\n\tif not name then name = playlist.name end\n\tif type(name) ~= \"string\" then return end\n\tname = name:lower()\n\tif not o then o = playlist.options end\n\to = o or {}\n\tif not o.blendMask then o.blendMask = getBodyPart(mask) end\n\tif not o.priority then o.priority = 4 end\n\tif logging then print(\"Play plugin anim\", name, mask) end\n\tplayHandler(name, o)\nend\n\n\nlocal function onUpdate(dt)\n\tif (not dialogTarget) or forcePause() then return end\n    if turningEnabled then\n        self.controls.movement = 0\n        self.controls.sideMovement = 0\n        local deltaPos = dialogTarget.position - self.position\n        local destVec = util.vector2(deltaPos.x, deltaPos.y):rotate(self.rotation:getYaw())\n        local deltaYaw = math.atan2(destVec.x, destVec.y)\n        if math.abs(deltaYaw) < math.rad(10) then\n            turningToTarget = false\n        elseif math.abs(deltaYaw) > math.rad(30) then\n            turningToTarget = true\n        end\n        if turningToTarget then\n            self.controls.yawChange = util.clamp(deltaYaw, -dt * 2.5, dt * 2.5)\n        else\n            self.controls.yawChange = 0\n        end\n    end\n\tif plugin.onUpdate then plugin.onUpdate(dt) end\n\tif isBeast or poseShiftType == 0 or voice.noanim then return end\n\tif voice.isPlay and not core.sound.isSayActive(self) then\n--\t\tanimation.cancel(self, \"idlespeak\")\n\t\tanimation.setLoopingEnabled(self, \"idlespeak\", false)\n\t\tif anim.name then playHandler(anim.name, anim.opt) end\n\t\tvoice.isPlay = false\n\telseif not voice.isPlay and core.sound.isSayActive(self) then\n\t\tif anim.name then animation.cancel(self, anim.name) end\n\t\tanimation.playBlended(self, \"idlespeak\", {loops=20, priority=1, speed=1.5})\n\t\tvoice.isPlay = true\n\tend\nend\n\n\nreturn {\n\teventHandlers = {\n\tinitNPCdiag = initNPCdiag,\n\tcloseNPCdiag = closeNPCdiag,\n\tshiftPose = shiftPose,\n\tdynInfoEvent = onInfoGetText\n\t},\n    engineHandlers = { onUpdate = onUpdate },\n}\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\player.lua": "local animation = require(\"openmw.animation\")\nlocal self = require(\"openmw.self\")\nlocal types = require(\"openmw.types\")\nlocal time = require(\"openmw_aux.time\")\nlocal input = require(\"openmw.input\")\nlocal async = require(\"openmw.async\")\nlocal core = require(\"openmw.core\")\nlocal util = require(\"openmw.util\")\nlocal camera = require(\"openmw.camera\")\nlocal ui = require(\"openmw.ui\")\nlocal I = require(\"openmw.interfaces\")\nlocal storage = require(\"openmw.storage\")\nlocal l10n = core.l10n(\"DynamicActors\")\n\nlocal Actor, ST, MD = types.Actor, types.Actor.STANCE, camera.MODE\nlocal ctrls, stance = self.controls, types.Actor.getStance(self)\n\n\nI.Settings.registerPage {\n   key = \"dynamicactors\",\n   l10n = \"DynamicActors\",\n   name = \"settings_modName\",\n   description = \"settings_modDesc\",\n}\n\nI.Settings.registerGroup({\n   key = \"Settings_dynactors_player\",\n   page = \"dynamicactors\",\n   l10n = \"DynamicActors\",\n   name = \"settings_modCategory1_name\",\n   permanentStorage = true,\n   settings = {\n\t{key = \"dialog_disableHud\",\n\tdefault = true,\n\trenderer = \"checkbox\",\n\tname = \"settings_modCategory1_setting11_name\",\n\t},\n\t{key = \"dialog_1stperson\",\n\tdefault = false,\n\trenderer = \"checkbox\",\n\tname = \"settings_modCategory1_setting01_name\",\n\t},\n\t{key = \"dialog_1st_zoom\",\n\tdefault = false,\n\trenderer = \"checkbox\",\n\tname = \"settings_modCategory1_setting02_name\",\n\t},\n\t{key = \"dialog_1st_zoomdist\",\n\tdefault = 70,\n\trenderer = \"number\",\n\tname = \"settings_modCategory1_setting03_name\",\n\targument = { min = 40, max = 300 },\n\t},\n\t{key = \"dialog_1st_zoom_speed\",\n\tdefault = 50,\n\trenderer = \"number\",\n\tname = \"settings_modCategory1_setting04_name\",\n\targument = { min = 10, max = 200 },\n\t},\n\t{key = \"dialog_1st_zoom_offset\",\n\tdefault = 0,\n\trenderer = \"number\",\n\tname = \"settings_modCategory1_setting05_name\",\n\targument = { min = -90, max = 90 },\n\t},\n\t{key = \"actionHotkey\",\n\tdefault = input.KEY.P,\n\trenderer = \"inputKeyBox\",\n\tname = \"settings_modCategory1_setting06_name\",\n\tdescription = \"settings_modCategory1_setting06_desc\",\n\t},\n        {key = \"baseIdleAnim_main\",\n\tname = \"settings_modCategory1_setting07_name\",\n\tdescription = \"settings_modCategory1_setting07_desc\",\n\tdefault = \"Ready Pose\",\n\trenderer = \"select\",\n\targument = {\n\t\tdisabled = false,\n\t\tl10n = \"LocalizationContext\", \n\t\titems = { \"None\", \"Ready Pose\", \"Hand on Hip contrapose\", \"Idle2\" },\n\t\t},\n\t},\n        {key = \"baseIdleAnim_upper\",\n\tname = \"settings_modCategory1_setting08_name\",\n\tdescription = \"settings_modCategory1_setting08_desc\",\n\tdefault = \"Arms Folded\",\n\trenderer = \"select\",\n\targument = {\n\t\tdisabled = false,\n\t\tl10n = \"LocalizationContext\", \n\t\titems = { \"None\", \"Arms Folded\", \"Arms Back Clasp\", \"Ready Pose\" },\n\t\t},\n\t},\n\t{key = \"rndIdleAnim\",\n\tdefault = true,\n\trenderer = \"checkbox\",\n\tname = \"settings_modCategory1_setting09_name\",\n\t},\n\t{key = \"autoHelm\",\n\tdefault = true,\n\trenderer = \"checkbox\",\n\tname = \"settings_modCategory1_setting10_name\",\n\t},\n   },\n})\n\nlocal settingsplayer = storage.playerSection(\"Settings_dynactors_player\")\nlocal settings = storage.globalSection(\"Settings_dynamicactors\")\n\nlocal dialogModes = {\n\tBarter = true,\n\tCompanion = true,\n\tDialogue = true,\n\tEnchanting = true,\n\tMerchantRepair = true,\n\tTravel = true,\n\tTraining = true,\n\tSpellBuying = true,\n\tSpellCreation = true,\n\tPersuasion = true,\n}\n\nlocal moved, idlenum, counter = true, 0, 0\nlocal headslot = nil\nlocal openDialog = false\nlocal animPlaying = false\n\nlocal anims = {}\n\nanims.items = { \"None\", \"Hand on Hip contrapose\", \"Ready Pose\", \"Idle2\", \"Arms Folded\",\n\t\"Arms Back Clasp\" }\nanims.settings = {}\nfor i=1, #anims.items do anims.settings[anims.items[i]] = i end\n\nanims.idle = {\n\tbase = { {id=\"none\", speed=1},\n\t\t{id=\"handhippose\", speed=0.5},\n\t\t{id=\"readypose\", speed=1},\n\t\t{id=\"idle2\", speed=0.5},\n\t\t{id=\"armsfolded\", speed=0.5},\n\t\t{id=\"armsatback\", speed=0.5},\n\t},\n\trnd = {\n{ {id=\"armsakimbo\", opt={loops=2, speed=1}}, {id=\"idle4\", opt={speed=2}} },\n{ {id=\"armsfolded\", opt={loops=2, speed=1}}, {id=\"idle8\", opt={loops=1, speed=2}} }\n\t\t}\n\t}\n\nanims.combo = { [\"armsFoldPose\"] = { \"handhippose\", {mask=3}, \"armsfolded\", {mask=14, spd=1} },\n\t[\"armsStrPose\"] = { \"handhippose\", {mask=3} },\n\t[\"armsOneBackPose\"] = { \"handhippose\", {mask=3}, \"armsatback\", {mask=8, spd=1} },\n\t[\"armsBackClaspPose\"] = { \"handhippose\", {mask=3}, \"armsatback\", {mask=12, spd=1} }\n\t}\n\nanims.clear = { \"handhippose\", \"readypose\", \"idle2\", \"armsfolded\", \"armsfolded\", \"armsakimbo\", \"armsatback\" }\n\nanims.fixed = require(\"scripts.DynamicActors.playlist\")\n\n\nlocal heights = {\n\n\tbyAnim = {\n\n\t[\"am_beggar.nif\"] = { 35, keys={\"idle2\", \"idle3\", \"idle4\", \"idle\"} },\n\t[\"am_dreamera.nif\"] = { 45, keys={\"idle2\", \"idle\"} },\n\t[\"am_dreamerb.nif\"] = { 45, keys={\"idle6\", \"idle\"} },\n\t[\"am_drummer03.nif\"] = { 45, keys={\"idle2\", \"idle\"} },\n\t[\"am_eater.nif\"] = { 45, keys={\"idle2\"} },\n\t[\"am_fishman.nif\"] = { 45, keys={\"idle2\", \"idle3\", \"idle\"} },\n\t[\"am_luteplaying.nif\"] = { 45, keys={\"idle2\", \"idle\"} },\n\t[\"am_reader2.nif\"] = { 45, keys={\"idle2\", \"idle3\", \"idle4\"} },\n\t[\"am_sitting.nif\"] = { 45, keys={\"idle2\", \"idle3\", \"idle4\"} },\n\t[\"am_writer02.nif\"] = { 45, keys={\"idle2\", \"idle3\", \"idle4\"} },\n\n\t[\"am_sitbar.nif\"] = { 45, keys={\"idle8\", \"idle9\"} },\n\t[\"bandit.nif\"] = { 45, keys={\"idle8\"} },\n\t[\"farmer.nif\"] = { 45, keys={\"idle8\"} },\n\t[\"farmer2.nif\"] = {45, keys={\"idle9\"} },\n\t[\"prayerdf.nif\"] = {45, keys={\"idle9\"} },\n\t[\"prayerdm.nif\"] = {45, keys={\"idle9\"} },\n\t[\"slavesitting.nif\"] = { 35, keys={\"idle9\"} },\n\n\t[\"va_sitting.nif\"] = { 45, keys={\"idle2\", \"idle3\", \"idle4\", \"idle5\", \"idle6\", \"idle7\", \"idle8\", \"idle9\"} },\n\t[\"va_sittingdunmertest.nif\"] = { 45, keys={\"idle2\"} },\n\n\t[\"anim_sitpleading.nif\"] = { 45, keys={\"idle9\"} },\n\t[\"anim_sitthreatening.nif\"] = { 45, keys={\"idle9\"} },\n\n--\t[\"meshes\\\\luce\\\\am\\\\am_luteplaying.nif\"] = { }\n\n\t\t},\n\n\tbyModel = { {id=\"guar.nif\", height=120, scale=0.3}, {id=\"^guar_\", height=120, scale=0.3} }\n\n\t}\n\nlocal npcSettings = require(\"scripts.DynamicActors.playerCam\")\nlocal actionKey = nil\nlocal currentanim = 1\nlocal varFixed = {save=1, choose=false, count=0}\n-- local savedanim = 1\nlocal dialogTarget = nil\n-- local turningToTarget = false\nlocal dialogCam = {controls=false, block=false, instant=false, auto1st=false,\n\theight=100, interval=2, counter=0, adjust=true, pos=nil}\nlocal offset3rd = camera.getFocalPreferredOffset()\nlocal zoom1st = {enabled=false, dist=70, speed=1, offset=0, force=false, level=0, vector=nil}\nlocal camsave = {mode=camera.getMode(), offset=nil, offset1st=nil, offset3rd=offset3rd, extrayaw=0}\nlocal logging = false\n\n\nlocal function updateSettingsPlayer()\n\tdialogCam.auto1st = settingsplayer:get(\"dialog_1stperson\")\n\tzoom1st.enabled = settingsplayer:get(\"dialog_1st_zoom\")\n\tI.Settings.updateRendererArgument(\"Settings_dynactors_player\", \"dialog_1st_zoomdist\", {disabled = not zoom1st.enabled})\n\tzoom1st.dist = settingsplayer:get(\"dialog_1st_zoomdist\")\n\tactionKey = settingsplayer:get(\"actionHotkey\")\nend\n\nlocal function updateSettings()\n\tfor m in pairs(dialogModes) do\n\t\tI.UI.setPauseOnMode(m, not settings:get(\"unpause_dialog\"))\n\tend\n\tI.UI.setPauseOnMode(\"Dialogue\", true)\n\tlogging = settings:get(\"debuglog\")\nend\n\nupdateSettings()\nupdateSettingsPlayer()\nsettings:subscribe(async:callback(updateSettings))\nsettingsplayer:subscribe(async:callback(updateSettingsPlayer))\n\n\nlocal function animHandler(a, g, o)\n\tlocal combo = anims.combo[g]\n\tlocal play = true\n\tif g == \"none\" then return true end\n\tif a == \"isplay\" and not combo then\n\t\treturn animation.isPlaying(self, g)\n\tend\n\tif not combo then\n\t\tif a == \"play\" then animation.playBlended(self, g, o)\n\t\telse animation.cancel(self, g) end\n\t\treturn\n\tend\n\tif a == \"isplay\" then\n\t\tif g == \"armsFoldPose\" and not animation.isPlaying(self, \"armsfolded\") then play = false end\n\t\tif ( g == \"armsBackClaspPose\" or g == \"armsOneBackPose\" )\n\t\t\tand not animation.isPlaying(self, \"armsatback\") then play = false end\n\t\tif not animation.isPlaying(self, combo[1]) then play = false end\n\t\treturn play\n\tend\n\tif a == \"cancel\" then\n\t\tanimation.cancel(self, \"armsfolded\")\n\t\tanimation.cancel(self, \"armsatback\")\n\t\tanimation.cancel(self, combo[1])\n\t\treturn\n\tend\n\tlocal options = {}\n\tfor k, v in pairs(o) do options[k] = v end\n\tif o.speed == nil then o.speed = 1 end\n\tif g == \"armsFoldPose\" then\n--\t\to.speed = o.speed * 0.5\n\t\to.blendMask = 12\n\telseif g == \"armsBackClaspPose\" then\n--\t\to.speed = o.speed * 0.25\n\t\to.blendMask = 12\n\telseif g == \"armsOneBackPose\" then\n--\t\to.speed = o.speed * 0.25\n\t\to.blendMask = 8\n\tend\n\toptions.blendMask = combo[2].mask or options.blendMask\n\to.priority = o.priority + 1\n\tanimation.playBlended(self, combo[1], options)\n\tif g == \"armsFoldPose\" then animation.playBlended(self, \"armsfolded\", o) end\n\tif g == \"armsBackClaspPose\" or g == \"armsOneBackPose\" then animation.playBlended(self, \"armsatback\", o) end\nend\n\nlocal function getActorHeight(o)\n\tif o.type == types.NPC or o.type == types.Player then\n\t\tlocal gender = \"female\"\n\t\tlocal npc = types.NPC.record(o)\n\t\tif npc.isMale then gender = \"male\" end\n\t\treturn types.NPC.races.record(npc.race).height[gender] * o.scale * 128\n\telse\n--\t\treturn (o:getBoundingBox().halfSize.z) * o.scale\n\t\treturn 128 * o.scale\n\tend\nend\n\nlocal function onDialogOpened(data)\n\tcamsave.offset1st = camera.getFirstPersonOffset()\n\tcamsave.dist3rd = camera.getThirdPersonDistance()\n\tcamsave.hud = I.UI.isHudVisible()\n\tzoom1st.level, zoom1st.scale, zoom1st.force = 0, 1, false\n\tzoom1st.speed = settingsplayer:get(\"dialog_1st_zoom_speed\") / 100\n\tzoom1st.offset = math.rad(settingsplayer:get(\"dialog_1st_zoom_offset\"))\n\tcamsave.yaw, camsave.pitch, camsave.extrayaw = camera.getYaw(), camera.getPitch(), camera.getExtraYaw()\n\tlocal npc = data.arg\n\topenDialog, dialogTarget, dialogCam.block = true, npc, true\n\tif not data.near then return end\n\tif (npc.position - self.position):length() > 2000 then return end\n\tdialogCam.interval, dialogCam.counter, dialogCam.adjust = 2, 0, true\n\tdialogCam.pos = npc.position\n\tdialogCam.height = getActorHeight(npc) * 0.85\n\tlocal file = \"\"\n--\tif npc.type == types.NPC then\n\t\tfile = npc.type.record(npc).model or \"\"\n--\tend\n\tlocal i, j = string.find(file, \"\\\\[^\\\\]*$\")\n\tif i then\n\t\tfile = string.sub(file, i+1, j)\n\tend\n\tfile = file:lower()\n\tlocal height = heights.byAnim[file]\n\tif height and height.keys then\n\t\tfor _, v in ipairs(height.keys) do \n\t\t\tif animation.isPlaying(npc, v) then\n\t\t\t\tdialogCam.height = height[1]\n\t\t\t\tif logging then print(file, v) end\n\t\t\tend\n\t\tend\n\telseif height then\n\t\tdialogCam.height = height[1] or dialogCam.height\n\tend\n\tif types.Creature.objectIsInstance(npc) then\n\t\tfor _, v in ipairs(heights.byModel) do\n\t\t\tif file:find(v.id) then\n\t\t\t\tprint(v.id, v.height, v.scale)\n\t\t\t\tdialogCam.height = v.height\n\t\t\t\tif v.scale then zoom1st.scale = v.scale end\n\t\t\tend\n\t\tend\n\tend\n\tfor _, v in ipairs(npcSettings) do\n\t\tif string.find(npc.recordId, \"^\"..v.id) ~= nil then\n\t\t\tdialogCam.height = v.height\n\t\t\tif v.camAdjust ~= nil then dialogCam.adjust = v.camAdjust end\n\t\t\tif v.scale then zoom1st.scale = v.scale end\n\t\t\tbreak\n\t\tend\n\tend\n\tdialogCam.controls, dialogCam.block, dialogCam.instant = false, false, false\n\tif settingsplayer:get(\"dialog_disableHud\") and I.UI.isHudVisible() then I.UI.setHudVisibility(false) end\n\tif not animPlaying then\n\t\tcamsave.mode, camsave.offset3rd = camera.getMode(), camera.getFocalPreferredOffset()\n\t\tif dialogCam.auto1st and settings:get(\"unpause_dialog\") then\n\t\t\tif camera.getMode() ~= MD.FirstPerson then\n\t\t\t\tcamera.setMode(MD.FirstPerson)\n\t\t\t\tdialogCam.instant = true\n\t\t\tend\n\t\tend\n\tend\nend\n\nlocal function onDialogClosed(data)\n\topenDialog, dialogTarget  = false, nil\n\tif camsave.hud ~= I.UI.isHudVisible() then I.UI.setHudVisibility(camsave.hud) end\n\tif zoom1st.force then camera.setFirstPersonOffset(camsave.offset1st) end\n\tif camera.getMode() == MD.FirstPerson and zoom1st.offset ~= 0 then\n\t\tcamera.setExtraYaw(camsave.extrayaw)\n\tend\n\tzoom1st.level, zoom1st.force = 0, false\n\tif not animPlaying then\n\t\tcamera.setFocalPreferredOffset(camsave.offset3rd)\n\t\tif camera.getMode() ~= camsave.mode then\n\t-- directly switching 1stPerson-->Preview using setMode will glitch\n\t\t\tif camsave.mode == MD.Preview then camsave.mode = MD.ThirdPerson\n\t\t\telseif camsave.mode == MD.ThirdPerson and camera.getMode() == MD.Preview then\n\t\t\t\tcamera.setPreferredThirdPersonDistance(camsave.dist3rd)\n\t\t\t\tcamera.setYaw(camsave.yaw)\n\t\t\t\tcamera.setPitch(camsave.pitch)\n\t\t\t\tcamera.instantTransition()\n\t\t\tend\n\t\t\tcamera.setMode(camsave.mode)\n\t\tend\n\tend\nend\n\nlocal function cancelAnim()\n\tanimHandler(\"cancel\", anims.fixed[currentanim].id)\n\tcamera.setFocalPreferredOffset(camsave.offset3rd)\n\tif camsave.mode == MD.FirstPerson then\n\t\tasync:newUnsavableSimulationTimer(0.1, function() camera.setMode(MD.FirstPerson) end)\n\telse\n\t\tcamera.setMode(camsave.mode)\n\tend\n\tI.Controls.overrideMovementControls(false)\n\tanimPlaying = false\n\tidlenum = 0\n\tui.showMessage(l10n(\"msg_moveon\"))\nend\n\n\ntime.runRepeatedly(function()\n\tif openDialog then\n\t\tdialogCam.counter = dialogCam.counter + 2\n\t\tif dialogCam.counter >= dialogCam.interval then\n\t\t\tif dialogCam.adjust then dialogCam.pos = dialogTarget.position end\n\t\t\tdialogCam.counter = 0\n\t\tend\n\tend\n\tif animPlaying and not animHandler(\"isplay\", anims.fixed[currentanim].id) then cancelAnim() end\n\tif moved then moved = false return end\n\tif camera.getMode() == MD.FirstPerson or Actor.activeEffects(self):getEffect(\"levitate\").magnitude > 0\n\t\tor Actor.isSwimming(self) then counter = 0 return end\n\tif animPlaying then counter = 0 return end\n\tif idlenum == 0 then\n\t\tidlenum = 1\n\t\tcounter = 26\n\tend\n\tcounter = counter + 2\n\tlocal legs = anims.idle.base[anims.settings[settingsplayer:get(\"baseIdleAnim_main\")]]\n\tlocal top = anims.idle.base[anims.settings[settingsplayer:get(\"baseIdleAnim_upper\")]]\n\tif counter == 6 and top.id ~= legs.id and animHandler(\"isplay\", top.id) then\n\t\tanimHandler(\"cancel\", top.id)\n\tend\n\tif counter < 32 then\n\t\tif counter >5 and counter < 28 then\n\t\t\tif not animHandler(\"isplay\", legs.id) then\n\t\t\t\tanimHandler(\"play\", legs.id, {loops=50, priority=1, speed=legs.speed})\n\t\t\tend\n\t\t\tif not animHandler(\"isplay\", top.id) and top.id ~= legs.id then\n\t\t\t\tanimHandler(\"play\", top.id, {loops=50, priority=2, blendMask=(top.mask or 12), speed=top.speed})\n\t\t\tend\n\t\tend\n\t\treturn\n\tend\n\tcounter = 0\n\tif not settingsplayer:get(\"rndIdleAnim\") then return end\n\tfor i=1, #anims.clear do animation.cancel(self, anims.clear[i]) end\n\tlocal rnd = anims.idle.rnd[math.random(2)]\n\tfor i=1, idlenum do\n\t\tlocal a, options = rnd[i].id, {}\n\t\tfor k, v in pairs(rnd[i].opt) do options[k] = v end\n\t\toptions.priority = i + 2\n\t\tanimation.playBlended(self, a, options)\n\tend\n\tif idlenum == 1 then idlenum = 2 end\nend, 2 * time.second)\n\n\nlocal function playFixed()\n\tui.showMessage(l10n(\"msg_moveoff\"))\n\tanimPlaying = true\n\tfor _, v in ipairs(anims.clear) do animation.cancel(self, v) end\n\tlocal offset = anims.fixed[currentanim].offset\n\tlocal speed = anims.fixed[currentanim].speed or 1\n\tif offset then\n\t\toffset3rd = util.vector2(camsave.offset3rd.x, offset)\n\t\tcamera.setFocalPreferredOffset(offset3rd)\n\telse offset3rd = camsave.offset3rd end\n\tlocal options = {loops=200, priority=5, speed=speed}\n\tif anims.fixed[currentanim].force then options.forceLoop = true end\n\tanimHandler(\"play\", anims.fixed[currentanim].id, options)\nend\n\nlocal function onKeyPress(key)\n\tif (key.code ~= actionKey) then return end\n\tif core.isWorldPaused() or moved then return end\n\tif openDialog then\n\t\tif camera.getMode() == MD.ThirdPerson then camera.setMode(MD.Preview) end\n\t\tif camera.getMode() == MD.Preview then\n\t\t\tdialogCam.controls = not dialogCam.controls\n\t\t\tif dialogCam.controls then ui.showMessage(l10n(\"msg_ctrlon\"))\n\t\t\telse ui.showMessage(l10n(\"msg_ctrloff\")) end\n\t\tend\n\t\treturn\n\tend\n\tif animPlaying then cancelAnim() return end\n\tif Actor.activeEffects(self):getEffect(\"levitate\").magnitude > 0\n\t\tor Actor.isSwimming(self) then return end\n\tif Actor.getStance(self) ~= ST.Nothing then return end\n\tcamsave.mode, camsave.offset3rd = camera.getMode(), camera.getFocalPreferredOffset()\n\tI.Controls.overrideMovementControls(true)\n\tcurrentanim, varFixed.choose = varFixed.save, false\n\tfor _, v in ipairs(anims.clear) do animation.cancel(self, v) end\n\tlocal offset = anims.fixed[currentanim].offset\n\tlocal speed = anims.fixed[currentanim].speed or 1\n\tif anims.fixed[currentanim].turn then\n\t\tasync:newUnsavableSimulationTimer(0.2, function() core.sendGlobalEvent(\"objTurn\", {object=self, angle=180}) end)\n\tend\n\tcamera.setMode(MD.Preview)\n\tasync:newUnsavableSimulationTimer(0.5, function() playFixed() end)\nend\n\ninput.registerTriggerHandler(\"Jump\", async:callback(function()\n\tif openDialog or not animPlaying then return end\n\tvarFixed.choose = not varFixed.choose\n\tif varFixed.choose then ui.showMessage(l10n(\"msg_selecton\"))\n\telse ui.showMessage(l10n(\"msg_selectoff\")) end\nend))\n\nlocal function processControls(dt)\n\tlocal yaw, pitch, dist, proc = camera.getYaw(), camera.getPitch(), camera.getThirdPersonDistance(), false\n\tlocal movex, movey = input.getMouseMoveX(), input.getMouseMoveY()\n\tlocal zoom = input.getNumberActionValue(\"Zoom3rdPerson\")\n\tcamera.showCrosshair(true)\n\tif openDialog then\n\t\tif movex ~= 0 or movey ~= 0 then\n\t\t\tproc = true\n\t\t\tyaw = yaw + 0.5 * movex * dt\n\t\t\tpitch = pitch + 0.5 * movey * dt\n\t\tend\n\t\tif zoom ~= 0 then\n\t\t\tproc = true\n\t\t\tdist = dist - zoom\n\t\tend\n\tend\n\tmovex = input.getRangeActionValue(\"MoveForward\") - input.getRangeActionValue(\"MoveBackward\")\n\tmovey = input.getRangeActionValue(\"MoveRight\") - input.getRangeActionValue(\"MoveLeft\")\n\tif varFixed.choose then varFixed.count = varFixed.count - dt end\n\tif varFixed.choose and movey ~= 0 and varFixed.count < 1 then\n\t\tvarFixed.count = 1.25\n\t\tvarFixed.save = varFixed.save + movey\n\t\tif varFixed.save > #anims.fixed then varFixed.save = 1 end\n\t\tif varFixed.save < 1 then varFixed.save = #anims.fixed end\n\t\tui.showMessage(anims.fixed[varFixed.save].name..\" (\"..anims.fixed[varFixed.save].id..\")\")\n\tend\n\tif (movex ~= 0 or movey ~= 0) and not varFixed.choose then\n\t\tproc = true\n\t\toffset3rd = util.vector2(offset3rd.x + 100*movey*dt, offset3rd.y + 100*movex*dt)\n\tend\n\tif not proc then return end\n\tcamera.setFocalPreferredOffset(offset3rd)\n\tcamera.setPreferredThirdPersonDistance(dist)\n\tcamera.instantTransition()\n\tcamera.setYaw(yaw)\n\tcamera.setPitch(pitch)\nend\n\nlocal function autoCam(dt)\n\t-- Force-set 1st person zoom every frame, to counter camera.lua resetting it\n\tlocal bezier\n\tif zoom1st.force then\n\t\tbezier = 1 - (zoom1st.level - 1) ^ 6\n\t\tcamera.setFirstPersonOffset(util.vector3(0, zoom1st.vector.x, zoom1st.vector.y) * bezier)\n\tend\n\tif zoom1st.offset ~= 0 then camera.setExtraYaw(zoom1st.offset) end\n\tctrls.movement = 0\n        ctrls.sideMovement = 0\n\tlocal turningToTarget = false\n\n        local deltaPos = dialogCam.pos - self.position\n        local destVec = util.vector2(deltaPos.x, deltaPos.y):rotate(camera.getYaw())\n        local deltaYaw = math.atan2(destVec.x, destVec.y)\n        if math.abs(deltaYaw) > math.rad(10) then\n            turningToTarget = true\n        end\n\tbezier = (8 * math.abs(deltaYaw) / math.pi) ^ 2\n--\tlocal v = dt * 3.5 * util.clamp(bezier, math.rad(5), 1)\n\tlocal v = dt * 3.5 * bezier\n\tif dialogCam.instant then v = 3.5 end\n        if math.abs(deltaYaw) > math.rad(2) then\n            ctrls.yawChange = util.clamp(deltaYaw, -v, v)\n        end\n\n\tlocal headPos = self.position + util.vector3(0, 0, getActorHeight(self) * 0.974)\n\tdeltaPos = (dialogCam.pos + util.vector3(0, 0, dialogCam.height)) - headPos\n\tlocal lengthXY = util.vector2(deltaPos.x, deltaPos.y):length()\n\tlocal deltaPitch = - math.atan2(deltaPos.z, lengthXY) - self.rotation:getPitch()\n--\tlocal deltaPitch = - math.asin( deltaPos.z / deltaPos:length() ) - self.rotation:getPitch()\n        if math.abs(deltaPitch) > math.rad(10) then\n            turningToTarget = true\n        end\n\tbezier = (8 * math.abs(deltaPitch) / math.pi) ^ 2\n\tif dialogCam.instant then dialogCam.instant = false else v = dt * 3.5 * bezier end\n        if math.abs(deltaPitch) > math.rad(2) then\n            ctrls.pitchChange = util.clamp(deltaPitch, -v, v)\n        end\n\tif turningToTarget or (not zoom1st.enabled) then return end\n\n\tlocal distance = deltaPos:length() * zoom1st.scale\n\tdestVec = util.vector2(lengthXY, deltaPos.z) * util.clamp((distance - zoom1st.dist), -5, 2000) / distance\n\tif not zoom1st.force then\n\t\tzoom1st.force = true\n\t\tzoom1st.vector = destVec\n\tend\n\tif (destVec - zoom1st.vector):length() > 5 then zoom1st.vector = destVec end\n\tif zoom1st.level == 1 then return end\n\tif zoom1st.level < 1 then zoom1st.level = zoom1st.level + (dt * zoom1st.speed) end\t\n\tif zoom1st.level > 1 then zoom1st.level = 1 end\nend\n\nlocal function procStanceChange()\n\tif not settingsplayer:get(\"autoHelm\") then return end\n\tlocal equip, h = Actor.getEquipment(self), Actor.EQUIPMENT_SLOT.Helmet\n\tif Actor.getStance(self) == ST.Nothing then\n\t\t\theadslot = equip[h]\n\t\t\tequip[h] = nil\n\telseif equip[h] == nil and headslot then\n\t\tequip[h] = headslot\n\tend\n\tActor.setEquipment(self, equip)\n\tstance = Actor.getStance(self)\nend\n\nlocal function processCamera(dt)\n\tif core.isWorldPaused() then return end\n\tif animPlaying and not openDialog then processControls(dt) end\n\tif dialogCam.block or not openDialog then return end\n\tif camera.getMode() == MD.FirstPerson then autoCam(dt) end\n\tif camera.getMode() == MD.Preview and dialogCam.controls then processControls(dt) end\nend\n\nlocal function onUpdate(dt)\n\tif stance ~= Actor.getStance(self) then procStanceChange() end\n\tif openDialog or animPlaying then processCamera(dt) end\n\tif moved then moved = false return end\n\tif ctrls.movement ~= 0 or ctrls.sideMovement ~= 0 then moved=true end\n\tif ctrls.yawChange ~= 0 and animPlaying then moved=true end\n\tif ctrls.jump or ctrls.sneak then moved=true end\n\tif Actor.getStance(self) ~= ST.Nothing then moved=true end\n\tif not moved then return end\n\tif idlenum > 0 then\n\t\tfor _, v in ipairs(anims.clear) do animation.cancel(self, v) end\n\t\tidlenum = 0\n\tend\n\tif animPlaying then cancelAnim() end\nend\n\n\nlocal dialogUiModes = {\n\t[\"Alchemy\"] = true,\n\t[\"Barter\"] = true,\n\t[\"Container\"] = true,\n\t[\"Enchanting\"] = true,\n\t[\"MerchantRepair\"] = true,\n\t[\"Recharge\"] = true,\n\t[\"Repair\"] = true,\n\t[\"SpellBuying\"] = true,\n\t[\"SpellCreation\"] = true\n}\n\nlocal function UiModeChanged(data)\n\tlocal near = false\n\tif dialogModes[data.newMode] and not dialogModes[data.oldMode] and data.arg and dialogTarget ~= data.arg then\n\t\tif self.cell == data.arg.cell then near = true else near = false end\n\t\tdata[\"near\"], data[\"player\"] = near, self\n\t\tcore.sendGlobalEvent(\"dynDialogOpened\", data)\n\t\tonDialogOpened(data)\n\telseif dialogModes[data.newMode] and dialogTarget then\n\t\tcore.sendGlobalEvent(\"dynDialogChange\", data)\n\telseif data.newMode == nil and dialogTarget then\n\t\tcore.sendGlobalEvent(\"dynDialogClosed\", data)\n\t\tonDialogClosed(data)\n\tend\n\tif openDialog and dialogUiModes[data.newMode] then\n\t\tif not I.UI.isHudVisible() then I.UI.setHudVisibility(true) end\n\telseif openDialog and settingsplayer:get(\"dialog_disableHud\") and I.UI.isHudVisible() then\n\t\tif data.newMode then I.UI.setHudVisibility(false) end\n\tend\nend\n\n\nreturn {\n\tengineHandlers = { onUpdate = onUpdate, onKeyPress = onKeyPress },\n\teventHandlers = {\n\tUiModeChanged = UiModeChanged,\n\tdynUiMessage = function(e) ui.showMessage(l10n(e)) end,\n\ttes3InfoGetText = function(e) dialogTarget:sendEvent(\"dynInfoEvent\", e) end\n\t},\n}\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\playerCam.lua": "\n\nlocal dialogCam = {\n\n\t-- all ID names must be in lowercase letters\n\t-- any npc ID that starts with the string, will have the zoom camera height set to the number\n\n\t{ id = \"scamp\", height = 74 },\n\t{ id = \"mudcrab\", height = 45 },\n\t{ id = \"rat_\", height = 45 },\n\t{ id = \"vivec\", height = 109, camAdjust = false },\n\t{ id = \"almalexia\", height = 120 },\n\t{ id = \"dagoth_ur\", height = 135, scale = 0.7, camAdjust = false },\n\n\t{ id = \"aakarrv_poshlatrader1\", height = 45 },\n\t{ id = \"aakarrv_poshlatrader2\", height = 45 },\n\t{ id = \"aakarrv_poshlaguest2\", height = 45 },\n\t{ id = \"aakarrv_poshlaguest1\", height = 45 },\n\t{ id = \"aakarrv_poshlaguest4\", height = 45 },\n\t{ id = \"aakarrv_poshlaguest5\", height = 45 },\n\n}\n\nreturn dialogCam\n\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\playlist.lua": "\nlocal M = {\n\t{name=\"Arms Folded contrapose\", id=\"armsFoldPose\", speed = 0.5},\n\t{name=\"Arms Back Clasp contrapose\", id=\"armsBackClaspPose\", speed = 0.5},\n\t{name=\"Arms Straight contrapose\", id=\"armsStrPose\", speed = 0.5},\n\t{name=\"Hand on Hip contrapose\", id=\"handhippose\", speed = 0.5},\n\t{name=\"Hands on Hips Idle\", id=\"armsakimbo\"},\n\t{name=\"Searching Horizon Idle\", id=\"armssunshield\"},\n\t{name=\"Arms Folded Idle\", id=\"armsfolded\"},\n\t{name=\"GV Wall Lean 180\", id=\"gvwalllean180\", offset = -20},\n\t{name=\"GV Squat down\", id=\"gvsquat\", offset = -70},\n\t{name=\"VA Sitting Chair 180\", id=\"vasitting6\", offset = -70},\n\t{name=\"VA Sitting Floor\", id=\"vasittingfloor\", offset = -70, speed = 0.5},\n\t{name=\"VA Sitting cross legged\", id=\"vasitting4\", offset = -70, speed = 0.5},\n\t{name=\"VA Sitting hugging knees\", id=\"vasitting5\", offset = -70, speed = 0.5},\n\t{name=\"VA Praying on knees\", id=\"vasitting2\", offset = -70, speed = 0.5},\n--\t{name=\"AM Sitting 2\", id=\"amsitting2\", turn = true, offset = -70, speed = 0.5},\n\t{name=\"VA Lying on side\", id=\"vasitting7\", offset = -90, speed = 0.5},\n\t{name=\"VA Sleeping on side\", id=\"vasitting8\", offset = -90},\n\t{name=\"VA Lying on back\", id=\"vasitting9\", offset = -90},\n\t{name=\"Twerk\", id=\"twerk\"},\n\t{name=\"RX Chair Sit Casual pose\", id=\"rxsitcasual\", offset = -70},\n\t{name=\"RX Chair Sit Upright pose\", id=\"rxsitupright\", offset = -70},\n}\n\n\nreturn M\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\dialogPlugins\\barenziah.lua": "\n\nlocal M = { infoList = {} }\nlocal info = M.infoList\n\n\ninfo[\"517669172142116495\"] = { name=\"idle8\", bodypart = \"rightarm\" }\n\n\nreturn M\n\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\dialogPlugins\\example.lua": "\n\nlocal M = { infoList = {} }\nlocal info = M.infoList\n\n-- DO NOT CHANGE ANYTHING ABOVE THIS LINE\n\n\n-- Enter in a list below: the dialogue info ID and the name of the animation to play\n-- An example line showing the format to use is provided\n\n\ninfo[\"695915437478015666\"] = { name=\"idlehh\" }\n\n-- When dialogue info ID \"695915437478015666\" is triggered, play the animation group \"idlehh\"\n-- This will play the animation for the hand-to-hand combat pose\n\n\n-- DO NOT CHANGE ANYTHING BELOW THIS LINE\n\nreturn M\n\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\dialogPlugins\\guard_helseth.lua": "\n\nlocal M = { infoList = {} }\nlocal info = M.infoList\n\n\ninfo[\"3213261952386929538\"] = { name=\"idlehh\", bodypart=\"rightarm\" }\ninfo[\"14764289002944928090\"] = { name=\"armsakimbo\", bodypart=\"arms\" }\n\n\nreturn M\n\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\dialogPlugins\\guard_helseth_attack.lua": "\n\nlocal M = { infoList = {} }\nlocal info = M.infoList\n\n\ninfo[\"3213261952386929538\"] = { name=\"idlehh\", bodypart=\"rightarm\" }\ninfo[\"14764289002944928090\"] = { name=\"armsakimbo\", bodypart=\"arms\" }\n\n\nreturn M\n\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\dialogPlugins\\imperial guard captain.lua": "\n\nlocal M = { infoList = {} }\nlocal info = M.infoList\n\n\ninfo[\"695915437478015666\"] = { name=\"armsakimbo\", bodypart = \"arms\" }\n\n\nreturn M\n\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\dialogPlugins\\imperial guard.lua": "\n\nlocal M = { infoList = {} }\nlocal info = M.infoList\n\n\ninfo[\"695915437478015666\"] = { name=\"armsakimbo\", bodypart = \"arms\" }\n\n\nreturn M\n\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\dialogPlugins\\ordinator_high fane.lua": "\n\nlocal M = { infoList = {} }\nlocal info = M.infoList\n\n\ninfo[\"364228736133837001\"] = { name=\"idlehh\", bodypart=\"rightarm\" }\ninfo[\"701796872534519468\"] = { name=\"idlehh\", bodypart=\"rightarm\" }\n\n\nreturn M\n\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\dialogPlugins\\ordinator_mh_stationary.lua": "\n\nlocal M = { infoList = {} }\nlocal info = M.infoList\n\n\ninfo[\"14764289002944928090\"] = { name=\"armsakimbo\", bodypart=\"arms\" }\n\n\nreturn M\n\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\dialogPlugins\\ordinator_mournhold.lua": "\n\nlocal M = { infoList = {} }\nlocal info = M.infoList\n\n\ninfo[\"14764289002944928090\"] = { name=\"armsakimbo\", bodypart=\"arms\" }\n\n\nreturn M\n\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\DynamicActors\\dialogPlugins\\tienius delitian.lua": "\n\nlocal M = { infoList = {} }\nlocal info = M.infoList\n\n\ninfo[\"478513606304304056\"] = { name=\"idle8\", bodypart=\"legschest\" }\ninfo[\"234816037106222636\"] = { name=\"idle8\", bodypart=\"rightarm\" }\n\n\nreturn M\n\n",
    "OpenMW Dynamic Actors-54782-1-1a-1725575241\\scripts\\uimodes\\npc.lua": "\nreturn\n"
  }
}